
obj/net/ns:     file format elf32-i386


Disassembly of section .text:

00800020 <_start>:
// starts us running when we are initially loaded into a new environment.
.text
.globl _start
_start:
	// See if we were started with arguments on the stack
	cmpl $USTACKTOP, %esp
  800020:	81 fc 00 e0 bf ee    	cmp    $0xeebfe000,%esp
	jne args_exist
  800026:	75 04                	jne    80002c <args_exist>

	// If not, push dummy argc/argv arguments.
	// This happens when we are loaded by the kernel,
	// because the kernel does not know about passing arguments.
	pushl $0
  800028:	6a 00                	push   $0x0
	pushl $0
  80002a:	6a 00                	push   $0x0

0080002c <args_exist>:

args_exist:
	call libmain
  80002c:	e8 f8 ef 00 00       	call   80f029 <libmain>
1:	jmp 1b
  800031:	eb fe                	jmp    800031 <args_exist+0x5>
  800033:	66 90                	xchg   %ax,%ax
  800035:	66 90                	xchg   %ax,%ax
  800037:	66 90                	xchg   %ax,%ax
  800039:	66 90                	xchg   %ax,%ax
  80003b:	66 90                	xchg   %ax,%ax
  80003d:	66 90                	xchg   %ax,%ax
  80003f:	90                   	nop

00800040 <tcpip_init_done>:
		panic("cannot create timer thread: %s", e2s(r));
}

static void
tcpip_init_done(void *arg)
{
  800040:	55                   	push   %ebp
  800041:	89 e5                	mov    %esp,%ebp
  800043:	83 ec 18             	sub    $0x18,%esp
  800046:	8b 45 08             	mov    0x8(%ebp),%eax
	uint32_t *done = arg;
	*done = 1;
  800049:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	thread_wakeup(done);
  80004f:	89 04 24             	mov    %eax,(%esp)
  800052:	e8 38 ae 00 00       	call   80ae8f <thread_wakeup>
}
  800057:	c9                   	leave  
  800058:	c3                   	ret    

00800059 <start_timer>:
	}
}

static void
start_timer(struct timer_thread *t, void (*func)(void), const char *name, int msec)
{
  800059:	55                   	push   %ebp
  80005a:	89 e5                	mov    %esp,%ebp
  80005c:	53                   	push   %ebx
  80005d:	83 ec 14             	sub    $0x14,%esp
	t->msec = msec;
  800060:	8b 5d 08             	mov    0x8(%ebp),%ebx
  800063:	89 18                	mov    %ebx,(%eax)
	t->func = func;
  800065:	89 50 04             	mov    %edx,0x4(%eax)
	t->name = name;
  800068:	89 48 08             	mov    %ecx,0x8(%eax)
	int r = thread_create(0, name, &net_timer, (uint32_t)t);
  80006b:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80006f:	c7 44 24 08 b9 00 80 	movl   $0x8000b9,0x8(%esp)
  800076:	00 
  800077:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80007b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  800082:	e8 76 ae 00 00       	call   80aefd <thread_create>
	if (r < 0)
  800087:	85 c0                	test   %eax,%eax
  800089:	79 28                	jns    8000b3 <start_timer+0x5a>
		panic("cannot create timer thread: %s", e2s(r));
  80008b:	89 04 24             	mov    %eax,(%esp)
  80008e:	e8 cd b1 00 00       	call   80b260 <e2s>
  800093:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800097:	c7 44 24 08 e0 1d 81 	movl   $0x811de0,0x8(%esp)
  80009e:	00 
  80009f:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
  8000a6:	00 
  8000a7:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  8000ae:	e8 db ef 00 00       	call   80f08e <_panic>
}
  8000b3:	83 c4 14             	add    $0x14,%esp
  8000b6:	5b                   	pop    %ebx
  8000b7:	5d                   	pop    %ebp
  8000b8:	c3                   	ret    

008000b9 <net_timer>:
	netif_set_up(nif);
}

static void __attribute__((noreturn))
net_timer(uint32_t arg)
{
  8000b9:	55                   	push   %ebp
  8000ba:	89 e5                	mov    %esp,%ebp
  8000bc:	56                   	push   %esi
  8000bd:	53                   	push   %ebx
  8000be:	83 ec 10             	sub    $0x10,%esp
	struct timer_thread *t = (struct timer_thread *) arg;
  8000c1:	8b 5d 08             	mov    0x8(%ebp),%ebx

	for (;;) {
		uint32_t cur = sys_time_msec();
  8000c4:	e8 72 fd 00 00       	call   80fe3b <sys_time_msec>
  8000c9:	89 c6                	mov    %eax,%esi

		lwip_core_lock();
  8000cb:	e8 77 ad 00 00       	call   80ae47 <lwip_core_lock>
		t->func();
  8000d0:	ff 53 04             	call   *0x4(%ebx)
		lwip_core_unlock();
  8000d3:	e8 74 ad 00 00       	call   80ae4c <lwip_core_unlock>

		thread_wait(0, 0, cur + t->msec);
  8000d8:	03 33                	add    (%ebx),%esi
  8000da:	89 74 24 08          	mov    %esi,0x8(%esp)
  8000de:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8000e5:	00 
  8000e6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8000ed:	e8 d7 af 00 00       	call   80b0c9 <thread_wait>
  8000f2:	eb d0                	jmp    8000c4 <net_timer+0xb>

008000f4 <serve_thread>:
	uint32_t whom;
	union Nsipc *req;
};

static void
serve_thread(uint32_t a) {
  8000f4:	55                   	push   %ebp
  8000f5:	89 e5                	mov    %esp,%ebp
  8000f7:	57                   	push   %edi
  8000f8:	56                   	push   %esi
  8000f9:	53                   	push   %ebx
  8000fa:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
  800100:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct st_args *args = (struct st_args *)a;
	union Nsipc *req = args->req;
  800103:	8b 73 08             	mov    0x8(%ebx),%esi
	int r;

	switch (args->reqno) {
  800106:	83 3b 0a             	cmpl   $0xa,(%ebx)
  800109:	0f 87 3a 01 00 00    	ja     800249 <serve_thread+0x155>
  80010f:	8b 03                	mov    (%ebx),%eax
  800111:	ff 24 85 c0 1f 81 00 	jmp    *0x811fc0(,%eax,4)
	case NSREQ_ACCEPT:
	{
		struct Nsret_accept ret;
		ret.ret_addrlen = req->accept.req_addrlen;
  800118:	8b 46 04             	mov    0x4(%esi),%eax
  80011b:	89 45 94             	mov    %eax,-0x6c(%ebp)
		r = lwip_accept(req->accept.req_s, &ret.ret_addr,
  80011e:	8d 45 94             	lea    -0x6c(%ebp),%eax
  800121:	89 44 24 08          	mov    %eax,0x8(%esp)
  800125:	8d 45 84             	lea    -0x7c(%ebp),%eax
  800128:	89 44 24 04          	mov    %eax,0x4(%esp)
  80012c:	8b 06                	mov    (%esi),%eax
  80012e:	89 04 24             	mov    %eax,(%esp)
  800131:	e8 0c 0f 00 00       	call   801042 <lwip_accept>
  800136:	89 c7                	mov    %eax,%edi
				&ret.ret_addrlen);
		memmove(req, &ret, sizeof ret);
  800138:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  80013f:	00 
  800140:	8d 45 84             	lea    -0x7c(%ebp),%eax
  800143:	89 44 24 04          	mov    %eax,0x4(%esp)
  800147:	89 34 24             	mov    %esi,(%esp)
  80014a:	e8 05 f8 00 00       	call   80f954 <memmove>
  80014f:	e9 13 01 00 00       	jmp    800267 <serve_thread+0x173>
		break;
	}
	case NSREQ_BIND:
		r = lwip_bind(req->bind.req_s, &req->bind.req_name,
  800154:	8b 46 14             	mov    0x14(%esi),%eax
  800157:	89 44 24 08          	mov    %eax,0x8(%esp)
  80015b:	8d 46 04             	lea    0x4(%esi),%eax
  80015e:	89 44 24 04          	mov    %eax,0x4(%esp)
  800162:	8b 06                	mov    (%esi),%eax
  800164:	89 04 24             	mov    %eax,(%esp)
  800167:	e8 9c 10 00 00       	call   801208 <lwip_bind>
  80016c:	89 c7                	mov    %eax,%edi
			      req->bind.req_namelen);
		break;
  80016e:	e9 f4 00 00 00       	jmp    800267 <serve_thread+0x173>
	case NSREQ_SHUTDOWN:
		r = lwip_shutdown(req->shutdown.req_s, req->shutdown.req_how);
  800173:	8b 46 04             	mov    0x4(%esi),%eax
  800176:	89 44 24 04          	mov    %eax,0x4(%esp)
  80017a:	8b 06                	mov    (%esi),%eax
  80017c:	89 04 24             	mov    %eax,(%esp)
  80017f:	e8 7c 1c 00 00       	call   801e00 <lwip_shutdown>
  800184:	89 c7                	mov    %eax,%edi
		break;
  800186:	e9 dc 00 00 00       	jmp    800267 <serve_thread+0x173>
	case NSREQ_CLOSE:
		r = lwip_close(req->close.req_s);
  80018b:	8b 06                	mov    (%esi),%eax
  80018d:	89 04 24             	mov    %eax,(%esp)
  800190:	e8 30 11 00 00       	call   8012c5 <lwip_close>
  800195:	89 c7                	mov    %eax,%edi
		break;
  800197:	e9 cb 00 00 00       	jmp    800267 <serve_thread+0x173>
	case NSREQ_CONNECT:
		r = lwip_connect(req->connect.req_s, &req->connect.req_name,
  80019c:	8b 46 14             	mov    0x14(%esi),%eax
  80019f:	89 44 24 08          	mov    %eax,0x8(%esp)
  8001a3:	8d 46 04             	lea    0x4(%esi),%eax
  8001a6:	89 44 24 04          	mov    %eax,0x4(%esp)
  8001aa:	8b 06                	mov    (%esi),%eax
  8001ac:	89 04 24             	mov    %eax,(%esp)
  8001af:	e8 8f 11 00 00       	call   801343 <lwip_connect>
  8001b4:	89 c7                	mov    %eax,%edi
				 req->connect.req_namelen);
		break;
  8001b6:	e9 ac 00 00 00       	jmp    800267 <serve_thread+0x173>
	case NSREQ_LISTEN:
		r = lwip_listen(req->listen.req_s, req->listen.req_backlog);
  8001bb:	8b 46 04             	mov    0x4(%esi),%eax
  8001be:	89 44 24 04          	mov    %eax,0x4(%esp)
  8001c2:	8b 06                	mov    (%esi),%eax
  8001c4:	89 04 24             	mov    %eax,(%esp)
  8001c7:	e8 34 12 00 00       	call   801400 <lwip_listen>
  8001cc:	89 c7                	mov    %eax,%edi
		break;
  8001ce:	e9 94 00 00 00       	jmp    800267 <serve_thread+0x173>
	case NSREQ_RECV:
		// Note that we read the request fields before we
		// overwrite it with the response data.
		r = lwip_recv(req->recv.req_s, req->recvRet.ret_buf,
  8001d3:	8b 46 08             	mov    0x8(%esi),%eax
  8001d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8001da:	8b 46 04             	mov    0x4(%esi),%eax
  8001dd:	89 44 24 08          	mov    %eax,0x8(%esp)
  8001e1:	89 74 24 04          	mov    %esi,0x4(%esp)
  8001e5:	8b 06                	mov    (%esi),%eax
  8001e7:	89 04 24             	mov    %eax,(%esp)
  8001ea:	e8 16 15 00 00       	call   801705 <lwip_recv>
  8001ef:	89 c7                	mov    %eax,%edi
			      req->recv.req_len, req->recv.req_flags);
		break;
  8001f1:	eb 74                	jmp    800267 <serve_thread+0x173>
	case NSREQ_SEND:
		r = lwip_send(req->send.req_s, &req->send.req_buf,
  8001f3:	8b 46 08             	mov    0x8(%esi),%eax
  8001f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8001fa:	8b 46 04             	mov    0x4(%esi),%eax
  8001fd:	89 44 24 08          	mov    %eax,0x8(%esp)
  800201:	8d 46 0c             	lea    0xc(%esi),%eax
  800204:	89 44 24 04          	mov    %eax,0x4(%esp)
  800208:	8b 06                	mov    (%esi),%eax
  80020a:	89 04 24             	mov    %eax,(%esp)
  80020d:	e8 8b 16 00 00       	call   80189d <lwip_send>
  800212:	89 c7                	mov    %eax,%edi
			      req->send.req_size, req->send.req_flags);
		break;
  800214:	eb 51                	jmp    800267 <serve_thread+0x173>
	case NSREQ_SOCKET:
		r = lwip_socket(req->socket.req_domain, req->socket.req_type,
  800216:	8b 46 08             	mov    0x8(%esi),%eax
  800219:	89 44 24 08          	mov    %eax,0x8(%esp)
  80021d:	8b 46 04             	mov    0x4(%esi),%eax
  800220:	89 44 24 04          	mov    %eax,0x4(%esp)
  800224:	8b 06                	mov    (%esi),%eax
  800226:	89 04 24             	mov    %eax,(%esp)
  800229:	e8 22 17 00 00       	call   801950 <lwip_socket>
  80022e:	89 c7                	mov    %eax,%edi
				req->socket.req_protocol);
		break;
  800230:	eb 35                	jmp    800267 <serve_thread+0x173>
	case NSREQ_INPUT:
		jif_input(&nif, (void *)&req->pkt);
  800232:	89 74 24 04          	mov    %esi,0x4(%esp)
  800236:	c7 04 24 20 c2 b3 00 	movl   $0xb3c220,(%esp)
  80023d:	e8 54 b1 00 00       	call   80b396 <jif_input>
		r = 0;
  800242:	bf 00 00 00 00       	mov    $0x0,%edi
		break;
  800247:	eb 4c                	jmp    800295 <serve_thread+0x1a1>
	default:
		cprintf("Invalid request code %d from %08x\n", args->whom, args->req);
  800249:	89 74 24 08          	mov    %esi,0x8(%esp)
  80024d:	8b 43 04             	mov    0x4(%ebx),%eax
  800250:	89 44 24 04          	mov    %eax,0x4(%esp)
  800254:	c7 04 24 00 1e 81 00 	movl   $0x811e00,(%esp)
  80025b:	e8 27 ef 00 00       	call   80f187 <cprintf>
		r = -E_INVAL;
  800260:	bf fd ff ff ff       	mov    $0xfffffffd,%edi
		break;
  800265:	eb 2e                	jmp    800295 <serve_thread+0x1a1>
	}

	if (r == -1) {
  800267:	83 ff ff             	cmp    $0xffffffff,%edi
  80026a:	75 29                	jne    800295 <serve_thread+0x1a1>
		char buf[100];
		snprintf(buf, sizeof buf, "ns req type %d", args->reqno);
  80026c:	8b 03                	mov    (%ebx),%eax
  80026e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800272:	c7 44 24 08 20 1f 81 	movl   $0x811f20,0x8(%esp)
  800279:	00 
  80027a:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
  800281:	00 
  800282:	8d 75 84             	lea    -0x7c(%ebp),%esi
  800285:	89 34 24             	mov    %esi,(%esp)
  800288:	e8 bd f4 00 00       	call   80f74a <snprintf>
		perror(buf);
  80028d:	89 34 24             	mov    %esi,(%esp)
  800290:	e8 a0 af 00 00       	call   80b235 <perror>
	}

	if (args->reqno != NSREQ_INPUT)
  800295:	83 3b 0a             	cmpl   $0xa,(%ebx)
  800298:	74 1f                	je     8002b9 <serve_thread+0x1c5>
		ipc_send(args->whom, r, 0, 0);
  80029a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  8002a1:	00 
  8002a2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8002a9:	00 
  8002aa:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8002ae:	8b 43 04             	mov    0x4(%ebx),%eax
  8002b1:	89 04 24             	mov    %eax,(%esp)
  8002b4:	e8 9b 01 01 00       	call   810454 <ipc_send>

	put_buffer(args->req);
  8002b9:	8b 43 08             	mov    0x8(%ebx),%eax
	return va;
}

static void
put_buffer(void *va) {
	int i = ((uint32_t)va - REQVA) / PGSIZE;
  8002bc:	8d 90 00 50 01 f0    	lea    -0xffeb000(%eax),%edx
  8002c2:	c1 ea 0c             	shr    $0xc,%edx
	buse[i] = 0;
  8002c5:	c6 82 00 60 81 00 00 	movb   $0x0,0x816000(%edx)

	if (args->reqno != NSREQ_INPUT)
		ipc_send(args->whom, r, 0, 0);

	put_buffer(args->req);
	sys_page_unmap(0, (void*) args->req);
  8002cc:	89 44 24 04          	mov    %eax,0x4(%esp)
  8002d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8002d7:	e8 9e f9 00 00       	call   80fc7a <sys_page_unmap>
	free(args);
  8002dc:	89 1c 24             	mov    %ebx,(%esp)
  8002df:	e8 ac 0f 01 00       	call   811290 <free>
}
  8002e4:	81 c4 8c 00 00 00    	add    $0x8c,%esp
  8002ea:	5b                   	pop    %ebx
  8002eb:	5e                   	pop    %esi
  8002ec:	5f                   	pop    %edi
  8002ed:	5d                   	pop    %ebp
  8002ee:	c3                   	ret    

008002ef <serve_init>:
	thread_wakeup(done);
}

void
serve_init(uint32_t ipaddr, uint32_t netmask, uint32_t gw)
{
  8002ef:	55                   	push   %ebp
  8002f0:	89 e5                	mov    %esp,%ebp
  8002f2:	56                   	push   %esi
  8002f3:	53                   	push   %ebx
  8002f4:	83 ec 30             	sub    $0x30,%esp
  8002f7:	8b 75 08             	mov    0x8(%ebp),%esi
	int r;
	lwip_core_lock();
  8002fa:	e8 48 ab 00 00       	call   80ae47 <lwip_core_lock>

	uint32_t done = 0;
  8002ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	tcpip_init(&tcpip_init_done, &done);
  800306:	8d 5d f4             	lea    -0xc(%ebp),%ebx
  800309:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80030d:	c7 04 24 40 00 80 00 	movl   $0x800040,(%esp)
  800314:	e8 47 24 00 00       	call   802760 <tcpip_init>
	lwip_core_unlock();
  800319:	e8 2e ab 00 00       	call   80ae4c <lwip_core_unlock>
	thread_wait(&done, 0, (uint32_t)~0);
  80031e:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%esp)
  800325:	ff 
  800326:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80032d:	00 
  80032e:	89 1c 24             	mov    %ebx,(%esp)
  800331:	e8 93 ad 00 00       	call   80b0c9 <thread_wait>
	lwip_core_lock();
  800336:	e8 0c ab 00 00       	call   80ae47 <lwip_core_lock>
static void
lwip_init(struct netif *nif, void *if_state,
	  uint32_t init_addr, uint32_t init_mask, uint32_t init_gw)
{
	struct ip_addr ipaddr, netmask, gateway;
	ipaddr.addr  = init_addr;
  80033b:	89 75 e8             	mov    %esi,-0x18(%ebp)
	netmask.addr = init_mask;
  80033e:	8b 45 0c             	mov    0xc(%ebp),%eax
  800341:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gateway.addr = init_gw;
  800344:	8b 45 10             	mov    0x10(%ebp),%eax
  800347:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (0 == netif_add(nif, &ipaddr, &netmask, &gateway,
  80034a:	c7 44 24 18 20 6b 80 	movl   $0x806b20,0x18(%esp)
  800351:	00 
  800352:	c7 44 24 14 9e b4 80 	movl   $0x80b49e,0x14(%esp)
  800359:	00 
  80035a:	c7 44 24 10 14 60 81 	movl   $0x816014,0x10(%esp)
  800361:	00 
  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
  800365:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800369:	8d 45 ec             	lea    -0x14(%ebp),%eax
  80036c:	89 44 24 08          	mov    %eax,0x8(%esp)
  800370:	8d 45 e8             	lea    -0x18(%ebp),%eax
  800373:	89 44 24 04          	mov    %eax,0x4(%esp)
  800377:	c7 04 24 20 c2 b3 00 	movl   $0xb3c220,(%esp)
  80037e:	e8 3e 48 00 00       	call   804bc1 <netif_add>
  800383:	85 c0                	test   %eax,%eax
  800385:	75 1c                	jne    8003a3 <serve_init+0xb4>
			   if_state,
			   jif_init,
			   ip_input))
		panic("lwip_init: error in netif_add\n");
  800387:	c7 44 24 08 24 1e 81 	movl   $0x811e24,0x8(%esp)
  80038e:	00 
  80038f:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
  800396:	00 
  800397:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  80039e:	e8 eb ec 00 00       	call   80f08e <_panic>

	netif_set_default(nif);
  8003a3:	c7 04 24 20 c2 b3 00 	movl   $0xb3c220,(%esp)
  8003aa:	e8 d4 48 00 00       	call   804c83 <netif_set_default>
	netif_set_up(nif);
  8003af:	c7 04 24 20 c2 b3 00 	movl   $0xb3c220,(%esp)
  8003b6:	e8 d5 48 00 00       	call   804c90 <netif_set_up>
	thread_wait(&done, 0, (uint32_t)~0);
	lwip_core_lock();

	lwip_init(&nif, &output_envid, ipaddr, netmask, gw);

	start_timer(&t_arp, &etharp_tmr, "arp timer", ARP_TMR_INTERVAL);
  8003bb:	c7 04 24 88 13 00 00 	movl   $0x1388,(%esp)
  8003c2:	b9 2f 1f 81 00       	mov    $0x811f2f,%ecx
  8003c7:	ba c0 9c 80 00       	mov    $0x809cc0,%edx
  8003cc:	b8 38 60 81 00       	mov    $0x816038,%eax
  8003d1:	e8 83 fc ff ff       	call   800059 <start_timer>
	start_timer(&t_tcpf, &tcp_fasttmr, "tcp f timer", TCP_FAST_INTERVAL);
  8003d6:	c7 04 24 fa 00 00 00 	movl   $0xfa,(%esp)
  8003dd:	b9 39 1f 81 00       	mov    $0x811f39,%ecx
  8003e2:	ba 2f 5d 80 00       	mov    $0x805d2f,%edx
  8003e7:	b8 2c 60 81 00       	mov    $0x81602c,%eax
  8003ec:	e8 68 fc ff ff       	call   800059 <start_timer>
	start_timer(&t_tcps, &tcp_slowtmr, "tcp s timer", TCP_SLOW_INTERVAL);
  8003f1:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
  8003f8:	b9 45 1f 81 00       	mov    $0x811f45,%ecx
  8003fd:	ba cd 62 80 00       	mov    $0x8062cd,%edx
  800402:	b8 20 60 81 00       	mov    $0x816020,%eax
  800407:	e8 4d fc ff ff       	call   800059 <start_timer>

	struct in_addr ia = {ipaddr};
	cprintf("ns: %02x:%02x:%02x:%02x:%02x:%02x"
  80040c:	89 34 24             	mov    %esi,(%esp)
  80040f:	e8 8c 78 00 00       	call   807ca0 <inet_ntoa>
  800414:	89 44 24 1c          	mov    %eax,0x1c(%esp)
  800418:	0f b6 05 4a c2 b3 00 	movzbl 0xb3c24a,%eax
  80041f:	89 44 24 18          	mov    %eax,0x18(%esp)
  800423:	0f b6 05 49 c2 b3 00 	movzbl 0xb3c249,%eax
  80042a:	89 44 24 14          	mov    %eax,0x14(%esp)
  80042e:	0f b6 05 48 c2 b3 00 	movzbl 0xb3c248,%eax
  800435:	89 44 24 10          	mov    %eax,0x10(%esp)
  800439:	0f b6 05 47 c2 b3 00 	movzbl 0xb3c247,%eax
  800440:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800444:	0f b6 05 46 c2 b3 00 	movzbl 0xb3c246,%eax
  80044b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80044f:	0f b6 05 45 c2 b3 00 	movzbl 0xb3c245,%eax
  800456:	89 44 24 04          	mov    %eax,0x4(%esp)
  80045a:	c7 04 24 44 1e 81 00 	movl   $0x811e44,(%esp)
  800461:	e8 21 ed 00 00       	call   80f187 <cprintf>
		" bound to static IP %s\n",
		nif.hwaddr[0], nif.hwaddr[1], nif.hwaddr[2],
		nif.hwaddr[3], nif.hwaddr[4], nif.hwaddr[5],
		inet_ntoa(ia));

	lwip_core_unlock();
  800466:	e8 e1 a9 00 00       	call   80ae4c <lwip_core_unlock>

	cprintf("NS: TCP/IP initialized.\n");
  80046b:	c7 04 24 51 1f 81 00 	movl   $0x811f51,(%esp)
  800472:	e8 10 ed 00 00       	call   80f187 <cprintf>
}
  800477:	83 c4 30             	add    $0x30,%esp
  80047a:	5b                   	pop    %ebx
  80047b:	5e                   	pop    %esi
  80047c:	5d                   	pop    %ebp
  80047d:	c3                   	ret    

0080047e <serve>:
	sys_page_unmap(0, (void*) args->req);
	free(args);
}

void
serve(void) {
  80047e:	55                   	push   %ebp
  80047f:	89 e5                	mov    %esp,%ebp
  800481:	57                   	push   %edi
  800482:	56                   	push   %esi
  800483:	53                   	push   %ebx
  800484:	83 ec 3c             	sub    $0x3c,%esp

	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
  800487:	bb 00 00 00 00       	mov    $0x0,%ebx
			thread_yield();

		perm = 0;
		va = get_buffer();
		reqno = ipc_recv((int32_t *) &whom, (void *) va, &perm);
  80048c:	8d 7d e0             	lea    -0x20(%ebp),%edi
  80048f:	eb 08                	jmp    800499 <serve+0x1b>
	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
			thread_yield();
  800491:	e8 b3 ab 00 00       	call   80b049 <thread_yield>

	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
  800496:	83 c3 01             	add    $0x1,%ebx
  800499:	e8 10 aa 00 00       	call   80aeae <thread_wakeups_pending>
  80049e:	85 c0                	test   %eax,%eax
  8004a0:	74 05                	je     8004a7 <serve+0x29>
  8004a2:	83 fb 1f             	cmp    $0x1f,%ebx
  8004a5:	7e ea                	jle    800491 <serve+0x13>
			thread_yield();

		perm = 0;
  8004a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
static void *
get_buffer(void) {
	void *va;

	int i;
	for (i = 0; i < QUEUE_SIZE; i++)
  8004ae:	b8 00 00 00 00       	mov    $0x0,%eax
		if (!buse[i]) break;
  8004b3:	80 b8 00 60 81 00 00 	cmpb   $0x0,0x816000(%eax)
  8004ba:	74 0a                	je     8004c6 <serve+0x48>
static void *
get_buffer(void) {
	void *va;

	int i;
	for (i = 0; i < QUEUE_SIZE; i++)
  8004bc:	83 c0 01             	add    $0x1,%eax
  8004bf:	83 f8 14             	cmp    $0x14,%eax
  8004c2:	75 ef                	jne    8004b3 <serve+0x35>
  8004c4:	eb 05                	jmp    8004cb <serve+0x4d>
		if (!buse[i]) break;

	if (i == QUEUE_SIZE) {
  8004c6:	83 f8 14             	cmp    $0x14,%eax
  8004c9:	75 1c                	jne    8004e7 <serve+0x69>
		panic("NS: buffer overflow");
  8004cb:	c7 44 24 08 6a 1f 81 	movl   $0x811f6a,0x8(%esp)
  8004d2:	00 
  8004d3:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
  8004da:	00 
  8004db:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  8004e2:	e8 a7 eb 00 00       	call   80f08e <_panic>
		return 0;
	}

	va = (void *)(REQVA + i * PGSIZE);
  8004e7:	8d 98 eb ff 00 00    	lea    0xffeb(%eax),%ebx
  8004ed:	c1 e3 0c             	shl    $0xc,%ebx
	buse[i] = 1;
  8004f0:	c6 80 00 60 81 00 01 	movb   $0x1,0x816000(%eax)
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
			thread_yield();

		perm = 0;
		va = get_buffer();
		reqno = ipc_recv((int32_t *) &whom, (void *) va, &perm);
  8004f7:	89 7c 24 08          	mov    %edi,0x8(%esp)
  8004fb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8004ff:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  800502:	89 04 24             	mov    %eax,(%esp)
  800505:	e8 f6 fe 00 00       	call   810400 <ipc_recv>
  80050a:	89 c6                	mov    %eax,%esi
		if (debug) {
			cprintf("ns req %d from %08x\n", reqno, whom);
		}

		// first take care of requests that do not contain an argument page
		if (reqno == NSREQ_TIMER) {
  80050c:	83 f8 0c             	cmp    $0xc,%eax
  80050f:	75 70                	jne    800581 <serve+0x103>
			process_timer(whom);
  800511:	8b 75 e4             	mov    -0x1c(%ebp),%esi

static void
process_timer(envid_t envid) {
	uint32_t start, now, to;

	if (envid != timer_envid) {
  800514:	3b 35 1c 60 81 00    	cmp    0x81601c,%esi
  80051a:	74 12                	je     80052e <serve+0xb0>
		cprintf("NS: received timer interrupt from envid %x not timer env\n", envid);
  80051c:	89 74 24 04          	mov    %esi,0x4(%esp)
  800520:	c7 04 24 80 1e 81 00 	movl   $0x811e80,(%esp)
  800527:	e8 5b ec 00 00       	call   80f187 <cprintf>
  80052c:	eb 39                	jmp    800567 <serve+0xe9>
		return;
	}

	start = sys_time_msec();
  80052e:	e8 08 f9 00 00       	call   80fe3b <sys_time_msec>
  800533:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	thread_yield();
  800536:	e8 0e ab 00 00       	call   80b049 <thread_yield>
	now = sys_time_msec();
  80053b:	e8 fb f8 00 00       	call   80fe3b <sys_time_msec>

	to = TIMER_INTERVAL - (now - start);
	ipc_send(envid, to, 0, 0);
  800540:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  800547:	00 
  800548:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80054f:	00 

	start = sys_time_msec();
	thread_yield();
	now = sys_time_msec();

	to = TIMER_INTERVAL - (now - start);
  800550:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  800553:	81 c2 fa 00 00 00    	add    $0xfa,%edx
  800559:	29 c2                	sub    %eax,%edx
	ipc_send(envid, to, 0, 0);
  80055b:	89 54 24 04          	mov    %edx,0x4(%esp)
  80055f:	89 34 24             	mov    %esi,(%esp)
  800562:	e8 ed fe 00 00       	call   810454 <ipc_send>
	return va;
}

static void
put_buffer(void *va) {
	int i = ((uint32_t)va - REQVA) / PGSIZE;
  800567:	81 eb 00 b0 fe 0f    	sub    $0xffeb000,%ebx
  80056d:	c1 eb 0c             	shr    $0xc,%ebx
	buse[i] = 0;
  800570:	c6 83 00 60 81 00 00 	movb   $0x0,0x816000(%ebx)

	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
  800577:	bb 00 00 00 00       	mov    $0x0,%ebx

		// first take care of requests that do not contain an argument page
		if (reqno == NSREQ_TIMER) {
			process_timer(whom);
			put_buffer(va);
			continue;
  80057c:	e9 18 ff ff ff       	jmp    800499 <serve+0x1b>
		}

		// All remaining requests must contain an argument page
		if (!(perm & PTE_P)) {
  800581:	f6 45 e0 01          	testb  $0x1,-0x20(%ebp)
  800585:	75 1d                	jne    8005a4 <serve+0x126>
			cprintf("Invalid request from %08x: no argument page\n", whom);
  800587:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80058a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80058e:	c7 04 24 bc 1e 81 00 	movl   $0x811ebc,(%esp)
  800595:	e8 ed eb 00 00       	call   80f187 <cprintf>

	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
  80059a:	bb 00 00 00 00       	mov    $0x0,%ebx
		}

		// All remaining requests must contain an argument page
		if (!(perm & PTE_P)) {
			cprintf("Invalid request from %08x: no argument page\n", whom);
			continue; // just leave it hanging...
  80059f:	e9 f5 fe ff ff       	jmp    800499 <serve+0x1b>
		}

		// Since some lwIP socket calls will block, create a thread and
		// process the rest of the request in the thread.
		struct st_args *args = malloc(sizeof(struct st_args));
  8005a4:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  8005ab:	e8 b2 0d 01 00       	call   811362 <malloc>
		if (!args)
  8005b0:	85 c0                	test   %eax,%eax
  8005b2:	75 1c                	jne    8005d0 <serve+0x152>
			panic("could not allocate thread args structure");
  8005b4:	c7 44 24 08 ec 1e 81 	movl   $0x811eec,0x8(%esp)
  8005bb:	00 
  8005bc:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
  8005c3:	00 
  8005c4:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  8005cb:	e8 be ea 00 00       	call   80f08e <_panic>

		args->reqno = reqno;
  8005d0:	89 30                	mov    %esi,(%eax)
		args->whom = whom;
  8005d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  8005d5:	89 50 04             	mov    %edx,0x4(%eax)
		args->req = va;
  8005d8:	89 58 08             	mov    %ebx,0x8(%eax)

		thread_create(0, "serve_thread", serve_thread, (uint32_t)args);
  8005db:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8005df:	c7 44 24 08 f4 00 80 	movl   $0x8000f4,0x8(%esp)
  8005e6:	00 
  8005e7:	c7 44 24 04 7e 1f 81 	movl   $0x811f7e,0x4(%esp)
  8005ee:	00 
  8005ef:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8005f6:	e8 02 a9 00 00       	call   80aefd <thread_create>
		thread_yield(); // let the thread created run
  8005fb:	e8 49 aa 00 00       	call   80b049 <thread_yield>

	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
  800600:	bb 00 00 00 00       	mov    $0x0,%ebx
  800605:	e9 8f fe ff ff       	jmp    800499 <serve+0x1b>

0080060a <tmain>:
		thread_yield(); // let the thread created run
	}
}

static void
tmain(uint32_t arg) {
  80060a:	55                   	push   %ebp
  80060b:	89 e5                	mov    %esp,%ebp
  80060d:	56                   	push   %esi
  80060e:	53                   	push   %ebx
  80060f:	83 ec 10             	sub    $0x10,%esp
	serve_init(inet_addr(IP),
  800612:	c7 04 24 8b 1f 81 00 	movl   $0x811f8b,(%esp)
  800619:	e8 67 79 00 00       	call   807f85 <inet_addr>
  80061e:	89 c6                	mov    %eax,%esi
  800620:	c7 04 24 94 1f 81 00 	movl   $0x811f94,(%esp)
  800627:	e8 59 79 00 00       	call   807f85 <inet_addr>
  80062c:	89 c3                	mov    %eax,%ebx
  80062e:	c7 04 24 a2 1f 81 00 	movl   $0x811fa2,(%esp)
  800635:	e8 4b 79 00 00       	call   807f85 <inet_addr>
  80063a:	89 74 24 08          	mov    %esi,0x8(%esp)
  80063e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  800642:	89 04 24             	mov    %eax,(%esp)
  800645:	e8 a5 fc ff ff       	call   8002ef <serve_init>
		   inet_addr(MASK),
		   inet_addr(DEFAULT));
	serve();
  80064a:	e8 2f fe ff ff       	call   80047e <serve>

0080064f <umain>:
}

void
umain(int argc, char **argv)
{
  80064f:	55                   	push   %ebp
  800650:	89 e5                	mov    %esp,%ebp
  800652:	53                   	push   %ebx
  800653:	83 ec 14             	sub    $0x14,%esp
	envid_t ns_envid = sys_getenvid();
  800656:	e8 3a f5 00 00       	call   80fb95 <sys_getenvid>
  80065b:	89 c3                	mov    %eax,%ebx

	binaryname = "ns";
  80065d:	c7 05 e8 52 81 00 a7 	movl   $0x8149a7,0x8152e8
  800664:	49 81 00 

	// fork off the timer thread which will send us periodic messages
	timer_envid = fork();
  800667:	e8 be fa 00 00       	call   81012a <fork>
  80066c:	a3 1c 60 81 00       	mov    %eax,0x81601c
	if (timer_envid < 0)
  800671:	85 c0                	test   %eax,%eax
  800673:	79 1c                	jns    800691 <umain+0x42>
		panic("error forking");
  800675:	c7 44 24 08 ac 1f 81 	movl   $0x811fac,0x8(%esp)
  80067c:	00 
  80067d:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
  800684:	00 
  800685:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  80068c:	e8 fd e9 00 00       	call   80f08e <_panic>
	else if (timer_envid == 0) {
  800691:	85 c0                	test   %eax,%eax
  800693:	75 15                	jne    8006aa <umain+0x5b>
		timer(ns_envid, TIMER_INTERVAL);
  800695:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
  80069c:	00 
  80069d:	89 1c 24             	mov    %ebx,(%esp)
  8006a0:	e8 ab 00 00 00       	call   800750 <timer>
		return;
  8006a5:	e9 9e 00 00 00       	jmp    800748 <umain+0xf9>
	}

	// fork off the input thread which will poll the NIC driver for input
	// packets
	input_envid = fork();
  8006aa:	e8 7b fa 00 00       	call   81012a <fork>
  8006af:	a3 18 60 81 00       	mov    %eax,0x816018
	if (input_envid < 0)
  8006b4:	85 c0                	test   %eax,%eax
  8006b6:	79 1c                	jns    8006d4 <umain+0x85>
		panic("error forking");
  8006b8:	c7 44 24 08 ac 1f 81 	movl   $0x811fac,0x8(%esp)
  8006bf:	00 
  8006c0:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
  8006c7:	00 
  8006c8:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  8006cf:	e8 ba e9 00 00       	call   80f08e <_panic>
	else if (input_envid == 0) {
  8006d4:	85 c0                	test   %eax,%eax
  8006d6:	75 0a                	jne    8006e2 <umain+0x93>
		input(ns_envid);
  8006d8:	89 1c 24             	mov    %ebx,(%esp)
  8006db:	e8 40 01 00 00       	call   800820 <input>
		return;
  8006e0:	eb 66                	jmp    800748 <umain+0xf9>
	}

	// fork off the output thread that will send the packets to the NIC
	// driver
	output_envid = fork();
  8006e2:	e8 43 fa 00 00       	call   81012a <fork>
  8006e7:	a3 14 60 81 00       	mov    %eax,0x816014
	if (output_envid < 0)
  8006ec:	85 c0                	test   %eax,%eax
  8006ee:	79 1c                	jns    80070c <umain+0xbd>
		panic("error forking");
  8006f0:	c7 44 24 08 ac 1f 81 	movl   $0x811fac,0x8(%esp)
  8006f7:	00 
  8006f8:	c7 44 24 04 58 01 00 	movl   $0x158,0x4(%esp)
  8006ff:	00 
  800700:	c7 04 24 15 1f 81 00 	movl   $0x811f15,(%esp)
  800707:	e8 82 e9 00 00       	call   80f08e <_panic>
	else if (output_envid == 0) {
  80070c:	85 c0                	test   %eax,%eax
  80070e:	75 0a                	jne    80071a <umain+0xcb>
		output(ns_envid);
  800710:	89 1c 24             	mov    %ebx,(%esp)
  800713:	e8 a3 01 00 00       	call   8008bb <output>
		return;
  800718:	eb 2e                	jmp    800748 <umain+0xf9>
	}

	// lwIP requires a user threading library; start the library and jump
	// into a thread to continue initialization.
	thread_init();
  80071a:	e8 41 a7 00 00       	call   80ae60 <thread_init>
	thread_create(0, "main", tmain, 0);
  80071f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  800726:	00 
  800727:	c7 44 24 08 0a 06 80 	movl   $0x80060a,0x8(%esp)
  80072e:	00 
  80072f:	c7 44 24 04 ba 1f 81 	movl   $0x811fba,0x4(%esp)
  800736:	00 
  800737:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80073e:	e8 ba a7 00 00       	call   80aefd <thread_create>
	thread_yield();
  800743:	e8 01 a9 00 00       	call   80b049 <thread_yield>
	// never coming here!
}
  800748:	83 c4 14             	add    $0x14,%esp
  80074b:	5b                   	pop    %ebx
  80074c:	5d                   	pop    %ebp
  80074d:	c3                   	ret    
  80074e:	66 90                	xchg   %ax,%ax

00800750 <timer>:
#include "ns.h"

void
timer(envid_t ns_envid, uint32_t initial_to) {
  800750:	55                   	push   %ebp
  800751:	89 e5                	mov    %esp,%ebp
  800753:	57                   	push   %edi
  800754:	56                   	push   %esi
  800755:	53                   	push   %ebx
  800756:	83 ec 2c             	sub    $0x2c,%esp
  800759:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int r;
	uint32_t stop = sys_time_msec() + initial_to;
  80075c:	e8 da f6 00 00       	call   80fe3b <sys_time_msec>
  800761:	03 45 0c             	add    0xc(%ebp),%eax
  800764:	89 c6                	mov    %eax,%esi

	binaryname = "ns_timer";
  800766:	c7 05 e8 52 81 00 ec 	movl   $0x811fec,0x8152e8
  80076d:	1f 81 00 

		ipc_send(ns_envid, NSREQ_TIMER, 0, 0);

		while (1) {
			uint32_t to, whom;
			to = ipc_recv((int32_t *) &whom, 0, 0);
  800770:	8d 7d e4             	lea    -0x1c(%ebp),%edi
  800773:	eb 05                	jmp    80077a <timer+0x2a>

	binaryname = "ns_timer";

	while (1) {
		while((r = sys_time_msec()) < stop && r >= 0) {
			sys_yield();
  800775:	e8 3a f4 00 00       	call   80fbb4 <sys_yield>
	uint32_t stop = sys_time_msec() + initial_to;

	binaryname = "ns_timer";

	while (1) {
		while((r = sys_time_msec()) < stop && r >= 0) {
  80077a:	e8 bc f6 00 00       	call   80fe3b <sys_time_msec>
  80077f:	39 c6                	cmp    %eax,%esi
  800781:	76 06                	jbe    800789 <timer+0x39>
  800783:	85 c0                	test   %eax,%eax
  800785:	79 ee                	jns    800775 <timer+0x25>
  800787:	eb 09                	jmp    800792 <timer+0x42>
			sys_yield();
		}
		if (r < 0)
  800789:	85 c0                	test   %eax,%eax
  80078b:	90                   	nop
  80078c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  800790:	79 20                	jns    8007b2 <timer+0x62>
			panic("sys_time_msec: %e", r);
  800792:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800796:	c7 44 24 08 f5 1f 81 	movl   $0x811ff5,0x8(%esp)
  80079d:	00 
  80079e:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  8007a5:	00 
  8007a6:	c7 04 24 07 20 81 00 	movl   $0x812007,(%esp)
  8007ad:	e8 dc e8 00 00       	call   80f08e <_panic>

		ipc_send(ns_envid, NSREQ_TIMER, 0, 0);
  8007b2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  8007b9:	00 
  8007ba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8007c1:	00 
  8007c2:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
  8007c9:	00 
  8007ca:	89 1c 24             	mov    %ebx,(%esp)
  8007cd:	e8 82 fc 00 00       	call   810454 <ipc_send>

		while (1) {
			uint32_t to, whom;
			to = ipc_recv((int32_t *) &whom, 0, 0);
  8007d2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8007d9:	00 
  8007da:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8007e1:	00 
  8007e2:	89 3c 24             	mov    %edi,(%esp)
  8007e5:	e8 16 fc 00 00       	call   810400 <ipc_recv>
  8007ea:	89 c6                	mov    %eax,%esi

			if (whom != ns_envid) {
  8007ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8007ef:	39 c3                	cmp    %eax,%ebx
  8007f1:	74 12                	je     800805 <timer+0xb5>
				cprintf("NS TIMER: timer thread got IPC message from env %x not NS\n", whom);
  8007f3:	89 44 24 04          	mov    %eax,0x4(%esp)
  8007f7:	c7 04 24 14 20 81 00 	movl   $0x812014,(%esp)
  8007fe:	e8 84 e9 00 00       	call   80f187 <cprintf>
  800803:	eb cd                	jmp    8007d2 <timer+0x82>
				continue;
			}

			stop = sys_time_msec() + to;
  800805:	e8 31 f6 00 00       	call   80fe3b <sys_time_msec>
  80080a:	01 c6                	add    %eax,%esi
  80080c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  800810:	e9 65 ff ff ff       	jmp    80077a <timer+0x2a>
  800815:	66 90                	xchg   %ax,%ax
  800817:	66 90                	xchg   %ax,%ax
  800819:	66 90                	xchg   %ax,%ax
  80081b:	66 90                	xchg   %ax,%ax
  80081d:	66 90                	xchg   %ax,%ax
  80081f:	90                   	nop

00800820 <input>:

extern union Nsipc nsipcbuf;

void
input(envid_t ns_envid)
{
  800820:	55                   	push   %ebp
  800821:	89 e5                	mov    %esp,%ebp
  800823:	57                   	push   %edi
  800824:	56                   	push   %esi
  800825:	53                   	push   %ebx
  800826:	81 ec 2c 08 00 00    	sub    $0x82c,%esp
	binaryname = "ns_input";
  80082c:	c7 05 e8 52 81 00 4f 	movl   $0x81204f,0x8152e8
  800833:	20 81 00 
	char buf[PKT_MAX_SIZE];
	int err;

	while(1)
	{
		err = sys_pkt_recv(buf, &len);
  800836:	8d 7d e4             	lea    -0x1c(%ebp),%edi
  800839:	8d b5 e4 f7 ff ff    	lea    -0x81c(%ebp),%esi
  80083f:	89 7c 24 04          	mov    %edi,0x4(%esp)
  800843:	89 34 24             	mov    %esi,(%esp)
  800846:	e8 b5 f6 00 00       	call   80ff00 <sys_pkt_recv>
		if(err != 0)
  80084b:	85 c0                	test   %eax,%eax
  80084d:	74 0e                	je     80085d <input+0x3d>
		{
			sys_sleep(ENV_CHANNEL_RX);
  80084f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  800856:	e8 f8 f6 00 00       	call   80ff53 <sys_sleep>
			continue;
  80085b:	eb e2                	jmp    80083f <input+0x1f>
		}

		nsipcbuf.pkt.jp_len = len;
  80085d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800860:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
		memcpy(nsipcbuf.pkt.jp_data, buf, len);
  800865:	89 44 24 08          	mov    %eax,0x8(%esp)
  800869:	89 74 24 04          	mov    %esi,0x4(%esp)
  80086d:	c7 04 24 04 e0 b3 00 	movl   $0xb3e004,(%esp)
  800874:	e8 43 f1 00 00       	call   80f9bc <memcpy>
		
		ipc_send(ns_envid, NSREQ_INPUT, &nsipcbuf, PTE_P|PTE_W|PTE_U);
  800879:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  800880:	00 
  800881:	c7 44 24 08 00 e0 b3 	movl   $0xb3e000,0x8(%esp)
  800888:	00 
  800889:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  800890:	00 
  800891:	8b 45 08             	mov    0x8(%ebp),%eax
  800894:	89 04 24             	mov    %eax,(%esp)
  800897:	e8 b8 fb 00 00       	call   810454 <ipc_send>

		// Waiting for some time
		unsigned wait = sys_time_msec() + 50;
  80089c:	e8 9a f5 00 00       	call   80fe3b <sys_time_msec>
  8008a1:	8d 58 32             	lea    0x32(%eax),%ebx
		while (sys_time_msec() < wait){
  8008a4:	eb 05                	jmp    8008ab <input+0x8b>
			sys_yield();
  8008a6:	e8 09 f3 00 00       	call   80fbb4 <sys_yield>
		
		ipc_send(ns_envid, NSREQ_INPUT, &nsipcbuf, PTE_P|PTE_W|PTE_U);

		// Waiting for some time
		unsigned wait = sys_time_msec() + 50;
		while (sys_time_msec() < wait){
  8008ab:	90                   	nop
  8008ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  8008b0:	e8 86 f5 00 00       	call   80fe3b <sys_time_msec>
  8008b5:	39 c3                	cmp    %eax,%ebx
  8008b7:	77 ed                	ja     8008a6 <input+0x86>
  8008b9:	eb 84                	jmp    80083f <input+0x1f>

008008bb <output>:

extern union Nsipc nsipcbuf;

void
output(envid_t ns_envid)
{
  8008bb:	55                   	push   %ebp
  8008bc:	89 e5                	mov    %esp,%ebp
  8008be:	56                   	push   %esi
  8008bf:	53                   	push   %ebx
  8008c0:	83 ec 20             	sub    $0x20,%esp
	binaryname = "ns_output";
  8008c3:	c7 05 e8 52 81 00 58 	movl   $0x812058,0x8152e8
  8008ca:	20 81 00 
	envid_t envid;
	int32_t res;
	int err;
	while(1)
	{		
		res = ipc_recv(&envid, &nsipcbuf, &p);
  8008cd:	8d 75 f4             	lea    -0xc(%ebp),%esi
  8008d0:	8d 5d f0             	lea    -0x10(%ebp),%ebx
  8008d3:	89 74 24 08          	mov    %esi,0x8(%esp)
  8008d7:	c7 44 24 04 00 e0 b3 	movl   $0xb3e000,0x4(%esp)
  8008de:	00 
  8008df:	89 1c 24             	mov    %ebx,(%esp)
  8008e2:	e8 19 fb 00 00       	call   810400 <ipc_recv>
		if(res != NSREQ_OUTPUT)
  8008e7:	83 f8 0b             	cmp    $0xb,%eax
  8008ea:	75 e7                	jne    8008d3 <output+0x18>
			continue;

		if(!(p & PTE_P))
  8008ec:	f6 45 f4 01          	testb  $0x1,-0xc(%ebp)
  8008f0:	74 e1                	je     8008d3 <output+0x18>
			continue;
		
		while (1) {
			err = sys_pkt_send(nsipcbuf.pkt.jp_data, nsipcbuf.pkt.jp_len);
  8008f2:	a1 00 e0 b3 00       	mov    0xb3e000,%eax
  8008f7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8008fb:	c7 04 24 04 e0 b3 00 	movl   $0xb3e004,(%esp)
  800902:	e8 a6 f5 00 00       	call   80fead <sys_pkt_send>

			if(err == 0)
  800907:	a9 ef ff ff ff       	test   $0xffffffef,%eax
  80090c:	74 c5                	je     8008d3 <output+0x18>
				break;

			if(err == E_PACKET_TOO_BIG)
				break;

			sys_sleep(ENV_CHANNEL_TX);
  80090e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  800915:	e8 39 f6 00 00       	call   80ff53 <sys_sleep>
		}
  80091a:	eb d6                	jmp    8008f2 <output+0x37>
  80091c:	66 90                	xchg   %ax,%ax
  80091e:	66 90                	xchg   %ax,%ax

00800920 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_socket for the socket or NULL if not found
 */
static struct lwip_socket *
get_socket(int s)
{
  800920:	55                   	push   %ebp
  800921:	89 e5                	mov    %esp,%ebp
  struct lwip_socket *sock;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  800923:	83 f8 1f             	cmp    $0x1f,%eax
  800926:	76 11                	jbe    800939 <get_socket+0x19>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
    set_errno(EBADF);
  800928:	c7 05 00 c2 b3 00 09 	movl   $0x9,0xb3c200
  80092f:	00 00 00 
    return NULL;
  800932:	b8 00 00 00 00       	mov    $0x0,%eax
  800937:	eb 24                	jmp    80095d <get_socket+0x3d>
  }

  sock = &sockets[s];
  800939:	8d 14 80             	lea    (%eax,%eax,4),%edx
  80093c:	c1 e2 02             	shl    $0x2,%edx
  80093f:	8d 82 80 60 81 00    	lea    0x816080(%edx),%eax

  if (!sock->conn) {
  800945:	83 ba 80 60 81 00 00 	cmpl   $0x0,0x816080(%edx)
  80094c:	75 0f                	jne    80095d <get_socket+0x3d>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s));
    set_errno(EBADF);
  80094e:	c7 05 00 c2 b3 00 09 	movl   $0x9,0xb3c200
  800955:	00 00 00 
    return NULL;
  800958:	b8 00 00 00 00       	mov    $0x0,%eax
  }

  return sock;
}
  80095d:	5d                   	pop    %ebp
  80095e:	c3                   	ret    

0080095f <lwip_selscan>:
 * @param exceptset not yet implemented
 * @return number of sockets that had events (read+write)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset)
{
  80095f:	55                   	push   %ebp
  800960:	89 e5                	mov    %esp,%ebp
  800962:	57                   	push   %edi
  800963:	56                   	push   %esi
  800964:	53                   	push   %ebx
  800965:	83 ec 3c             	sub    $0x3c,%esp
  800968:	89 45 d0             	mov    %eax,-0x30(%ebp)
  80096b:	89 55 cc             	mov    %edx,-0x34(%ebp)
  80096e:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  int i, nready = 0;
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_socket *p_sock;
  
  FD_ZERO(&lreadset);
  800971:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  800978:	00 
  800979:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  800980:	00 
  800981:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  800984:	89 04 24             	mov    %eax,(%esp)
  800987:	e8 7b ef 00 00       	call   80f907 <memset>
  FD_ZERO(&lwriteset);
  80098c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  800993:	00 
  800994:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80099b:	00 
  80099c:	8d 45 e0             	lea    -0x20(%ebp),%eax
  80099f:	89 04 24             	mov    %eax,(%esp)
  8009a2:	e8 60 ef 00 00       	call   80f907 <memset>
  FD_ZERO(&lexceptset);
  8009a7:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  8009ae:	00 
  8009af:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8009b6:	00 
  8009b7:	8d 45 dc             	lea    -0x24(%ebp),%eax
  8009ba:	89 04 24             	mov    %eax,(%esp)
  8009bd:	e8 45 ef 00 00       	call   80f907 <memset>
 * @return number of sockets that had events (read+write)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset)
{
  int i, nready = 0;
  8009c2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);
  
  /* Go through each socket in each list to count number of sockets which
  currently match */
  for(i = 0; i < maxfdp1; i++) {
  8009c9:	bf 00 00 00 00       	mov    $0x0,%edi
  8009ce:	e9 80 00 00 00       	jmp    800a53 <lwip_selscan+0xf4>
    if (FD_ISSET(i, readset)) {
  8009d3:	8d 5f 07             	lea    0x7(%edi),%ebx
  8009d6:	85 ff                	test   %edi,%edi
  8009d8:	0f 49 df             	cmovns %edi,%ebx
  8009db:	c1 fb 03             	sar    $0x3,%ebx
  8009de:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
  8009e1:	89 fe                	mov    %edi,%esi
  8009e3:	83 e6 07             	and    $0x7,%esi
  8009e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
  8009e9:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
  8009ed:	0f a3 f0             	bt     %esi,%eax
  8009f0:	73 2c                	jae    800a1e <lwip_selscan+0xbf>
      /* See if netconn of this socket is ready for read */
      p_sock = get_socket(i);
  8009f2:	89 f8                	mov    %edi,%eax
  8009f4:	e8 27 ff ff ff       	call   800920 <get_socket>
      if (p_sock && (p_sock->lastdata || p_sock->rcvevent)) {
  8009f9:	85 c0                	test   %eax,%eax
  8009fb:	74 21                	je     800a1e <lwip_selscan+0xbf>
  8009fd:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
  800a01:	75 07                	jne    800a0a <lwip_selscan+0xab>
  800a03:	66 83 78 0a 00       	cmpw   $0x0,0xa(%eax)
  800a08:	74 14                	je     800a1e <lwip_selscan+0xbf>
        FD_SET(i, &lreadset);
  800a0a:	b8 01 00 00 00       	mov    $0x1,%eax
  800a0f:	89 f1                	mov    %esi,%ecx
  800a11:	d3 e0                	shl    %cl,%eax
  800a13:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  800a16:	08 44 15 e4          	or     %al,-0x1c(%ebp,%edx,1)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  800a1a:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)
      }
    }
    if (FD_ISSET(i, writeset)) {
  800a1e:	8b 45 c8             	mov    -0x38(%ebp),%eax
  800a21:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
  800a25:	0f a3 f0             	bt     %esi,%eax
  800a28:	73 26                	jae    800a50 <lwip_selscan+0xf1>
      /* See if netconn of this socket is ready for write */
      p_sock = get_socket(i);
  800a2a:	89 f8                	mov    %edi,%eax
  800a2c:	e8 ef fe ff ff       	call   800920 <get_socket>
      if (p_sock && p_sock->sendevent) {
  800a31:	85 c0                	test   %eax,%eax
  800a33:	74 1b                	je     800a50 <lwip_selscan+0xf1>
  800a35:	66 83 78 0c 00       	cmpw   $0x0,0xc(%eax)
  800a3a:	74 14                	je     800a50 <lwip_selscan+0xf1>
        FD_SET(i, &lwriteset);
  800a3c:	b8 01 00 00 00       	mov    $0x1,%eax
  800a41:	89 f1                	mov    %esi,%ecx
  800a43:	d3 e0                	shl    %cl,%eax
  800a45:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  800a48:	08 44 15 e0          	or     %al,-0x20(%ebp,%edx,1)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  800a4c:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);
  
  /* Go through each socket in each list to count number of sockets which
  currently match */
  for(i = 0; i < maxfdp1; i++) {
  800a50:	83 c7 01             	add    $0x1,%edi
  800a53:	3b 7d d0             	cmp    -0x30(%ebp),%edi
  800a56:	0f 8c 77 ff ff ff    	jl     8009d3 <lwip_selscan+0x74>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
      }
    }
  }
  *readset = lreadset;
  800a5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800a5f:	8b 55 cc             	mov    -0x34(%ebp),%edx
  800a62:	89 02                	mov    %eax,(%edx)
  *writeset = lwriteset;
  800a64:	8b 45 e0             	mov    -0x20(%ebp),%eax
  800a67:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  800a6a:	89 01                	mov    %eax,(%ecx)
  FD_ZERO(exceptset);
  800a6c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  800a73:	00 
  800a74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  800a7b:	00 
  800a7c:	8b 45 08             	mov    0x8(%ebp),%eax
  800a7f:	89 04 24             	mov    %eax,(%esp)
  800a82:	e8 80 ee 00 00       	call   80f907 <memset>
  
  return nready;
}
  800a87:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  800a8a:	83 c4 3c             	add    $0x3c,%esp
  800a8d:	5b                   	pop    %ebx
  800a8e:	5e                   	pop    %esi
  800a8f:	5f                   	pop    %edi
  800a90:	5d                   	pop    %ebp
  800a91:	c3                   	ret    

00800a92 <lwip_getaddrname>:
  return lwip_close(s); /* XXX temporary hack until proper implementation */
}

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  800a92:	55                   	push   %ebp
  800a93:	89 e5                	mov    %esp,%ebp
  800a95:	57                   	push   %edi
  800a96:	56                   	push   %esi
  800a97:	53                   	push   %ebx
  800a98:	83 ec 4c             	sub    $0x4c,%esp
  800a9b:	89 d7                	mov    %edx,%edi
  800a9d:	89 ce                	mov    %ecx,%esi
  800a9f:	8b 55 08             	mov    0x8(%ebp),%edx
  800aa2:	89 55 c4             	mov    %edx,-0x3c(%ebp)
  struct lwip_socket *sock;
  struct sockaddr_in sin;
  struct ip_addr naddr;

  sock = get_socket(s);
  800aa5:	e8 76 fe ff ff       	call   800920 <get_socket>
  800aaa:	89 c3                	mov    %eax,%ebx
  if (!sock)
  800aac:	85 c0                	test   %eax,%eax
  800aae:	0f 84 91 00 00 00    	je     800b45 <lwip_getaddrname+0xb3>
    return -1;

  memset(&sin, 0, sizeof(sin));
  800ab4:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  800abb:	00 
  800abc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  800ac3:	00 
  800ac4:	8d 45 d8             	lea    -0x28(%ebp),%eax
  800ac7:	89 04 24             	mov    %eax,(%esp)
  800aca:	e8 38 ee 00 00       	call   80f907 <memset>
  sin.sin_len = sizeof(sin);
  800acf:	c6 45 d8 10          	movb   $0x10,-0x28(%ebp)
  sin.sin_family = AF_INET;
  800ad3:	c6 45 d9 02          	movb   $0x2,-0x27(%ebp)

  /* get the IP address and port */
  netconn_getaddr(sock->conn, &naddr, &sin.sin_port, local);
  800ad7:	0f b6 45 c4          	movzbl -0x3c(%ebp),%eax
  800adb:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800adf:	8d 45 da             	lea    -0x26(%ebp),%eax
  800ae2:	89 44 24 08          	mov    %eax,0x8(%esp)
  800ae6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  800ae9:	89 44 24 04          	mov    %eax,0x4(%esp)
  800aed:	8b 03                	mov    (%ebx),%eax
  800aef:	89 04 24             	mov    %eax,(%esp)
  800af2:	e8 06 ac 00 00       	call   80b6fd <netconn_getaddr>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  //ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%d)\n", sin.sin_port));

  sin.sin_port = htons(sin.sin_port);
  800af7:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
  800afb:	89 04 24             	mov    %eax,(%esp)
  800afe:	e8 53 72 00 00       	call   807d56 <htons>
  800b03:	66 89 45 da          	mov    %ax,-0x26(%ebp)
  sin.sin_addr.s_addr = naddr.addr;
  800b07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  800b0a:	89 45 dc             	mov    %eax,-0x24(%ebp)

  if (*namelen > sizeof(sin))
  800b0d:	83 3e 10             	cmpl   $0x10,(%esi)
  800b10:	76 06                	jbe    800b18 <lwip_getaddrname+0x86>
    *namelen = sizeof(sin);
  800b12:	c7 06 10 00 00 00    	movl   $0x10,(%esi)

  SMEMCPY(name, &sin, *namelen);
  800b18:	8b 06                	mov    (%esi),%eax
  800b1a:	89 44 24 08          	mov    %eax,0x8(%esp)
  800b1e:	8d 45 d8             	lea    -0x28(%ebp),%eax
  800b21:	89 44 24 04          	mov    %eax,0x4(%esp)
  800b25:	89 3c 24             	mov    %edi,(%esp)
  800b28:	e8 8f ee 00 00       	call   80f9bc <memcpy>
  sock_set_errno(sock, 0);
  800b2d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  800b34:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  800b3b:	00 00 00 
  return 0;
  800b3e:	b8 00 00 00 00       	mov    $0x0,%eax
  800b43:	eb 05                	jmp    800b4a <lwip_getaddrname+0xb8>
  struct sockaddr_in sin;
  struct ip_addr naddr;

  sock = get_socket(s);
  if (!sock)
    return -1;
  800b45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    *namelen = sizeof(sin);

  SMEMCPY(name, &sin, *namelen);
  sock_set_errno(sock, 0);
  return 0;
}
  800b4a:	83 c4 4c             	add    $0x4c,%esp
  800b4d:	5b                   	pop    %ebx
  800b4e:	5e                   	pop    %esi
  800b4f:	5f                   	pop    %edi
  800b50:	5d                   	pop    %ebp
  800b51:	c3                   	ret    

00800b52 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  800b52:	55                   	push   %ebp
  800b53:	89 e5                	mov    %esp,%ebp
  800b55:	57                   	push   %edi
  800b56:	56                   	push   %esi
  800b57:	53                   	push   %ebx
  800b58:	83 ec 1c             	sub    $0x1c,%esp
  800b5b:	8b 7d 08             	mov    0x8(%ebp),%edi
  800b5e:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct lwip_select_cb *scb;

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  800b61:	85 ff                	test   %edi,%edi
  800b63:	0f 84 6a 01 00 00    	je     800cd3 <event_callback+0x181>
    s = conn->socket;
  800b69:	8b 5f 1c             	mov    0x1c(%edi),%ebx
    if (s < 0) {
  800b6c:	85 db                	test   %ebx,%ebx
  800b6e:	79 3d                	jns    800bad <event_callback+0x5b>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      sys_sem_wait(socksem);
  800b70:	a1 64 60 81 00       	mov    0x816064,%eax
  800b75:	89 04 24             	mov    %eax,(%esp)
  800b78:	e8 8b 4b 00 00       	call   805708 <sys_sem_wait>
      if (conn->socket < 0) {
  800b7d:	8b 47 1c             	mov    0x1c(%edi),%eax
  800b80:	85 c0                	test   %eax,%eax
  800b82:	79 1c                	jns    800ba0 <event_callback+0x4e>
        if (evt == NETCONN_EVT_RCVPLUS) {
  800b84:	85 f6                	test   %esi,%esi
  800b86:	75 06                	jne    800b8e <event_callback+0x3c>
          conn->socket--;
  800b88:	83 e8 01             	sub    $0x1,%eax
  800b8b:	89 47 1c             	mov    %eax,0x1c(%edi)
        }
        sys_sem_signal(socksem);
  800b8e:	a1 64 60 81 00       	mov    0x816064,%eax
  800b93:	89 04 24             	mov    %eax,(%esp)
  800b96:	e8 45 9d 00 00       	call   80a8e0 <sys_sem_signal>
        return;
  800b9b:	e9 33 01 00 00       	jmp    800cd3 <event_callback+0x181>
      }
      sys_sem_signal(socksem);
  800ba0:	a1 64 60 81 00       	mov    0x816064,%eax
  800ba5:	89 04 24             	mov    %eax,(%esp)
  800ba8:	e8 33 9d 00 00       	call   80a8e0 <sys_sem_signal>
    }

    sock = get_socket(s);
  800bad:	89 d8                	mov    %ebx,%eax
  800baf:	e8 6c fd ff ff       	call   800920 <get_socket>
  800bb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (!sock) {
  800bb7:	85 c0                	test   %eax,%eax
  800bb9:	0f 84 14 01 00 00    	je     800cd3 <event_callback+0x181>
    }
  } else {
    return;
  }

  sys_sem_wait(selectsem);
  800bbf:	a1 60 60 81 00       	mov    0x816060,%eax
  800bc4:	89 04 24             	mov    %eax,(%esp)
  800bc7:	e8 3c 4b 00 00       	call   805708 <sys_sem_wait>
  /* Set event as required */
  switch (evt) {
  800bcc:	83 fe 01             	cmp    $0x1,%esi
  800bcf:	74 1d                	je     800bee <event_callback+0x9c>
  800bd1:	83 fe 01             	cmp    $0x1,%esi
  800bd4:	72 0e                	jb     800be4 <event_callback+0x92>
  800bd6:	83 fe 02             	cmp    $0x2,%esi
  800bd9:	74 1d                	je     800bf8 <event_callback+0xa6>
  800bdb:	83 fe 03             	cmp    $0x3,%esi
  800bde:	66 90                	xchg   %ax,%ax
  800be0:	74 21                	je     800c03 <event_callback+0xb1>
  800be2:	eb 2a                	jmp    800c0e <event_callback+0xbc>
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
  800be4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800be7:	66 83 40 0a 01       	addw   $0x1,0xa(%eax)
      break;
  800bec:	eb 3c                	jmp    800c2a <event_callback+0xd8>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  800bee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800bf1:	66 83 68 0a 01       	subw   $0x1,0xa(%eax)
      break;
  800bf6:	eb 32                	jmp    800c2a <event_callback+0xd8>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  800bf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800bfb:	66 c7 40 0c 01 00    	movw   $0x1,0xc(%eax)
      break;
  800c01:	eb 27                	jmp    800c2a <event_callback+0xd8>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  800c03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800c06:	66 c7 40 0c 00 00    	movw   $0x0,0xc(%eax)
      break;
  800c0c:	eb 1c                	jmp    800c2a <event_callback+0xd8>
    default:
      LWIP_ASSERT("unknown event", 0);
  800c0e:	c7 44 24 08 62 20 81 	movl   $0x812062,0x8(%esp)
  800c15:	00 
  800c16:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
  800c1d:	00 
  800c1e:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  800c25:	e8 64 e4 00 00       	call   80f08e <_panic>
      break;
  }
  sys_sem_signal(selectsem);
  800c2a:	a1 60 60 81 00       	mov    0x816060,%eax
  800c2f:	89 04 24             	mov    %eax,(%esp)
  800c32:	e8 a9 9c 00 00       	call   80a8e0 <sys_sem_signal>
  while (1) {
    sys_sem_wait(selectsem);
    for (scb = select_cb_list; scb; scb = scb->next) {
      if (scb->sem_signalled == 0) {
        /* Test this select call for our socket */
        if (scb->readset && FD_ISSET(s, scb->readset))
  800c37:	8d 7b 07             	lea    0x7(%ebx),%edi
  800c3a:	85 db                	test   %ebx,%ebx
  800c3c:	0f 49 fb             	cmovns %ebx,%edi
  800c3f:	c1 ff 03             	sar    $0x3,%edi
  800c42:	89 d9                	mov    %ebx,%ecx
  800c44:	83 e1 07             	and    $0x7,%ecx
  800c47:	b8 01 00 00 00       	mov    $0x1,%eax
  800c4c:	d3 e0                	shl    %cl,%eax
  800c4e:	89 c6                	mov    %eax,%esi
     signalling for the select. This means we need to go through the list
     multiple times ONLY IF a select was actually waiting. We go through
     the list the number of waiting select calls + 1. This list is
     expected to be small. */
  while (1) {
    sys_sem_wait(selectsem);
  800c50:	a1 60 60 81 00       	mov    0x816060,%eax
  800c55:	89 04 24             	mov    %eax,(%esp)
  800c58:	e8 ab 4a 00 00       	call   805708 <sys_sem_wait>
    for (scb = select_cb_list; scb; scb = scb->next) {
  800c5d:	8b 1d 68 60 81 00    	mov    0x816068,%ebx
  800c63:	eb 3a                	jmp    800c9f <event_callback+0x14d>
      if (scb->sem_signalled == 0) {
  800c65:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
  800c69:	75 32                	jne    800c9d <event_callback+0x14b>
        /* Test this select call for our socket */
        if (scb->readset && FD_ISSET(s, scb->readset))
  800c6b:	8b 43 04             	mov    0x4(%ebx),%eax
  800c6e:	85 c0                	test   %eax,%eax
  800c70:	74 12                	je     800c84 <event_callback+0x132>
  800c72:	0f b6 04 38          	movzbl (%eax,%edi,1),%eax
  800c76:	85 f0                	test   %esi,%eax
  800c78:	74 0a                	je     800c84 <event_callback+0x132>
          if (sock->rcvevent)
  800c7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800c7d:	66 83 78 0a 00       	cmpw   $0x0,0xa(%eax)
  800c82:	75 21                	jne    800ca5 <event_callback+0x153>
            break;
        if (scb->writeset && FD_ISSET(s, scb->writeset))
  800c84:	8b 43 08             	mov    0x8(%ebx),%eax
  800c87:	85 c0                	test   %eax,%eax
  800c89:	74 12                	je     800c9d <event_callback+0x14b>
  800c8b:	0f b6 04 38          	movzbl (%eax,%edi,1),%eax
  800c8f:	85 f0                	test   %esi,%eax
  800c91:	74 0a                	je     800c9d <event_callback+0x14b>
          if (sock->sendevent)
  800c93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  800c96:	66 83 78 0c 00       	cmpw   $0x0,0xc(%eax)
  800c9b:	75 08                	jne    800ca5 <event_callback+0x153>
     multiple times ONLY IF a select was actually waiting. We go through
     the list the number of waiting select calls + 1. This list is
     expected to be small. */
  while (1) {
    sys_sem_wait(selectsem);
    for (scb = select_cb_list; scb; scb = scb->next) {
  800c9d:	8b 1b                	mov    (%ebx),%ebx
  800c9f:	85 db                	test   %ebx,%ebx
  800ca1:	75 c2                	jne    800c65 <event_callback+0x113>
  800ca3:	eb 21                	jmp    800cc6 <event_callback+0x174>
          if (sock->sendevent)
            break;
      }
    }
    if (scb) {
      scb->sem_signalled = 1;
  800ca5:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%ebx)
      sys_sem_signal(selectsem);
  800cac:	a1 60 60 81 00       	mov    0x816060,%eax
  800cb1:	89 04 24             	mov    %eax,(%esp)
  800cb4:	e8 27 9c 00 00       	call   80a8e0 <sys_sem_signal>
      sys_sem_signal(scb->sem);
  800cb9:	8b 43 14             	mov    0x14(%ebx),%eax
  800cbc:	89 04 24             	mov    %eax,(%esp)
  800cbf:	e8 1c 9c 00 00       	call   80a8e0 <sys_sem_signal>
    } else {
      sys_sem_signal(selectsem);
      break;
    }
  }
  800cc4:	eb 8a                	jmp    800c50 <event_callback+0xfe>
    if (scb) {
      scb->sem_signalled = 1;
      sys_sem_signal(selectsem);
      sys_sem_signal(scb->sem);
    } else {
      sys_sem_signal(selectsem);
  800cc6:	a1 60 60 81 00       	mov    0x816060,%eax
  800ccb:	89 04 24             	mov    %eax,(%esp)
  800cce:	e8 0d 9c 00 00       	call   80a8e0 <sys_sem_signal>
      break;
    }
  }
}
  800cd3:	83 c4 1c             	add    $0x1c,%esp
  800cd6:	5b                   	pop    %ebx
  800cd7:	5e                   	pop    %esi
  800cd8:	5f                   	pop    %edi
  800cd9:	5d                   	pop    %ebp
  800cda:	c3                   	ret    

00800cdb <alloc_socket>:
 * @param newconn the netconn for which to allocate a socket
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn)
{
  800cdb:	55                   	push   %ebp
  800cdc:	89 e5                	mov    %esp,%ebp
  800cde:	56                   	push   %esi
  800cdf:	53                   	push   %ebx
  800ce0:	83 ec 10             	sub    $0x10,%esp
  800ce3:	89 c6                	mov    %eax,%esi
  int i;

  /* Protect socket array */
  sys_sem_wait(socksem);
  800ce5:	a1 64 60 81 00       	mov    0x816064,%eax
  800cea:	89 04 24             	mov    %eax,(%esp)
  800ced:	e8 16 4a 00 00       	call   805708 <sys_sem_wait>
  800cf2:	ba 80 60 81 00       	mov    $0x816080,%edx

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  800cf7:	bb 00 00 00 00       	mov    $0x0,%ebx
    if (!sockets[i].conn) {
  800cfc:	83 3a 00             	cmpl   $0x0,(%edx)
  800cff:	75 5f                	jne    800d60 <alloc_socket+0x85>
      sockets[i].conn       = newconn;
  800d01:	8d 14 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edx
  800d08:	8d 0c 1a             	lea    (%edx,%ebx,1),%ecx
  800d0b:	c1 e1 02             	shl    $0x2,%ecx
  800d0e:	89 b1 80 60 81 00    	mov    %esi,0x816080(%ecx)
      sockets[i].lastdata   = NULL;
  800d14:	c7 81 84 60 81 00 00 	movl   $0x0,0x816084(%ecx)
  800d1b:	00 00 00 
      sockets[i].lastoffset = 0;
  800d1e:	66 c7 81 88 60 81 00 	movw   $0x0,0x816088(%ecx)
  800d25:	00 00 
      sockets[i].rcvevent   = 0;
  800d27:	66 c7 81 8a 60 81 00 	movw   $0x0,0x81608a(%ecx)
  800d2e:	00 00 
      sockets[i].sendevent  = 1; /* TCP send buf is empty */
  800d30:	66 c7 81 8c 60 81 00 	movw   $0x1,0x81608c(%ecx)
  800d37:	01 00 
      sockets[i].flags      = 0;
  800d39:	66 c7 81 8e 60 81 00 	movw   $0x0,0x81608e(%ecx)
  800d40:	00 00 
      sockets[i].err        = 0;
  800d42:	01 da                	add    %ebx,%edx
  800d44:	c7 04 95 90 60 81 00 	movl   $0x0,0x816090(,%edx,4)
  800d4b:	00 00 00 00 
      sys_sem_signal(socksem);
  800d4f:	a1 64 60 81 00       	mov    0x816064,%eax
  800d54:	89 04 24             	mov    %eax,(%esp)
  800d57:	e8 84 9b 00 00       	call   80a8e0 <sys_sem_signal>
      return i;
  800d5c:	89 d8                	mov    %ebx,%eax
  800d5e:	eb 1d                	jmp    800d7d <alloc_socket+0xa2>

  /* Protect socket array */
  sys_sem_wait(socksem);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  800d60:	83 c3 01             	add    $0x1,%ebx
  800d63:	83 c2 14             	add    $0x14,%edx
  800d66:	83 fb 20             	cmp    $0x20,%ebx
  800d69:	75 91                	jne    800cfc <alloc_socket+0x21>
      sockets[i].err        = 0;
      sys_sem_signal(socksem);
      return i;
    }
  }
  sys_sem_signal(socksem);
  800d6b:	a1 64 60 81 00       	mov    0x816064,%eax
  800d70:	89 04 24             	mov    %eax,(%esp)
  800d73:	e8 68 9b 00 00       	call   80a8e0 <sys_sem_signal>
  return -1;
  800d78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  800d7d:	83 c4 10             	add    $0x10,%esp
  800d80:	5b                   	pop    %ebx
  800d81:	5e                   	pop    %esi
  800d82:	5d                   	pop    %ebp
  800d83:	c3                   	ret    

00800d84 <lwip_getsockopt_internal>:
  return err ? -1 : 0;
}

static void
lwip_getsockopt_internal(void *arg)
{
  800d84:	55                   	push   %ebp
  800d85:	89 e5                	mov    %esp,%ebp
  800d87:	53                   	push   %ebx
  800d88:	83 ec 14             	sub    $0x14,%esp
  800d8b:	8b 45 08             	mov    0x8(%ebp),%eax
#endif /* LWIP_DEBUG */
  int level, optname;
  void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);
  800d8e:	85 c0                	test   %eax,%eax
  800d90:	75 1c                	jne    800dae <lwip_getsockopt_internal+0x2a>
  800d92:	c7 44 24 08 87 20 81 	movl   $0x812087,0x8(%esp)
  800d99:	00 
  800d9a:	c7 44 24 04 38 05 00 	movl   $0x538,0x4(%esp)
  800da1:	00 
  800da2:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  800da9:	e8 e0 e2 00 00       	call   80f08e <_panic>

  data = (struct lwip_setgetsockopt_data*)arg;
  sock = data->sock;
  800dae:	8b 08                	mov    (%eax),%ecx
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
  optname = data->optname;
  800db0:	8b 50 0c             	mov    0xc(%eax),%edx
  optval = data->optval;
  800db3:	8b 58 10             	mov    0x10(%eax),%ebx

  switch (level) {
  800db6:	8b 40 08             	mov    0x8(%eax),%eax
  800db9:	83 f8 06             	cmp    $0x6,%eax
  800dbc:	0f 84 0a 01 00 00    	je     800ecc <lwip_getsockopt_internal+0x148>
  800dc2:	3d ff 0f 00 00       	cmp    $0xfff,%eax
  800dc7:	74 0d                	je     800dd6 <lwip_getsockopt_internal+0x52>
  800dc9:	85 c0                	test   %eax,%eax
  800dcb:	0f 85 27 01 00 00    	jne    800ef8 <lwip_getsockopt_internal+0x174>
  800dd1:	e9 d2 00 00 00       	jmp    800ea8 <lwip_getsockopt_internal+0x124>
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  800dd6:	83 fa 20             	cmp    $0x20,%edx
  800dd9:	74 39                	je     800e14 <lwip_getsockopt_internal+0x90>
  800ddb:	83 fa 20             	cmp    $0x20,%edx
  800dde:	66 90                	xchg   %ax,%ax
  800de0:	7f 10                	jg     800df2 <lwip_getsockopt_internal+0x6e>
  800de2:	83 fa 02             	cmp    $0x2,%edx
  800de5:	74 2d                	je     800e14 <lwip_getsockopt_internal+0x90>
  800de7:	83 fa 08             	cmp    $0x8,%edx
  800dea:	0f 85 08 01 00 00    	jne    800ef8 <lwip_getsockopt_internal+0x174>
  800df0:	eb 22                	jmp    800e14 <lwip_getsockopt_internal+0x90>
  800df2:	81 fa 08 10 00 00    	cmp    $0x1008,%edx
  800df8:	74 2c                	je     800e26 <lwip_getsockopt_internal+0xa2>
  800dfa:	81 fa 0a 10 00 00    	cmp    $0x100a,%edx
  800e00:	0f 84 92 00 00 00    	je     800e98 <lwip_getsockopt_internal+0x114>
  800e06:	81 fa 07 10 00 00    	cmp    $0x1007,%edx
  800e0c:	0f 85 e6 00 00 00    	jne    800ef8 <lwip_getsockopt_internal+0x174>
  800e12:	eb 4f                	jmp    800e63 <lwip_getsockopt_internal+0xdf>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /*case SO_USELOOPBACK: UNIMPL */
      *(int*)optval = sock->conn->pcb.ip->so_options & optname;
  800e14:	8b 01                	mov    (%ecx),%eax
  800e16:	8b 40 08             	mov    0x8(%eax),%eax
  800e19:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  800e1d:	21 c2                	and    %eax,%edx
  800e1f:	89 13                	mov    %edx,(%ebx)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  800e21:	e9 d2 00 00 00       	jmp    800ef8 <lwip_getsockopt_internal+0x174>

    case SO_TYPE:
      switch (NETCONNTYPE_GROUP(sock->conn->type)) {
  800e26:	8b 01                	mov    (%ecx),%eax
  800e28:	8b 10                	mov    (%eax),%edx
  800e2a:	89 d0                	mov    %edx,%eax
  800e2c:	25 f0 00 00 00       	and    $0xf0,%eax
  800e31:	83 f8 20             	cmp    $0x20,%eax
  800e34:	74 22                	je     800e58 <lwip_getsockopt_internal+0xd4>
  800e36:	83 f8 40             	cmp    $0x40,%eax
  800e39:	74 12                	je     800e4d <lwip_getsockopt_internal+0xc9>
  800e3b:	83 f8 10             	cmp    $0x10,%eax
        break;
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
        break;
      default: /* unrecognized socket type */
        *(int*)optval = sock->conn->type;
  800e3e:	b8 01 00 00 00       	mov    $0x1,%eax
  800e43:	0f 44 d0             	cmove  %eax,%edx
  800e46:	89 13                	mov    %edx,(%ebx)
  800e48:	e9 ab 00 00 00       	jmp    800ef8 <lwip_getsockopt_internal+0x174>
      break;

    case SO_TYPE:
      switch (NETCONNTYPE_GROUP(sock->conn->type)) {
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  800e4d:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
        break;
  800e53:	e9 a0 00 00 00       	jmp    800ef8 <lwip_getsockopt_internal+0x174>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
        break;
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  800e58:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
        break;
  800e5e:	e9 95 00 00 00       	jmp    800ef8 <lwip_getsockopt_internal+0x174>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;

    case SO_ERROR:
      if (sock->err == 0) {
  800e63:	83 79 10 00          	cmpl   $0x0,0x10(%ecx)
  800e67:	75 21                	jne    800e8a <lwip_getsockopt_internal+0x106>
        sock_set_errno(sock, err_to_errno(sock->conn->err));
  800e69:	8b 01                	mov    (%ecx),%eax
  800e6b:	0f be 50 0c          	movsbl 0xc(%eax),%edx
  800e6f:	f7 da                	neg    %edx
  800e71:	b8 05 00 00 00       	mov    $0x5,%eax
  800e76:	83 fa 0e             	cmp    $0xe,%edx
  800e79:	77 07                	ja     800e82 <lwip_getsockopt_internal+0xfe>
  800e7b:	8b 04 95 40 21 81 00 	mov    0x812140(,%edx,4),%eax
  800e82:	89 41 10             	mov    %eax,0x10(%ecx)
  800e85:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
      } 
      *(int *)optval = sock->err;
  800e8a:	8b 41 10             	mov    0x10(%ecx),%eax
  800e8d:	89 03                	mov    %eax,(%ebx)
      sock->err = 0;
  800e8f:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  800e96:	eb 60                	jmp    800ef8 <lwip_getsockopt_internal+0x174>
      *(int *)optval = sock->conn->recv_bufsize;
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  800e98:	8b 01                	mov    (%ecx),%eax
  800e9a:	8b 40 08             	mov    0x8(%eax),%eax
  800e9d:	0f b6 40 10          	movzbl 0x10(%eax),%eax
  800ea1:	83 e0 01             	and    $0x1,%eax
  800ea4:	89 03                	mov    %eax,(%ebx)
      break;
  800ea6:	eb 50                	jmp    800ef8 <lwip_getsockopt_internal+0x174>
    }  /* switch (optname) */
    break;

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  800ea8:	83 fa 01             	cmp    $0x1,%edx
  800eab:	74 12                	je     800ebf <lwip_getsockopt_internal+0x13b>
  800ead:	83 fa 02             	cmp    $0x2,%edx
  800eb0:	75 46                	jne    800ef8 <lwip_getsockopt_internal+0x174>
    case IP_TTL:
      *(int*)optval = sock->conn->pcb.ip->ttl;
  800eb2:	8b 01                	mov    (%ecx),%eax
  800eb4:	8b 40 08             	mov    0x8(%eax),%eax
  800eb7:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
  800ebb:	89 03                	mov    %eax,(%ebx)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  800ebd:	eb 39                	jmp    800ef8 <lwip_getsockopt_internal+0x174>
    case IP_TOS:
      *(int*)optval = sock->conn->pcb.ip->tos;
  800ebf:	8b 01                	mov    (%ecx),%eax
  800ec1:	8b 40 08             	mov    0x8(%eax),%eax
  800ec4:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
  800ec8:	89 03                	mov    %eax,(%ebx)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  800eca:	eb 2c                	jmp    800ef8 <lwip_getsockopt_internal+0x174>
    break;

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
  800ecc:	83 fa 01             	cmp    $0x1,%edx
  800ecf:	74 07                	je     800ed8 <lwip_getsockopt_internal+0x154>
  800ed1:	83 fa 02             	cmp    $0x2,%edx
  800ed4:	74 15                	je     800eeb <lwip_getsockopt_internal+0x167>
  800ed6:	eb 20                	jmp    800ef8 <lwip_getsockopt_internal+0x174>
    case TCP_NODELAY:
      *(int*)optval = (sock->conn->pcb.tcp->flags & TF_NODELAY);
  800ed8:	8b 01                	mov    (%ecx),%eax
  800eda:	8b 40 08             	mov    0x8(%eax),%eax
  800edd:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  800ee1:	83 e0 40             	and    $0x40,%eax
  800ee4:	0f b6 c0             	movzbl %al,%eax
  800ee7:	89 03                	mov    %eax,(%ebx)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  800ee9:	eb 0d                	jmp    800ef8 <lwip_getsockopt_internal+0x174>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  800eeb:	8b 01                	mov    (%ecx),%eax
  800eed:	8b 40 08             	mov    0x8(%eax),%eax
  800ef0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
  800ef6:	89 03                	mov    %eax,(%ebx)
      break;
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  } /* switch (level) */
  sys_sem_signal(sock->conn->op_completed);
  800ef8:	8b 01                	mov    (%ecx),%eax
  800efa:	8b 40 10             	mov    0x10(%eax),%eax
  800efd:	89 04 24             	mov    %eax,(%esp)
  800f00:	e8 db 99 00 00       	call   80a8e0 <sys_sem_signal>
}
  800f05:	83 c4 14             	add    $0x14,%esp
  800f08:	5b                   	pop    %ebx
  800f09:	5d                   	pop    %ebp
  800f0a:	c3                   	ret    

00800f0b <lwip_setsockopt_internal>:
  return err ? -1 : 0;
}

static void
lwip_setsockopt_internal(void *arg)
{
  800f0b:	55                   	push   %ebp
  800f0c:	89 e5                	mov    %esp,%ebp
  800f0e:	53                   	push   %ebx
  800f0f:	83 ec 14             	sub    $0x14,%esp
  800f12:	8b 45 08             	mov    0x8(%ebp),%eax
#endif /* LWIP_DEBUG */
  int level, optname;
  const void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);
  800f15:	85 c0                	test   %eax,%eax
  800f17:	75 1c                	jne    800f35 <lwip_setsockopt_internal+0x2a>
  800f19:	c7 44 24 08 87 20 81 	movl   $0x812087,0x8(%esp)
  800f20:	00 
  800f21:	c7 44 24 04 ae 06 00 	movl   $0x6ae,0x4(%esp)
  800f28:	00 
  800f29:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  800f30:	e8 59 e1 00 00       	call   80f08e <_panic>

  data = (struct lwip_setgetsockopt_data*)arg;
  sock = data->sock;
  800f35:	8b 10                	mov    (%eax),%edx
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
  optname = data->optname;
  800f37:	8b 48 0c             	mov    0xc(%eax),%ecx
  optval = data->optval;
  800f3a:	8b 58 10             	mov    0x10(%eax),%ebx

  switch (level) {
  800f3d:	8b 40 08             	mov    0x8(%eax),%eax
  800f40:	83 f8 06             	cmp    $0x6,%eax
  800f43:	0f 84 87 00 00 00    	je     800fd0 <lwip_setsockopt_internal+0xc5>
  800f49:	3d ff 0f 00 00       	cmp    $0xfff,%eax
  800f4e:	74 0a                	je     800f5a <lwip_setsockopt_internal+0x4f>
  800f50:	85 c0                	test   %eax,%eax
  800f52:	0f 85 ad 00 00 00    	jne    801005 <lwip_setsockopt_internal+0xfa>
  800f58:	eb 54                	jmp    800fae <lwip_setsockopt_internal+0xa3>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  800f5a:	83 f9 20             	cmp    $0x20,%ecx
  800f5d:	8d 76 00             	lea    0x0(%esi),%esi
  800f60:	74 11                	je     800f73 <lwip_setsockopt_internal+0x68>
  800f62:	81 f9 0a 10 00 00    	cmp    $0x100a,%ecx
  800f68:	74 29                	je     800f93 <lwip_setsockopt_internal+0x88>
  800f6a:	83 f9 08             	cmp    $0x8,%ecx
  800f6d:	0f 85 92 00 00 00    	jne    801005 <lwip_setsockopt_internal+0xfa>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
  800f73:	83 3b 00             	cmpl   $0x0,(%ebx)
  800f76:	74 0e                	je     800f86 <lwip_setsockopt_internal+0x7b>
        sock->conn->pcb.ip->so_options |= optname;
  800f78:	8b 02                	mov    (%edx),%eax
  800f7a:	8b 40 08             	mov    0x8(%eax),%eax
  800f7d:	66 09 48 08          	or     %cx,0x8(%eax)
  800f81:	e9 7f 00 00 00       	jmp    801005 <lwip_setsockopt_internal+0xfa>
      } else {
        sock->conn->pcb.ip->so_options &= ~optname;
  800f86:	8b 02                	mov    (%edx),%eax
  800f88:	8b 40 08             	mov    0x8(%eax),%eax
  800f8b:	f7 d1                	not    %ecx
  800f8d:	66 21 48 08          	and    %cx,0x8(%eax)
  800f91:	eb 72                	jmp    801005 <lwip_setsockopt_internal+0xfa>
      sock->conn->recv_bufsize = ( *(int*)optval );
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
  800f93:	83 3b 00             	cmpl   $0x0,(%ebx)
  800f96:	74 0b                	je     800fa3 <lwip_setsockopt_internal+0x98>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  800f98:	8b 02                	mov    (%edx),%eax
  800f9a:	8b 40 08             	mov    0x8(%eax),%eax
  800f9d:	80 48 10 01          	orb    $0x1,0x10(%eax)
  800fa1:	eb 62                	jmp    801005 <lwip_setsockopt_internal+0xfa>
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  800fa3:	8b 02                	mov    (%edx),%eax
  800fa5:	8b 40 08             	mov    0x8(%eax),%eax
  800fa8:	80 60 10 fe          	andb   $0xfe,0x10(%eax)
  800fac:	eb 57                	jmp    801005 <lwip_setsockopt_internal+0xfa>
    }  /* switch (optname) */
    break;

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  800fae:	83 f9 01             	cmp    $0x1,%ecx
  800fb1:	74 11                	je     800fc4 <lwip_setsockopt_internal+0xb9>
  800fb3:	83 f9 02             	cmp    $0x2,%ecx
  800fb6:	75 4d                	jne    801005 <lwip_setsockopt_internal+0xfa>
    case IP_TTL:
      sock->conn->pcb.ip->ttl = (u8_t)(*(int*)optval);
  800fb8:	8b 02                	mov    (%edx),%eax
  800fba:	8b 40 08             	mov    0x8(%eax),%eax
  800fbd:	8b 0b                	mov    (%ebx),%ecx
  800fbf:	88 48 0b             	mov    %cl,0xb(%eax)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %u\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  800fc2:	eb 41                	jmp    801005 <lwip_setsockopt_internal+0xfa>
    case IP_TOS:
      sock->conn->pcb.ip->tos = (u8_t)(*(int*)optval);
  800fc4:	8b 02                	mov    (%edx),%eax
  800fc6:	8b 40 08             	mov    0x8(%eax),%eax
  800fc9:	8b 0b                	mov    (%ebx),%ecx
  800fcb:	88 48 0a             	mov    %cl,0xa(%eax)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %u\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  800fce:	eb 35                	jmp    801005 <lwip_setsockopt_internal+0xfa>
    break;

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
  800fd0:	83 f9 01             	cmp    $0x1,%ecx
  800fd3:	74 07                	je     800fdc <lwip_setsockopt_internal+0xd1>
  800fd5:	83 f9 02             	cmp    $0x2,%ecx
  800fd8:	74 1e                	je     800ff8 <lwip_setsockopt_internal+0xed>
  800fda:	eb 29                	jmp    801005 <lwip_setsockopt_internal+0xfa>
    case TCP_NODELAY:
      if (*(int*)optval) {
  800fdc:	83 3b 00             	cmpl   $0x0,(%ebx)
  800fdf:	90                   	nop
  800fe0:	74 0b                	je     800fed <lwip_setsockopt_internal+0xe2>
        sock->conn->pcb.tcp->flags |= TF_NODELAY;
  800fe2:	8b 02                	mov    (%edx),%eax
  800fe4:	8b 40 08             	mov    0x8(%eax),%eax
  800fe7:	80 48 20 40          	orb    $0x40,0x20(%eax)
  800feb:	eb 18                	jmp    801005 <lwip_setsockopt_internal+0xfa>
      } else {
        sock->conn->pcb.tcp->flags &= ~TF_NODELAY;
  800fed:	8b 02                	mov    (%edx),%eax
  800fef:	8b 40 08             	mov    0x8(%eax),%eax
  800ff2:	80 60 20 bf          	andb   $0xbf,0x20(%eax)
  800ff6:	eb 0d                	jmp    801005 <lwip_setsockopt_internal+0xfa>
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int*)optval);
  800ff8:	8b 02                	mov    (%edx),%eax
  800ffa:	8b 40 08             	mov    0x8(%eax),%eax
  800ffd:	8b 0b                	mov    (%ebx),%ecx
  800fff:	89 88 9c 00 00 00    	mov    %ecx,0x9c(%eax)
      break;
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  }  /* switch (level) */
  sys_sem_signal(sock->conn->op_completed);
  801005:	8b 02                	mov    (%edx),%eax
  801007:	8b 40 10             	mov    0x10(%eax),%eax
  80100a:	89 04 24             	mov    %eax,(%esp)
  80100d:	e8 ce 98 00 00       	call   80a8e0 <sys_sem_signal>
}
  801012:	83 c4 14             	add    $0x14,%esp
  801015:	5b                   	pop    %ebx
  801016:	5d                   	pop    %ebp
  801017:	c3                   	ret    

00801018 <lwip_socket_init>:
 * Initialize this module. This function has to be called before any other
 * functions in this module!
 */
void
lwip_socket_init(void)
{
  801018:	55                   	push   %ebp
  801019:	89 e5                	mov    %esp,%ebp
  80101b:	83 ec 18             	sub    $0x18,%esp
  socksem   = sys_sem_new(1);
  80101e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  801025:	e8 d4 95 00 00       	call   80a5fe <sys_sem_new>
  80102a:	a3 64 60 81 00       	mov    %eax,0x816064
  selectsem = sys_sem_new(1);
  80102f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  801036:	e8 c3 95 00 00       	call   80a5fe <sys_sem_new>
  80103b:	a3 60 60 81 00       	mov    %eax,0x816060
}
  801040:	c9                   	leave  
  801041:	c3                   	ret    

00801042 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  801042:	55                   	push   %ebp
  801043:	89 e5                	mov    %esp,%ebp
  801045:	57                   	push   %edi
  801046:	56                   	push   %esi
  801047:	53                   	push   %ebx
  801048:	83 ec 4c             	sub    $0x4c,%esp
  80104b:	8b 75 10             	mov    0x10(%ebp),%esi
  int newsock;
  struct sockaddr_in sin;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  80104e:	8b 45 08             	mov    0x8(%ebp),%eax
  801051:	e8 ca f8 ff ff       	call   800920 <get_socket>
  801056:	89 c7                	mov    %eax,%edi
  if (!sock)
  801058:	85 c0                	test   %eax,%eax
  80105a:	0f 84 9b 01 00 00    	je     8011fb <lwip_accept+0x1b9>
    return -1;

  newconn = netconn_accept(sock->conn);
  801060:	8b 00                	mov    (%eax),%eax
  801062:	89 04 24             	mov    %eax,(%esp)
  801065:	e8 6c a8 00 00       	call   80b8d6 <netconn_accept>
  80106a:	89 c3                	mov    %eax,%ebx
  if (!newconn) {
  80106c:	85 c0                	test   %eax,%eax
  80106e:	75 2b                	jne    80109b <lwip_accept+0x59>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) failed, err=%d\n", s, sock->conn->err));
    sock_set_errno(sock, err_to_errno(sock->conn->err));
  801070:	8b 07                	mov    (%edi),%eax
  801072:	0f be 50 0c          	movsbl 0xc(%eax),%edx
  801076:	f7 da                	neg    %edx
  801078:	b8 05 00 00 00       	mov    $0x5,%eax
  80107d:	83 fa 0e             	cmp    $0xe,%edx
  801080:	77 07                	ja     801089 <lwip_accept+0x47>
  801082:	8b 04 95 40 21 81 00 	mov    0x812140(,%edx,4),%eax
  801089:	89 47 10             	mov    %eax,0x10(%edi)
  80108c:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
    return -1;
  801091:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801096:	e9 65 01 00 00       	jmp    801200 <lwip_accept+0x1be>
  }

  /* get the IP address and port of the remote host */
  err = netconn_peer(newconn, &naddr, &port);
  80109b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  8010a2:	00 
  8010a3:	8d 45 e2             	lea    -0x1e(%ebp),%eax
  8010a6:	89 44 24 08          	mov    %eax,0x8(%esp)
  8010aa:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  8010ad:	89 44 24 04          	mov    %eax,0x4(%esp)
  8010b1:	89 1c 24             	mov    %ebx,(%esp)
  8010b4:	e8 44 a6 00 00       	call   80b6fd <netconn_getaddr>
  8010b9:	88 45 c4             	mov    %al,-0x3c(%ebp)
  if (err != ERR_OK) {
  8010bc:	84 c0                	test   %al,%al
  8010be:	74 31                	je     8010f1 <lwip_accept+0xaf>
    netconn_delete(newconn);
  8010c0:	89 1c 24             	mov    %ebx,(%esp)
  8010c3:	e8 cb a5 00 00       	call   80b693 <netconn_delete>
    sock_set_errno(sock, err_to_errno(err));
  8010c8:	0f be 55 c4          	movsbl -0x3c(%ebp),%edx
  8010cc:	f7 da                	neg    %edx
  8010ce:	b8 05 00 00 00       	mov    $0x5,%eax
  8010d3:	83 fa 0e             	cmp    $0xe,%edx
  8010d6:	77 07                	ja     8010df <lwip_accept+0x9d>
  8010d8:	8b 04 95 40 21 81 00 	mov    0x812140(,%edx,4),%eax
  8010df:	89 47 10             	mov    %eax,0x10(%edi)
  8010e2:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
    return -1;
  8010e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8010ec:	e9 0f 01 00 00       	jmp    801200 <lwip_accept+0x1be>
  }

  memset(&sin, 0, sizeof(sin));
  8010f1:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  8010f8:	00 
  8010f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801100:	00 
  801101:	8d 45 d0             	lea    -0x30(%ebp),%eax
  801104:	89 04 24             	mov    %eax,(%esp)
  801107:	e8 fb e7 00 00       	call   80f907 <memset>
  sin.sin_len = sizeof(sin);
  80110c:	c6 45 d0 10          	movb   $0x10,-0x30(%ebp)
  sin.sin_family = AF_INET;
  801110:	c6 45 d1 02          	movb   $0x2,-0x2f(%ebp)
  sin.sin_port = htons(port);
  801114:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
  801118:	89 04 24             	mov    %eax,(%esp)
  80111b:	e8 36 6c 00 00       	call   807d56 <htons>
  801120:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
  sin.sin_addr.s_addr = naddr.addr;
  801124:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  801127:	89 45 d4             	mov    %eax,-0x2c(%ebp)

  if (*addrlen > sizeof(sin))
  80112a:	83 3e 10             	cmpl   $0x10,(%esi)
  80112d:	76 06                	jbe    801135 <lwip_accept+0xf3>
    *addrlen = sizeof(sin);
  80112f:	c7 06 10 00 00 00    	movl   $0x10,(%esi)

  SMEMCPY(addr, &sin, *addrlen);
  801135:	8b 06                	mov    (%esi),%eax
  801137:	89 44 24 08          	mov    %eax,0x8(%esp)
  80113b:	8d 45 d0             	lea    -0x30(%ebp),%eax
  80113e:	89 44 24 04          	mov    %eax,0x4(%esp)
  801142:	8b 45 0c             	mov    0xc(%ebp),%eax
  801145:	89 04 24             	mov    %eax,(%esp)
  801148:	e8 6f e8 00 00       	call   80f9bc <memcpy>

  newsock = alloc_socket(newconn);
  80114d:	89 d8                	mov    %ebx,%eax
  80114f:	e8 87 fb ff ff       	call   800cdb <alloc_socket>
  801154:	89 c6                	mov    %eax,%esi
  if (newsock == -1) {
  801156:	83 f8 ff             	cmp    $0xffffffff,%eax
  801159:	75 23                	jne    80117e <lwip_accept+0x13c>
    netconn_delete(newconn);
  80115b:	89 1c 24             	mov    %ebx,(%esp)
  80115e:	e8 30 a5 00 00       	call   80b693 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  801163:	c7 47 10 17 00 00 00 	movl   $0x17,0x10(%edi)
  80116a:	c7 05 00 c2 b3 00 17 	movl   $0x17,0xb3c200
  801171:	00 00 00 
    return -1;
  801174:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801179:	e9 82 00 00 00       	jmp    801200 <lwip_accept+0x1be>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= 0) && (newsock < NUM_SOCKETS));
  80117e:	83 f8 1f             	cmp    $0x1f,%eax
  801181:	76 1c                	jbe    80119f <lwip_accept+0x15d>
  801183:	c7 44 24 08 93 20 81 	movl   $0x812093,0x8(%esp)
  80118a:	00 
  80118b:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
  801192:	00 
  801193:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  80119a:	e8 ef de 00 00       	call   80f08e <_panic>
  newconn->callback = event_callback;
  80119f:	c7 43 2c 52 0b 80 00 	movl   $0x800b52,0x2c(%ebx)
  nsock = &sockets[newsock];
  8011a6:	8d 04 80             	lea    (%eax,%eax,4),%eax
  8011a9:	8d 04 85 80 60 81 00 	lea    0x816080(,%eax,4),%eax
  8011b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  LWIP_ASSERT("invalid socket pointer", nsock != NULL);

  sys_sem_wait(socksem);
  8011b3:	a1 64 60 81 00       	mov    0x816064,%eax
  8011b8:	89 04 24             	mov    %eax,(%esp)
  8011bb:	e8 48 45 00 00       	call   805708 <sys_sem_wait>
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  nsock->rcvevent += -1 - newconn->socket;
  8011c0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  8011c3:	0f b7 41 0a          	movzwl 0xa(%ecx),%eax
  8011c7:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
  8011cb:	83 e8 01             	sub    $0x1,%eax
  8011ce:	66 2b 43 1c          	sub    0x1c(%ebx),%ax
  8011d2:	66 89 41 0a          	mov    %ax,0xa(%ecx)
  newconn->socket = newsock;
  8011d6:	89 73 1c             	mov    %esi,0x1c(%ebx)
  sys_sem_signal(socksem);
  8011d9:	a1 64 60 81 00       	mov    0x816064,%eax
  8011de:	89 04 24             	mov    %eax,(%esp)
  8011e1:	e8 fa 96 00 00       	call   80a8e0 <sys_sem_signal>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
  //ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u\n", port));

  sock_set_errno(sock, 0);
  8011e6:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
  8011ed:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  8011f4:	00 00 00 
  return newsock;
  8011f7:	89 f0                	mov    %esi,%eax
  8011f9:	eb 05                	jmp    801200 <lwip_accept+0x1be>
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  if (!sock)
    return -1;
  8011fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  //ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u\n", port));

  sock_set_errno(sock, 0);
  return newsock;
}
  801200:	83 c4 4c             	add    $0x4c,%esp
  801203:	5b                   	pop    %ebx
  801204:	5e                   	pop    %esi
  801205:	5f                   	pop    %edi
  801206:	5d                   	pop    %ebp
  801207:	c3                   	ret    

00801208 <lwip_bind>:

int
lwip_bind(int s, struct sockaddr *name, socklen_t namelen)
{
  801208:	55                   	push   %ebp
  801209:	89 e5                	mov    %esp,%ebp
  80120b:	56                   	push   %esi
  80120c:	53                   	push   %ebx
  80120d:	83 ec 20             	sub    $0x20,%esp
  801210:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct lwip_socket *sock;
  struct ip_addr local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  801213:	8b 45 08             	mov    0x8(%ebp),%eax
  801216:	e8 05 f7 ff ff       	call   800920 <get_socket>
  80121b:	89 c3                	mov    %eax,%ebx
  if (!sock)
  80121d:	85 c0                	test   %eax,%eax
  80121f:	0f 84 94 00 00 00    	je     8012b9 <lwip_bind+0xb1>
    return -1;

  LWIP_ERROR("lwip_bind: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
  801225:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
  801229:	75 06                	jne    801231 <lwip_bind+0x29>
  80122b:	80 7e 01 02          	cmpb   $0x2,0x1(%esi)
  80122f:	74 1c                	je     80124d <lwip_bind+0x45>
  801231:	c7 44 24 08 a8 20 81 	movl   $0x8120a8,0x8(%esp)
  801238:	00 
  801239:	c7 44 24 04 4a 01 00 	movl   $0x14a,0x4(%esp)
  801240:	00 
  801241:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  801248:	e8 41 de 00 00       	call   80f08e <_panic>
             ((((struct sockaddr_in *)name)->sin_family) == AF_INET)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  local_addr.addr = ((struct sockaddr_in *)name)->sin_addr.s_addr;
  80124d:	8b 46 04             	mov    0x4(%esi),%eax
  801250:	89 45 f4             	mov    %eax,-0xc(%ebp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
  //ip_addr_debug_print(SOCKETS_DEBUG, &local_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u)\n", ntohs(local_port)));

  err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
  801253:	0f b7 46 02          	movzwl 0x2(%esi),%eax
  801257:	89 04 24             	mov    %eax,(%esp)
  80125a:	e8 04 6b 00 00       	call   807d63 <ntohs>
  80125f:	0f b7 c0             	movzwl %ax,%eax
  801262:	89 44 24 08          	mov    %eax,0x8(%esp)
  801266:	8d 45 f4             	lea    -0xc(%ebp),%eax
  801269:	89 44 24 04          	mov    %eax,0x4(%esp)
  80126d:	8b 03                	mov    (%ebx),%eax
  80126f:	89 04 24             	mov    %eax,(%esp)
  801272:	e8 21 a5 00 00       	call   80b798 <netconn_bind>

  if (err != ERR_OK) {
  801277:	84 c0                	test   %al,%al
  801279:	74 26                	je     8012a1 <lwip_bind+0x99>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  80127b:	0f be c0             	movsbl %al,%eax
  80127e:	f7 d8                	neg    %eax
  801280:	ba 05 00 00 00       	mov    $0x5,%edx
  801285:	83 f8 0e             	cmp    $0xe,%eax
  801288:	77 07                	ja     801291 <lwip_bind+0x89>
  80128a:	8b 14 85 40 21 81 00 	mov    0x812140(,%eax,4),%edx
  801291:	89 53 10             	mov    %edx,0x10(%ebx)
  801294:	89 15 00 c2 b3 00    	mov    %edx,0xb3c200
    return -1;
  80129a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80129f:	eb 1d                	jmp    8012be <lwip_bind+0xb6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  8012a1:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  8012a8:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  8012af:	00 00 00 
  return 0;
  8012b2:	b8 00 00 00 00       	mov    $0x0,%eax
  8012b7:	eb 05                	jmp    8012be <lwip_bind+0xb6>
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  if (!sock)
    return -1;
  8012b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  return 0;
}
  8012be:	83 c4 20             	add    $0x20,%esp
  8012c1:	5b                   	pop    %ebx
  8012c2:	5e                   	pop    %esi
  8012c3:	5d                   	pop    %ebp
  8012c4:	c3                   	ret    

008012c5 <lwip_close>:

int
lwip_close(int s)
{
  8012c5:	55                   	push   %ebp
  8012c6:	89 e5                	mov    %esp,%ebp
  8012c8:	53                   	push   %ebx
  8012c9:	83 ec 14             	sub    $0x14,%esp
  struct lwip_socket *sock;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  8012cc:	8b 45 08             	mov    0x8(%ebp),%eax
  8012cf:	e8 4c f6 ff ff       	call   800920 <get_socket>
  8012d4:	89 c3                	mov    %eax,%ebx
  if (!sock) {
  8012d6:	85 c0                	test   %eax,%eax
  8012d8:	74 5e                	je     801338 <lwip_close+0x73>
    return -1;
  }

  netconn_delete(sock->conn);
  8012da:	8b 00                	mov    (%eax),%eax
  8012dc:	89 04 24             	mov    %eax,(%esp)
  8012df:	e8 af a3 00 00       	call   80b693 <netconn_delete>

  sys_sem_wait(socksem);
  8012e4:	a1 64 60 81 00       	mov    0x816064,%eax
  8012e9:	89 04 24             	mov    %eax,(%esp)
  8012ec:	e8 17 44 00 00       	call   805708 <sys_sem_wait>
  if (sock->lastdata) {
  8012f1:	8b 43 04             	mov    0x4(%ebx),%eax
  8012f4:	85 c0                	test   %eax,%eax
  8012f6:	74 08                	je     801300 <lwip_close+0x3b>
    netbuf_delete(sock->lastdata);
  8012f8:	89 04 24             	mov    %eax,(%esp)
  8012fb:	e8 2c 15 00 00       	call   80282c <netbuf_delete>
  }
  sock->lastdata   = NULL;
  801300:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  sock->lastoffset = 0;
  801307:	66 c7 43 08 00 00    	movw   $0x0,0x8(%ebx)
  sock->conn       = NULL;
  80130d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  sock_set_errno(sock, 0);
  801313:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  80131a:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  801321:	00 00 00 
  sys_sem_signal(socksem);
  801324:	a1 64 60 81 00       	mov    0x816064,%eax
  801329:	89 04 24             	mov    %eax,(%esp)
  80132c:	e8 af 95 00 00       	call   80a8e0 <sys_sem_signal>
  return 0;
  801331:	b8 00 00 00 00       	mov    $0x0,%eax
  801336:	eb 05                	jmp    80133d <lwip_close+0x78>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  if (!sock) {
    return -1;
  801338:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  sock->lastoffset = 0;
  sock->conn       = NULL;
  sock_set_errno(sock, 0);
  sys_sem_signal(socksem);
  return 0;
}
  80133d:	83 c4 14             	add    $0x14,%esp
  801340:	5b                   	pop    %ebx
  801341:	5d                   	pop    %ebp
  801342:	c3                   	ret    

00801343 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  801343:	55                   	push   %ebp
  801344:	89 e5                	mov    %esp,%ebp
  801346:	56                   	push   %esi
  801347:	53                   	push   %ebx
  801348:	83 ec 20             	sub    $0x20,%esp
  80134b:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct lwip_socket *sock;
  err_t err;

  sock = get_socket(s);
  80134e:	8b 45 08             	mov    0x8(%ebp),%eax
  801351:	e8 ca f5 ff ff       	call   800920 <get_socket>
  801356:	89 c3                	mov    %eax,%ebx
  if (!sock)
  801358:	85 c0                	test   %eax,%eax
  80135a:	0f 84 94 00 00 00    	je     8013f4 <lwip_connect+0xb1>
    return -1;

  LWIP_ERROR("lwip_connect: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
  801360:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
  801364:	75 06                	jne    80136c <lwip_connect+0x29>
  801366:	80 7e 01 02          	cmpb   $0x2,0x1(%esi)
  80136a:	74 1c                	je     801388 <lwip_connect+0x45>
  80136c:	c7 44 24 08 c3 20 81 	movl   $0x8120c3,0x8(%esp)
  801373:	00 
  801374:	c7 44 24 04 86 01 00 	movl   $0x186,0x4(%esp)
  80137b:	00 
  80137c:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  801383:	e8 06 dd 00 00       	call   80f08e <_panic>
    err = netconn_disconnect(sock->conn);
  } else {
    struct ip_addr remote_addr;
    u16_t remote_port;

    remote_addr.addr = ((struct sockaddr_in *)name)->sin_addr.s_addr;
  801388:	8b 46 04             	mov    0x4(%esi),%eax
  80138b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
    //ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u)\n", ntohs(remote_port)));

    err = netconn_connect(sock->conn, &remote_addr, ntohs(remote_port));
  80138e:	0f b7 46 02          	movzwl 0x2(%esi),%eax
  801392:	89 04 24             	mov    %eax,(%esp)
  801395:	e8 c9 69 00 00       	call   807d63 <ntohs>
  80139a:	0f b7 c0             	movzwl %ax,%eax
  80139d:	89 44 24 08          	mov    %eax,0x8(%esp)
  8013a1:	8d 45 f4             	lea    -0xc(%ebp),%eax
  8013a4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8013a8:	8b 03                	mov    (%ebx),%eax
  8013aa:	89 04 24             	mov    %eax,(%esp)
  8013ad:	e8 3c a4 00 00       	call   80b7ee <netconn_connect>
  }

  if (err != ERR_OK) {
  8013b2:	84 c0                	test   %al,%al
  8013b4:	74 26                	je     8013dc <lwip_connect+0x99>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  8013b6:	0f be c0             	movsbl %al,%eax
  8013b9:	f7 d8                	neg    %eax
  8013bb:	ba 05 00 00 00       	mov    $0x5,%edx
  8013c0:	83 f8 0e             	cmp    $0xe,%eax
  8013c3:	77 07                	ja     8013cc <lwip_connect+0x89>
  8013c5:	8b 14 85 40 21 81 00 	mov    0x812140(,%eax,4),%edx
  8013cc:	89 53 10             	mov    %edx,0x10(%ebx)
  8013cf:	89 15 00 c2 b3 00    	mov    %edx,0xb3c200
    return -1;
  8013d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8013da:	eb 1d                	jmp    8013f9 <lwip_connect+0xb6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  8013dc:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  8013e3:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  8013ea:	00 00 00 
  return 0;
  8013ed:	b8 00 00 00 00       	mov    $0x0,%eax
  8013f2:	eb 05                	jmp    8013f9 <lwip_connect+0xb6>
  struct lwip_socket *sock;
  err_t err;

  sock = get_socket(s);
  if (!sock)
    return -1;
  8013f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  return 0;
}
  8013f9:	83 c4 20             	add    $0x20,%esp
  8013fc:	5b                   	pop    %ebx
  8013fd:	5e                   	pop    %esi
  8013fe:	5d                   	pop    %ebp
  8013ff:	c3                   	ret    

00801400 <lwip_listen>:
 * @param backlog (ATTENTION: need TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  801400:	55                   	push   %ebp
  801401:	89 e5                	mov    %esp,%ebp
  801403:	56                   	push   %esi
  801404:	53                   	push   %ebx
  801405:	83 ec 10             	sub    $0x10,%esp
  801408:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct lwip_socket *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  80140b:	8b 45 08             	mov    0x8(%ebp),%eax
  80140e:	e8 0d f5 ff ff       	call   800920 <get_socket>
  801413:	89 c3                	mov    %eax,%ebx
  if (!sock)
  801415:	85 c0                	test   %eax,%eax
  801417:	74 68                	je     801481 <lwip_listen+0x81>
  801419:	85 f6                	test   %esi,%esi
  80141b:	b8 00 00 00 00       	mov    $0x0,%eax
  801420:	0f 48 f0             	cmovs  %eax,%esi
  801423:	81 fe ff 00 00 00    	cmp    $0xff,%esi
  801429:	b0 ff                	mov    $0xff,%al
  80142b:	0f 4e c6             	cmovle %esi,%eax
  }
  if (backlog > 0xff) {
    backlog = 0xff;
  }

  err = netconn_listen_with_backlog(sock->conn, backlog);
  80142e:	0f b6 f0             	movzbl %al,%esi
  801431:	89 74 24 04          	mov    %esi,0x4(%esp)
  801435:	8b 03                	mov    (%ebx),%eax
  801437:	89 04 24             	mov    %eax,(%esp)
  80143a:	e8 4e a4 00 00       	call   80b88d <netconn_listen_with_backlog>

  if (err != ERR_OK) {
  80143f:	84 c0                	test   %al,%al
  801441:	74 26                	je     801469 <lwip_listen+0x69>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  801443:	0f be c0             	movsbl %al,%eax
  801446:	f7 d8                	neg    %eax
  801448:	ba 05 00 00 00       	mov    $0x5,%edx
  80144d:	83 f8 0e             	cmp    $0xe,%eax
  801450:	77 07                	ja     801459 <lwip_listen+0x59>
  801452:	8b 14 85 40 21 81 00 	mov    0x812140(,%eax,4),%edx
  801459:	89 53 10             	mov    %edx,0x10(%ebx)
  80145c:	89 15 00 c2 b3 00    	mov    %edx,0xb3c200
    return -1;
  801462:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801467:	eb 1d                	jmp    801486 <lwip_listen+0x86>
  }

  sock_set_errno(sock, 0);
  801469:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  801470:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  801477:	00 00 00 
  return 0;
  80147a:	b8 00 00 00 00       	mov    $0x0,%eax
  80147f:	eb 05                	jmp    801486 <lwip_listen+0x86>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  if (!sock)
    return -1;
  801481:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    return -1;
  }

  sock_set_errno(sock, 0);
  return 0;
}
  801486:	83 c4 10             	add    $0x10,%esp
  801489:	5b                   	pop    %ebx
  80148a:	5e                   	pop    %esi
  80148b:	5d                   	pop    %ebp
  80148c:	c3                   	ret    

0080148d <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, int len, unsigned int flags,
        struct sockaddr *from, socklen_t *fromlen)
{
  80148d:	55                   	push   %ebp
  80148e:	89 e5                	mov    %esp,%ebp
  801490:	57                   	push   %edi
  801491:	56                   	push   %esi
  801492:	53                   	push   %ebx
  801493:	83 ec 5c             	sub    $0x5c,%esp
  801496:	8b 5d 14             	mov    0x14(%ebp),%ebx
  struct ip_addr     *addr;
  u16_t               port;
  u8_t                done = 0;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %d, 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  801499:	8b 45 08             	mov    0x8(%ebp),%eax
  80149c:	e8 7f f4 ff ff       	call   800920 <get_socket>
  8014a1:	89 c7                	mov    %eax,%edi
  if (!sock)
  8014a3:	85 c0                	test   %eax,%eax
  8014a5:	0f 84 14 02 00 00    	je     8016bf <lwip_recvfrom+0x232>
  8014ab:	66 c7 45 c4 00 00    	movw   $0x0,-0x3c(%ebp)
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
      buf = sock->lastdata;
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || (sock->flags & O_NONBLOCK)) && !sock->rcvevent) {
  8014b1:	89 d8                	mov    %ebx,%eax
  8014b3:	83 e0 08             	and    $0x8,%eax
  8014b6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    } else {
      done = 1;
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK)==0) {
  8014b9:	83 e3 01             	and    $0x1,%ebx
  8014bc:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    return -1;

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", (void*)sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  8014bf:	8b 77 04             	mov    0x4(%edi),%esi
  8014c2:	85 f6                	test   %esi,%esi
  8014c4:	75 7d                	jne    801543 <lwip_recvfrom+0xb6>
      buf = sock->lastdata;
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || (sock->flags & O_NONBLOCK)) && !sock->rcvevent) {
  8014c6:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
  8014ca:	75 06                	jne    8014d2 <lwip_recvfrom+0x45>
  8014cc:	f6 47 0f 08          	testb  $0x8,0xf(%edi)
  8014d0:	74 22                	je     8014f4 <lwip_recvfrom+0x67>
  8014d2:	66 83 7f 0a 00       	cmpw   $0x0,0xa(%edi)
  8014d7:	75 1b                	jne    8014f4 <lwip_recvfrom+0x67>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        sock_set_errno(sock, EWOULDBLOCK);
  8014d9:	c7 47 10 0b 00 00 00 	movl   $0xb,0x10(%edi)
  8014e0:	c7 05 00 c2 b3 00 0b 	movl   $0xb,0xb3c200
  8014e7:	00 00 00 
        return -1;
  8014ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8014ef:	e9 d0 01 00 00       	jmp    8016c4 <lwip_recvfrom+0x237>
      }

      /* No data was left from the previous operation, so we try to get
      some from the network. */
      sock->lastdata = buf = netconn_recv(sock->conn);
  8014f4:	8b 07                	mov    (%edi),%eax
  8014f6:	89 04 24             	mov    %eax,(%esp)
  8014f9:	e8 62 a4 00 00       	call   80b960 <netconn_recv>
  8014fe:	89 c6                	mov    %eax,%esi
  801500:	89 47 04             	mov    %eax,0x4(%edi)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv netbuf=%p\n", (void*)buf));

      if (!buf) {
  801503:	85 c0                	test   %eax,%eax
  801505:	75 3c                	jne    801543 <lwip_recvfrom+0xb6>
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL!\n", s));
        sock_set_errno(sock, (((sock->conn->pcb.ip!=NULL) && (sock->conn->err==ERR_OK))?ETIMEDOUT:err_to_errno(sock->conn->err)));
  801507:	8b 17                	mov    (%edi),%edx
  801509:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  80150d:	74 0b                	je     80151a <lwip_recvfrom+0x8d>
  80150f:	b8 6e 00 00 00       	mov    $0x6e,%eax
  801514:	80 7a 0c 00          	cmpb   $0x0,0xc(%edx)
  801518:	74 17                	je     801531 <lwip_recvfrom+0xa4>
  80151a:	0f be 52 0c          	movsbl 0xc(%edx),%edx
  80151e:	f7 da                	neg    %edx
  801520:	b8 05 00 00 00       	mov    $0x5,%eax
  801525:	83 fa 0e             	cmp    $0xe,%edx
  801528:	77 07                	ja     801531 <lwip_recvfrom+0xa4>
  80152a:	8b 04 95 40 21 81 00 	mov    0x812140(,%edx,4),%eax
  801531:	89 47 10             	mov    %eax,0x10(%edi)
  801534:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
        return 0;
  801539:	b8 00 00 00 00       	mov    $0x0,%eax
  80153e:	e9 81 01 00 00       	jmp    8016c4 <lwip_recvfrom+0x237>
      }
    }

    buflen = netbuf_len(buf);
  801543:	8b 06                	mov    (%esi),%eax
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%d len=%d off=%d sock->lastoffset=%d\n", buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  801545:	0f b7 57 08          	movzwl 0x8(%edi),%edx
  801549:	0f b7 58 08          	movzwl 0x8(%eax),%ebx
  80154d:	29 d3                	sub    %edx,%ebx

    if (len > buflen) {
  80154f:	0f b7 cb             	movzwl %bx,%ecx
  801552:	89 4d bc             	mov    %ecx,-0x44(%ebp)
      copylen = buflen;
    } else {
      copylen = len;
  801555:	39 4d 10             	cmp    %ecx,0x10(%ebp)
  801558:	66 0f 4e 5d 10       	cmovle 0x10(%ebp),%bx
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    netbuf_copy_partial(buf, (u8_t*)mem + off, copylen, sock->lastoffset);
  80155d:	0f b7 cb             	movzwl %bx,%ecx
  801560:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  801563:	0f b7 d2             	movzwl %dx,%edx
  801566:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80156a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80156e:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
  801572:	03 55 0c             	add    0xc(%ebp),%edx
  801575:	89 54 24 04          	mov    %edx,0x4(%esp)
  801579:	89 04 24             	mov    %eax,(%esp)
  80157c:	e8 fe 3f 00 00       	call   80557f <pbuf_copy_partial>

    off += copylen;
  801581:	66 01 5d c4          	add    %bx,-0x3c(%ebp)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
  801585:	8b 07                	mov    (%edi),%eax
  801587:	89 04 24             	mov    %eax,(%esp)
  80158a:	e8 41 a1 00 00       	call   80b6d0 <netconn_type>
      len -= copylen;
      if ( (len <= 0) || (buf->p->flags & PBUF_FLAG_PUSH) || !sock->rcvevent) {
        done = 1;
      }
    } else {
      done = 1;
  80158f:	c6 45 c7 01          	movb   $0x1,-0x39(%ebp)
    the supplied memory pointer mem */
    netbuf_copy_partial(buf, (u8_t*)mem + off, copylen, sock->lastoffset);

    off += copylen;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
  801593:	83 f8 10             	cmp    $0x10,%eax
  801596:	75 1d                	jne    8015b5 <lwip_recvfrom+0x128>
      len -= copylen;
  801598:	8b 45 c0             	mov    -0x40(%ebp),%eax
  80159b:	29 45 10             	sub    %eax,0x10(%ebp)
      if ( (len <= 0) || (buf->p->flags & PBUF_FLAG_PUSH) || !sock->rcvevent) {
  80159e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  8015a2:	7e 11                	jle    8015b5 <lwip_recvfrom+0x128>
  8015a4:	8b 06                	mov    (%esi),%eax
  8015a6:	f6 40 0d 01          	testb  $0x1,0xd(%eax)
  8015aa:	75 09                	jne    8015b5 <lwip_recvfrom+0x128>
  8015ac:	66 83 7f 0a 00       	cmpw   $0x0,0xa(%edi)
  8015b1:	0f 94 45 c7          	sete   -0x39(%ebp)
    } else {
      done = 1;
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK)==0) {
  8015b5:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  8015b9:	75 39                	jne    8015f4 <lwip_recvfrom+0x167>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((sock->conn->type == NETCONN_TCP) && (buflen - copylen > 0)) {
  8015bb:	8b 07                	mov    (%edi),%eax
  8015bd:	83 38 10             	cmpl   $0x10,(%eax)
  8015c0:	75 13                	jne    8015d5 <lwip_recvfrom+0x148>
  8015c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
  8015c5:	2b 45 c0             	sub    -0x40(%ebp),%eax
  8015c8:	85 c0                	test   %eax,%eax
  8015ca:	7e 09                	jle    8015d5 <lwip_recvfrom+0x148>
        sock->lastdata = buf;
  8015cc:	89 77 04             	mov    %esi,0x4(%edi)
        sock->lastoffset += copylen;
  8015cf:	66 01 5f 08          	add    %bx,0x8(%edi)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", (void*)buf));
  8015d3:	eb 15                	jmp    8015ea <lwip_recvfrom+0x15d>
      } else {
        sock->lastdata = NULL;
  8015d5:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)
        sock->lastoffset = 0;
  8015dc:	66 c7 47 08 00 00    	movw   $0x0,0x8(%edi)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", (void*)buf));
        netbuf_delete(buf);
  8015e2:	89 34 24             	mov    %esi,(%esp)
  8015e5:	e8 42 12 00 00       	call   80282c <netbuf_delete>
      }
    } else {
      done = 1;
    }
  } while (!done);
  8015ea:	80 7d c7 00          	cmpb   $0x0,-0x39(%ebp)
  8015ee:	0f 84 cb fe ff ff    	je     8014bf <lwip_recvfrom+0x32>

  /* Check to see from where the data was.*/
  if (from && fromlen) {
  8015f4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  8015f8:	0f 84 aa 00 00 00    	je     8016a8 <lwip_recvfrom+0x21b>
  8015fe:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  801602:	0f 84 a0 00 00 00    	je     8016a8 <lwip_recvfrom+0x21b>
    struct sockaddr_in sin;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
  801608:	8b 07                	mov    (%edi),%eax
  80160a:	89 04 24             	mov    %eax,(%esp)
  80160d:	e8 be a0 00 00       	call   80b6d0 <netconn_type>
  801612:	83 f8 10             	cmp    $0x10,%eax
  801615:	75 25                	jne    80163c <lwip_recvfrom+0x1af>
      addr = (struct ip_addr*)&(sin.sin_addr.s_addr);
      netconn_getaddr(sock->conn, addr, &port, 0);
  801617:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80161e:	00 
  80161f:	8d 45 e6             	lea    -0x1a(%ebp),%eax
  801622:	89 44 24 08          	mov    %eax,0x8(%esp)
  801626:	8d 45 d8             	lea    -0x28(%ebp),%eax
  801629:	89 44 24 04          	mov    %eax,0x4(%esp)
  80162d:	8b 07                	mov    (%edi),%eax
  80162f:	89 04 24             	mov    %eax,(%esp)
  801632:	e8 c6 a0 00 00       	call   80b6fd <netconn_getaddr>
  /* Check to see from where the data was.*/
  if (from && fromlen) {
    struct sockaddr_in sin;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      addr = (struct ip_addr*)&(sin.sin_addr.s_addr);
  801637:	8d 5d d8             	lea    -0x28(%ebp),%ebx
  80163a:	eb 0b                	jmp    801647 <lwip_recvfrom+0x1ba>
      netconn_getaddr(sock->conn, addr, &port, 0);
    } else {
      addr = netbuf_fromaddr(buf);
  80163c:	8b 5e 08             	mov    0x8(%esi),%ebx
      port = netbuf_fromport(buf);
  80163f:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  801643:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
    }

    memset(&sin, 0, sizeof(sin));
  801647:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  80164e:	00 
  80164f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801656:	00 
  801657:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  80165a:	89 04 24             	mov    %eax,(%esp)
  80165d:	e8 a5 e2 00 00       	call   80f907 <memset>
    sin.sin_len = sizeof(sin);
  801662:	c6 45 d4 10          	movb   $0x10,-0x2c(%ebp)
    sin.sin_family = AF_INET;
  801666:	c6 45 d5 02          	movb   $0x2,-0x2b(%ebp)
    sin.sin_port = htons(port);
  80166a:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  80166e:	89 04 24             	mov    %eax,(%esp)
  801671:	e8 e0 66 00 00       	call   807d56 <htons>
  801676:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
    sin.sin_addr.s_addr = addr->addr;
  80167a:	8b 03                	mov    (%ebx),%eax
  80167c:	89 45 d8             	mov    %eax,-0x28(%ebp)

    if (*fromlen > sizeof(sin))
  80167f:	8b 45 1c             	mov    0x1c(%ebp),%eax
  801682:	83 38 10             	cmpl   $0x10,(%eax)
  801685:	76 06                	jbe    80168d <lwip_recvfrom+0x200>
      *fromlen = sizeof(sin);
  801687:	c7 00 10 00 00 00    	movl   $0x10,(%eax)

    SMEMCPY(from, &sin, *fromlen);
  80168d:	8b 45 1c             	mov    0x1c(%ebp),%eax
  801690:	8b 00                	mov    (%eax),%eax
  801692:	89 44 24 08          	mov    %eax,0x8(%esp)
  801696:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  801699:	89 44 24 04          	mov    %eax,0x4(%esp)
  80169d:	8b 45 18             	mov    0x18(%ebp),%eax
  8016a0:	89 04 24             	mov    %eax,(%esp)
  8016a3:	e8 14 e3 00 00       	call   80f9bc <memcpy>
    //ip_addr_debug_print(SOCKETS_DEBUG, addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u len=%u\n", port, off));
#endif /*  SOCKETS_DEBUG */
  }

  sock_set_errno(sock, 0);
  8016a8:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
  8016af:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  8016b6:	00 00 00 
  return off;
  8016b9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
  8016bd:	eb 05                	jmp    8016c4 <lwip_recvfrom+0x237>
  u8_t                done = 0;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %d, 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  if (!sock)
    return -1;
  8016bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
#endif /*  SOCKETS_DEBUG */
  }

  sock_set_errno(sock, 0);
  return off;
}
  8016c4:	83 c4 5c             	add    $0x5c,%esp
  8016c7:	5b                   	pop    %ebx
  8016c8:	5e                   	pop    %esi
  8016c9:	5f                   	pop    %edi
  8016ca:	5d                   	pop    %ebp
  8016cb:	c3                   	ret    

008016cc <lwip_read>:

int
lwip_read(int s, void *mem, int len)
{
  8016cc:	55                   	push   %ebp
  8016cd:	89 e5                	mov    %esp,%ebp
  8016cf:	83 ec 28             	sub    $0x28,%esp
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  8016d2:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  8016d9:	00 
  8016da:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  8016e1:	00 
  8016e2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  8016e9:	00 
  8016ea:	8b 45 10             	mov    0x10(%ebp),%eax
  8016ed:	89 44 24 08          	mov    %eax,0x8(%esp)
  8016f1:	8b 45 0c             	mov    0xc(%ebp),%eax
  8016f4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8016f8:	8b 45 08             	mov    0x8(%ebp),%eax
  8016fb:	89 04 24             	mov    %eax,(%esp)
  8016fe:	e8 8a fd ff ff       	call   80148d <lwip_recvfrom>
}
  801703:	c9                   	leave  
  801704:	c3                   	ret    

00801705 <lwip_recv>:

int
lwip_recv(int s, void *mem, int len, unsigned int flags)
{
  801705:	55                   	push   %ebp
  801706:	89 e5                	mov    %esp,%ebp
  801708:	83 ec 28             	sub    $0x28,%esp
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  80170b:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  801712:	00 
  801713:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80171a:	00 
  80171b:	8b 45 14             	mov    0x14(%ebp),%eax
  80171e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  801722:	8b 45 10             	mov    0x10(%ebp),%eax
  801725:	89 44 24 08          	mov    %eax,0x8(%esp)
  801729:	8b 45 0c             	mov    0xc(%ebp),%eax
  80172c:	89 44 24 04          	mov    %eax,0x4(%esp)
  801730:	8b 45 08             	mov    0x8(%ebp),%eax
  801733:	89 04 24             	mov    %eax,(%esp)
  801736:	e8 52 fd ff ff       	call   80148d <lwip_recvfrom>
}
  80173b:	c9                   	leave  
  80173c:	c3                   	ret    

0080173d <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, int size, unsigned int flags,
       struct sockaddr *to, socklen_t tolen)
{
  80173d:	55                   	push   %ebp
  80173e:	89 e5                	mov    %esp,%ebp
  801740:	57                   	push   %edi
  801741:	56                   	push   %esi
  801742:	53                   	push   %ebx
  801743:	83 ec 3c             	sub    $0x3c,%esp
  801746:	8b 7d 10             	mov    0x10(%ebp),%edi
  801749:	8b 75 18             	mov    0x18(%ebp),%esi
#if !LWIP_TCPIP_CORE_LOCKING
  struct netbuf buf;
  u16_t remote_port;
#endif

  sock = get_socket(s);
  80174c:	8b 45 08             	mov    0x8(%ebp),%eax
  80174f:	e8 cc f1 ff ff       	call   800920 <get_socket>
  801754:	89 c3                	mov    %eax,%ebx
  if (!sock)
  801756:	85 c0                	test   %eax,%eax
  801758:	0f 84 32 01 00 00    	je     801890 <lwip_sendto+0x153>
    return -1;

  if (sock->conn->type==NETCONN_TCP) {
  80175e:	8b 00                	mov    (%eax),%eax
  801760:	83 38 10             	cmpl   $0x10,(%eax)
  801763:	75 22                	jne    801787 <lwip_sendto+0x4a>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  801765:	8b 45 14             	mov    0x14(%ebp),%eax
  801768:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80176c:	89 7c 24 08          	mov    %edi,0x8(%esp)
  801770:	8b 45 0c             	mov    0xc(%ebp),%eax
  801773:	89 44 24 04          	mov    %eax,0x4(%esp)
  801777:	8b 45 08             	mov    0x8(%ebp),%eax
  80177a:	89 04 24             	mov    %eax,(%esp)
  80177d:	e8 1b 01 00 00       	call   80189d <lwip_send>
  801782:	e9 0e 01 00 00       	jmp    801895 <lwip_sendto+0x158>
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* LWIP_TCP */
  }

  LWIP_ASSERT("lwip_sendto: size must fit in u16_t",
  801787:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
  80178d:	76 1c                	jbe    8017ab <lwip_sendto+0x6e>
  80178f:	c7 44 24 08 00 21 81 	movl   $0x812100,0x8(%esp)
  801796:	00 
  801797:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
  80179e:	00 
  80179f:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  8017a6:	e8 e3 d8 00 00       	call   80f08e <_panic>
              ((size >= 0) && (size <= 0xffff)));
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  8017ab:	85 f6                	test   %esi,%esi
  8017ad:	0f 95 c0             	setne  %al
  8017b0:	75 06                	jne    8017b8 <lwip_sendto+0x7b>
  8017b2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  8017b6:	74 28                	je     8017e0 <lwip_sendto+0xa3>
  8017b8:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  8017bc:	75 06                	jne    8017c4 <lwip_sendto+0x87>
  8017be:	80 7e 01 02          	cmpb   $0x2,0x1(%esi)
  8017c2:	74 1c                	je     8017e0 <lwip_sendto+0xa3>
  8017c4:	c7 44 24 08 e1 20 81 	movl   $0x8120e1,0x8(%esp)
  8017cb:	00 
  8017cc:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
  8017d3:	00 
  8017d4:	c7 04 24 70 20 81 00 	movl   $0x812070,(%esp)
  8017db:	e8 ae d8 00 00       	call   80f08e <_panic>
      pbuf_free(p);
    }
  }
#else
  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  8017e0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  8017e7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  if (to) {
  8017ee:	84 c0                	test   %al,%al
  8017f0:	74 1e                	je     801810 <lwip_sendto+0xd3>
    remote_addr.addr = ((struct sockaddr_in *)to)->sin_addr.s_addr;
  8017f2:	8b 46 04             	mov    0x4(%esi),%eax
  8017f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    remote_port      = ntohs(((struct sockaddr_in *)to)->sin_port);
  8017f8:	0f b7 46 02          	movzwl 0x2(%esi),%eax
  8017fc:	89 04 24             	mov    %eax,(%esp)
  8017ff:	e8 5f 65 00 00       	call   807d63 <ntohs>
    buf.addr         = &remote_addr;
  801804:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  801807:	89 55 dc             	mov    %edx,-0x24(%ebp)
    buf.port         = remote_port;
  80180a:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
  80180e:	eb 14                	jmp    801824 <lwip_sendto+0xe7>
  } else {
    remote_addr.addr = 0;
  801810:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    remote_port      = 0;
    buf.addr         = NULL;
  801817:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    buf.port         = 0;
  80181e:	66 c7 45 e0 00 00    	movw   $0x0,-0x20(%ebp)
              s, data, size, flags));
  //ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u\n", remote_port));
    
  /* make the buffer point to the data that should be sent */
  if ((err = netbuf_ref(&buf, data, size)) == ERR_OK) {
  801824:	0f b7 c7             	movzwl %di,%eax
  801827:	89 44 24 08          	mov    %eax,0x8(%esp)
  80182b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80182e:	89 44 24 04          	mov    %eax,0x4(%esp)
  801832:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  801835:	89 04 24             	mov    %eax,(%esp)
  801838:	e8 0c 11 00 00       	call   802949 <netbuf_ref>
  80183d:	0f be f0             	movsbl %al,%esi
  801840:	85 f6                	test   %esi,%esi
  801842:	75 14                	jne    801858 <lwip_sendto+0x11b>
    /* send the data */
    err = netconn_send(sock->conn, &buf);
  801844:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  801847:	89 44 24 04          	mov    %eax,0x4(%esp)
  80184b:	8b 03                	mov    (%ebx),%eax
  80184d:	89 04 24             	mov    %eax,(%esp)
  801850:	e8 b0 a2 00 00       	call   80bb05 <netconn_send>
  801855:	0f be f0             	movsbl %al,%esi
  }

  /* deallocated the buffer */
  if (buf.p != NULL) {
  801858:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  80185b:	85 c0                	test   %eax,%eax
  80185d:	74 08                	je     801867 <lwip_sendto+0x12a>
    pbuf_free(buf.p);
  80185f:	89 04 24             	mov    %eax,(%esp)
  801862:	e8 6d 35 00 00       	call   804dd4 <pbuf_free>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
  sock_set_errno(sock, err_to_errno(err));
  801867:	89 f2                	mov    %esi,%edx
  801869:	f7 da                	neg    %edx
  80186b:	b8 05 00 00 00       	mov    $0x5,%eax
  801870:	83 fa 0e             	cmp    $0xe,%edx
  801873:	77 07                	ja     80187c <lwip_sendto+0x13f>
  801875:	8b 04 95 40 21 81 00 	mov    0x812140(,%edx,4),%eax
  80187c:	89 43 10             	mov    %eax,0x10(%ebx)
  80187f:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
  return (err==ERR_OK?size:-1);
  801884:	85 f6                	test   %esi,%esi
  801886:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80188b:	0f 44 c7             	cmove  %edi,%eax
  80188e:	eb 05                	jmp    801895 <lwip_sendto+0x158>
  u16_t remote_port;
#endif

  sock = get_socket(s);
  if (!sock)
    return -1;
  801890:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    pbuf_free(buf.p);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
  sock_set_errno(sock, err_to_errno(err));
  return (err==ERR_OK?size:-1);
}
  801895:	83 c4 3c             	add    $0x3c,%esp
  801898:	5b                   	pop    %ebx
  801899:	5e                   	pop    %esi
  80189a:	5f                   	pop    %edi
  80189b:	5d                   	pop    %ebp
  80189c:	c3                   	ret    

0080189d <lwip_send>:
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
}

int
lwip_send(int s, const void *data, int size, unsigned int flags)
{
  80189d:	55                   	push   %ebp
  80189e:	89 e5                	mov    %esp,%ebp
  8018a0:	57                   	push   %edi
  8018a1:	56                   	push   %esi
  8018a2:	53                   	push   %ebx
  8018a3:	83 ec 2c             	sub    $0x2c,%esp
  8018a6:	8b 7d 08             	mov    0x8(%ebp),%edi
  8018a9:	8b 75 10             	mov    0x10(%ebp),%esi
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%d, flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  8018ac:	89 f8                	mov    %edi,%eax
  8018ae:	e8 6d f0 ff ff       	call   800920 <get_socket>
  8018b3:	89 c3                	mov    %eax,%ebx
  if (!sock)
  8018b5:	85 c0                	test   %eax,%eax
  8018b7:	0f 84 86 00 00 00    	je     801943 <lwip_send+0xa6>
    return -1;

  if (sock->conn->type!=NETCONN_TCP) {
  8018bd:	8b 00                	mov    (%eax),%eax
  8018bf:	83 38 10             	cmpl   $0x10,(%eax)
  8018c2:	74 2c                	je     8018f0 <lwip_send+0x53>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  8018c4:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  8018cb:	00 
  8018cc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  8018d3:	00 
  8018d4:	8b 45 14             	mov    0x14(%ebp),%eax
  8018d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8018db:	89 74 24 08          	mov    %esi,0x8(%esp)
  8018df:	8b 45 0c             	mov    0xc(%ebp),%eax
  8018e2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8018e6:	89 3c 24             	mov    %edi,(%esp)
  8018e9:	e8 4f fe ff ff       	call   80173d <lwip_sendto>
  8018ee:	eb 58                	jmp    801948 <lwip_send+0xab>
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  err = netconn_write(sock->conn, data, size, NETCONN_COPY | ((flags & MSG_MORE)?NETCONN_MORE:0));
  8018f0:	8b 55 14             	mov    0x14(%ebp),%edx
  8018f3:	83 e2 10             	and    $0x10,%edx
  8018f6:	83 fa 01             	cmp    $0x1,%edx
  8018f9:	19 d2                	sbb    %edx,%edx
  8018fb:	83 e2 fe             	and    $0xfffffffe,%edx
  8018fe:	83 c2 03             	add    $0x3,%edx
  801901:	89 54 24 0c          	mov    %edx,0xc(%esp)
  801905:	89 74 24 08          	mov    %esi,0x8(%esp)
  801909:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80190c:	89 7c 24 04          	mov    %edi,0x4(%esp)
  801910:	89 04 24             	mov    %eax,(%esp)
  801913:	e8 6e a2 00 00       	call   80bb86 <netconn_write>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d size=%d\n", s, err, size));
  sock_set_errno(sock, err_to_errno(err));
  801918:	0f be c8             	movsbl %al,%ecx
  80191b:	f7 d9                	neg    %ecx
  80191d:	ba 05 00 00 00       	mov    $0x5,%edx
  801922:	83 f9 0e             	cmp    $0xe,%ecx
  801925:	77 07                	ja     80192e <lwip_send+0x91>
  801927:	8b 14 8d 40 21 81 00 	mov    0x812140(,%ecx,4),%edx
  80192e:	89 53 10             	mov    %edx,0x10(%ebx)
  801931:	89 15 00 c2 b3 00    	mov    %edx,0xb3c200
  return (err==ERR_OK?size:-1);
  801937:	84 c0                	test   %al,%al
  801939:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80193e:	0f 44 c6             	cmove  %esi,%eax
  801941:	eb 05                	jmp    801948 <lwip_send+0xab>
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%d, flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  if (!sock)
    return -1;
  801943:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  err = netconn_write(sock->conn, data, size, NETCONN_COPY | ((flags & MSG_MORE)?NETCONN_MORE:0));

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d size=%d\n", s, err, size));
  sock_set_errno(sock, err_to_errno(err));
  return (err==ERR_OK?size:-1);
}
  801948:	83 c4 2c             	add    $0x2c,%esp
  80194b:	5b                   	pop    %ebx
  80194c:	5e                   	pop    %esi
  80194d:	5f                   	pop    %edi
  80194e:	5d                   	pop    %ebp
  80194f:	c3                   	ret    

00801950 <lwip_socket>:
  return (err==ERR_OK?size:-1);
}

int
lwip_socket(int domain, int type, int protocol)
{
  801950:	55                   	push   %ebp
  801951:	89 e5                	mov    %esp,%ebp
  801953:	53                   	push   %ebx
  801954:	83 ec 14             	sub    $0x14,%esp
  801957:	8b 45 0c             	mov    0xc(%ebp),%eax
  int i;

  LWIP_UNUSED_ARG(domain);

  /* create a netconn */
  switch (type) {
  80195a:	83 f8 02             	cmp    $0x2,%eax
  80195d:	74 2c                	je     80198b <lwip_socket+0x3b>
  80195f:	83 f8 03             	cmp    $0x3,%eax
  801962:	74 07                	je     80196b <lwip_socket+0x1b>
  801964:	83 f8 01             	cmp    $0x1,%eax
  801967:	75 6e                	jne    8019d7 <lwip_socket+0x87>
  801969:	eb 4c                	jmp    8019b7 <lwip_socket+0x67>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
  80196b:	c7 44 24 08 52 0b 80 	movl   $0x800b52,0x8(%esp)
  801972:	00 
  801973:	0f b6 45 10          	movzbl 0x10(%ebp),%eax
  801977:	89 44 24 04          	mov    %eax,0x4(%esp)
  80197b:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  801982:	e8 02 9c 00 00       	call   80b589 <netconn_new_with_proto_and_callback>
  801987:	89 c3                	mov    %eax,%ebx
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  801989:	eb 5d                	jmp    8019e8 <lwip_socket+0x98>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback( (protocol == IPPROTO_UDPLITE) ?
  80198b:	81 7d 10 88 00 00 00 	cmpl   $0x88,0x10(%ebp)
  801992:	0f 94 c0             	sete   %al
  801995:	0f b6 c0             	movzbl %al,%eax
  801998:	83 c0 20             	add    $0x20,%eax
  80199b:	c7 44 24 08 52 0b 80 	movl   $0x800b52,0x8(%esp)
  8019a2:	00 
  8019a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8019aa:	00 
  8019ab:	89 04 24             	mov    %eax,(%esp)
  8019ae:	e8 d6 9b 00 00       	call   80b589 <netconn_new_with_proto_and_callback>
  8019b3:	89 c3                	mov    %eax,%ebx
                 NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  8019b5:	eb 31                	jmp    8019e8 <lwip_socket+0x98>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
  8019b7:	c7 44 24 08 52 0b 80 	movl   $0x800b52,0x8(%esp)
  8019be:	00 
  8019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8019c6:	00 
  8019c7:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  8019ce:	e8 b6 9b 00 00       	call   80b589 <netconn_new_with_proto_and_callback>
  8019d3:	89 c3                	mov    %eax,%ebx
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  8019d5:	eb 11                	jmp    8019e8 <lwip_socket+0x98>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  8019d7:	c7 05 00 c2 b3 00 16 	movl   $0x16,0xb3c200
  8019de:	00 00 00 
    return -1;
  8019e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8019e6:	eb 47                	jmp    801a2f <lwip_socket+0xdf>
  }

  if (!conn) {
  8019e8:	85 db                	test   %ebx,%ebx
  8019ea:	75 11                	jne    8019fd <lwip_socket+0xad>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  8019ec:	c7 05 00 c2 b3 00 69 	movl   $0x69,0xb3c200
  8019f3:	00 00 00 
    return -1;
  8019f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8019fb:	eb 32                	jmp    801a2f <lwip_socket+0xdf>
  }

  i = alloc_socket(conn);
  8019fd:	89 d8                	mov    %ebx,%eax
  8019ff:	e8 d7 f2 ff ff       	call   800cdb <alloc_socket>

  if (i == -1) {
  801a04:	83 f8 ff             	cmp    $0xffffffff,%eax
  801a07:	75 19                	jne    801a22 <lwip_socket+0xd2>
    netconn_delete(conn);
  801a09:	89 1c 24             	mov    %ebx,(%esp)
  801a0c:	e8 82 9c 00 00       	call   80b693 <netconn_delete>
    set_errno(ENFILE);
  801a11:	c7 05 00 c2 b3 00 17 	movl   $0x17,0xb3c200
  801a18:	00 00 00 
    return -1;
  801a1b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801a20:	eb 0d                	jmp    801a2f <lwip_socket+0xdf>
  }
  conn->socket = i;
  801a22:	89 43 1c             	mov    %eax,0x1c(%ebx)
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  801a25:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  801a2c:	00 00 00 
  return i;
}
  801a2f:	83 c4 14             	add    $0x14,%esp
  801a32:	5b                   	pop    %ebx
  801a33:	5d                   	pop    %ebp
  801a34:	c3                   	ret    

00801a35 <lwip_write>:

int
lwip_write(int s, const void *data, int size)
{
  801a35:	55                   	push   %ebp
  801a36:	89 e5                	mov    %esp,%ebp
  801a38:	83 ec 18             	sub    $0x18,%esp
  return lwip_send(s, data, size, 0);
  801a3b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  801a42:	00 
  801a43:	8b 45 10             	mov    0x10(%ebp),%eax
  801a46:	89 44 24 08          	mov    %eax,0x8(%esp)
  801a4a:	8b 45 0c             	mov    0xc(%ebp),%eax
  801a4d:	89 44 24 04          	mov    %eax,0x4(%esp)
  801a51:	8b 45 08             	mov    0x8(%ebp),%eax
  801a54:	89 04 24             	mov    %eax,(%esp)
  801a57:	e8 41 fe ff ff       	call   80189d <lwip_send>
}
  801a5c:	c9                   	leave  
  801a5d:	c3                   	ret    

00801a5e <lwip_select>:
 * Processing exceptset is not yet implemented.
 */
int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
               struct timeval *timeout)
{
  801a5e:	55                   	push   %ebp
  801a5f:	89 e5                	mov    %esp,%ebp
  801a61:	57                   	push   %edi
  801a62:	56                   	push   %esi
  801a63:	53                   	push   %ebx
  801a64:	83 ec 4c             	sub    $0x4c,%esp
  801a67:	8b 75 0c             	mov    0xc(%ebp),%esi
  801a6a:	8b 5d 14             	mov    0x14(%ebp),%ebx

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%ld tvusec=%ld)\n",
                  maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                  timeout ? timeout->tv_sec : -1L, timeout ? timeout->tv_usec : -1L));

  select_cb.next = 0;
  801a6d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  select_cb.readset = readset;
  801a74:	89 75 c8             	mov    %esi,-0x38(%ebp)
  select_cb.writeset = writeset;
  801a77:	8b 45 10             	mov    0x10(%ebp),%eax
  801a7a:	89 45 cc             	mov    %eax,-0x34(%ebp)
  select_cb.exceptset = exceptset;
  801a7d:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  select_cb.sem_signalled = 0;
  801a80:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

  /* Protect ourselves searching through the list */
  sys_sem_wait(selectsem);
  801a87:	a1 60 60 81 00       	mov    0x816060,%eax
  801a8c:	89 04 24             	mov    %eax,(%esp)
  801a8f:	e8 74 3c 00 00       	call   805708 <sys_sem_wait>

  if (readset)
  801a94:	85 f6                	test   %esi,%esi
  801a96:	74 07                	je     801a9f <lwip_select+0x41>
    lreadset = *readset;
  801a98:	8b 06                	mov    (%esi),%eax
  801a9a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  801a9d:	eb 1b                	jmp    801aba <lwip_select+0x5c>
  else
    FD_ZERO(&lreadset);
  801a9f:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801aa6:	00 
  801aa7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801aae:	00 
  801aaf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  801ab2:	89 04 24             	mov    %eax,(%esp)
  801ab5:	e8 4d de 00 00       	call   80f907 <memset>
  if (writeset)
  801aba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  801abe:	74 0a                	je     801aca <lwip_select+0x6c>
    lwriteset = *writeset;
  801ac0:	8b 45 10             	mov    0x10(%ebp),%eax
  801ac3:	8b 00                	mov    (%eax),%eax
  801ac5:	89 45 e0             	mov    %eax,-0x20(%ebp)
  801ac8:	eb 1b                	jmp    801ae5 <lwip_select+0x87>
  else
    FD_ZERO(&lwriteset);
  801aca:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801ad1:	00 
  801ad2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801ad9:	00 
  801ada:	8d 45 e0             	lea    -0x20(%ebp),%eax
  801add:	89 04 24             	mov    %eax,(%esp)
  801ae0:	e8 22 de 00 00       	call   80f907 <memset>
  if (exceptset)
  801ae5:	85 db                	test   %ebx,%ebx
  801ae7:	74 07                	je     801af0 <lwip_select+0x92>
    lexceptset = *exceptset;
  801ae9:	8b 03                	mov    (%ebx),%eax
  801aeb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  801aee:	eb 1b                	jmp    801b0b <lwip_select+0xad>
  else
    FD_ZERO(&lexceptset);
  801af0:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801af7:	00 
  801af8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801aff:	00 
  801b00:	8d 45 dc             	lea    -0x24(%ebp),%eax
  801b03:	89 04 24             	mov    %eax,(%esp)
  801b06:	e8 fc dd 00 00       	call   80f907 <memset>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, &lreadset, &lwriteset, &lexceptset);
  801b0b:	8d 45 dc             	lea    -0x24(%ebp),%eax
  801b0e:	89 04 24             	mov    %eax,(%esp)
  801b11:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  801b14:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  801b17:	8b 45 08             	mov    0x8(%ebp),%eax
  801b1a:	e8 40 ee ff ff       	call   80095f <lwip_selscan>
  801b1f:	89 c7                	mov    %eax,%edi

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  801b21:	85 c0                	test   %eax,%eax
  801b23:	0f 85 fd 01 00 00    	jne    801d26 <lwip_select+0x2c8>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  801b29:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  801b2d:	0f 84 8f 02 00 00    	je     801dc2 <lwip_select+0x364>
  801b33:	8b 45 18             	mov    0x18(%ebp),%eax
  801b36:	83 38 00             	cmpl   $0x0,(%eax)
  801b39:	0f 85 25 02 00 00    	jne    801d64 <lwip_select+0x306>
  801b3f:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
  801b43:	0f 85 1b 02 00 00    	jne    801d64 <lwip_select+0x306>
      sys_sem_signal(selectsem);
  801b49:	a1 60 60 81 00       	mov    0x816060,%eax
  801b4e:	89 04 24             	mov    %eax,(%esp)
  801b51:	e8 8a 8d 00 00       	call   80a8e0 <sys_sem_signal>
      if (readset)
  801b56:	85 f6                	test   %esi,%esi
  801b58:	74 18                	je     801b72 <lwip_select+0x114>
        FD_ZERO(readset);
  801b5a:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801b61:	00 
  801b62:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801b69:	00 
  801b6a:	89 34 24             	mov    %esi,(%esp)
  801b6d:	e8 95 dd 00 00       	call   80f907 <memset>
      if (writeset)
  801b72:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  801b76:	74 1b                	je     801b93 <lwip_select+0x135>
        FD_ZERO(writeset);
  801b78:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801b7f:	00 
  801b80:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801b87:	00 
  801b88:	8b 45 10             	mov    0x10(%ebp),%eax
  801b8b:	89 04 24             	mov    %eax,(%esp)
  801b8e:	e8 74 dd 00 00       	call   80f907 <memset>
      if (exceptset)
  801b93:	85 db                	test   %ebx,%ebx
  801b95:	74 18                	je     801baf <lwip_select+0x151>
        FD_ZERO(exceptset);
  801b97:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801b9e:	00 
  801b9f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801ba6:	00 
  801ba7:	89 1c 24             	mov    %ebx,(%esp)
  801baa:	e8 58 dd 00 00       	call   80f907 <memset>
  
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
      set_errno(0);
  801baf:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  801bb6:	00 00 00 
  
      return 0;
  801bb9:	b8 00 00 00 00       	mov    $0x0,%eax
  801bbe:	e9 35 02 00 00       	jmp    801df8 <lwip_select+0x39a>
      msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
      if(msectimeout == 0)
        msectimeout = 1;
    }
    
    i = sys_sem_wait_timeout(select_cb.sem, msectimeout);
  801bc3:	89 7c 24 04          	mov    %edi,0x4(%esp)
  801bc7:	8b 45 d8             	mov    -0x28(%ebp),%eax
  801bca:	89 04 24             	mov    %eax,(%esp)
  801bcd:	e8 08 3d 00 00       	call   8058da <sys_sem_wait_timeout>
  801bd2:	89 c7                	mov    %eax,%edi
    
    /* Take us off the list */
    sys_sem_wait(selectsem);
  801bd4:	a1 60 60 81 00       	mov    0x816060,%eax
  801bd9:	89 04 24             	mov    %eax,(%esp)
  801bdc:	e8 27 3b 00 00       	call   805708 <sys_sem_wait>
    if (select_cb_list == &select_cb)
  801be1:	a1 68 60 81 00       	mov    0x816068,%eax
  801be6:	8d 55 c4             	lea    -0x3c(%ebp),%edx
      select_cb_list = select_cb.next;
    else
      for (p_selcb = select_cb_list; p_selcb; p_selcb = p_selcb->next) {
        if (p_selcb->next == &select_cb) {
  801be9:	89 d1                	mov    %edx,%ecx
    
    i = sys_sem_wait_timeout(select_cb.sem, msectimeout);
    
    /* Take us off the list */
    sys_sem_wait(selectsem);
    if (select_cb_list == &select_cb)
  801beb:	39 d0                	cmp    %edx,%eax
  801bed:	75 1b                	jne    801c0a <lwip_select+0x1ac>
      select_cb_list = select_cb.next;
  801bef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  801bf2:	a3 68 60 81 00       	mov    %eax,0x816068
  801bf7:	eb 15                	jmp    801c0e <lwip_select+0x1b0>
    else
      for (p_selcb = select_cb_list; p_selcb; p_selcb = p_selcb->next) {
        if (p_selcb->next == &select_cb) {
  801bf9:	8b 10                	mov    (%eax),%edx
  801bfb:	39 ca                	cmp    %ecx,%edx
  801bfd:	74 04                	je     801c03 <lwip_select+0x1a5>
    /* Take us off the list */
    sys_sem_wait(selectsem);
    if (select_cb_list == &select_cb)
      select_cb_list = select_cb.next;
    else
      for (p_selcb = select_cb_list; p_selcb; p_selcb = p_selcb->next) {
  801bff:	89 d0                	mov    %edx,%eax
  801c01:	eb 07                	jmp    801c0a <lwip_select+0x1ac>
        if (p_selcb->next == &select_cb) {
          p_selcb->next = select_cb.next;
  801c03:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  801c06:	89 10                	mov    %edx,(%eax)
          break;
  801c08:	eb 04                	jmp    801c0e <lwip_select+0x1b0>
    /* Take us off the list */
    sys_sem_wait(selectsem);
    if (select_cb_list == &select_cb)
      select_cb_list = select_cb.next;
    else
      for (p_selcb = select_cb_list; p_selcb; p_selcb = p_selcb->next) {
  801c0a:	85 c0                	test   %eax,%eax
  801c0c:	75 eb                	jne    801bf9 <lwip_select+0x19b>
          p_selcb->next = select_cb.next;
          break;
        }
      }
    
    sys_sem_signal(selectsem);
  801c0e:	a1 60 60 81 00       	mov    0x816060,%eax
  801c13:	89 04 24             	mov    %eax,(%esp)
  801c16:	e8 c5 8c 00 00       	call   80a8e0 <sys_sem_signal>
    
    sys_sem_free(select_cb.sem);
  801c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  801c1e:	89 04 24             	mov    %eax,(%esp)
  801c21:	e8 61 8a 00 00       	call   80a687 <sys_sem_free>
    if (i == 0)  {
  801c26:	85 ff                	test   %edi,%edi
  801c28:	75 6d                	jne    801c97 <lwip_select+0x239>
      /* Timeout */
      if (readset)
  801c2a:	85 f6                	test   %esi,%esi
  801c2c:	74 18                	je     801c46 <lwip_select+0x1e8>
        FD_ZERO(readset);
  801c2e:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801c35:	00 
  801c36:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801c3d:	00 
  801c3e:	89 34 24             	mov    %esi,(%esp)
  801c41:	e8 c1 dc 00 00       	call   80f907 <memset>
      if (writeset)
  801c46:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  801c4a:	74 1b                	je     801c67 <lwip_select+0x209>
        FD_ZERO(writeset);
  801c4c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801c53:	00 
  801c54:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801c5b:	00 
  801c5c:	8b 45 10             	mov    0x10(%ebp),%eax
  801c5f:	89 04 24             	mov    %eax,(%esp)
  801c62:	e8 a0 dc 00 00       	call   80f907 <memset>
      if (exceptset)
  801c67:	85 db                	test   %ebx,%ebx
  801c69:	74 18                	je     801c83 <lwip_select+0x225>
        FD_ZERO(exceptset);
  801c6b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801c72:	00 
  801c73:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801c7a:	00 
  801c7b:	89 1c 24             	mov    %ebx,(%esp)
  801c7e:	e8 84 dc 00 00       	call   80f907 <memset>
  
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
      set_errno(0);
  801c83:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  801c8a:	00 00 00 
  
      return 0;
  801c8d:	b8 00 00 00 00       	mov    $0x0,%eax
  801c92:	e9 61 01 00 00       	jmp    801df8 <lwip_select+0x39a>
    }
    
    if (readset)
  801c97:	85 f6                	test   %esi,%esi
  801c99:	74 07                	je     801ca2 <lwip_select+0x244>
      lreadset = *readset;
  801c9b:	8b 06                	mov    (%esi),%eax
  801c9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  801ca0:	eb 1b                	jmp    801cbd <lwip_select+0x25f>
    else
      FD_ZERO(&lreadset);
  801ca2:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801ca9:	00 
  801caa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801cb1:	00 
  801cb2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  801cb5:	89 04 24             	mov    %eax,(%esp)
  801cb8:	e8 4a dc 00 00       	call   80f907 <memset>
    if (writeset)
  801cbd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  801cc1:	74 0a                	je     801ccd <lwip_select+0x26f>
      lwriteset = *writeset;
  801cc3:	8b 45 10             	mov    0x10(%ebp),%eax
  801cc6:	8b 00                	mov    (%eax),%eax
  801cc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  801ccb:	eb 1b                	jmp    801ce8 <lwip_select+0x28a>
    else
      FD_ZERO(&lwriteset);
  801ccd:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801cd4:	00 
  801cd5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801cdc:	00 
  801cdd:	8d 45 e0             	lea    -0x20(%ebp),%eax
  801ce0:	89 04 24             	mov    %eax,(%esp)
  801ce3:	e8 1f dc 00 00       	call   80f907 <memset>
    if (exceptset)
  801ce8:	85 db                	test   %ebx,%ebx
  801cea:	74 07                	je     801cf3 <lwip_select+0x295>
      lexceptset = *exceptset;
  801cec:	8b 03                	mov    (%ebx),%eax
  801cee:	89 45 dc             	mov    %eax,-0x24(%ebp)
  801cf1:	eb 1b                	jmp    801d0e <lwip_select+0x2b0>
    else
      FD_ZERO(&lexceptset);
  801cf3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  801cfa:	00 
  801cfb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801d02:	00 
  801d03:	8d 45 dc             	lea    -0x24(%ebp),%eax
  801d06:	89 04 24             	mov    %eax,(%esp)
  801d09:	e8 f9 db 00 00       	call   80f907 <memset>
    
    /* See what's set */
    nready = lwip_selscan(maxfdp1, &lreadset, &lwriteset, &lexceptset);
  801d0e:	8d 45 dc             	lea    -0x24(%ebp),%eax
  801d11:	89 04 24             	mov    %eax,(%esp)
  801d14:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  801d17:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  801d1a:	8b 45 08             	mov    0x8(%ebp),%eax
  801d1d:	e8 3d ec ff ff       	call   80095f <lwip_selscan>
  801d22:	89 c7                	mov    %eax,%edi
  801d24:	eb 0d                	jmp    801d33 <lwip_select+0x2d5>
  } else
    sys_sem_signal(selectsem);
  801d26:	a1 60 60 81 00       	mov    0x816060,%eax
  801d2b:	89 04 24             	mov    %eax,(%esp)
  801d2e:	e8 ad 8b 00 00       	call   80a8e0 <sys_sem_signal>
  
  if (readset)
  801d33:	85 f6                	test   %esi,%esi
  801d35:	74 05                	je     801d3c <lwip_select+0x2de>
    *readset = lreadset;
  801d37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  801d3a:	89 06                	mov    %eax,(%esi)
  if (writeset)
  801d3c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  801d40:	74 08                	je     801d4a <lwip_select+0x2ec>
    *writeset = lwriteset;
  801d42:	8b 45 e0             	mov    -0x20(%ebp),%eax
  801d45:	8b 75 10             	mov    0x10(%ebp),%esi
  801d48:	89 06                	mov    %eax,(%esi)
  if (exceptset)
  801d4a:	85 db                	test   %ebx,%ebx
  801d4c:	74 05                	je     801d53 <lwip_select+0x2f5>
    *exceptset = lexceptset;
  801d4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  801d51:	89 03                	mov    %eax,(%ebx)
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  set_errno(0);
  801d53:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  801d5a:	00 00 00 
  
  return nready;
  801d5d:	89 f8                	mov    %edi,%eax
  801d5f:	e9 94 00 00 00       	jmp    801df8 <lwip_select+0x39a>
    /* add our semaphore to list */
    /* We don't actually need any dynamic memory. Our entry on the
     * list is only valid while we are in this function, so it's ok
     * to use local variables */
    
    select_cb.sem = sys_sem_new(0);
  801d64:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801d6b:	e8 8e 88 00 00       	call   80a5fe <sys_sem_new>
  801d70:	89 45 d8             	mov    %eax,-0x28(%ebp)
    /* Note that we are still protected */
    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  801d73:	a1 68 60 81 00       	mov    0x816068,%eax
  801d78:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    select_cb_list = &select_cb;
  801d7b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
  801d7e:	a3 68 60 81 00       	mov    %eax,0x816068
    
    /* Now we can safely unprotect */
    sys_sem_signal(selectsem);
  801d83:	a1 60 60 81 00       	mov    0x816060,%eax
  801d88:	89 04 24             	mov    %eax,(%esp)
  801d8b:	e8 50 8b 00 00       	call   80a8e0 <sys_sem_signal>
    /* Now just wait to be woken */
    if (timeout == 0)
      /* Wait forever */
      msectimeout = 0;
    else {
      msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  801d90:	8b 45 18             	mov    0x18(%ebp),%eax
  801d93:	69 38 e8 03 00 00    	imul   $0x3e8,(%eax),%edi
  801d99:	8b 48 04             	mov    0x4(%eax),%ecx
  801d9c:	81 c1 f4 01 00 00    	add    $0x1f4,%ecx
  801da2:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  801da7:	89 c8                	mov    %ecx,%eax
  801da9:	f7 ea                	imul   %edx
  801dab:	c1 fa 06             	sar    $0x6,%edx
  801dae:	c1 f9 1f             	sar    $0x1f,%ecx
  801db1:	29 ca                	sub    %ecx,%edx
      if(msectimeout == 0)
  801db3:	01 d7                	add    %edx,%edi
        msectimeout = 1;
  801db5:	b8 01 00 00 00       	mov    $0x1,%eax
  801dba:	0f 44 f8             	cmove  %eax,%edi
  801dbd:	e9 01 fe ff ff       	jmp    801bc3 <lwip_select+0x165>
    /* add our semaphore to list */
    /* We don't actually need any dynamic memory. Our entry on the
     * list is only valid while we are in this function, so it's ok
     * to use local variables */
    
    select_cb.sem = sys_sem_new(0);
  801dc2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801dc9:	e8 30 88 00 00       	call   80a5fe <sys_sem_new>
  801dce:	89 45 d8             	mov    %eax,-0x28(%ebp)
    /* Note that we are still protected */
    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  801dd1:	a1 68 60 81 00       	mov    0x816068,%eax
  801dd6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    select_cb_list = &select_cb;
  801dd9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
  801ddc:	a3 68 60 81 00       	mov    %eax,0x816068
    
    /* Now we can safely unprotect */
    sys_sem_signal(selectsem);
  801de1:	a1 60 60 81 00       	mov    0x816060,%eax
  801de6:	89 04 24             	mov    %eax,(%esp)
  801de9:	e8 f2 8a 00 00       	call   80a8e0 <sys_sem_signal>
    
    /* Now just wait to be woken */
    if (timeout == 0)
      /* Wait forever */
      msectimeout = 0;
  801dee:	bf 00 00 00 00       	mov    $0x0,%edi
  801df3:	e9 cb fd ff ff       	jmp    801bc3 <lwip_select+0x165>
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  set_errno(0);
  
  return nready;
}
  801df8:	83 c4 4c             	add    $0x4c,%esp
  801dfb:	5b                   	pop    %ebx
  801dfc:	5e                   	pop    %esi
  801dfd:	5f                   	pop    %edi
  801dfe:	5d                   	pop    %ebp
  801dff:	c3                   	ret    

00801e00 <lwip_shutdown>:
 * Unimplemented: Close one end of a full-duplex connection.
 * Currently, the full connection is closed.
 */
int
lwip_shutdown(int s, int how)
{
  801e00:	55                   	push   %ebp
  801e01:	89 e5                	mov    %esp,%ebp
  801e03:	83 ec 18             	sub    $0x18,%esp
  LWIP_UNUSED_ARG(how);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));
  return lwip_close(s); /* XXX temporary hack until proper implementation */
  801e06:	8b 45 08             	mov    0x8(%ebp),%eax
  801e09:	89 04 24             	mov    %eax,(%esp)
  801e0c:	e8 b4 f4 ff ff       	call   8012c5 <lwip_close>
}
  801e11:	c9                   	leave  
  801e12:	c3                   	ret    

00801e13 <lwip_getpeername>:
  return 0;
}

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  801e13:	55                   	push   %ebp
  801e14:	89 e5                	mov    %esp,%ebp
  801e16:	83 ec 18             	sub    $0x18,%esp
  return lwip_getaddrname(s, name, namelen, 0);
  801e19:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801e20:	8b 4d 10             	mov    0x10(%ebp),%ecx
  801e23:	8b 55 0c             	mov    0xc(%ebp),%edx
  801e26:	8b 45 08             	mov    0x8(%ebp),%eax
  801e29:	e8 64 ec ff ff       	call   800a92 <lwip_getaddrname>
}
  801e2e:	c9                   	leave  
  801e2f:	c3                   	ret    

00801e30 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  801e30:	55                   	push   %ebp
  801e31:	89 e5                	mov    %esp,%ebp
  801e33:	83 ec 18             	sub    $0x18,%esp
  return lwip_getaddrname(s, name, namelen, 1);
  801e36:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  801e3d:	8b 4d 10             	mov    0x10(%ebp),%ecx
  801e40:	8b 55 0c             	mov    0xc(%ebp),%edx
  801e43:	8b 45 08             	mov    0x8(%ebp),%eax
  801e46:	e8 47 ec ff ff       	call   800a92 <lwip_getaddrname>
}
  801e4b:	c9                   	leave  
  801e4c:	c3                   	ret    

00801e4d <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  801e4d:	55                   	push   %ebp
  801e4e:	89 e5                	mov    %esp,%ebp
  801e50:	57                   	push   %edi
  801e51:	56                   	push   %esi
  801e52:	53                   	push   %ebx
  801e53:	83 ec 3c             	sub    $0x3c,%esp
  801e56:	8b 75 0c             	mov    0xc(%ebp),%esi
  801e59:	8b 7d 18             	mov    0x18(%ebp),%edi
  err_t err = ERR_OK;
  struct lwip_socket *sock = get_socket(s);
  801e5c:	8b 45 08             	mov    0x8(%ebp),%eax
  801e5f:	e8 bc ea ff ff       	call   800920 <get_socket>
  801e64:	89 c3                	mov    %eax,%ebx
  struct lwip_setgetsockopt_data data;

  if (!sock)
  801e66:	85 c0                	test   %eax,%eax
  801e68:	0f 84 8a 01 00 00    	je     801ff8 <lwip_getsockopt+0x1ab>
    return -1;

  if ((NULL == optval) || (NULL == optlen)) {
  801e6e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  801e72:	74 04                	je     801e78 <lwip_getsockopt+0x2b>
  801e74:	85 ff                	test   %edi,%edi
  801e76:	75 1b                	jne    801e93 <lwip_getsockopt+0x46>
    sock_set_errno(sock, EFAULT);
  801e78:	c7 43 10 0e 00 00 00 	movl   $0xe,0x10(%ebx)
  801e7f:	c7 05 00 c2 b3 00 0e 	movl   $0xe,0xb3c200
  801e86:	00 00 00 
    return -1;
  801e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801e8e:	e9 a8 01 00 00       	jmp    80203b <lwip_getsockopt+0x1ee>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
  801e93:	83 fe 06             	cmp    $0x6,%esi
  801e96:	0f 84 a1 00 00 00    	je     801f3d <lwip_getsockopt+0xf0>
  801e9c:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
  801ea2:	74 0f                	je     801eb3 <lwip_getsockopt+0x66>
#endif /* LWIP_UDP && LWIP_UDPLITE*/
/* UNDEFINED LEVEL */
  default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
  801ea4:	b8 5c 00 00 00       	mov    $0x5c,%eax
    sock_set_errno(sock, EFAULT);
    return -1;
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
  801ea9:	85 f6                	test   %esi,%esi
  801eab:	0f 85 c9 00 00 00    	jne    801f7a <lwip_getsockopt+0x12d>
  801eb1:	eb 74                	jmp    801f27 <lwip_getsockopt+0xda>
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  801eb3:	83 7d 10 20          	cmpl   $0x20,0x10(%ebp)
  801eb7:	74 3c                	je     801ef5 <lwip_getsockopt+0xa8>
  801eb9:	83 7d 10 20          	cmpl   $0x20,0x10(%ebp)
  801ebd:	8d 76 00             	lea    0x0(%esi),%esi
  801ec0:	7f 12                	jg     801ed4 <lwip_getsockopt+0x87>
  801ec2:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
  801ec6:	74 2d                	je     801ef5 <lwip_getsockopt+0xa8>
  801ec8:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
  801ecc:	0f 85 95 00 00 00    	jne    801f67 <lwip_getsockopt+0x11a>
  801ed2:	eb 21                	jmp    801ef5 <lwip_getsockopt+0xa8>
  801ed4:	81 7d 10 07 10 00 00 	cmpl   $0x1007,0x10(%ebp)
  801edb:	0f 8c 86 00 00 00    	jl     801f67 <lwip_getsockopt+0x11a>
  801ee1:	81 7d 10 08 10 00 00 	cmpl   $0x1008,0x10(%ebp)
  801ee8:	7e 0b                	jle    801ef5 <lwip_getsockopt+0xa8>
  801eea:	81 7d 10 0a 10 00 00 	cmpl   $0x100a,0x10(%ebp)
  801ef1:	74 12                	je     801f05 <lwip_getsockopt+0xb8>
  801ef3:	eb 72                	jmp    801f67 <lwip_getsockopt+0x11a>
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
  801ef5:	83 3f 03             	cmpl   $0x3,(%edi)
  801ef8:	0f 86 01 01 00 00    	jbe    801fff <lwip_getsockopt+0x1b2>
  801efe:	66 90                	xchg   %ax,%ax
  801f00:	e9 8e 00 00 00       	jmp    801f93 <lwip_getsockopt+0x146>
}

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  err_t err = ERR_OK;
  801f05:	83 3f 04             	cmpl   $0x4,(%edi)
  801f08:	19 c0                	sbb    %eax,%eax
  801f0a:	83 e0 16             	and    $0x16,%eax
    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
  801f0d:	8b 13                	mov    (%ebx),%edx
  801f0f:	83 3a 20             	cmpl   $0x20,(%edx)
  801f12:	0f 85 f1 00 00 00    	jne    802009 <lwip_getsockopt+0x1bc>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
  801f18:	8b 52 08             	mov    0x8(%edx),%edx
    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
  801f1b:	f6 42 10 02          	testb  $0x2,0x10(%edx)
  801f1f:	0f 85 ee 00 00 00    	jne    802013 <lwip_getsockopt+0x1c6>
  801f25:	eb 53                	jmp    801f7a <lwip_getsockopt+0x12d>
    }  /* switch (optname) */
    break;
                     
/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  801f27:	8b 45 10             	mov    0x10(%ebp),%eax
  801f2a:	83 e8 01             	sub    $0x1,%eax
  801f2d:	83 f8 01             	cmp    $0x1,%eax
  801f30:	77 3c                	ja     801f6e <lwip_getsockopt+0x121>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
  801f32:	83 3f 03             	cmpl   $0x3,(%edi)
  801f35:	0f 86 e2 00 00 00    	jbe    80201d <lwip_getsockopt+0x1d0>
  801f3b:	eb 56                	jmp    801f93 <lwip_getsockopt+0x146>
    break;
         
#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (*optlen < sizeof(int)) {
  801f3d:	83 3f 03             	cmpl   $0x3,(%edi)
  801f40:	0f 86 e1 00 00 00    	jbe    802027 <lwip_getsockopt+0x1da>
      err = EINVAL;
      break;
    }
    
    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
  801f46:	8b 10                	mov    (%eax),%edx
      return 0;
  801f48:	b8 00 00 00 00       	mov    $0x0,%eax
      err = EINVAL;
      break;
    }
    
    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
  801f4d:	83 3a 10             	cmpl   $0x10,(%edx)
  801f50:	0f 85 e5 00 00 00    	jne    80203b <lwip_getsockopt+0x1ee>
      return 0;

    switch (optname) {
  801f56:	8b 45 10             	mov    0x10(%ebp),%eax
  801f59:	83 e8 01             	sub    $0x1,%eax
  801f5c:	83 f8 01             	cmp    $0x1,%eax
  801f5f:	0f 87 cc 00 00 00    	ja     802031 <lwip_getsockopt+0x1e4>
  801f65:	eb 0e                	jmp    801f75 <lwip_getsockopt+0x128>
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  801f67:	b8 5c 00 00 00       	mov    $0x5c,%eax
  801f6c:	eb 0c                	jmp    801f7a <lwip_getsockopt+0x12d>
#endif /* LWIP_IGMP */

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  801f6e:	b8 5c 00 00 00       	mov    $0x5c,%eax
  801f73:	eb 05                	jmp    801f7a <lwip_getsockopt+0x12d>
}

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  err_t err = ERR_OK;
  801f75:	b8 00 00 00 00       	mov    $0x0,%eax
                                  s, level, optname));
      err = ENOPROTOOPT;
  }  /* switch */

   
  if (err != ERR_OK) {
  801f7a:	84 c0                	test   %al,%al
  801f7c:	74 15                	je     801f93 <lwip_getsockopt+0x146>
    sock_set_errno(sock, err);
  801f7e:	0f be c0             	movsbl %al,%eax
  801f81:	89 43 10             	mov    %eax,0x10(%ebx)
  801f84:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
    return -1;
  801f89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801f8e:	e9 a8 00 00 00       	jmp    80203b <lwip_getsockopt+0x1ee>
  }

  /* Now do the actual option processing */
  data.sock = sock;
  801f93:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  data.level = level;
  801f96:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  data.optname = optname;
  801f99:	8b 45 10             	mov    0x10(%ebp),%eax
  801f9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  data.optval = optval;
  801f9f:	8b 45 14             	mov    0x14(%ebp),%eax
  801fa2:	89 45 dc             	mov    %eax,-0x24(%ebp)
  data.optlen = optlen;
  801fa5:	89 7d e0             	mov    %edi,-0x20(%ebp)
  data.err = err;
  801fa8:	c6 45 e4 00          	movb   $0x0,-0x1c(%ebp)
  tcpip_callback(lwip_getsockopt_internal, &data);
  801fac:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  801fb3:	00 
  801fb4:	8d 45 cc             	lea    -0x34(%ebp),%eax
  801fb7:	89 44 24 04          	mov    %eax,0x4(%esp)
  801fbb:	c7 04 24 84 0d 80 00 	movl   $0x800d84,(%esp)
  801fc2:	e8 4c 06 00 00       	call   802613 <tcpip_callback_with_block>
  sys_arch_sem_wait(sock->conn->op_completed, 0);
  801fc7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  801fce:	00 
  801fcf:	8b 03                	mov    (%ebx),%eax
  801fd1:	8b 40 10             	mov    0x10(%eax),%eax
  801fd4:	89 04 24             	mov    %eax,(%esp)
  801fd7:	e8 79 89 00 00       	call   80a955 <sys_arch_sem_wait>
  /* maybe lwip_getsockopt_internal has changed err */
  err = data.err;
  801fdc:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax

  sock_set_errno(sock, err);
  801fe0:	0f be d0             	movsbl %al,%edx
  801fe3:	89 53 10             	mov    %edx,0x10(%ebx)
  801fe6:	89 15 00 c2 b3 00    	mov    %edx,0xb3c200
  return err ? -1 : 0;
  801fec:	84 c0                	test   %al,%al
  801fee:	0f 95 c0             	setne  %al
  801ff1:	0f b6 c0             	movzbl %al,%eax
  801ff4:	f7 d8                	neg    %eax
  801ff6:	eb 43                	jmp    80203b <lwip_getsockopt+0x1ee>
  err_t err = ERR_OK;
  struct lwip_socket *sock = get_socket(s);
  struct lwip_setgetsockopt_data data;

  if (!sock)
    return -1;
  801ff8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  801ffd:	eb 3c                	jmp    80203b <lwip_getsockopt+0x1ee>
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
        err = EINVAL;
  801fff:	b8 16 00 00 00       	mov    $0x16,%eax
  802004:	e9 75 ff ff ff       	jmp    801f7e <lwip_getsockopt+0x131>
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
  802009:	b8 61 00 00 00       	mov    $0x61,%eax
  80200e:	e9 6b ff ff ff       	jmp    801f7e <lwip_getsockopt+0x131>
  802013:	b8 61 00 00 00       	mov    $0x61,%eax
  802018:	e9 61 ff ff ff       	jmp    801f7e <lwip_getsockopt+0x131>
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
  80201d:	b8 16 00 00 00       	mov    $0x16,%eax
  802022:	e9 57 ff ff ff       	jmp    801f7e <lwip_getsockopt+0x131>
         
#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (*optlen < sizeof(int)) {
      err = EINVAL;
  802027:	b8 16 00 00 00       	mov    $0x16,%eax
  80202c:	e9 4d ff ff ff       	jmp    801f7e <lwip_getsockopt+0x131>
      break;
       
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  802031:	b8 5c 00 00 00       	mov    $0x5c,%eax
  802036:	e9 43 ff ff ff       	jmp    801f7e <lwip_getsockopt+0x131>
  /* maybe lwip_getsockopt_internal has changed err */
  err = data.err;

  sock_set_errno(sock, err);
  return err ? -1 : 0;
}
  80203b:	83 c4 3c             	add    $0x3c,%esp
  80203e:	5b                   	pop    %ebx
  80203f:	5e                   	pop    %esi
  802040:	5f                   	pop    %edi
  802041:	5d                   	pop    %ebp
  802042:	c3                   	ret    

00802043 <lwip_setsockopt>:
  sys_sem_signal(sock->conn->op_completed);
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  802043:	55                   	push   %ebp
  802044:	89 e5                	mov    %esp,%ebp
  802046:	57                   	push   %edi
  802047:	56                   	push   %esi
  802048:	53                   	push   %ebx
  802049:	83 ec 3c             	sub    $0x3c,%esp
  80204c:	8b 75 0c             	mov    0xc(%ebp),%esi
  80204f:	8b 7d 14             	mov    0x14(%ebp),%edi
  struct lwip_socket *sock = get_socket(s);
  802052:	8b 45 08             	mov    0x8(%ebp),%eax
  802055:	e8 c6 e8 ff ff       	call   800920 <get_socket>
  80205a:	89 c3                	mov    %eax,%ebx
  int err = ERR_OK;
  struct lwip_setgetsockopt_data data;

  if (!sock)
  80205c:	85 c0                	test   %eax,%eax
  80205e:	0f 84 50 01 00 00    	je     8021b4 <lwip_setsockopt+0x171>
    return -1;

  if (NULL == optval) {
  802064:	85 ff                	test   %edi,%edi
  802066:	75 1b                	jne    802083 <lwip_setsockopt+0x40>
    sock_set_errno(sock, EFAULT);
  802068:	c7 40 10 0e 00 00 00 	movl   $0xe,0x10(%eax)
  80206f:	c7 05 00 c2 b3 00 0e 	movl   $0xe,0xb3c200
  802076:	00 00 00 
    return -1;
  802079:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80207e:	e9 74 01 00 00       	jmp    8021f7 <lwip_setsockopt+0x1b4>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
  802083:	83 fe 06             	cmp    $0x6,%esi
  802086:	74 7e                	je     802106 <lwip_setsockopt+0xc3>
  802088:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
  80208e:	74 0f                	je     80209f <lwip_setsockopt+0x5c>
#endif /* LWIP_UDP && LWIP_UDPLITE */
/* UNDEFINED LEVEL */
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  802090:	b8 5c 00 00 00       	mov    $0x5c,%eax
    sock_set_errno(sock, EFAULT);
    return -1;
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
  802095:	85 f6                	test   %esi,%esi
  802097:	0f 85 a0 00 00 00    	jne    80213d <lwip_setsockopt+0xfa>
  80209d:	eb 50                	jmp    8020ef <lwip_setsockopt+0xac>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  80209f:	83 7d 10 20          	cmpl   $0x20,0x10(%ebp)
  8020a3:	74 18                	je     8020bd <lwip_setsockopt+0x7a>
  8020a5:	81 7d 10 0a 10 00 00 	cmpl   $0x100a,0x10(%ebp)
  8020ac:	74 1e                	je     8020cc <lwip_setsockopt+0x89>
#endif /* LWIP_UDP */
      break;
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  8020ae:	b8 5c 00 00 00       	mov    $0x5c,%eax
  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  8020b3:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
  8020b7:	0f 85 80 00 00 00    	jne    80213d <lwip_setsockopt+0xfa>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
  8020bd:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
  8020c1:	0f 86 f4 00 00 00    	jbe    8021bb <lwip_setsockopt+0x178>
  8020c7:	e9 87 00 00 00       	jmp    802153 <lwip_setsockopt+0x110>

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  struct lwip_socket *sock = get_socket(s);
  int err = ERR_OK;
  8020cc:	83 7d 18 04          	cmpl   $0x4,0x18(%ebp)
  8020d0:	19 c0                	sbb    %eax,%eax
  8020d2:	83 e0 16             	and    $0x16,%eax
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
  8020d5:	8b 13                	mov    (%ebx),%edx
  8020d7:	83 3a 20             	cmpl   $0x20,(%edx)
  8020da:	0f 85 e5 00 00 00    	jne    8021c5 <lwip_setsockopt+0x182>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
  8020e0:	8b 52 08             	mov    0x8(%edx),%edx
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
  8020e3:	f6 42 10 02          	testb  $0x2,0x10(%edx)
  8020e7:	0f 85 e2 00 00 00    	jne    8021cf <lwip_setsockopt+0x18c>
  8020ed:	eb 4e                	jmp    80213d <lwip_setsockopt+0xfa>
    }  /* switch (optname) */
    break;

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  8020ef:	8b 45 10             	mov    0x10(%ebp),%eax
  8020f2:	83 e8 01             	sub    $0x1,%eax
  8020f5:	83 f8 01             	cmp    $0x1,%eax
  8020f8:	77 37                	ja     802131 <lwip_setsockopt+0xee>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
  8020fa:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
  8020fe:	0f 86 d5 00 00 00    	jbe    8021d9 <lwip_setsockopt+0x196>
  802104:	eb 4d                	jmp    802153 <lwip_setsockopt+0x110>
    break;

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (optlen < sizeof(int)) {
  802106:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
  80210a:	0f 86 d3 00 00 00    	jbe    8021e3 <lwip_setsockopt+0x1a0>
      err = EINVAL;
      break;
    }

    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
  802110:	8b 10                	mov    (%eax),%edx
      return 0;
  802112:	b8 00 00 00 00       	mov    $0x0,%eax
      err = EINVAL;
      break;
    }

    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
  802117:	83 3a 10             	cmpl   $0x10,(%edx)
  80211a:	0f 85 d7 00 00 00    	jne    8021f7 <lwip_setsockopt+0x1b4>
      return 0;

    switch (optname) {
  802120:	8b 45 10             	mov    0x10(%ebp),%eax
  802123:	83 e8 01             	sub    $0x1,%eax
  802126:	83 f8 01             	cmp    $0x1,%eax
  802129:	0f 87 be 00 00 00    	ja     8021ed <lwip_setsockopt+0x1aa>
  80212f:	eb 07                	jmp    802138 <lwip_setsockopt+0xf5>
      break;
#endif /* LWIP_IGMP */
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
  802131:	b8 5c 00 00 00       	mov    $0x5c,%eax
  802136:	eb 05                	jmp    80213d <lwip_setsockopt+0xfa>

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  struct lwip_socket *sock = get_socket(s);
  int err = ERR_OK;
  802138:	b8 00 00 00 00       	mov    $0x0,%eax
                s, level, optname));
    err = ENOPROTOOPT;
  }  /* switch (level) */


  if (err != ERR_OK) {
  80213d:	85 c0                	test   %eax,%eax
  80213f:	74 12                	je     802153 <lwip_setsockopt+0x110>
    sock_set_errno(sock, err);
  802141:	89 43 10             	mov    %eax,0x10(%ebx)
  802144:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
    return -1;
  802149:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80214e:	e9 a4 00 00 00       	jmp    8021f7 <lwip_setsockopt+0x1b4>
  }


  /* Now do the actual option processing */
  data.sock = sock;
  802153:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  data.level = level;
  802156:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  data.optname = optname;
  802159:	8b 45 10             	mov    0x10(%ebp),%eax
  80215c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  data.optval = (void*)optval;
  80215f:	89 7d dc             	mov    %edi,-0x24(%ebp)
  data.optlen = &optlen;
  802162:	8d 45 18             	lea    0x18(%ebp),%eax
  802165:	89 45 e0             	mov    %eax,-0x20(%ebp)
  data.err = err;
  802168:	c6 45 e4 00          	movb   $0x0,-0x1c(%ebp)
  tcpip_callback(lwip_setsockopt_internal, &data);
  80216c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  802173:	00 
  802174:	8d 45 cc             	lea    -0x34(%ebp),%eax
  802177:	89 44 24 04          	mov    %eax,0x4(%esp)
  80217b:	c7 04 24 0b 0f 80 00 	movl   $0x800f0b,(%esp)
  802182:	e8 8c 04 00 00       	call   802613 <tcpip_callback_with_block>
  sys_arch_sem_wait(sock->conn->op_completed, 0);
  802187:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80218e:	00 
  80218f:	8b 03                	mov    (%ebx),%eax
  802191:	8b 40 10             	mov    0x10(%eax),%eax
  802194:	89 04 24             	mov    %eax,(%esp)
  802197:	e8 b9 87 00 00       	call   80a955 <sys_arch_sem_wait>
  /* maybe lwip_setsockopt_internal has changed err */
  err = data.err;
  80219c:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax

  sock_set_errno(sock, err);
  8021a0:	89 43 10             	mov    %eax,0x10(%ebx)
  8021a3:	a3 00 c2 b3 00       	mov    %eax,0xb3c200
  return err ? -1 : 0;
  8021a8:	85 c0                	test   %eax,%eax
  8021aa:	0f 95 c0             	setne  %al
  8021ad:	0f b6 c0             	movzbl %al,%eax
  8021b0:	f7 d8                	neg    %eax
  8021b2:	eb 43                	jmp    8021f7 <lwip_setsockopt+0x1b4>
  struct lwip_socket *sock = get_socket(s);
  int err = ERR_OK;
  struct lwip_setgetsockopt_data data;

  if (!sock)
    return -1;
  8021b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8021b9:	eb 3c                	jmp    8021f7 <lwip_setsockopt+0x1b4>
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
        err = EINVAL;
  8021bb:	b8 16 00 00 00       	mov    $0x16,%eax
  8021c0:	e9 7c ff ff ff       	jmp    802141 <lwip_setsockopt+0xfe>
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
  8021c5:	b8 61 00 00 00       	mov    $0x61,%eax
  8021ca:	e9 72 ff ff ff       	jmp    802141 <lwip_setsockopt+0xfe>
  8021cf:	b8 61 00 00 00       	mov    $0x61,%eax
  8021d4:	e9 68 ff ff ff       	jmp    802141 <lwip_setsockopt+0xfe>
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
        err = EINVAL;
  8021d9:	b8 16 00 00 00       	mov    $0x16,%eax
  8021de:	e9 5e ff ff ff       	jmp    802141 <lwip_setsockopt+0xfe>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (optlen < sizeof(int)) {
      err = EINVAL;
  8021e3:	b8 16 00 00 00       	mov    $0x16,%eax
  8021e8:	e9 54 ff ff ff       	jmp    802141 <lwip_setsockopt+0xfe>
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  8021ed:	b8 5c 00 00 00       	mov    $0x5c,%eax
  8021f2:	e9 4a ff ff ff       	jmp    802141 <lwip_setsockopt+0xfe>
  /* maybe lwip_setsockopt_internal has changed err */
  err = data.err;

  sock_set_errno(sock, err);
  return err ? -1 : 0;
}
  8021f7:	83 c4 3c             	add    $0x3c,%esp
  8021fa:	5b                   	pop    %ebx
  8021fb:	5e                   	pop    %esi
  8021fc:	5f                   	pop    %edi
  8021fd:	5d                   	pop    %ebp
  8021fe:	c3                   	ret    

008021ff <lwip_ioctl>:
  sys_sem_signal(sock->conn->op_completed);
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
  8021ff:	55                   	push   %ebp
  802200:	89 e5                	mov    %esp,%ebp
  802202:	56                   	push   %esi
  802203:	53                   	push   %ebx
  802204:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  802207:	8b 75 10             	mov    0x10(%ebp),%esi
  struct lwip_socket *sock = get_socket(s);
  80220a:	8b 45 08             	mov    0x8(%ebp),%eax
  80220d:	e8 0e e7 ff ff       	call   800920 <get_socket>
  u16_t buflen = 0;

  if (!sock)
  802212:	85 c0                	test   %eax,%eax
  802214:	0f 84 af 00 00 00    	je     8022c9 <lwip_ioctl+0xca>
    return -1;

  switch (cmd) {
  80221a:	81 fb 7e 66 04 80    	cmp    $0x8004667e,%ebx
  802220:	74 60                	je     802282 <lwip_ioctl+0x83>
  802222:	81 fb 7f 66 04 40    	cmp    $0x4004667f,%ebx
  802228:	0f 85 83 00 00 00    	jne    8022b1 <lwip_ioctl+0xb2>
  case FIONREAD:
    if (!argp) {
  80222e:	85 f6                	test   %esi,%esi
  802230:	75 1b                	jne    80224d <lwip_ioctl+0x4e>
      sock_set_errno(sock, EINVAL);
  802232:	c7 40 10 16 00 00 00 	movl   $0x16,0x10(%eax)
  802239:	c7 05 00 c2 b3 00 16 	movl   $0x16,0xb3c200
  802240:	00 00 00 
      return -1;
  802243:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  802248:	e9 81 00 00 00       	jmp    8022ce <lwip_ioctl+0xcf>
    }

    SYS_ARCH_GET(sock->conn->recv_avail, *((u16_t*)argp));
  80224d:	8b 10                	mov    (%eax),%edx
  80224f:	0f b7 52 20          	movzwl 0x20(%edx),%edx
  802253:	66 89 16             	mov    %dx,(%esi)

    /* Check if there is data left from the last recv operation. /maq 041215 */
    if (sock->lastdata) {
  802256:	8b 48 04             	mov    0x4(%eax),%ecx
  802259:	85 c9                	test   %ecx,%ecx
  80225b:	74 0d                	je     80226a <lwip_ioctl+0x6b>
      buflen = netbuf_len(sock->lastdata);
  80225d:	8b 09                	mov    (%ecx),%ecx
      buflen -= sock->lastoffset;
  80225f:	66 03 51 08          	add    0x8(%ecx),%dx

      *((u16_t*)argp) += buflen;
  802263:	66 2b 50 08          	sub    0x8(%eax),%dx
  802267:	66 89 16             	mov    %dx,(%esi)
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %u\n", s, argp, *((u16_t*)argp)));
    sock_set_errno(sock, 0);
  80226a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
  802271:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  802278:	00 00 00 
    return 0;
  80227b:	b8 00 00 00 00       	mov    $0x0,%eax
  802280:	eb 4c                	jmp    8022ce <lwip_ioctl+0xcf>

  case FIONBIO:
    if (argp && *(u32_t*)argp)
  802282:	85 f6                	test   %esi,%esi
  802284:	74 0d                	je     802293 <lwip_ioctl+0x94>
  802286:	83 3e 00             	cmpl   $0x0,(%esi)
  802289:	74 08                	je     802293 <lwip_ioctl+0x94>
      sock->flags |= O_NONBLOCK;
  80228b:	66 81 48 0e 00 08    	orw    $0x800,0xe(%eax)
  802291:	eb 06                	jmp    802299 <lwip_ioctl+0x9a>
    else
      sock->flags &= ~O_NONBLOCK;
  802293:	66 81 60 0e ff f7    	andw   $0xf7ff,0xe(%eax)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, !!(sock->flags & O_NONBLOCK)));
    sock_set_errno(sock, 0);
  802299:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
  8022a0:	c7 05 00 c2 b3 00 00 	movl   $0x0,0xb3c200
  8022a7:	00 00 00 
    return 0;
  8022aa:	b8 00 00 00 00       	mov    $0x0,%eax
  8022af:	eb 1d                	jmp    8022ce <lwip_ioctl+0xcf>

  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  8022b1:	c7 40 10 26 00 00 00 	movl   $0x26,0x10(%eax)
  8022b8:	c7 05 00 c2 b3 00 26 	movl   $0x26,0xb3c200
  8022bf:	00 00 00 
    return -1;
  8022c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8022c7:	eb 05                	jmp    8022ce <lwip_ioctl+0xcf>
{
  struct lwip_socket *sock = get_socket(s);
  u16_t buflen = 0;

  if (!sock)
    return -1;
  8022c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
    return -1;
  } /* switch (cmd) */
}
  8022ce:	5b                   	pop    %ebx
  8022cf:	5e                   	pop    %esi
  8022d0:	5d                   	pop    %ebp
  8022d1:	c3                   	ret    
  8022d2:	66 90                	xchg   %ax,%ax
  8022d4:	66 90                	xchg   %ax,%ax
  8022d6:	66 90                	xchg   %ax,%ax
  8022d8:	66 90                	xchg   %ax,%ax
  8022da:	66 90                	xchg   %ax,%ax
  8022dc:	66 90                	xchg   %ax,%ax
  8022de:	66 90                	xchg   %ax,%ax

008022e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  8022e0:	55                   	push   %ebp
  8022e1:	89 e5                	mov    %esp,%ebp
  8022e3:	83 ec 18             	sub    $0x18,%esp
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  8022e6:	e8 15 44 00 00       	call   806700 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  8022eb:	83 3d 5c c2 b3 00 00 	cmpl   $0x0,0xb3c25c
  8022f2:	75 09                	jne    8022fd <tcpip_tcp_timer+0x1d>
  8022f4:	83 3d 70 c2 b3 00 00 	cmpl   $0x0,0xb3c270
  8022fb:	74 1e                	je     80231b <tcpip_tcp_timer+0x3b>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  8022fd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802304:	00 
  802305:	c7 44 24 04 e0 22 80 	movl   $0x8022e0,0x4(%esp)
  80230c:	00 
  80230d:	c7 04 24 fa 00 00 00 	movl   $0xfa,(%esp)
  802314:	e8 7c 34 00 00       	call   805795 <sys_timeout>
  802319:	eb 0a                	jmp    802325 <tcpip_tcp_timer+0x45>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  80231b:	c7 05 00 63 81 00 00 	movl   $0x0,0x816300
  802322:	00 00 00 
  }
}
  802325:	c9                   	leave  
  802326:	c3                   	ret    

00802327 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  802327:	55                   	push   %ebp
  802328:	89 e5                	mov    %esp,%ebp
  80232a:	53                   	push   %ebx
  80232b:	83 ec 24             	sub    $0x24,%esp
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  80232e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802335:	00 
  802336:	c7 44 24 04 16 25 80 	movl   $0x802516,0x4(%esp)
  80233d:	00 
  80233e:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
  802345:	e8 4b 34 00 00       	call   805795 <sys_timeout>
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  80234a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802351:	00 
  802352:	c7 44 24 04 ed 24 80 	movl   $0x8024ed,0x4(%esp)
  802359:	00 
  80235a:	c7 04 24 88 13 00 00 	movl   $0x1388,(%esp)
  802361:	e8 2f 34 00 00       	call   805795 <sys_timeout>
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  802366:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80236d:	00 
  80236e:	c7 44 24 04 c4 24 80 	movl   $0x8024c4,0x4(%esp)
  802375:	00 
  802376:	c7 04 24 60 ea 00 00 	movl   $0xea60,(%esp)
  80237d:	e8 13 34 00 00       	call   805795 <sys_timeout>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  802382:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802389:	00 
  80238a:	c7 44 24 04 9b 24 80 	movl   $0x80249b,0x4(%esp)
  802391:	00 
  802392:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
  802399:	e8 f7 33 00 00       	call   805795 <sys_timeout>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

  if (tcpip_init_done != NULL) {
  80239e:	a1 08 63 81 00       	mov    0x816308,%eax
  8023a3:	85 c0                	test   %eax,%eax
  8023a5:	75 05                	jne    8023ac <tcpip_thread+0x85>
    tcpip_init_done(tcpip_init_done_arg);
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    sys_mbox_fetch(mbox, (void *)&msg);
  8023a7:	8d 5d f4             	lea    -0xc(%ebp),%ebx
  8023aa:	eb 0d                	jmp    8023b9 <tcpip_thread+0x92>
#if LWIP_DNS
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

  if (tcpip_init_done != NULL) {
    tcpip_init_done(tcpip_init_done_arg);
  8023ac:	8b 15 04 63 81 00    	mov    0x816304,%edx
  8023b2:	89 14 24             	mov    %edx,(%esp)
  8023b5:	ff d0                	call   *%eax
  8023b7:	eb ee                	jmp    8023a7 <tcpip_thread+0x80>
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    sys_mbox_fetch(mbox, (void *)&msg);
  8023b9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8023bd:	a1 00 50 81 00       	mov    0x815000,%eax
  8023c2:	89 04 24             	mov    %eax,(%esp)
  8023c5:	e8 a3 32 00 00       	call   80566d <sys_mbox_fetch>
    switch (msg->type) {
  8023ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
  8023cd:	8b 02                	mov    (%edx),%eax
  8023cf:	83 f8 01             	cmp    $0x1,%eax
  8023d2:	74 1e                	je     8023f2 <tcpip_thread+0xcb>
  8023d4:	83 f8 01             	cmp    $0x1,%eax
  8023d7:	72 0c                	jb     8023e5 <tcpip_thread+0xbe>
  8023d9:	83 f8 02             	cmp    $0x2,%eax
  8023dc:	74 52                	je     802430 <tcpip_thread+0x109>
  8023de:	83 f8 03             	cmp    $0x3,%eax
  8023e1:	74 6e                	je     802451 <tcpip_thread+0x12a>
  8023e3:	eb d4                	jmp    8023b9 <tcpip_thread+0x92>
#if LWIP_NETCONN
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
  8023e5:	8b 42 08             	mov    0x8(%edx),%eax
  8023e8:	8d 50 04             	lea    0x4(%eax),%edx
  8023eb:	89 14 24             	mov    %edx,(%esp)
  8023ee:	ff 10                	call   *(%eax)
      break;
  8023f0:	eb c7                	jmp    8023b9 <tcpip_thread+0x92>
#endif /* LWIP_NETCONN */

    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ARP
      if (msg->msg.inp.netif->flags & NETIF_FLAG_ETHARP) {
  8023f2:	8b 42 0c             	mov    0xc(%edx),%eax
  8023f5:	f6 40 2e 20          	testb  $0x20,0x2e(%eax)
  8023f9:	74 11                	je     80240c <tcpip_thread+0xe5>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
  8023fb:	89 44 24 04          	mov    %eax,0x4(%esp)
  8023ff:	8b 42 08             	mov    0x8(%edx),%eax
  802402:	89 04 24             	mov    %eax,(%esp)
  802405:	e8 3b 80 00 00       	call   80a445 <ethernet_input>
  80240a:	eb 0f                	jmp    80241b <tcpip_thread+0xf4>
      } else
#endif /* LWIP_ARP */
      { ip_input(msg->msg.inp.p, msg->msg.inp.netif);
  80240c:	89 44 24 04          	mov    %eax,0x4(%esp)
  802410:	8b 42 08             	mov    0x8(%edx),%eax
  802413:	89 04 24             	mov    %eax,(%esp)
  802416:	e8 05 47 00 00       	call   806b20 <ip_input>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  80241b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80241e:	89 44 24 04          	mov    %eax,0x4(%esp)
  802422:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  802429:	e8 f4 25 00 00       	call   804a22 <memp_free>
      break;
  80242e:	eb 89                	jmp    8023b9 <tcpip_thread+0x92>
      break;
#endif /* LWIP_NETIF_API */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.f(msg->msg.cb.ctx);
  802430:	8b 42 0c             	mov    0xc(%edx),%eax
  802433:	89 04 24             	mov    %eax,(%esp)
  802436:	ff 52 08             	call   *0x8(%edx)
      memp_free(MEMP_TCPIP_MSG_API, msg);
  802439:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80243c:	89 44 24 04          	mov    %eax,0x4(%esp)
  802440:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  802447:	e8 d6 25 00 00       	call   804a22 <memp_free>
      break;
  80244c:	e9 68 ff ff ff       	jmp    8023b9 <tcpip_thread+0x92>

    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));

      if(msg->msg.tmo.msecs != 0xffffffff)
  802451:	8b 42 08             	mov    0x8(%edx),%eax
  802454:	83 f8 ff             	cmp    $0xffffffff,%eax
  802457:	74 18                	je     802471 <tcpip_thread+0x14a>
        sys_timeout (msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
  802459:	8b 4a 10             	mov    0x10(%edx),%ecx
  80245c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  802460:	8b 52 0c             	mov    0xc(%edx),%edx
  802463:	89 54 24 04          	mov    %edx,0x4(%esp)
  802467:	89 04 24             	mov    %eax,(%esp)
  80246a:	e8 26 33 00 00       	call   805795 <sys_timeout>
  80246f:	eb 12                	jmp    802483 <tcpip_thread+0x15c>
      else
        sys_untimeout (msg->msg.tmo.h, msg->msg.tmo.arg);
  802471:	8b 42 10             	mov    0x10(%edx),%eax
  802474:	89 44 24 04          	mov    %eax,0x4(%esp)
  802478:	8b 42 0c             	mov    0xc(%edx),%eax
  80247b:	89 04 24             	mov    %eax,(%esp)
  80247e:	e8 cb 33 00 00       	call   80584e <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  802483:	8b 45 f4             	mov    -0xc(%ebp),%eax
  802486:	89 44 24 04          	mov    %eax,0x4(%esp)
  80248a:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  802491:	e8 8c 25 00 00       	call   804a22 <memp_free>
      break;
  802496:	e9 1e ff ff ff       	jmp    8023b9 <tcpip_thread+0x92>

0080249b <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
  80249b:	55                   	push   %ebp
  80249c:	89 e5                	mov    %esp,%ebp
  80249e:	83 ec 18             	sub    $0x18,%esp
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  8024a1:	e8 51 1d 00 00       	call   8041f7 <dhcp_fine_tmr>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  8024a6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8024ad:	00 
  8024ae:	c7 44 24 04 9b 24 80 	movl   $0x80249b,0x4(%esp)
  8024b5:	00 
  8024b6:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
  8024bd:	e8 d3 32 00 00       	call   805795 <sys_timeout>
}
  8024c2:	c9                   	leave  
  8024c3:	c3                   	ret    

008024c4 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
  8024c4:	55                   	push   %ebp
  8024c5:	89 e5                	mov    %esp,%ebp
  8024c7:	83 ec 18             	sub    $0x18,%esp
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  8024ca:	e8 3f 1b 00 00       	call   80400e <dhcp_coarse_tmr>
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  8024cf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8024d6:	00 
  8024d7:	c7 44 24 04 c4 24 80 	movl   $0x8024c4,0x4(%esp)
  8024de:	00 
  8024df:	c7 04 24 60 ea 00 00 	movl   $0xea60,(%esp)
  8024e6:	e8 aa 32 00 00       	call   805795 <sys_timeout>
}
  8024eb:	c9                   	leave  
  8024ec:	c3                   	ret    

008024ed <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
  8024ed:	55                   	push   %ebp
  8024ee:	89 e5                	mov    %esp,%ebp
  8024f0:	83 ec 18             	sub    $0x18,%esp
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  8024f3:	e8 c8 77 00 00       	call   809cc0 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  8024f8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8024ff:	00 
  802500:	c7 44 24 04 ed 24 80 	movl   $0x8024ed,0x4(%esp)
  802507:	00 
  802508:	c7 04 24 88 13 00 00 	movl   $0x1388,(%esp)
  80250f:	e8 81 32 00 00       	call   805795 <sys_timeout>
}
  802514:	c9                   	leave  
  802515:	c3                   	ret    

00802516 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
  802516:	55                   	push   %ebp
  802517:	89 e5                	mov    %esp,%ebp
  802519:	83 ec 18             	sub    $0x18,%esp
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
  80251c:	e8 e4 4c 00 00       	call   807205 <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  802521:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802528:	00 
  802529:	c7 44 24 04 16 25 80 	movl   $0x802516,0x4(%esp)
  802530:	00 
  802531:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
  802538:	e8 58 32 00 00       	call   805795 <sys_timeout>
}
  80253d:	c9                   	leave  
  80253e:	c3                   	ret    

0080253f <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  80253f:	55                   	push   %ebp
  802540:	89 e5                	mov    %esp,%ebp
  802542:	83 ec 18             	sub    $0x18,%esp
  struct pbuf *q = p;
  pbuf_free(q);
  802545:	8b 45 08             	mov    0x8(%ebp),%eax
  802548:	89 04 24             	mov    %eax,(%esp)
  80254b:	e8 84 28 00 00       	call   804dd4 <pbuf_free>
}
  802550:	c9                   	leave  
  802551:	c3                   	ret    

00802552 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  802552:	55                   	push   %ebp
  802553:	89 e5                	mov    %esp,%ebp
  802555:	83 ec 18             	sub    $0x18,%esp
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  802558:	83 3d 00 63 81 00 00 	cmpl   $0x0,0x816300
  80255f:	75 38                	jne    802599 <tcp_timer_needed+0x47>
  802561:	83 3d 5c c2 b3 00 00 	cmpl   $0x0,0xb3c25c
  802568:	75 09                	jne    802573 <tcp_timer_needed+0x21>
  80256a:	83 3d 70 c2 b3 00 00 	cmpl   $0x0,0xb3c270
  802571:	74 26                	je     802599 <tcp_timer_needed+0x47>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  802573:	c7 05 00 63 81 00 01 	movl   $0x1,0x816300
  80257a:	00 00 00 
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  80257d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802584:	00 
  802585:	c7 44 24 04 e0 22 80 	movl   $0x8022e0,0x4(%esp)
  80258c:	00 
  80258d:	c7 04 24 fa 00 00 00 	movl   $0xfa,(%esp)
  802594:	e8 fc 31 00 00       	call   805795 <sys_timeout>
  }
}
  802599:	c9                   	leave  
  80259a:	c3                   	ret    

0080259b <tcpip_input>:
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
  80259b:	83 3d 00 50 81 00 ff 	cmpl   $0xffffffff,0x815000
  8025a2:	74 57                	je     8025fb <tcpip_input+0x60>
 *          to an IP header (if netif doesn't got NETIF_FLAG_ETHARP flag)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  8025a4:	55                   	push   %ebp
  8025a5:	89 e5                	mov    %esp,%ebp
  8025a7:	53                   	push   %ebx
  8025a8:	83 ec 14             	sub    $0x14,%esp
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
    msg = memp_malloc(MEMP_TCPIP_MSG_INPKT);
  8025ab:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  8025b2:	e8 0b 24 00 00       	call   8049c2 <memp_malloc>
  8025b7:	89 c3                	mov    %eax,%ebx
    if (msg == NULL) {
  8025b9:	85 c0                	test   %eax,%eax
  8025bb:	74 44                	je     802601 <tcpip_input+0x66>
      return ERR_MEM;
    }

    msg->type = TCPIP_MSG_INPKT;
  8025bd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    msg->msg.inp.p = p;
  8025c3:	8b 45 08             	mov    0x8(%ebp),%eax
  8025c6:	89 43 08             	mov    %eax,0x8(%ebx)
    msg->msg.inp.netif = inp;
  8025c9:	8b 45 0c             	mov    0xc(%ebp),%eax
  8025cc:	89 43 0c             	mov    %eax,0xc(%ebx)
    if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
  8025cf:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8025d3:	a1 00 50 81 00       	mov    0x815000,%eax
  8025d8:	89 04 24             	mov    %eax,(%esp)
  8025db:	e8 8c 84 00 00       	call   80aa6c <sys_mbox_trypost>
  8025e0:	84 c0                	test   %al,%al
  8025e2:	74 24                	je     802608 <tcpip_input+0x6d>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  8025e4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8025e8:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  8025ef:	e8 2e 24 00 00       	call   804a22 <memp_free>
      return ERR_MEM;
  8025f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8025f9:	eb 12                	jmp    80260d <tcpip_input+0x72>
    }
    return ERR_OK;
  }
  return ERR_VAL;
  8025fb:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
}
  802600:	c3                   	ret    
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
    msg = memp_malloc(MEMP_TCPIP_MSG_INPKT);
    if (msg == NULL) {
      return ERR_MEM;
  802601:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  802606:	eb 05                	jmp    80260d <tcpip_input+0x72>
    msg->msg.inp.netif = inp;
    if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
      return ERR_MEM;
    }
    return ERR_OK;
  802608:	b8 00 00 00 00       	mov    $0x0,%eax
  }
  return ERR_VAL;
}
  80260d:	83 c4 14             	add    $0x14,%esp
  802610:	5b                   	pop    %ebx
  802611:	5d                   	pop    %ebp
  802612:	c3                   	ret    

00802613 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(void (*f)(void *ctx), void *ctx, u8_t block)
{
  802613:	55                   	push   %ebp
  802614:	89 e5                	mov    %esp,%ebp
  802616:	56                   	push   %esi
  802617:	53                   	push   %ebx
  802618:	83 ec 10             	sub    $0x10,%esp
  80261b:	8b 75 10             	mov    0x10(%ebp),%esi
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
  80261e:	83 3d 00 50 81 00 ff 	cmpl   $0xffffffff,0x815000
  802625:	74 6e                	je     802695 <tcpip_callback_with_block+0x82>
    msg = memp_malloc(MEMP_TCPIP_MSG_API);
  802627:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  80262e:	e8 8f 23 00 00       	call   8049c2 <memp_malloc>
  802633:	89 c3                	mov    %eax,%ebx
    if (msg == NULL) {
  802635:	85 c0                	test   %eax,%eax
  802637:	74 63                	je     80269c <tcpip_callback_with_block+0x89>
      return ERR_MEM;
    }

    msg->type = TCPIP_MSG_CALLBACK;
  802639:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    msg->msg.cb.f = f;
  80263f:	8b 45 08             	mov    0x8(%ebp),%eax
  802642:	89 43 08             	mov    %eax,0x8(%ebx)
    msg->msg.cb.ctx = ctx;
  802645:	8b 45 0c             	mov    0xc(%ebp),%eax
  802648:	89 43 0c             	mov    %eax,0xc(%ebx)
    if (block) {
  80264b:	89 f0                	mov    %esi,%eax
  80264d:	84 c0                	test   %al,%al
  80264f:	74 18                	je     802669 <tcpip_callback_with_block+0x56>
      sys_mbox_post(mbox, msg);
  802651:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  802655:	a1 00 50 81 00       	mov    0x815000,%eax
  80265a:	89 04 24             	mov    %eax,(%esp)
  80265d:	e8 d4 84 00 00       	call   80ab36 <sys_mbox_post>
      if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
        memp_free(MEMP_TCPIP_MSG_API, msg);
        return ERR_MEM;
      }
    }
    return ERR_OK;
  802662:	b8 00 00 00 00       	mov    $0x0,%eax
  802667:	eb 3f                	jmp    8026a8 <tcpip_callback_with_block+0x95>
    msg->msg.cb.f = f;
    msg->msg.cb.ctx = ctx;
    if (block) {
      sys_mbox_post(mbox, msg);
    } else {
      if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
  802669:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80266d:	a1 00 50 81 00       	mov    0x815000,%eax
  802672:	89 04 24             	mov    %eax,(%esp)
  802675:	e8 f2 83 00 00       	call   80aa6c <sys_mbox_trypost>
  80267a:	84 c0                	test   %al,%al
  80267c:	74 25                	je     8026a3 <tcpip_callback_with_block+0x90>
        memp_free(MEMP_TCPIP_MSG_API, msg);
  80267e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  802682:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  802689:	e8 94 23 00 00       	call   804a22 <memp_free>
        return ERR_MEM;
  80268e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  802693:	eb 13                	jmp    8026a8 <tcpip_callback_with_block+0x95>
      }
    }
    return ERR_OK;
  }
  return ERR_VAL;
  802695:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  80269a:	eb 0c                	jmp    8026a8 <tcpip_callback_with_block+0x95>
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
    msg = memp_malloc(MEMP_TCPIP_MSG_API);
    if (msg == NULL) {
      return ERR_MEM;
  80269c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8026a1:	eb 05                	jmp    8026a8 <tcpip_callback_with_block+0x95>
      if (sys_mbox_trypost(mbox, msg) != ERR_OK) {
        memp_free(MEMP_TCPIP_MSG_API, msg);
        return ERR_MEM;
      }
    }
    return ERR_OK;
  8026a3:	b8 00 00 00 00       	mov    $0x0,%eax
  }
  return ERR_VAL;
}
  8026a8:	83 c4 10             	add    $0x10,%esp
  8026ab:	5b                   	pop    %ebx
  8026ac:	5e                   	pop    %esi
  8026ad:	5d                   	pop    %ebp
  8026ae:	c3                   	ret    

008026af <tcpip_timeout>:
err_t
tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
{
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
  8026af:	83 3d 00 50 81 00 ff 	cmpl   $0xffffffff,0x815000
  8026b6:	74 46                	je     8026fe <tcpip_timeout+0x4f>
  return ERR_VAL;
}

err_t
tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
{
  8026b8:	55                   	push   %ebp
  8026b9:	89 e5                	mov    %esp,%ebp
  8026bb:	83 ec 18             	sub    $0x18,%esp
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
    msg = memp_malloc(MEMP_TCPIP_MSG_API);
  8026be:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  8026c5:	e8 f8 22 00 00       	call   8049c2 <memp_malloc>
    if (msg == NULL) {
  8026ca:	85 c0                	test   %eax,%eax
  8026cc:	74 36                	je     802704 <tcpip_timeout+0x55>
      return ERR_MEM;
    }

    msg->type = TCPIP_MSG_TIMEOUT;
  8026ce:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    msg->msg.tmo.msecs = msecs;
  8026d4:	8b 55 08             	mov    0x8(%ebp),%edx
  8026d7:	89 50 08             	mov    %edx,0x8(%eax)
    msg->msg.tmo.h = h;
  8026da:	8b 55 0c             	mov    0xc(%ebp),%edx
  8026dd:	89 50 0c             	mov    %edx,0xc(%eax)
    msg->msg.tmo.arg = arg;
  8026e0:	8b 55 10             	mov    0x10(%ebp),%edx
  8026e3:	89 50 10             	mov    %edx,0x10(%eax)
    sys_mbox_post(mbox, msg);
  8026e6:	89 44 24 04          	mov    %eax,0x4(%esp)
  8026ea:	a1 00 50 81 00       	mov    0x815000,%eax
  8026ef:	89 04 24             	mov    %eax,(%esp)
  8026f2:	e8 3f 84 00 00       	call   80ab36 <sys_mbox_post>
    return ERR_OK;
  8026f7:	b8 00 00 00 00       	mov    $0x0,%eax
  8026fc:	eb 0b                	jmp    802709 <tcpip_timeout+0x5a>
  }
  return ERR_VAL;
  8026fe:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
}
  802703:	c3                   	ret    
  struct tcpip_msg *msg;

  if (mbox != SYS_MBOX_NULL) {
    msg = memp_malloc(MEMP_TCPIP_MSG_API);
    if (msg == NULL) {
      return ERR_MEM;
  802704:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    msg->msg.tmo.arg = arg;
    sys_mbox_post(mbox, msg);
    return ERR_OK;
  }
  return ERR_VAL;
}
  802709:	c9                   	leave  
  80270a:	c3                   	ret    

0080270b <tcpip_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
  80270b:	55                   	push   %ebp
  80270c:	89 e5                	mov    %esp,%ebp
  80270e:	53                   	push   %ebx
  80270f:	83 ec 34             	sub    $0x34,%esp
  802712:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct tcpip_msg msg;
  
  if (mbox != SYS_MBOX_NULL) {
  802715:	a1 00 50 81 00       	mov    0x815000,%eax
  80271a:	83 f8 ff             	cmp    $0xffffffff,%eax
  80271d:	74 36                	je     802755 <tcpip_apimsg+0x4a>
    msg.type = TCPIP_MSG_API;
  80271f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    msg.msg.apimsg = apimsg;
  802726:	89 5d ec             	mov    %ebx,-0x14(%ebp)
    sys_mbox_post(mbox, &msg);
  802729:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  80272c:	89 54 24 04          	mov    %edx,0x4(%esp)
  802730:	89 04 24             	mov    %eax,(%esp)
  802733:	e8 fe 83 00 00       	call   80ab36 <sys_mbox_post>
    sys_arch_sem_wait(apimsg->msg.conn->op_completed, 0);
  802738:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80273f:	00 
  802740:	8b 43 04             	mov    0x4(%ebx),%eax
  802743:	8b 40 10             	mov    0x10(%eax),%eax
  802746:	89 04 24             	mov    %eax,(%esp)
  802749:	e8 07 82 00 00       	call   80a955 <sys_arch_sem_wait>
    return ERR_OK;
  80274e:	b8 00 00 00 00       	mov    $0x0,%eax
  802753:	eb 05                	jmp    80275a <tcpip_apimsg+0x4f>
  }
  return ERR_VAL;
  802755:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
}
  80275a:	83 c4 34             	add    $0x34,%esp
  80275d:	5b                   	pop    %ebx
  80275e:	5d                   	pop    %ebp
  80275f:	c3                   	ret    

00802760 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(void (* initfunc)(void *), void *arg)
{
  802760:	55                   	push   %ebp
  802761:	89 e5                	mov    %esp,%ebp
  802763:	83 ec 28             	sub    $0x28,%esp
  lwip_init();
  802766:	e8 f5 03 00 00       	call   802b60 <lwip_init>

  tcpip_init_done = initfunc;
  80276b:	8b 45 08             	mov    0x8(%ebp),%eax
  80276e:	a3 08 63 81 00       	mov    %eax,0x816308
  tcpip_init_done_arg = arg;
  802773:	8b 45 0c             	mov    0xc(%ebp),%eax
  802776:	a3 04 63 81 00       	mov    %eax,0x816304
  mbox = sys_mbox_new(TCPIP_MBOX_SIZE);
  80277b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802782:	e8 3f 80 00 00       	call   80a7c6 <sys_mbox_new>
  802787:	a3 00 50 81 00       	mov    %eax,0x815000
#if LWIP_TCPIP_CORE_LOCKING
  lock_tcpip_core = sys_sem_new(1);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  80278c:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
  802793:	00 
  802794:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80279b:	00 
  80279c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8027a3:	00 
  8027a4:	c7 44 24 04 27 23 80 	movl   $0x802327,0x4(%esp)
  8027ab:	00 
  8027ac:	c7 04 24 7c 21 81 00 	movl   $0x81217c,(%esp)
  8027b3:	e8 dc 84 00 00       	call   80ac94 <sys_thread_new>
}
  8027b8:	c9                   	leave  
  8027b9:	c3                   	ret    

008027ba <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  8027ba:	55                   	push   %ebp
  8027bb:	89 e5                	mov    %esp,%ebp
  8027bd:	83 ec 18             	sub    $0x18,%esp
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  8027c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8027c7:	00 
  8027c8:	8b 45 08             	mov    0x8(%ebp),%eax
  8027cb:	89 44 24 04          	mov    %eax,0x4(%esp)
  8027cf:	c7 04 24 3f 25 80 00 	movl   $0x80253f,(%esp)
  8027d6:	e8 38 fe ff ff       	call   802613 <tcpip_callback_with_block>
}
  8027db:	c9                   	leave  
  8027dc:	c3                   	ret    

008027dd <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  8027dd:	55                   	push   %ebp
  8027de:	89 e5                	mov    %esp,%ebp
  8027e0:	83 ec 18             	sub    $0x18,%esp
  return tcpip_callback_with_block(mem_free, m, 0);
  8027e3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8027ea:	00 
  8027eb:	8b 45 08             	mov    0x8(%ebp),%eax
  8027ee:	89 44 24 04          	mov    %eax,0x4(%esp)
  8027f2:	c7 04 24 c5 44 80 00 	movl   $0x8044c5,(%esp)
  8027f9:	e8 15 fe ff ff       	call   802613 <tcpip_callback_with_block>
}
  8027fe:	c9                   	leave  
  8027ff:	c3                   	ret    

00802800 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  802800:	55                   	push   %ebp
  802801:	89 e5                	mov    %esp,%ebp
  802803:	83 ec 18             	sub    $0x18,%esp
  struct netbuf *buf;

  buf = memp_malloc(MEMP_NETBUF);
  802806:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80280d:	e8 b0 21 00 00       	call   8049c2 <memp_malloc>
  if (buf != NULL) {
  802812:	85 c0                	test   %eax,%eax
  802814:	74 14                	je     80282a <netbuf_new+0x2a>
    buf->p = NULL;
  802816:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    buf->ptr = NULL;
  80281c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    buf->addr = NULL;
  802823:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    return buf;
  } else {
    return NULL;
  }
}
  80282a:	c9                   	leave  
  80282b:	c3                   	ret    

0080282c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  80282c:	55                   	push   %ebp
  80282d:	89 e5                	mov    %esp,%ebp
  80282f:	53                   	push   %ebx
  802830:	83 ec 14             	sub    $0x14,%esp
  802833:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (buf != NULL) {
  802836:	85 db                	test   %ebx,%ebx
  802838:	74 2b                	je     802865 <netbuf_delete+0x39>
    if (buf->p != NULL) {
  80283a:	8b 03                	mov    (%ebx),%eax
  80283c:	85 c0                	test   %eax,%eax
  80283e:	74 15                	je     802855 <netbuf_delete+0x29>
      pbuf_free(buf->p);
  802840:	89 04 24             	mov    %eax,(%esp)
  802843:	e8 8c 25 00 00       	call   804dd4 <pbuf_free>
      buf->p = buf->ptr = NULL;
  802848:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80284f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    }
    memp_free(MEMP_NETBUF, buf);
  802855:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  802859:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  802860:	e8 bd 21 00 00       	call   804a22 <memp_free>
  }
}
  802865:	83 c4 14             	add    $0x14,%esp
  802868:	5b                   	pop    %ebx
  802869:	5d                   	pop    %ebp
  80286a:	c3                   	ret    

0080286b <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  80286b:	55                   	push   %ebp
  80286c:	89 e5                	mov    %esp,%ebp
  80286e:	56                   	push   %esi
  80286f:	53                   	push   %ebx
  802870:	83 ec 10             	sub    $0x10,%esp
  802873:	8b 5d 08             	mov    0x8(%ebp),%ebx
  802876:	8b 75 0c             	mov    0xc(%ebp),%esi
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  802879:	85 db                	test   %ebx,%ebx
  80287b:	75 1c                	jne    802899 <netbuf_alloc+0x2e>
  80287d:	c7 44 24 08 89 21 81 	movl   $0x812189,0x8(%esp)
  802884:	00 
  802885:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
  80288c:	00 
  80288d:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802894:	e8 f5 c7 00 00       	call   80f08e <_panic>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  802899:	8b 03                	mov    (%ebx),%eax
  80289b:	85 c0                	test   %eax,%eax
  80289d:	74 08                	je     8028a7 <netbuf_alloc+0x3c>
    pbuf_free(buf->p);
  80289f:	89 04 24             	mov    %eax,(%esp)
  8028a2:	e8 2d 25 00 00       	call   804dd4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  8028a7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8028ae:	00 
  8028af:	0f b7 c6             	movzwl %si,%eax
  8028b2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8028b6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8028bd:	e8 f3 25 00 00       	call   804eb5 <pbuf_alloc>
  8028c2:	89 03                	mov    %eax,(%ebx)
  if (buf->p == NULL) {
  8028c4:	85 c0                	test   %eax,%eax
  8028c6:	74 2a                	je     8028f2 <netbuf_alloc+0x87>
     return NULL;
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  8028c8:	66 3b 70 0a          	cmp    0xa(%eax),%si
  8028cc:	76 1c                	jbe    8028ea <netbuf_alloc+0x7f>
  8028ce:	c7 44 24 08 70 22 81 	movl   $0x812270,0x8(%esp)
  8028d5:	00 
  8028d6:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
  8028dd:	00 
  8028de:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  8028e5:	e8 a4 c7 00 00       	call   80f08e <_panic>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  8028ea:	89 43 04             	mov    %eax,0x4(%ebx)
  return buf->p->payload;
  8028ed:	8b 40 04             	mov    0x4(%eax),%eax
  8028f0:	eb 05                	jmp    8028f7 <netbuf_alloc+0x8c>
  if (buf->p != NULL) {
    pbuf_free(buf->p);
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  if (buf->p == NULL) {
     return NULL;
  8028f2:	b8 00 00 00 00       	mov    $0x0,%eax
  }
  LWIP_ASSERT("check that first pbuf can hold size",
             (buf->p->len >= size));
  buf->ptr = buf->p;
  return buf->p->payload;
}
  8028f7:	83 c4 10             	add    $0x10,%esp
  8028fa:	5b                   	pop    %ebx
  8028fb:	5e                   	pop    %esi
  8028fc:	5d                   	pop    %ebp
  8028fd:	c3                   	ret    

008028fe <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  8028fe:	55                   	push   %ebp
  8028ff:	89 e5                	mov    %esp,%ebp
  802901:	53                   	push   %ebx
  802902:	83 ec 14             	sub    $0x14,%esp
  802905:	8b 5d 08             	mov    0x8(%ebp),%ebx
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  802908:	85 db                	test   %ebx,%ebx
  80290a:	75 1c                	jne    802928 <netbuf_free+0x2a>
  80290c:	c7 44 24 08 b9 21 81 	movl   $0x8121b9,0x8(%esp)
  802913:	00 
  802914:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
  80291b:	00 
  80291c:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802923:	e8 66 c7 00 00       	call   80f08e <_panic>
  if (buf->p != NULL) {
  802928:	8b 03                	mov    (%ebx),%eax
  80292a:	85 c0                	test   %eax,%eax
  80292c:	74 08                	je     802936 <netbuf_free+0x38>
    pbuf_free(buf->p);
  80292e:	89 04 24             	mov    %eax,(%esp)
  802931:	e8 9e 24 00 00       	call   804dd4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  802936:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80293d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
}
  802943:	83 c4 14             	add    $0x14,%esp
  802946:	5b                   	pop    %ebx
  802947:	5d                   	pop    %ebp
  802948:	c3                   	ret    

00802949 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  802949:	55                   	push   %ebp
  80294a:	89 e5                	mov    %esp,%ebp
  80294c:	56                   	push   %esi
  80294d:	53                   	push   %ebx
  80294e:	83 ec 10             	sub    $0x10,%esp
  802951:	8b 5d 08             	mov    0x8(%ebp),%ebx
  802954:	8b 75 10             	mov    0x10(%ebp),%esi
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  802957:	85 db                	test   %ebx,%ebx
  802959:	75 1c                	jne    802977 <netbuf_ref+0x2e>
  80295b:	c7 44 24 08 d2 21 81 	movl   $0x8121d2,0x8(%esp)
  802962:	00 
  802963:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  80296a:	00 
  80296b:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802972:	e8 17 c7 00 00       	call   80f08e <_panic>
  if (buf->p != NULL) {
  802977:	8b 03                	mov    (%ebx),%eax
  802979:	85 c0                	test   %eax,%eax
  80297b:	74 08                	je     802985 <netbuf_ref+0x3c>
    pbuf_free(buf->p);
  80297d:	89 04 24             	mov    %eax,(%esp)
  802980:	e8 4f 24 00 00       	call   804dd4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  802985:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  80298c:	00 
  80298d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  802994:	00 
  802995:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80299c:	e8 14 25 00 00       	call   804eb5 <pbuf_alloc>
  8029a1:	89 03                	mov    %eax,(%ebx)
  if (buf->p == NULL) {
  8029a3:	85 c0                	test   %eax,%eax
  8029a5:	75 0e                	jne    8029b5 <netbuf_ref+0x6c>
    buf->ptr = NULL;
  8029a7:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    return ERR_MEM;
  8029ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8029b3:	eb 1a                	jmp    8029cf <netbuf_ref+0x86>
  }
  buf->p->payload = (void*)dataptr;
  8029b5:	8b 55 0c             	mov    0xc(%ebp),%edx
  8029b8:	89 50 04             	mov    %edx,0x4(%eax)
  buf->p->len = buf->p->tot_len = size;
  8029bb:	8b 03                	mov    (%ebx),%eax
  8029bd:	66 89 70 08          	mov    %si,0x8(%eax)
  8029c1:	66 89 70 0a          	mov    %si,0xa(%eax)
  buf->ptr = buf->p;
  8029c5:	8b 03                	mov    (%ebx),%eax
  8029c7:	89 43 04             	mov    %eax,0x4(%ebx)
  return ERR_OK;
  8029ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8029cf:	83 c4 10             	add    $0x10,%esp
  8029d2:	5b                   	pop    %ebx
  8029d3:	5e                   	pop    %esi
  8029d4:	5d                   	pop    %ebp
  8029d5:	c3                   	ret    

008029d6 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  8029d6:	55                   	push   %ebp
  8029d7:	89 e5                	mov    %esp,%ebp
  8029d9:	56                   	push   %esi
  8029da:	53                   	push   %ebx
  8029db:	83 ec 10             	sub    $0x10,%esp
  8029de:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8029e1:	8b 75 0c             	mov    0xc(%ebp),%esi
  LWIP_ERROR("netbuf_ref: invalid head", (head != NULL), return;);
  8029e4:	85 db                	test   %ebx,%ebx
  8029e6:	75 1c                	jne    802a04 <netbuf_chain+0x2e>
  8029e8:	c7 44 24 08 ea 21 81 	movl   $0x8121ea,0x8(%esp)
  8029ef:	00 
  8029f0:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
  8029f7:	00 
  8029f8:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  8029ff:	e8 8a c6 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  802a04:	85 f6                	test   %esi,%esi
  802a06:	75 1c                	jne    802a24 <netbuf_chain+0x4e>
  802a08:	c7 44 24 08 03 22 81 	movl   $0x812203,0x8(%esp)
  802a0f:	00 
  802a10:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
  802a17:	00 
  802a18:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802a1f:	e8 6a c6 00 00       	call   80f08e <_panic>
  pbuf_chain(head->p, tail->p);
  802a24:	8b 06                	mov    (%esi),%eax
  802a26:	89 44 24 04          	mov    %eax,0x4(%esp)
  802a2a:	8b 03                	mov    (%ebx),%eax
  802a2c:	89 04 24             	mov    %eax,(%esp)
  802a2f:	e8 d6 28 00 00       	call   80530a <pbuf_chain>
  head->ptr = head->p;
  802a34:	8b 03                	mov    (%ebx),%eax
  802a36:	89 43 04             	mov    %eax,0x4(%ebx)
  memp_free(MEMP_NETBUF, tail);
  802a39:	89 74 24 04          	mov    %esi,0x4(%esp)
  802a3d:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  802a44:	e8 d9 1f 00 00       	call   804a22 <memp_free>
}
  802a49:	83 c4 10             	add    $0x10,%esp
  802a4c:	5b                   	pop    %ebx
  802a4d:	5e                   	pop    %esi
  802a4e:	5d                   	pop    %ebp
  802a4f:	c3                   	ret    

00802a50 <netbuf_data>:
 * @return ERR_OK if the information was retreived,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  802a50:	55                   	push   %ebp
  802a51:	89 e5                	mov    %esp,%ebp
  802a53:	53                   	push   %ebx
  802a54:	83 ec 14             	sub    $0x14,%esp
  802a57:	8b 45 08             	mov    0x8(%ebp),%eax
  802a5a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  802a5d:	8b 55 10             	mov    0x10(%ebp),%edx
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  802a60:	85 c0                	test   %eax,%eax
  802a62:	75 1c                	jne    802a80 <netbuf_data+0x30>
  802a64:	c7 44 24 08 1e 22 81 	movl   $0x81221e,0x8(%esp)
  802a6b:	00 
  802a6c:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
  802a73:	00 
  802a74:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802a7b:	e8 0e c6 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  802a80:	85 c9                	test   %ecx,%ecx
  802a82:	75 1c                	jne    802aa0 <netbuf_data+0x50>
  802a84:	c7 44 24 08 37 22 81 	movl   $0x812237,0x8(%esp)
  802a8b:	00 
  802a8c:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
  802a93:	00 
  802a94:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802a9b:	e8 ee c5 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  802aa0:	85 d2                	test   %edx,%edx
  802aa2:	75 1c                	jne    802ac0 <netbuf_data+0x70>
  802aa4:	c7 44 24 08 54 22 81 	movl   $0x812254,0x8(%esp)
  802aab:	00 
  802aac:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
  802ab3:	00 
  802ab4:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802abb:	e8 ce c5 00 00       	call   80f08e <_panic>

  if (buf->ptr == NULL) {
  802ac0:	8b 58 04             	mov    0x4(%eax),%ebx
  802ac3:	85 db                	test   %ebx,%ebx
  802ac5:	74 16                	je     802add <netbuf_data+0x8d>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  802ac7:	8b 5b 04             	mov    0x4(%ebx),%ebx
  802aca:	89 19                	mov    %ebx,(%ecx)
  *len = buf->ptr->len;
  802acc:	8b 40 04             	mov    0x4(%eax),%eax
  802acf:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
  802ad3:	66 89 02             	mov    %ax,(%edx)
  return ERR_OK;
  802ad6:	b8 00 00 00 00       	mov    $0x0,%eax
  802adb:	eb 05                	jmp    802ae2 <netbuf_data+0x92>
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);

  if (buf->ptr == NULL) {
    return ERR_BUF;
  802add:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
  802ae2:	83 c4 14             	add    $0x14,%esp
  802ae5:	5b                   	pop    %ebx
  802ae6:	5d                   	pop    %ebp
  802ae7:	c3                   	ret    

00802ae8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  802ae8:	55                   	push   %ebp
  802ae9:	89 e5                	mov    %esp,%ebp
  802aeb:	83 ec 18             	sub    $0x18,%esp
  802aee:	8b 45 08             	mov    0x8(%ebp),%eax
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return -1;);
  802af1:	85 c0                	test   %eax,%eax
  802af3:	75 1c                	jne    802b11 <netbuf_next+0x29>
  802af5:	c7 44 24 08 b9 21 81 	movl   $0x8121b9,0x8(%esp)
  802afc:	00 
  802afd:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
  802b04:	00 
  802b05:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802b0c:	e8 7d c5 00 00       	call   80f08e <_panic>
  if (buf->ptr->next == NULL) {
  802b11:	8b 50 04             	mov    0x4(%eax),%edx
  802b14:	8b 12                	mov    (%edx),%edx
  802b16:	85 d2                	test   %edx,%edx
  802b18:	74 0b                	je     802b25 <netbuf_next+0x3d>
    return -1;
  }
  buf->ptr = buf->ptr->next;
  802b1a:	89 50 04             	mov    %edx,0x4(%eax)
  if (buf->ptr->next == NULL) {
  802b1d:	83 3a 00             	cmpl   $0x0,(%edx)
  802b20:	0f 94 c0             	sete   %al
  802b23:	eb 05                	jmp    802b2a <netbuf_next+0x42>
s8_t
netbuf_next(struct netbuf *buf)
{
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return -1;);
  if (buf->ptr->next == NULL) {
    return -1;
  802b25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
    return 1;
  }
  return 0;
}
  802b2a:	c9                   	leave  
  802b2b:	c3                   	ret    

00802b2c <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  802b2c:	55                   	push   %ebp
  802b2d:	89 e5                	mov    %esp,%ebp
  802b2f:	83 ec 18             	sub    $0x18,%esp
  802b32:	8b 45 08             	mov    0x8(%ebp),%eax
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  802b35:	85 c0                	test   %eax,%eax
  802b37:	75 1c                	jne    802b55 <netbuf_first+0x29>
  802b39:	c7 44 24 08 b9 21 81 	movl   $0x8121b9,0x8(%esp)
  802b40:	00 
  802b41:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
  802b48:	00 
  802b49:	c7 04 24 a3 21 81 00 	movl   $0x8121a3,(%esp)
  802b50:	e8 39 c5 00 00       	call   80f08e <_panic>
  buf->ptr = buf->p;
  802b55:	8b 10                	mov    (%eax),%edx
  802b57:	89 50 04             	mov    %edx,0x4(%eax)
}
  802b5a:	c9                   	leave  
  802b5b:	c3                   	ret    
  802b5c:	66 90                	xchg   %ax,%ax
  802b5e:	66 90                	xchg   %ax,%ax

00802b60 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  802b60:	55                   	push   %ebp
  802b61:	89 e5                	mov    %esp,%ebp
  802b63:	83 ec 08             	sub    $0x8,%esp
  /* Sanity check user-configurable values */
  lwip_sanity_check();

  /* Modules initialization */
  stats_init();
  sys_init();
  802b66:	e8 fa 79 00 00       	call   80a565 <sys_init>
  mem_init();
  802b6b:	e8 ed 18 00 00       	call   80445d <mem_init>
  memp_init();
  802b70:	e8 f5 1d 00 00       	call   80496a <memp_init>
  pbuf_init();
  netif_init();
#if LWIP_SOCKET
  lwip_socket_init();
  802b75:	e8 9e e4 ff ff       	call   801018 <lwip_socket_init>
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
}
  802b7a:	c9                   	leave  
  802b7b:	c3                   	ret    
  802b7c:	66 90                	xchg   %ax,%ax
  802b7e:	66 90                	xchg   %ax,%ax

00802b80 <dhcp_set_state>:
 *
 * TODO: we might also want to reset the timeout here?
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  802b80:	55                   	push   %ebp
  802b81:	89 e5                	mov    %esp,%ebp
  if (new_state != dhcp->state) {
  802b83:	38 10                	cmp    %dl,(%eax)
  802b85:	74 06                	je     802b8d <dhcp_set_state+0xd>
    dhcp->state = new_state;
  802b87:	88 10                	mov    %dl,(%eax)
    dhcp->tries = 0;
  802b89:	c6 40 01 00          	movb   $0x0,0x1(%eax)
  }
}
  802b8d:	5d                   	pop    %ebp
  802b8e:	c3                   	ret    

00802b8f <dhcp_get_option_ptr>:
 *
 * @return a byte offset into the UDP message where the option was found, or
 * zero if the given option was not found.
 */
static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type)
{
  802b8f:	55                   	push   %ebp
  802b90:	89 e5                	mov    %esp,%ebp
  802b92:	57                   	push   %edi
  802b93:	56                   	push   %esi
  802b94:	53                   	push   %ebx
  802b95:	83 ec 08             	sub    $0x8,%esp
  802b98:	89 45 ec             	mov    %eax,-0x14(%ebp)
  u8_t overload = DHCP_OVERLOAD_NONE;

  /* options available? */
  if ((dhcp->options_in != NULL) && (dhcp->options_in_len > 0)) {
  802b9b:	8b 70 14             	mov    0x14(%eax),%esi
  802b9e:	85 f6                	test   %esi,%esi
  802ba0:	0f 84 c9 00 00 00    	je     802c6f <dhcp_get_option_ptr+0xe0>
  802ba6:	0f b7 78 18          	movzwl 0x18(%eax),%edi
  802baa:	66 85 ff             	test   %di,%di
  802bad:	0f 84 c3 00 00 00    	je     802c76 <dhcp_get_option_ptr+0xe7>
  802bb3:	b9 00 00 00 00       	mov    $0x0,%ecx
  802bb8:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  802bbc:	eb 2d                	jmp    802beb <dhcp_get_option_ptr+0x5c>
    u16_t offset = 0;
    /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
    while ((offset < dhcp->options_in_len) && (options[offset] != DHCP_OPTION_END)) {
      /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
      /* are the sname and/or file field overloaded with options? */
      if (options[offset] == DHCP_OPTION_OVERLOAD) {
  802bbe:	80 fb 34             	cmp    $0x34,%bl
  802bc1:	75 12                	jne    802bd5 <dhcp_get_option_ptr+0x46>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("overloaded message detected\n"));
        /* skip option type and length */
        offset += 2;
  802bc3:	8d 41 02             	lea    0x2(%ecx),%eax
        overload = options[offset++];
  802bc6:	83 c1 03             	add    $0x3,%ecx
  802bc9:	0f b7 c0             	movzwl %ax,%eax
  802bcc:	0f b6 04 06          	movzbl (%esi,%eax,1),%eax
  802bd0:	88 45 f3             	mov    %al,-0xd(%ebp)
  802bd3:	eb 16                	jmp    802beb <dhcp_get_option_ptr+0x5c>
      }
      /* requested option found */
      else if (options[offset] == option_type) {
  802bd5:	38 d3                	cmp    %dl,%bl
  802bd7:	0f 84 ac 00 00 00    	je     802c89 <dhcp_get_option_ptr+0xfa>
        return &options[offset];
      /* skip option */
      } else {
         LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", options[offset]));
        /* skip option type */
        offset++;
  802bdd:	8d 41 01             	lea    0x1(%ecx),%eax
        /* skip option length, and then length bytes */
        offset += 1 + options[offset];
  802be0:	0f b7 c0             	movzwl %ax,%eax
  802be3:	0f b6 04 06          	movzbl (%esi,%eax,1),%eax
  802be7:	8d 4c 01 02          	lea    0x2(%ecx,%eax,1),%ecx
  if ((dhcp->options_in != NULL) && (dhcp->options_in_len > 0)) {
    /* start with options field */
    u8_t *options = (u8_t *)dhcp->options_in;
    u16_t offset = 0;
    /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
    while ((offset < dhcp->options_in_len) && (options[offset] != DHCP_OPTION_END)) {
  802beb:	66 39 f9             	cmp    %di,%cx
  802bee:	73 0d                	jae    802bfd <dhcp_get_option_ptr+0x6e>
  802bf0:	0f b7 c1             	movzwl %cx,%eax
  802bf3:	01 f0                	add    %esi,%eax
  802bf5:	0f b6 18             	movzbl (%eax),%ebx
  802bf8:	80 fb ff             	cmp    $0xff,%bl
  802bfb:	75 c1                	jne    802bbe <dhcp_get_option_ptr+0x2f>
        /* skip option length, and then length bytes */
        offset += 1 + options[offset];
      }
    }
    /* is this an overloaded message? */
    if (overload != DHCP_OVERLOAD_NONE) {
  802bfd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
  802c01:	84 c0                	test   %al,%al
  802c03:	74 78                	je     802c7d <dhcp_get_option_ptr+0xee>
      u16_t field_len;
      if (overload == DHCP_OVERLOAD_FILE) {
  802c05:	3c 01                	cmp    $0x1,%al
  802c07:	75 10                	jne    802c19 <dhcp_get_option_ptr+0x8a>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded file field\n"));
        options = (u8_t *)&dhcp->msg_in->file;
  802c09:	8b 45 ec             	mov    -0x14(%ebp),%eax
  802c0c:	8b 70 10             	mov    0x10(%eax),%esi
  802c0f:	83 c6 6c             	add    $0x6c,%esi
        field_len = DHCP_FILE_LEN;
  802c12:	bf 80 00 00 00       	mov    $0x80,%edi
  802c17:	eb 24                	jmp    802c3d <dhcp_get_option_ptr+0xae>
      } else if (overload == DHCP_OVERLOAD_SNAME) {
  802c19:	80 7d f3 02          	cmpb   $0x2,-0xd(%ebp)
  802c1d:	75 10                	jne    802c2f <dhcp_get_option_ptr+0xa0>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded sname field\n"));
        options = (u8_t *)&dhcp->msg_in->sname;
  802c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  802c22:	8b 70 10             	mov    0x10(%eax),%esi
  802c25:	83 c6 2c             	add    $0x2c,%esi
        field_len = DHCP_SNAME_LEN;
  802c28:	bf 40 00 00 00       	mov    $0x40,%edi
  802c2d:	eb 0e                	jmp    802c3d <dhcp_get_option_ptr+0xae>
      /* TODO: check if else if () is necessary */
      } else {
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded sname and file field\n"));
        options = (u8_t *)&dhcp->msg_in->sname;
  802c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  802c32:	8b 70 10             	mov    0x10(%eax),%esi
  802c35:	83 c6 2c             	add    $0x2c,%esi
        field_len = DHCP_FILE_LEN + DHCP_SNAME_LEN;
  802c38:	bf c0 00 00 00       	mov    $0xc0,%edi
      }
      offset = 0;
  802c3d:	b9 00 00 00 00       	mov    $0x0,%ecx

      /* at least 1 byte to read and no end marker */
      while ((offset < field_len) && (options[offset] != DHCP_OPTION_END)) {
  802c42:	eb 12                	jmp    802c56 <dhcp_get_option_ptr+0xc7>
        if (options[offset] == option_type) {
  802c44:	38 da                	cmp    %bl,%dl
  802c46:	74 41                	je     802c89 <dhcp_get_option_ptr+0xfa>
          return &options[offset];
        /* skip option */
        } else {
          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("skipping option %"U16_F"\n", options[offset]));
          /* skip option type */
          offset++;
  802c48:	8d 41 01             	lea    0x1(%ecx),%eax
          offset += 1 + options[offset];
  802c4b:	0f b7 c0             	movzwl %ax,%eax
  802c4e:	0f b6 04 06          	movzbl (%esi,%eax,1),%eax
  802c52:	8d 4c 01 02          	lea    0x2(%ecx,%eax,1),%ecx
        field_len = DHCP_FILE_LEN + DHCP_SNAME_LEN;
      }
      offset = 0;

      /* at least 1 byte to read and no end marker */
      while ((offset < field_len) && (options[offset] != DHCP_OPTION_END)) {
  802c56:	66 39 f9             	cmp    %di,%cx
  802c59:	73 29                	jae    802c84 <dhcp_get_option_ptr+0xf5>
  802c5b:	0f b7 c1             	movzwl %cx,%eax
  802c5e:	01 f0                	add    %esi,%eax
  802c60:	0f b6 18             	movzbl (%eax),%ebx
  802c63:	80 fb ff             	cmp    $0xff,%bl
  802c66:	75 dc                	jne    802c44 <dhcp_get_option_ptr+0xb5>
          offset += 1 + options[offset];
        }
      }
    }
  }
  return NULL;
  802c68:	b8 00 00 00 00       	mov    $0x0,%eax
  802c6d:	eb 1a                	jmp    802c89 <dhcp_get_option_ptr+0xfa>
  802c6f:	b8 00 00 00 00       	mov    $0x0,%eax
  802c74:	eb 13                	jmp    802c89 <dhcp_get_option_ptr+0xfa>
  802c76:	b8 00 00 00 00       	mov    $0x0,%eax
  802c7b:	eb 0c                	jmp    802c89 <dhcp_get_option_ptr+0xfa>
  802c7d:	b8 00 00 00 00       	mov    $0x0,%eax
  802c82:	eb 05                	jmp    802c89 <dhcp_get_option_ptr+0xfa>
  802c84:	b8 00 00 00 00       	mov    $0x0,%eax
}
  802c89:	83 c4 08             	add    $0x8,%esp
  802c8c:	5b                   	pop    %ebx
  802c8d:	5e                   	pop    %esi
  802c8e:	5f                   	pop    %edi
  802c8f:	5d                   	pop    %ebp
  802c90:	c3                   	ret    

00802c91 <dhcp_get_option_long>:
 * @param ptr pointer obtained by dhcp_get_option_ptr().
 *
 * @return byte value at the given address.
 */
static u32_t dhcp_get_option_long(u8_t *ptr)
{
  802c91:	55                   	push   %ebp
  802c92:	89 e5                	mov    %esp,%ebp
  u32_t value;
  value = (u32_t)(*ptr++) << 24;
  802c94:	0f b6 08             	movzbl (%eax),%ecx
  802c97:	c1 e1 18             	shl    $0x18,%ecx
  value |= (u32_t)(*ptr++) << 16;
  802c9a:	0f b6 50 01          	movzbl 0x1(%eax),%edx
  802c9e:	c1 e2 10             	shl    $0x10,%edx
  802ca1:	09 d1                	or     %edx,%ecx
  value |= (u32_t)(*ptr++) << 8;
  value |= (u32_t)(*ptr++);
  802ca3:	0f b6 50 03          	movzbl 0x3(%eax),%edx
static u32_t dhcp_get_option_long(u8_t *ptr)
{
  u32_t value;
  value = (u32_t)(*ptr++) << 24;
  value |= (u32_t)(*ptr++) << 16;
  value |= (u32_t)(*ptr++) << 8;
  802ca7:	09 d1                	or     %edx,%ecx
  802ca9:	0f b6 50 02          	movzbl 0x2(%eax),%edx
  802cad:	c1 e2 08             	shl    $0x8,%edx
  value |= (u32_t)(*ptr++);
  802cb0:	89 c8                	mov    %ecx,%eax
  802cb2:	09 d0                	or     %edx,%eax
  LWIP_DEBUGF(DHCP_DEBUG, ("option long value=%"U32_F"\n", value));
  return value;
}
  802cb4:	5d                   	pop    %ebp
  802cb5:	c3                   	ret    

00802cb6 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  802cb6:	55                   	push   %ebp
  802cb7:	89 e5                	mov    %esp,%ebp
  802cb9:	56                   	push   %esi
  802cba:	53                   	push   %ebx
  802cbb:	83 ec 10             	sub    $0x10,%esp
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  802cbe:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802cc2:	66 83 f9 43          	cmp    $0x43,%cx
  802cc6:	76 1c                	jbe    802ce4 <dhcp_option_byte+0x2e>
  802cc8:	c7 44 24 08 94 22 81 	movl   $0x812294,0x8(%esp)
  802ccf:	00 
  802cd0:	c7 44 24 04 65 04 00 	movl   $0x465,0x4(%esp)
  802cd7:	00 
  802cd8:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802cdf:	e8 aa c3 00 00       	call   80f08e <_panic>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  802ce4:	8b 58 20             	mov    0x20(%eax),%ebx
  802ce7:	8d 71 01             	lea    0x1(%ecx),%esi
  802cea:	66 89 70 24          	mov    %si,0x24(%eax)
  802cee:	0f b7 c9             	movzwl %cx,%ecx
  802cf1:	88 94 0b f0 00 00 00 	mov    %dl,0xf0(%ebx,%ecx,1)
}
  802cf8:	83 c4 10             	add    $0x10,%esp
  802cfb:	5b                   	pop    %ebx
  802cfc:	5e                   	pop    %esi
  802cfd:	5d                   	pop    %ebp
  802cfe:	c3                   	ret    

00802cff <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  802cff:	55                   	push   %ebp
  802d00:	89 e5                	mov    %esp,%ebp
  802d02:	57                   	push   %edi
  802d03:	56                   	push   %esi
  802d04:	53                   	push   %ebx
  802d05:	83 ec 1c             	sub    $0x1c,%esp
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  802d08:	0f b7 58 24          	movzwl 0x24(%eax),%ebx
  802d0c:	0f b7 fb             	movzwl %bx,%edi
  802d0f:	0f b6 f1             	movzbl %cl,%esi
  802d12:	8d 74 37 02          	lea    0x2(%edi,%esi,1),%esi
  802d16:	83 fe 44             	cmp    $0x44,%esi
  802d19:	76 1c                	jbe    802d37 <dhcp_option+0x38>
  802d1b:	c7 44 24 08 d0 22 81 	movl   $0x8122d0,0x8(%esp)
  802d22:	00 
  802d23:	c7 44 24 04 5a 04 00 	movl   $0x45a,0x4(%esp)
  802d2a:	00 
  802d2b:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802d32:	e8 57 c3 00 00       	call   80f08e <_panic>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  802d37:	8b 70 20             	mov    0x20(%eax),%esi
  802d3a:	8d 7b 01             	lea    0x1(%ebx),%edi
  802d3d:	66 89 78 24          	mov    %di,0x24(%eax)
  802d41:	0f b7 db             	movzwl %bx,%ebx
  802d44:	88 94 1e f0 00 00 00 	mov    %dl,0xf0(%esi,%ebx,1)
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  802d4b:	8b 58 20             	mov    0x20(%eax),%ebx
  802d4e:	0f b7 50 24          	movzwl 0x24(%eax),%edx
  802d52:	8d 72 01             	lea    0x1(%edx),%esi
  802d55:	66 89 70 24          	mov    %si,0x24(%eax)
  802d59:	0f b7 d2             	movzwl %dx,%edx
  802d5c:	88 8c 13 f0 00 00 00 	mov    %cl,0xf0(%ebx,%edx,1)
}
  802d63:	83 c4 1c             	add    $0x1c,%esp
  802d66:	5b                   	pop    %ebx
  802d67:	5e                   	pop    %esi
  802d68:	5f                   	pop    %edi
  802d69:	5d                   	pop    %ebp
  802d6a:	c3                   	ret    

00802d6b <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  802d6b:	55                   	push   %ebp
  802d6c:	89 e5                	mov    %esp,%ebp
  802d6e:	56                   	push   %esi
  802d6f:	53                   	push   %ebx
  802d70:	83 ec 10             	sub    $0x10,%esp
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  802d73:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802d77:	0f b7 d9             	movzwl %cx,%ebx
  802d7a:	83 c3 02             	add    $0x2,%ebx
  802d7d:	83 fb 44             	cmp    $0x44,%ebx
  802d80:	76 1c                	jbe    802d9e <dhcp_option_short+0x33>
  802d82:	c7 44 24 08 18 23 81 	movl   $0x812318,0x8(%esp)
  802d89:	00 
  802d8a:	c7 44 24 04 6c 04 00 	movl   $0x46c,0x4(%esp)
  802d91:	00 
  802d92:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802d99:	e8 f0 c2 00 00       	call   80f08e <_panic>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  802d9e:	8d 71 01             	lea    0x1(%ecx),%esi
  802da1:	66 89 70 24          	mov    %si,0x24(%eax)
  802da5:	0f b7 c9             	movzwl %cx,%ecx
  802da8:	89 d3                	mov    %edx,%ebx
  802daa:	66 c1 eb 08          	shr    $0x8,%bx
  802dae:	8b 70 20             	mov    0x20(%eax),%esi
  802db1:	88 9c 0e f0 00 00 00 	mov    %bl,0xf0(%esi,%ecx,1)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  802db8:	8b 58 20             	mov    0x20(%eax),%ebx
  802dbb:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802dbf:	8d 71 01             	lea    0x1(%ecx),%esi
  802dc2:	66 89 70 24          	mov    %si,0x24(%eax)
  802dc6:	0f b7 c9             	movzwl %cx,%ecx
  802dc9:	88 94 0b f0 00 00 00 	mov    %dl,0xf0(%ebx,%ecx,1)
}
  802dd0:	83 c4 10             	add    $0x10,%esp
  802dd3:	5b                   	pop    %ebx
  802dd4:	5e                   	pop    %esi
  802dd5:	5d                   	pop    %ebp
  802dd6:	c3                   	ret    

00802dd7 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  802dd7:	55                   	push   %ebp
  802dd8:	89 e5                	mov    %esp,%ebp
  802dda:	53                   	push   %ebx
  802ddb:	83 ec 14             	sub    $0x14,%esp
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  802dde:	85 c0                	test   %eax,%eax
  802de0:	75 1c                	jne    802dfe <dhcp_option_trailer+0x27>
  802de2:	c7 44 24 08 5c 23 81 	movl   $0x81235c,0x8(%esp)
  802de9:	00 
  802dea:	c7 44 24 04 80 05 00 	movl   $0x580,0x4(%esp)
  802df1:	00 
  802df2:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802df9:	e8 90 c2 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  802dfe:	8b 48 20             	mov    0x20(%eax),%ecx
  802e01:	85 c9                	test   %ecx,%ecx
  802e03:	75 1c                	jne    802e21 <dhcp_option_trailer+0x4a>
  802e05:	c7 44 24 08 80 23 81 	movl   $0x812380,0x8(%esp)
  802e0c:	00 
  802e0d:	c7 44 24 04 81 05 00 	movl   $0x581,0x4(%esp)
  802e14:	00 
  802e15:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802e1c:	e8 6d c2 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  802e21:	0f b7 50 24          	movzwl 0x24(%eax),%edx
  802e25:	66 83 fa 43          	cmp    $0x43,%dx
  802e29:	76 1c                	jbe    802e47 <dhcp_option_trailer+0x70>
  802e2b:	c7 44 24 08 ac 23 81 	movl   $0x8123ac,0x8(%esp)
  802e32:	00 
  802e33:	c7 44 24 04 82 05 00 	movl   $0x582,0x4(%esp)
  802e3a:	00 
  802e3b:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802e42:	e8 47 c2 00 00       	call   80f08e <_panic>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  802e47:	8d 5a 01             	lea    0x1(%edx),%ebx
  802e4a:	66 89 58 24          	mov    %bx,0x24(%eax)
  802e4e:	0f b7 d2             	movzwl %dx,%edx
  802e51:	c6 84 11 f0 00 00 00 	movb   $0xff,0xf0(%ecx,%edx,1)
  802e58:	ff 
  /* packet is too small, or not 4 byte aligned? */
  while ((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) {
  802e59:	eb 31                	jmp    802e8c <dhcp_option_trailer+0xb5>
    /* LWIP_DEBUGF(DHCP_DEBUG,("dhcp_option_trailer:dhcp->options_out_len=%"U16_F", DHCP_OPTIONS_LEN=%"U16_F, dhcp->options_out_len, DHCP_OPTIONS_LEN)); */
    LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  802e5b:	c7 44 24 08 ac 23 81 	movl   $0x8123ac,0x8(%esp)
  802e62:	00 
  802e63:	c7 44 24 04 87 05 00 	movl   $0x587,0x4(%esp)
  802e6a:	00 
  802e6b:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802e72:	e8 17 c2 00 00       	call   80f08e <_panic>
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  802e77:	8b 48 20             	mov    0x20(%eax),%ecx
  802e7a:	8d 5a 01             	lea    0x1(%edx),%ebx
  802e7d:	66 89 58 24          	mov    %bx,0x24(%eax)
  802e81:	0f b7 d2             	movzwl %dx,%edx
  802e84:	c6 84 11 f0 00 00 00 	movb   $0x0,0xf0(%ecx,%edx,1)
  802e8b:	00 
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while ((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) {
  802e8c:	0f b7 50 24          	movzwl 0x24(%eax),%edx
  802e90:	66 83 fa 43          	cmp    $0x43,%dx
  802e94:	76 e1                	jbe    802e77 <dhcp_option_trailer+0xa0>
  802e96:	f6 c2 03             	test   $0x3,%dl
  802e99:	75 c0                	jne    802e5b <dhcp_option_trailer+0x84>
    /* LWIP_DEBUGF(DHCP_DEBUG,("dhcp_option_trailer:dhcp->options_out_len=%"U16_F", DHCP_OPTIONS_LEN=%"U16_F, dhcp->options_out_len, DHCP_OPTIONS_LEN)); */
    LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
  802e9b:	83 c4 14             	add    $0x14,%esp
  802e9e:	5b                   	pop    %ebx
  802e9f:	5d                   	pop    %ebp
  802ea0:	c3                   	ret    

00802ea1 <dhcp_option_long>:
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  802ea1:	55                   	push   %ebp
  802ea2:	89 e5                	mov    %esp,%ebp
  802ea4:	56                   	push   %esi
  802ea5:	53                   	push   %ebx
  802ea6:	83 ec 10             	sub    $0x10,%esp
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  802ea9:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802ead:	0f b7 d9             	movzwl %cx,%ebx
  802eb0:	83 c3 04             	add    $0x4,%ebx
  802eb3:	83 fb 44             	cmp    $0x44,%ebx
  802eb6:	76 1c                	jbe    802ed4 <dhcp_option_long+0x33>
  802eb8:	c7 44 24 08 ec 23 81 	movl   $0x8123ec,0x8(%esp)
  802ebf:	00 
  802ec0:	c7 44 24 04 74 04 00 	movl   $0x474,0x4(%esp)
  802ec7:	00 
  802ec8:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802ecf:	e8 ba c1 00 00       	call   80f08e <_panic>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  802ed4:	8d 71 01             	lea    0x1(%ecx),%esi
  802ed7:	66 89 70 24          	mov    %si,0x24(%eax)
  802edb:	0f b7 c9             	movzwl %cx,%ecx
  802ede:	89 d3                	mov    %edx,%ebx
  802ee0:	c1 eb 18             	shr    $0x18,%ebx
  802ee3:	8b 70 20             	mov    0x20(%eax),%esi
  802ee6:	88 9c 0e f0 00 00 00 	mov    %bl,0xf0(%esi,%ecx,1)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  802eed:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802ef1:	8d 71 01             	lea    0x1(%ecx),%esi
  802ef4:	66 89 70 24          	mov    %si,0x24(%eax)
  802ef8:	0f b7 c9             	movzwl %cx,%ecx
  802efb:	89 d3                	mov    %edx,%ebx
  802efd:	c1 eb 10             	shr    $0x10,%ebx
  802f00:	8b 70 20             	mov    0x20(%eax),%esi
  802f03:	88 9c 0e f0 00 00 00 	mov    %bl,0xf0(%esi,%ecx,1)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  802f0a:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802f0e:	8d 71 01             	lea    0x1(%ecx),%esi
  802f11:	66 89 70 24          	mov    %si,0x24(%eax)
  802f15:	0f b7 c9             	movzwl %cx,%ecx
  802f18:	0f b6 de             	movzbl %dh,%ebx
  802f1b:	8b 70 20             	mov    0x20(%eax),%esi
  802f1e:	88 9c 0e f0 00 00 00 	mov    %bl,0xf0(%esi,%ecx,1)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  802f25:	8b 58 20             	mov    0x20(%eax),%ebx
  802f28:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  802f2c:	8d 71 01             	lea    0x1(%ecx),%esi
  802f2f:	66 89 70 24          	mov    %si,0x24(%eax)
  802f33:	0f b7 c9             	movzwl %cx,%ecx
  802f36:	88 94 0b f0 00 00 00 	mov    %dl,0xf0(%ebx,%ecx,1)
}
  802f3d:	83 c4 10             	add    $0x10,%esp
  802f40:	5b                   	pop    %ebx
  802f41:	5e                   	pop    %esi
  802f42:	5d                   	pop    %ebp
  802f43:	c3                   	ret    

00802f44 <dhcp_create_request>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_create_request(struct netif *netif)
{
  802f44:	55                   	push   %ebp
  802f45:	89 e5                	mov    %esp,%ebp
  802f47:	57                   	push   %edi
  802f48:	56                   	push   %esi
  802f49:	53                   	push   %ebx
  802f4a:	83 ec 1c             	sub    $0x1c,%esp
  802f4d:	89 c7                	mov    %eax,%edi
  struct dhcp *dhcp;
  u16_t i;
  LWIP_ERROR("dhcp_create_request: netif != NULL", (netif != NULL), return ERR_ARG;);
  802f4f:	85 c0                	test   %eax,%eax
  802f51:	75 1c                	jne    802f6f <dhcp_create_request+0x2b>
  802f53:	c7 44 24 08 2c 24 81 	movl   $0x81242c,0x8(%esp)
  802f5a:	00 
  802f5b:	c7 44 24 04 2d 05 00 	movl   $0x52d,0x4(%esp)
  802f62:	00 
  802f63:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802f6a:	e8 1f c1 00 00       	call   80f08e <_panic>
  dhcp = netif->dhcp;
  802f6f:	8b 58 20             	mov    0x20(%eax),%ebx
  LWIP_ERROR("dhcp_create_request: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  802f72:	85 db                	test   %ebx,%ebx
  802f74:	75 1c                	jne    802f92 <dhcp_create_request+0x4e>
  802f76:	c7 44 24 08 50 24 81 	movl   $0x812450,0x8(%esp)
  802f7d:	00 
  802f7e:	c7 44 24 04 2f 05 00 	movl   $0x52f,0x4(%esp)
  802f85:	00 
  802f86:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802f8d:	e8 fc c0 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("dhcp_create_request: dhcp->p_out == NULL", dhcp->p_out == NULL);
  802f92:	83 7b 1c 00          	cmpl   $0x0,0x1c(%ebx)
  802f96:	74 1c                	je     802fb4 <dhcp_create_request+0x70>
  802f98:	c7 44 24 08 74 24 81 	movl   $0x812474,0x8(%esp)
  802f9f:	00 
  802fa0:	c7 44 24 04 30 05 00 	movl   $0x530,0x4(%esp)
  802fa7:	00 
  802fa8:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802faf:	e8 da c0 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("dhcp_create_request: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  802fb4:	83 7b 20 00          	cmpl   $0x0,0x20(%ebx)
  802fb8:	74 1c                	je     802fd6 <dhcp_create_request+0x92>
  802fba:	c7 44 24 08 a0 24 81 	movl   $0x8124a0,0x8(%esp)
  802fc1:	00 
  802fc2:	c7 44 24 04 31 05 00 	movl   $0x531,0x4(%esp)
  802fc9:	00 
  802fca:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  802fd1:	e8 b8 c0 00 00       	call   80f08e <_panic>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  802fd6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802fdd:	00 
  802fde:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
  802fe5:	00 
  802fe6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802fed:	e8 c3 1e 00 00       	call   804eb5 <pbuf_alloc>
  802ff2:	89 43 1c             	mov    %eax,0x1c(%ebx)
  if (dhcp->p_out == NULL) {
  802ff5:	85 c0                	test   %eax,%eax
  802ff7:	0f 84 2a 01 00 00    	je     803127 <dhcp_create_request+0x1e3>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_create_request(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_request: check that first pbuf can hold struct dhcp_msg",
  802ffd:	66 81 78 0a 33 01    	cmpw   $0x133,0xa(%eax)
  803003:	77 1c                	ja     803021 <dhcp_create_request+0xdd>
  803005:	c7 44 24 08 cc 24 81 	movl   $0x8124cc,0x8(%esp)
  80300c:	00 
  80300d:	c7 44 24 04 38 05 00 	movl   $0x538,0x4(%esp)
  803014:	00 
  803015:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  80301c:	e8 6d c0 00 00       	call   80f08e <_panic>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* give unique transaction identifier to this request */
  dhcp->xid = xid++;
  803021:	8b 15 04 50 81 00    	mov    0x815004,%edx
  803027:	8d 4a 01             	lea    0x1(%edx),%ecx
  80302a:	89 0d 04 50 81 00    	mov    %ecx,0x815004
  803030:	89 53 04             	mov    %edx,0x4(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("transaction id xid++(%"X32_F") dhcp->xid(%"U32_F")\n",xid,dhcp->xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  803033:	8b 40 04             	mov    0x4(%eax),%eax
  803036:	89 43 20             	mov    %eax,0x20(%ebx)

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  803039:	c6 00 01             	movb   $0x1,(%eax)
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  80303c:	8b 43 20             	mov    0x20(%ebx),%eax
  80303f:	c6 40 01 01          	movb   $0x1,0x1(%eax)
  /* TODO: make link layer independent */
  dhcp->msg_out->hlen = DHCP_HLEN_ETH;
  803043:	8b 43 20             	mov    0x20(%ebx),%eax
  803046:	c6 40 02 06          	movb   $0x6,0x2(%eax)
  dhcp->msg_out->hops = 0;
  80304a:	8b 43 20             	mov    0x20(%ebx),%eax
  80304d:	c6 40 03 00          	movb   $0x0,0x3(%eax)
  dhcp->msg_out->xid = htonl(dhcp->xid);
  803051:	8b 73 20             	mov    0x20(%ebx),%esi
  803054:	8b 43 04             	mov    0x4(%ebx),%eax
  803057:	89 04 24             	mov    %eax,(%esp)
  80305a:	e8 11 4d 00 00       	call   807d70 <htonl>
  80305f:	89 46 04             	mov    %eax,0x4(%esi)
  dhcp->msg_out->secs = 0;
  803062:	8b 43 20             	mov    0x20(%ebx),%eax
  803065:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
  dhcp->msg_out->flags = 0;
  80306b:	8b 43 20             	mov    0x20(%ebx),%eax
  80306e:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%eax)
  dhcp->msg_out->ciaddr.addr = netif->ip_addr.addr;
  803074:	8b 43 20             	mov    0x20(%ebx),%eax
  803077:	8b 57 04             	mov    0x4(%edi),%edx
  80307a:	89 50 0c             	mov    %edx,0xc(%eax)
  dhcp->msg_out->yiaddr.addr = 0;
  80307d:	8b 43 20             	mov    0x20(%ebx),%eax
  803080:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
  dhcp->msg_out->siaddr.addr = 0;
  803087:	8b 43 20             	mov    0x20(%ebx),%eax
  80308a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  dhcp->msg_out->giaddr.addr = 0;
  803091:	8b 43 20             	mov    0x20(%ebx),%eax
  803094:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
  80309b:	b8 00 00 00 00       	mov    $0x0,%eax
  8030a0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  8030a3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8030a6:	8b 59 20             	mov    0x20(%ecx),%ebx
  8030a9:	89 c1                	mov    %eax,%ecx
  8030ab:	0f b6 77 24          	movzbl 0x24(%edi),%esi
  8030af:	ba 00 00 00 00       	mov    $0x0,%edx
  8030b4:	66 39 c6             	cmp    %ax,%si
  8030b7:	76 05                	jbe    8030be <dhcp_create_request+0x17a>
  8030b9:	0f b6 54 07 25       	movzbl 0x25(%edi,%eax,1),%edx
  8030be:	88 54 0b 1c          	mov    %dl,0x1c(%ebx,%ecx,1)
  8030c2:	83 c0 01             	add    $0x1,%eax
  dhcp->msg_out->flags = 0;
  dhcp->msg_out->ciaddr.addr = netif->ip_addr.addr;
  dhcp->msg_out->yiaddr.addr = 0;
  dhcp->msg_out->siaddr.addr = 0;
  dhcp->msg_out->giaddr.addr = 0;
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  8030c5:	83 f8 10             	cmp    $0x10,%eax
  8030c8:	75 d9                	jne    8030a3 <dhcp_create_request+0x15f>
  8030ca:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  8030cd:	b0 00                	mov    $0x0,%al
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  8030cf:	8b 53 20             	mov    0x20(%ebx),%edx
  8030d2:	c6 44 02 2c 00       	movb   $0x0,0x2c(%edx,%eax,1)
  8030d7:	83 c0 01             	add    $0x1,%eax
  dhcp->msg_out->giaddr.addr = 0;
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  8030da:	83 f8 40             	cmp    $0x40,%eax
  8030dd:	75 f0                	jne    8030cf <dhcp_create_request+0x18b>
  8030df:	b0 00                	mov    $0x0,%al
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
  8030e1:	8b 53 20             	mov    0x20(%ebx),%edx
  8030e4:	c6 44 02 6c 00       	movb   $0x0,0x6c(%edx,%eax,1)
  8030e9:	83 c0 01             	add    $0x1,%eax
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  8030ec:	3d 80 00 00 00       	cmp    $0x80,%eax
  8030f1:	75 ee                	jne    8030e1 <dhcp_create_request+0x19d>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = htonl(0x63825363UL);
  8030f3:	8b 73 20             	mov    0x20(%ebx),%esi
  8030f6:	c7 04 24 63 53 82 63 	movl   $0x63825363,(%esp)
  8030fd:	e8 6e 4c 00 00       	call   807d70 <htonl>
  803102:	89 86 ec 00 00 00    	mov    %eax,0xec(%esi)
  dhcp->options_out_len = 0;
  803108:	66 c7 43 24 00 00    	movw   $0x0,0x24(%ebx)
  80310e:	b8 00 00 00 00       	mov    $0x0,%eax
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  803113:	8b 53 20             	mov    0x20(%ebx),%edx
  803116:	88 84 02 f0 00 00 00 	mov    %al,0xf0(%edx,%eax,1)
  80311d:	83 c0 01             	add    $0x1,%eax
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = htonl(0x63825363UL);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  803120:	83 f8 44             	cmp    $0x44,%eax
  803123:	75 ee                	jne    803113 <dhcp_create_request+0x1cf>
  803125:	eb 07                	jmp    80312e <dhcp_create_request+0x1ea>
  LWIP_ASSERT("dhcp_create_request: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_request: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  if (dhcp->p_out == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_create_request(): could not allocate pbuf\n"));
    return ERR_MEM;
  803127:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80312c:	eb 05                	jmp    803133 <dhcp_create_request+0x1ef>
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  return ERR_OK;
  80312e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  803133:	83 c4 1c             	add    $0x1c,%esp
  803136:	5b                   	pop    %ebx
  803137:	5e                   	pop    %esi
  803138:	5f                   	pop    %edi
  803139:	5d                   	pop    %ebp
  80313a:	c3                   	ret    

0080313b <dhcp_delete_request>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_delete_request(struct netif *netif)
{
  80313b:	55                   	push   %ebp
  80313c:	89 e5                	mov    %esp,%ebp
  80313e:	53                   	push   %ebx
  80313f:	83 ec 14             	sub    $0x14,%esp
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_delete_request: netif != NULL", (netif != NULL), return;);
  803142:	85 c0                	test   %eax,%eax
  803144:	75 1c                	jne    803162 <dhcp_delete_request+0x27>
  803146:	c7 44 24 08 10 25 81 	movl   $0x812510,0x8(%esp)
  80314d:	00 
  80314e:	c7 44 24 04 69 05 00 	movl   $0x569,0x4(%esp)
  803155:	00 
  803156:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  80315d:	e8 2c bf 00 00       	call   80f08e <_panic>
  dhcp = netif->dhcp;
  803162:	8b 58 20             	mov    0x20(%eax),%ebx
  LWIP_ERROR("dhcp_delete_request: dhcp != NULL", (dhcp != NULL), return;);
  803165:	85 db                	test   %ebx,%ebx
  803167:	75 1c                	jne    803185 <dhcp_delete_request+0x4a>
  803169:	c7 44 24 08 34 25 81 	movl   $0x812534,0x8(%esp)
  803170:	00 
  803171:	c7 44 24 04 6b 05 00 	movl   $0x56b,0x4(%esp)
  803178:	00 
  803179:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  803180:	e8 09 bf 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("dhcp_delete_request: dhcp->p_out != NULL", dhcp->p_out != NULL);
  803185:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803188:	85 c0                	test   %eax,%eax
  80318a:	75 1c                	jne    8031a8 <dhcp_delete_request+0x6d>
  80318c:	c7 44 24 08 58 25 81 	movl   $0x812558,0x8(%esp)
  803193:	00 
  803194:	c7 44 24 04 6c 05 00 	movl   $0x56c,0x4(%esp)
  80319b:	00 
  80319c:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  8031a3:	e8 e6 be 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("dhcp_delete_request: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  8031a8:	83 7b 20 00          	cmpl   $0x0,0x20(%ebx)
  8031ac:	75 1c                	jne    8031ca <dhcp_delete_request+0x8f>
  8031ae:	c7 44 24 08 84 25 81 	movl   $0x812584,0x8(%esp)
  8031b5:	00 
  8031b6:	c7 44 24 04 6d 05 00 	movl   $0x56d,0x4(%esp)
  8031bd:	00 
  8031be:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  8031c5:	e8 c4 be 00 00       	call   80f08e <_panic>
  if (dhcp->p_out != NULL) {
    pbuf_free(dhcp->p_out);
  8031ca:	89 04 24             	mov    %eax,(%esp)
  8031cd:	e8 02 1c 00 00       	call   804dd4 <pbuf_free>
  }
  dhcp->p_out = NULL;
  8031d2:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
  dhcp->msg_out = NULL;
  8031d9:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
}
  8031e0:	83 c4 14             	add    $0x14,%esp
  8031e3:	5b                   	pop    %ebx
  8031e4:	5d                   	pop    %ebp
  8031e5:	c3                   	ret    

008031e6 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  8031e6:	55                   	push   %ebp
  8031e7:	89 e5                	mov    %esp,%ebp
  8031e9:	57                   	push   %edi
  8031ea:	56                   	push   %esi
  8031eb:	53                   	push   %ebx
  8031ec:	83 ec 2c             	sub    $0x2c,%esp
  8031ef:	89 c7                	mov    %eax,%edi
  struct dhcp *dhcp = netif->dhcp;
  8031f1:	8b 58 20             	mov    0x20(%eax),%ebx
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
  8031f4:	ba 04 00 00 00       	mov    $0x4,%edx
  8031f9:	89 d8                	mov    %ebx,%eax
  8031fb:	e8 80 f9 ff ff       	call   802b80 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  803200:	89 f8                	mov    %edi,%eax
  803202:	e8 3d fd ff ff       	call   802f44 <dhcp_create_request>
  803207:	89 c6                	mov    %eax,%esi
  if (result == ERR_OK) {
  803209:	84 c0                	test   %al,%al
  80320b:	0f 85 a3 00 00 00    	jne    8032b4 <dhcp_rebind+0xce>

    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  803211:	b9 01 00 00 00       	mov    $0x1,%ecx
  803216:	ba 35 00 00 00       	mov    $0x35,%edx
  80321b:	89 d8                	mov    %ebx,%eax
  80321d:	e8 dd fa ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_REQUEST);
  803222:	ba 03 00 00 00       	mov    $0x3,%edx
  803227:	89 d8                	mov    %ebx,%eax
  803229:	e8 88 fa ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  80322e:	b9 02 00 00 00       	mov    $0x2,%ecx
  803233:	ba 39 00 00 00       	mov    $0x39,%edx
  803238:	89 d8                	mov    %ebx,%eax
  80323a:	e8 c0 fa ff ff       	call   802cff <dhcp_option>
    dhcp_option_short(dhcp, 576);
  80323f:	ba 40 02 00 00       	mov    $0x240,%edx
  803244:	89 d8                	mov    %ebx,%eax
  803246:	e8 20 fb ff ff       	call   802d6b <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
  80324b:	89 d8                	mov    %ebx,%eax
  80324d:	e8 85 fb ff ff       	call   802dd7 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  803252:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  803256:	66 05 f0 00          	add    $0xf0,%ax
  80325a:	0f b7 c0             	movzwl %ax,%eax
  80325d:	89 44 24 04          	mov    %eax,0x4(%esp)
  803261:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803264:	89 04 24             	mov    %eax,(%esp)
  803267:	e8 da 1e 00 00       	call   805146 <pbuf_realloc>

    /* broadcast to server */
    udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  80326c:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  803273:	00 
  803274:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  80327b:	00 
  80327c:	8b 43 08             	mov    0x8(%ebx),%eax
  80327f:	89 04 24             	mov    %eax,(%esp)
  803282:	e8 8e 64 00 00       	call   809715 <udp_connect>
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  803287:	89 7c 24 10          	mov    %edi,0x10(%esp)
  80328b:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  803292:	00 
  803293:	c7 44 24 08 9c 2e 81 	movl   $0x812e9c,0x8(%esp)
  80329a:	00 
  80329b:	8b 43 1c             	mov    0x1c(%ebx),%eax
  80329e:	89 44 24 04          	mov    %eax,0x4(%esp)
  8032a2:	8b 43 08             	mov    0x8(%ebx),%eax
  8032a5:	89 04 24             	mov    %eax,(%esp)
  8032a8:	e8 46 62 00 00       	call   8094f3 <udp_sendto_if>
    dhcp_delete_request(netif);
  8032ad:	89 f8                	mov    %edi,%eax
  8032af:	e8 87 fe ff ff       	call   80313b <dhcp_delete_request>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  8032b4:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  8032b8:	8d 48 01             	lea    0x1(%eax),%ecx
  8032bb:	88 4b 01             	mov    %cl,0x1(%ebx)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  8032be:	b8 10 27 00 00       	mov    $0x2710,%eax
  8032c3:	80 f9 09             	cmp    $0x9,%cl
  8032c6:	77 08                	ja     8032d0 <dhcp_rebind+0xea>
  8032c8:	0f b6 c9             	movzbl %cl,%ecx
  8032cb:	66 69 c1 e8 03       	imul   $0x3e8,%cx,%ax
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  8032d0:	0f b7 d0             	movzwl %ax,%edx
  8032d3:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  8032d9:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
  8032de:	89 d0                	mov    %edx,%eax
  8032e0:	f7 ef                	imul   %edi
  8032e2:	c1 fa 05             	sar    $0x5,%edx
  8032e5:	66 89 53 26          	mov    %dx,0x26(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  8032e9:	89 f0                	mov    %esi,%eax
  8032eb:	83 c4 2c             	add    $0x2c,%esp
  8032ee:	5b                   	pop    %ebx
  8032ef:	5e                   	pop    %esi
  8032f0:	5f                   	pop    %edi
  8032f1:	5d                   	pop    %ebp
  8032f2:	c3                   	ret    

008032f3 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  8032f3:	55                   	push   %ebp
  8032f4:	89 e5                	mov    %esp,%ebp
  8032f6:	57                   	push   %edi
  8032f7:	56                   	push   %esi
  8032f8:	53                   	push   %ebx
  8032f9:	83 ec 2c             	sub    $0x2c,%esp
  8032fc:	89 c7                	mov    %eax,%edi
  struct dhcp *dhcp = netif->dhcp;
  8032fe:	8b 58 20             	mov    0x20(%eax),%ebx
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_discover()\n"));
  ip_addr_set(&dhcp->offered_ip_addr, IP_ADDR_ANY);
  803301:	a1 a0 2e 81 00       	mov    0x812ea0,%eax
  803306:	89 43 30             	mov    %eax,0x30(%ebx)
  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  803309:	89 f8                	mov    %edi,%eax
  80330b:	e8 34 fc ff ff       	call   802f44 <dhcp_create_request>
  803310:	89 c6                	mov    %eax,%esi
  if (result == ERR_OK) {
  803312:	84 c0                	test   %al,%al
  803314:	0f 85 f0 00 00 00    	jne    80340a <dhcp_discover+0x117>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  80331a:	b9 01 00 00 00       	mov    $0x1,%ecx
  80331f:	ba 35 00 00 00       	mov    $0x35,%edx
  803324:	89 d8                	mov    %ebx,%eax
  803326:	e8 d4 f9 ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_DISCOVER);
  80332b:	ba 01 00 00 00       	mov    $0x1,%edx
  803330:	89 d8                	mov    %ebx,%eax
  803332:	e8 7f f9 ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  803337:	b9 02 00 00 00       	mov    $0x2,%ecx
  80333c:	ba 39 00 00 00       	mov    $0x39,%edx
  803341:	89 d8                	mov    %ebx,%eax
  803343:	e8 b7 f9 ff ff       	call   802cff <dhcp_option>
    dhcp_option_short(dhcp, 576);
  803348:	ba 40 02 00 00       	mov    $0x240,%edx
  80334d:	89 d8                	mov    %ebx,%eax
  80334f:	e8 17 fa ff ff       	call   802d6b <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  803354:	b9 04 00 00 00       	mov    $0x4,%ecx
  803359:	ba 37 00 00 00       	mov    $0x37,%edx
  80335e:	89 d8                	mov    %ebx,%eax
  803360:	e8 9a f9 ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  803365:	ba 01 00 00 00       	mov    $0x1,%edx
  80336a:	89 d8                	mov    %ebx,%eax
  80336c:	e8 45 f9 ff ff       	call   802cb6 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  803371:	ba 03 00 00 00       	mov    $0x3,%edx
  803376:	89 d8                	mov    %ebx,%eax
  803378:	e8 39 f9 ff ff       	call   802cb6 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  80337d:	ba 1c 00 00 00       	mov    $0x1c,%edx
  803382:	89 d8                	mov    %ebx,%eax
  803384:	e8 2d f9 ff ff       	call   802cb6 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  803389:	ba 06 00 00 00       	mov    $0x6,%edx
  80338e:	89 d8                	mov    %ebx,%eax
  803390:	e8 21 f9 ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
  803395:	89 d8                	mov    %ebx,%eax
  803397:	e8 3b fa ff ff       	call   802dd7 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  80339c:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  8033a0:	66 05 f0 00          	add    $0xf0,%ax
  8033a4:	0f b7 c0             	movzwl %ax,%eax
  8033a7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8033ab:	8b 43 1c             	mov    0x1c(%ebx),%eax
  8033ae:	89 04 24             	mov    %eax,(%esp)
  8033b1:	e8 90 1d 00 00       	call   805146 <pbuf_realloc>

    udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  8033b6:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  8033bd:	00 
  8033be:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  8033c5:	00 
  8033c6:	8b 43 08             	mov    0x8(%ebx),%eax
  8033c9:	89 04 24             	mov    %eax,(%esp)
  8033cc:	e8 44 63 00 00       	call   809715 <udp_connect>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  8033d1:	89 7c 24 10          	mov    %edi,0x10(%esp)
  8033d5:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  8033dc:	00 
  8033dd:	c7 44 24 08 9c 2e 81 	movl   $0x812e9c,0x8(%esp)
  8033e4:	00 
  8033e5:	8b 43 1c             	mov    0x1c(%ebx),%eax
  8033e8:	89 44 24 04          	mov    %eax,0x4(%esp)
  8033ec:	8b 43 08             	mov    0x8(%ebx),%eax
  8033ef:	89 04 24             	mov    %eax,(%esp)
  8033f2:	e8 fc 60 00 00       	call   8094f3 <udp_sendto_if>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_request(netif);
  8033f7:	89 f8                	mov    %edi,%eax
  8033f9:	e8 3d fd ff ff       	call   80313b <dhcp_delete_request>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
    dhcp_set_state(dhcp, DHCP_SELECTING);
  8033fe:	ba 06 00 00 00       	mov    $0x6,%edx
  803403:	89 d8                	mov    %ebx,%eax
  803405:	e8 76 f7 ff ff       	call   802b80 <dhcp_set_state>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  80340a:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  80340e:	8d 48 01             	lea    0x1(%eax),%ecx
  803411:	88 4b 01             	mov    %cl,0x1(%ebx)
  if(dhcp->tries >= 9 && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = dhcp->tries < 4 ? (dhcp->tries + 1) * 1000 : 10 * 1000;
  803414:	b8 10 27 00 00       	mov    $0x2710,%eax
  803419:	80 f9 03             	cmp    $0x3,%cl
  80341c:	77 0b                	ja     803429 <dhcp_discover+0x136>
  80341e:	0f b6 c1             	movzbl %cl,%eax
  803421:	83 c0 01             	add    $0x1,%eax
  803424:	66 69 c0 e8 03       	imul   $0x3e8,%ax,%ax
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  803429:	0f b7 d0             	movzwl %ax,%edx
  80342c:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  803432:	b9 d3 4d 62 10       	mov    $0x10624dd3,%ecx
  803437:	89 d0                	mov    %edx,%eax
  803439:	f7 e9                	imul   %ecx
  80343b:	c1 fa 05             	sar    $0x5,%edx
  80343e:	66 89 53 26          	mov    %dx,0x26(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  803442:	89 f0                	mov    %esi,%eax
  803444:	83 c4 2c             	add    $0x2c,%esp
  803447:	5b                   	pop    %ebx
  803448:	5e                   	pop    %esi
  803449:	5f                   	pop    %edi
  80344a:	5d                   	pop    %ebp
  80344b:	c3                   	ret    

0080344c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  80344c:	55                   	push   %ebp
  80344d:	89 e5                	mov    %esp,%ebp
  80344f:	57                   	push   %edi
  803450:	56                   	push   %esi
  803451:	53                   	push   %ebx
  803452:	83 ec 2c             	sub    $0x2c,%esp
  803455:	89 c7                	mov    %eax,%edi
  struct dhcp *dhcp = netif->dhcp;
  803457:	8b 58 20             	mov    0x20(%eax),%ebx
#endif /* LWIP_NETIF_HOSTNAME */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  80345a:	e8 e5 fa ff ff       	call   802f44 <dhcp_create_request>
  80345f:	89 c6                	mov    %eax,%esi
  if (result == ERR_OK) {
  803461:	84 c0                	test   %al,%al
  803463:	0f 85 3a 01 00 00    	jne    8035a3 <dhcp_select+0x157>
    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  803469:	b9 01 00 00 00       	mov    $0x1,%ecx
  80346e:	ba 35 00 00 00       	mov    $0x35,%edx
  803473:	89 d8                	mov    %ebx,%eax
  803475:	e8 85 f8 ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_REQUEST);
  80347a:	ba 03 00 00 00       	mov    $0x3,%edx
  80347f:	89 d8                	mov    %ebx,%eax
  803481:	e8 30 f8 ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  803486:	b9 02 00 00 00       	mov    $0x2,%ecx
  80348b:	ba 39 00 00 00       	mov    $0x39,%edx
  803490:	89 d8                	mov    %ebx,%eax
  803492:	e8 68 f8 ff ff       	call   802cff <dhcp_option>
    dhcp_option_short(dhcp, 576);
  803497:	ba 40 02 00 00       	mov    $0x240,%edx
  80349c:	89 d8                	mov    %ebx,%eax
  80349e:	e8 c8 f8 ff ff       	call   802d6b <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  8034a3:	b9 04 00 00 00       	mov    $0x4,%ecx
  8034a8:	ba 32 00 00 00       	mov    $0x32,%edx
  8034ad:	89 d8                	mov    %ebx,%eax
  8034af:	e8 4b f8 ff ff       	call   802cff <dhcp_option>
    dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
  8034b4:	8b 43 30             	mov    0x30(%ebx),%eax
  8034b7:	89 04 24             	mov    %eax,(%esp)
  8034ba:	e8 eb 4a 00 00       	call   807faa <ntohl>
  8034bf:	89 c2                	mov    %eax,%edx
  8034c1:	89 d8                	mov    %ebx,%eax
  8034c3:	e8 d9 f9 ff ff       	call   802ea1 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  8034c8:	b9 04 00 00 00       	mov    $0x4,%ecx
  8034cd:	ba 36 00 00 00       	mov    $0x36,%edx
  8034d2:	89 d8                	mov    %ebx,%eax
  8034d4:	e8 26 f8 ff ff       	call   802cff <dhcp_option>
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
  8034d9:	8b 43 2c             	mov    0x2c(%ebx),%eax
  8034dc:	89 04 24             	mov    %eax,(%esp)
  8034df:	e8 c6 4a 00 00       	call   807faa <ntohl>
  8034e4:	89 c2                	mov    %eax,%edx
  8034e6:	89 d8                	mov    %ebx,%eax
  8034e8:	e8 b4 f9 ff ff       	call   802ea1 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  8034ed:	b9 04 00 00 00       	mov    $0x4,%ecx
  8034f2:	ba 37 00 00 00       	mov    $0x37,%edx
  8034f7:	89 d8                	mov    %ebx,%eax
  8034f9:	e8 01 f8 ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  8034fe:	ba 01 00 00 00       	mov    $0x1,%edx
  803503:	89 d8                	mov    %ebx,%eax
  803505:	e8 ac f7 ff ff       	call   802cb6 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  80350a:	ba 03 00 00 00       	mov    $0x3,%edx
  80350f:	89 d8                	mov    %ebx,%eax
  803511:	e8 a0 f7 ff ff       	call   802cb6 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  803516:	ba 1c 00 00 00       	mov    $0x1c,%edx
  80351b:	89 d8                	mov    %ebx,%eax
  80351d:	e8 94 f7 ff ff       	call   802cb6 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  803522:	ba 06 00 00 00       	mov    $0x6,%edx
  803527:	89 d8                	mov    %ebx,%eax
  803529:	e8 88 f7 ff ff       	call   802cb6 <dhcp_option_byte>
        dhcp_option_byte(dhcp, *p++);
      }
    }
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  80352e:	89 d8                	mov    %ebx,%eax
  803530:	e8 a2 f8 ff ff       	call   802dd7 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  803535:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  803539:	66 05 f0 00          	add    $0xf0,%ax
  80353d:	0f b7 c0             	movzwl %ax,%eax
  803540:	89 44 24 04          	mov    %eax,0x4(%esp)
  803544:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803547:	89 04 24             	mov    %eax,(%esp)
  80354a:	e8 f7 1b 00 00       	call   805146 <pbuf_realloc>

    /* TODO: we really should bind to a specific local interface here
       but we cannot specify an unconfigured netif as it is addressless */
    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  80354f:	89 7c 24 10          	mov    %edi,0x10(%esp)
  803553:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  80355a:	00 
  80355b:	c7 44 24 08 9c 2e 81 	movl   $0x812e9c,0x8(%esp)
  803562:	00 
  803563:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803566:	89 44 24 04          	mov    %eax,0x4(%esp)
  80356a:	8b 43 08             	mov    0x8(%ebx),%eax
  80356d:	89 04 24             	mov    %eax,(%esp)
  803570:	e8 7e 5f 00 00       	call   8094f3 <udp_sendto_if>
    /* reconnect to any (or to server here?!) */
    udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  803575:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  80357c:	00 
  80357d:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803584:	00 
  803585:	8b 43 08             	mov    0x8(%ebx),%eax
  803588:	89 04 24             	mov    %eax,(%esp)
  80358b:	e8 85 61 00 00       	call   809715 <udp_connect>
    dhcp_delete_request(netif);
  803590:	89 f8                	mov    %edi,%eax
  803592:	e8 a4 fb ff ff       	call   80313b <dhcp_delete_request>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
    dhcp_set_state(dhcp, DHCP_REQUESTING);
  803597:	ba 01 00 00 00       	mov    $0x1,%edx
  80359c:	89 d8                	mov    %ebx,%eax
  80359e:	e8 dd f5 ff ff       	call   802b80 <dhcp_set_state>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  8035a3:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  8035a7:	8d 48 01             	lea    0x1(%eax),%ecx
  8035aa:	88 4b 01             	mov    %cl,0x1(%ebx)
  msecs = dhcp->tries < 4 ? dhcp->tries * 1000 : 4 * 1000;
  8035ad:	b8 a0 0f 00 00       	mov    $0xfa0,%eax
  8035b2:	80 f9 03             	cmp    $0x3,%cl
  8035b5:	77 08                	ja     8035bf <dhcp_select+0x173>
  8035b7:	0f b6 c9             	movzbl %cl,%ecx
  8035ba:	66 69 c1 e8 03       	imul   $0x3e8,%cx,%ax
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  8035bf:	0f b7 d0             	movzwl %ax,%edx
  8035c2:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  8035c8:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
  8035cd:	89 d0                	mov    %edx,%eax
  8035cf:	f7 ef                	imul   %edi
  8035d1:	c1 fa 05             	sar    $0x5,%edx
  8035d4:	66 89 53 26          	mov    %dx,0x26(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  8035d8:	89 f0                	mov    %esi,%eax
  8035da:	83 c4 2c             	add    $0x2c,%esp
  8035dd:	5b                   	pop    %ebx
  8035de:	5e                   	pop    %esi
  8035df:	5f                   	pop    %edi
  8035e0:	5d                   	pop    %ebp
  8035e1:	c3                   	ret    

008035e2 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  8035e2:	55                   	push   %ebp
  8035e3:	89 e5                	mov    %esp,%ebp
  8035e5:	53                   	push   %ebx
  8035e6:	83 ec 14             	sub    $0x14,%esp
  struct dhcp *dhcp = netif->dhcp;
  8035e9:	8b 58 20             	mov    0x20(%eax),%ebx
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  8035ec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8035f3:	00 
  8035f4:	8d 53 30             	lea    0x30(%ebx),%edx
  8035f7:	89 54 24 04          	mov    %edx,0x4(%esp)
  8035fb:	89 04 24             	mov    %eax,(%esp)
  8035fe:	e8 e1 6a 00 00       	call   80a0e4 <etharp_query>
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
  803603:	80 43 01 01          	addb   $0x1,0x1(%ebx)
  msecs = 500;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  803607:	66 c7 43 26 01 00    	movw   $0x1,0x26(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
  dhcp_set_state(dhcp, DHCP_CHECKING);
  80360d:	ba 08 00 00 00       	mov    $0x8,%edx
  803612:	89 d8                	mov    %ebx,%eax
  803614:	e8 67 f5 ff ff       	call   802b80 <dhcp_set_state>
}
  803619:	83 c4 14             	add    $0x14,%esp
  80361c:	5b                   	pop    %ebx
  80361d:	5d                   	pop    %ebp
  80361e:	c3                   	ret    

0080361f <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  80361f:	55                   	push   %ebp
  803620:	89 e5                	mov    %esp,%ebp
  803622:	57                   	push   %edi
  803623:	56                   	push   %esi
  803624:	53                   	push   %ebx
  803625:	83 ec 2c             	sub    $0x2c,%esp
  803628:	89 c6                	mov    %eax,%esi
  u32_t timeout;
  struct dhcp *dhcp;
  struct ip_addr sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  80362a:	85 c0                	test   %eax,%eax
  80362c:	75 1c                	jne    80364a <dhcp_bind+0x2b>
  80362e:	c7 44 24 08 f7 25 81 	movl   $0x8125f7,0x8(%esp)
  803635:	00 
  803636:	c7 44 24 04 3d 03 00 	movl   $0x33d,0x4(%esp)
  80363d:	00 
  80363e:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  803645:	e8 44 ba 00 00       	call   80f08e <_panic>
  dhcp = netif->dhcp;
  80364a:	8b 58 20             	mov    0x20(%eax),%ebx
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  80364d:	85 db                	test   %ebx,%ebx
  80364f:	75 1c                	jne    80366d <dhcp_bind+0x4e>
  803651:	c7 44 24 08 10 26 81 	movl   $0x812610,0x8(%esp)
  803658:	00 
  803659:	c7 44 24 04 3f 03 00 	movl   $0x33f,0x4(%esp)
  803660:	00 
  803661:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  803668:	e8 21 ba 00 00       	call   80f08e <_panic>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  80366d:	8b 43 50             	mov    0x50(%ebx),%eax
  803670:	83 f8 ff             	cmp    $0xffffffff,%eax
  803673:	74 2a                	je     80369f <dhcp_bind+0x80>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  803675:	83 c0 1e             	add    $0x1e,%eax
  803678:	ba 89 88 88 88       	mov    $0x88888889,%edx
  80367d:	f7 e2                	mul    %edx
  80367f:	c1 ea 05             	shr    $0x5,%edx
  803682:	81 fa ff ff 00 00    	cmp    $0xffff,%edx
  803688:	b8 ff ff 00 00       	mov    $0xffff,%eax
  80368d:	0f 46 c2             	cmovbe %edx,%eax
    if(timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t1_timeout = (u16_t)timeout;
  803690:	66 85 c0             	test   %ax,%ax
  803693:	ba 01 00 00 00       	mov    $0x1,%edx
  803698:	0f 44 c2             	cmove  %edx,%eax
  80369b:	66 89 43 28          	mov    %ax,0x28(%ebx)
      dhcp->t1_timeout = 1;
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  80369f:	8b 43 54             	mov    0x54(%ebx),%eax
  8036a2:	83 f8 ff             	cmp    $0xffffffff,%eax
  8036a5:	74 2a                	je     8036d1 <dhcp_bind+0xb2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  8036a7:	83 c0 1e             	add    $0x1e,%eax
  8036aa:	ba 89 88 88 88       	mov    $0x88888889,%edx
  8036af:	f7 e2                	mul    %edx
  8036b1:	c1 ea 05             	shr    $0x5,%edx
  8036b4:	81 fa ff ff 00 00    	cmp    $0xffff,%edx
  8036ba:	b8 ff ff 00 00       	mov    $0xffff,%eax
  8036bf:	0f 46 c2             	cmovbe %edx,%eax
    if(timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t2_timeout = (u16_t)timeout;
  8036c2:	66 85 c0             	test   %ax,%ax
  8036c5:	ba 01 00 00 00       	mov    $0x1,%edx
  8036ca:	0f 44 c2             	cmove  %edx,%eax
  8036cd:	66 89 43 2a          	mov    %ax,0x2a(%ebx)
      dhcp->t2_timeout = 1;
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }
  /* copy offered network mask */
  ip_addr_set(&sn_mask, &dhcp->offered_sn_mask);
  8036d1:	83 fb cc             	cmp    $0xffffffcc,%ebx
  8036d4:	0f 84 be 00 00 00    	je     803798 <dhcp_bind+0x179>
  8036da:	8b 43 34             	mov    0x34(%ebx),%eax
  8036dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  /* subnet mask not given? */
  /* TODO: this is not a valid check. what if the network mask is 0? */
  if (sn_mask.addr == 0) {
  8036e0:	85 c0                	test   %eax,%eax
  8036e2:	75 48                	jne    80372c <dhcp_bind+0x10d>
    /* choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&sn_mask);
  8036e4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8036eb:	e8 ba 48 00 00       	call   807faa <ntohl>
  8036f0:	c1 e8 18             	shr    $0x18,%eax
    if (first_octet <= 127) {
  8036f3:	84 c0                	test   %al,%al
  8036f5:	78 11                	js     803708 <dhcp_bind+0xe9>
      sn_mask.addr = htonl(0xff000000);
  8036f7:	c7 04 24 00 00 00 ff 	movl   $0xff000000,(%esp)
  8036fe:	e8 6d 46 00 00       	call   807d70 <htonl>
  803703:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  803706:	eb 24                	jmp    80372c <dhcp_bind+0x10d>
    } else if (first_octet >= 192) {
  803708:	3c bf                	cmp    $0xbf,%al
  80370a:	76 11                	jbe    80371d <dhcp_bind+0xfe>
      sn_mask.addr = htonl(0xffffff00);
  80370c:	c7 04 24 00 ff ff ff 	movl   $0xffffff00,(%esp)
  803713:	e8 58 46 00 00       	call   807d70 <htonl>
  803718:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80371b:	eb 0f                	jmp    80372c <dhcp_bind+0x10d>
    } else {
      sn_mask.addr = htonl(0xffff0000);
  80371d:	c7 04 24 00 00 ff ff 	movl   $0xffff0000,(%esp)
  803724:	e8 47 46 00 00       	call   807d70 <htonl>
  803729:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
  }

  ip_addr_set(&gw_addr, &dhcp->offered_gw_addr);
  80372c:	83 fb c8             	cmp    $0xffffffc8,%ebx
  80372f:	74 0a                	je     80373b <dhcp_bind+0x11c>
  803731:	8b 43 38             	mov    0x38(%ebx),%eax
  803734:	89 45 e0             	mov    %eax,-0x20(%ebp)
  /* gateway address not given? */
  if (gw_addr.addr == 0) {
  803737:	85 c0                	test   %eax,%eax
  803739:	75 1a                	jne    803755 <dhcp_bind+0x136>
    /* copy network address */
    gw_addr.addr = (dhcp->offered_ip_addr.addr & sn_mask.addr);
  80373b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  80373e:	23 7b 30             	and    0x30(%ebx),%edi
  803741:	89 7d e0             	mov    %edi,-0x20(%ebp)
    /* use first host address on network as gateway */
    gw_addr.addr |= htonl(0x00000001);
  803744:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80374b:	e8 20 46 00 00       	call   807d70 <htonl>
  803750:	09 c7                	or     %eax,%edi
  803752:	89 7d e0             	mov    %edi,-0x20(%ebp)
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n", dhcp->offered_ip_addr.addr));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
  803755:	8d 43 30             	lea    0x30(%ebx),%eax
  803758:	89 44 24 04          	mov    %eax,0x4(%esp)
  80375c:	89 34 24             	mov    %esi,(%esp)
  80375f:	e8 93 13 00 00       	call   804af7 <netif_set_ipaddr>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n", sn_mask.addr));
  netif_set_netmask(netif, &sn_mask);
  803764:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  803767:	89 44 24 04          	mov    %eax,0x4(%esp)
  80376b:	89 34 24             	mov    %esi,(%esp)
  80376e:	e8 f5 14 00 00       	call   804c68 <netif_set_netmask>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n", gw_addr.addr));
  netif_set_gw(netif, &gw_addr);
  803773:	8d 45 e0             	lea    -0x20(%ebp),%eax
  803776:	89 44 24 04          	mov    %eax,0x4(%esp)
  80377a:	89 34 24             	mov    %esi,(%esp)
  80377d:	e8 cb 14 00 00       	call   804c4d <netif_set_gw>
  /* bring the interface up */
  netif_set_up(netif);
  803782:	89 34 24             	mov    %esi,(%esp)
  803785:	e8 06 15 00 00       	call   804c90 <netif_set_up>
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
  80378a:	ba 0a 00 00 00       	mov    $0xa,%edx
  80378f:	89 d8                	mov    %ebx,%eax
  803791:	e8 ea f3 ff ff       	call   802b80 <dhcp_set_state>
  803796:	eb 0c                	jmp    8037a4 <dhcp_bind+0x185>
      dhcp->t2_timeout = 1;
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }
  /* copy offered network mask */
  ip_addr_set(&sn_mask, &dhcp->offered_sn_mask);
  803798:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  80379f:	e9 40 ff ff ff       	jmp    8036e4 <dhcp_bind+0xc5>
  netif_set_gw(netif, &gw_addr);
  /* bring the interface up */
  netif_set_up(netif);
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
}
  8037a4:	83 c4 2c             	add    $0x2c,%esp
  8037a7:	5b                   	pop    %ebx
  8037a8:	5e                   	pop    %esi
  8037a9:	5f                   	pop    %edi
  8037aa:	5d                   	pop    %ebp
  8037ab:	c3                   	ret    

008037ac <dhcp_free_reply>:
 * Free the incoming DHCP message including contiguous copy of
 * its DHCP options.
 *
 */
static void dhcp_free_reply(struct dhcp *dhcp)
{
  8037ac:	55                   	push   %ebp
  8037ad:	89 e5                	mov    %esp,%ebp
  8037af:	53                   	push   %ebx
  8037b0:	83 ec 14             	sub    $0x14,%esp
  8037b3:	89 c3                	mov    %eax,%ebx
  if (dhcp->msg_in != NULL) {
  8037b5:	8b 40 10             	mov    0x10(%eax),%eax
  8037b8:	85 c0                	test   %eax,%eax
  8037ba:	74 0f                	je     8037cb <dhcp_free_reply+0x1f>
    mem_free((void *)dhcp->msg_in);
  8037bc:	89 04 24             	mov    %eax,(%esp)
  8037bf:	e8 01 0d 00 00       	call   8044c5 <mem_free>
    dhcp->msg_in = NULL;
  8037c4:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  }
  if (dhcp->options_in) {
  8037cb:	8b 43 14             	mov    0x14(%ebx),%eax
  8037ce:	85 c0                	test   %eax,%eax
  8037d0:	74 15                	je     8037e7 <dhcp_free_reply+0x3b>
    mem_free((void *)dhcp->options_in);
  8037d2:	89 04 24             	mov    %eax,(%esp)
  8037d5:	e8 eb 0c 00 00       	call   8044c5 <mem_free>
    dhcp->options_in = NULL;
  8037da:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
    dhcp->options_in_len = 0;
  8037e1:	66 c7 43 18 00 00    	movw   $0x0,0x18(%ebx)
  }
  LWIP_DEBUGF(DHCP_DEBUG, ("dhcp_free_reply(): free'd\n"));
}
  8037e7:	83 c4 14             	add    $0x14,%esp
  8037ea:	5b                   	pop    %ebx
  8037eb:	5d                   	pop    %ebp
  8037ec:	c3                   	ret    

008037ed <dhcp_recv>:

/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
  8037ed:	55                   	push   %ebp
  8037ee:	89 e5                	mov    %esp,%ebp
  8037f0:	57                   	push   %edi
  8037f1:	56                   	push   %esi
  8037f2:	53                   	push   %ebx
  8037f3:	83 ec 2c             	sub    $0x2c,%esp
  8037f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8037f9:	8b 7d 10             	mov    0x10(%ebp),%edi
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
  8037fc:	8b 73 20             	mov    0x20(%ebx),%esi
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  8037ff:	8b 4f 04             	mov    0x4(%edi),%ecx
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
  dhcp->p = p;
  803802:	89 7e 0c             	mov    %edi,0xc(%esi)
  /* TODO: check packet length before reading them */
  if (reply_msg->op != DHCP_BOOTREPLY) {
  803805:	80 39 02             	cmpb   $0x2,(%ecx)
  803808:	0f 85 0d 04 00 00    	jne    803c1b <dhcp_recv+0x42e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  80380e:	0f b6 43 24          	movzbl 0x24(%ebx),%eax
  803812:	ba 00 00 00 00       	mov    $0x0,%edx
  803817:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  80381a:	89 ce                	mov    %ecx,%esi
  80381c:	89 c1                	mov    %eax,%ecx
  80381e:	eb 12                	jmp    803832 <dhcp_recv+0x45>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  803820:	0f b6 44 13 25       	movzbl 0x25(%ebx,%edx,1),%eax
  803825:	83 c2 01             	add    $0x1,%edx
  803828:	3a 44 16 1b          	cmp    0x1b(%esi,%edx,1),%al
  80382c:	0f 85 e6 03 00 00    	jne    803c18 <dhcp_recv+0x42b>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  803832:	38 d1                	cmp    %dl,%cl
  803834:	77 ea                	ja     803820 <dhcp_recv+0x33>
  803836:	89 f1                	mov    %esi,%ecx
  803838:	8b 75 e4             	mov    -0x1c(%ebp),%esi
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
  80383b:	8b 41 04             	mov    0x4(%ecx),%eax
  80383e:	89 04 24             	mov    %eax,(%esp)
  803841:	e8 64 47 00 00       	call   807faa <ntohl>
  803846:	3b 46 04             	cmp    0x4(%esi),%eax
  803849:	0f 85 cc 03 00 00    	jne    803c1b <dhcp_recv+0x42e>
 */
static err_t
dhcp_unfold_reply(struct dhcp *dhcp)
{
  u16_t ret;
  LWIP_ERROR("dhcp != NULL", (dhcp != NULL), return ERR_ARG;);
  80384f:	85 f6                	test   %esi,%esi
  803851:	75 1c                	jne    80386f <dhcp_recv+0x82>
  803853:	c7 44 24 08 1b 26 81 	movl   $0x81261b,0x8(%esp)
  80385a:	00 
  80385b:	c7 44 24 04 89 04 00 	movl   $0x489,0x4(%esp)
  803862:	00 
  803863:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  80386a:	e8 1f b8 00 00       	call   80f08e <_panic>
  LWIP_ERROR("dhcp->p != NULL", (dhcp->p != NULL), return ERR_VAL;);
  80386f:	83 7e 0c 00          	cmpl   $0x0,0xc(%esi)
  803873:	75 1c                	jne    803891 <dhcp_recv+0xa4>
  803875:	c7 44 24 08 28 26 81 	movl   $0x812628,0x8(%esp)
  80387c:	00 
  80387d:	c7 44 24 04 8a 04 00 	movl   $0x48a,0x4(%esp)
  803884:	00 
  803885:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  80388c:	e8 fd b7 00 00       	call   80f08e <_panic>
  /* free any left-overs from previous unfolds */
  dhcp_free_reply(dhcp);
  803891:	89 f0                	mov    %esi,%eax
  803893:	e8 14 ff ff ff       	call   8037ac <dhcp_free_reply>
  /* options present? */
  if (dhcp->p->tot_len > (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN)) {
  803898:	8b 46 0c             	mov    0xc(%esi),%eax
  80389b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80389f:	66 3d f0 00          	cmp    $0xf0,%ax
  8038a3:	76 1e                	jbe    8038c3 <dhcp_recv+0xd6>
    dhcp->options_in_len = dhcp->p->tot_len - (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
  8038a5:	66 2d f0 00          	sub    $0xf0,%ax
  8038a9:	66 89 46 18          	mov    %ax,0x18(%esi)
    dhcp->options_in = mem_malloc(dhcp->options_in_len);
  8038ad:	0f b7 c0             	movzwl %ax,%eax
  8038b0:	89 04 24             	mov    %eax,(%esp)
  8038b3:	e8 e7 0e 00 00       	call   80479f <mem_malloc>
  8038b8:	89 46 14             	mov    %eax,0x14(%esi)
    if (dhcp->options_in == NULL) {
  8038bb:	85 c0                	test   %eax,%eax
  8038bd:	0f 84 58 03 00 00    	je     803c1b <dhcp_recv+0x42e>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_unfold_reply(): could not allocate dhcp->options\n"));
      return ERR_MEM;
    }
  }
  dhcp->msg_in = mem_malloc(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
  8038c3:	c7 04 24 f0 00 00 00 	movl   $0xf0,(%esp)
  8038ca:	e8 d0 0e 00 00       	call   80479f <mem_malloc>
  8038cf:	89 46 10             	mov    %eax,0x10(%esi)
  if (dhcp->msg_in == NULL) {
  8038d2:	85 c0                	test   %eax,%eax
  8038d4:	75 17                	jne    8038ed <dhcp_recv+0x100>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_unfold_reply(): could not allocate dhcp->msg_in\n"));
    mem_free((void *)dhcp->options_in);
  8038d6:	8b 46 14             	mov    0x14(%esi),%eax
  8038d9:	89 04 24             	mov    %eax,(%esp)
  8038dc:	e8 e4 0b 00 00       	call   8044c5 <mem_free>
    dhcp->options_in = NULL;
  8038e1:	c7 46 14 00 00 00 00 	movl   $0x0,0x14(%esi)
  8038e8:	e9 2e 03 00 00       	jmp    803c1b <dhcp_recv+0x42e>
    return ERR_MEM;
  }

  /** copy the DHCP message without options */
  ret = pbuf_copy_partial(dhcp->p, dhcp->msg_in, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN, 0);
  8038ed:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  8038f4:	00 
  8038f5:	c7 44 24 08 f0 00 00 	movl   $0xf0,0x8(%esp)
  8038fc:	00 
  8038fd:	89 44 24 04          	mov    %eax,0x4(%esp)
  803901:	8b 46 0c             	mov    0xc(%esi),%eax
  803904:	89 04 24             	mov    %eax,(%esp)
  803907:	e8 73 1c 00 00       	call   80557f <pbuf_copy_partial>
  LWIP_ASSERT("ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN", ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
  80390c:	66 3d f0 00          	cmp    $0xf0,%ax
  803910:	74 1c                	je     80392e <dhcp_recv+0x141>
  803912:	c7 44 24 08 b0 25 81 	movl   $0x8125b0,0x8(%esp)
  803919:	00 
  80391a:	c7 44 24 04 a0 04 00 	movl   $0x4a0,0x4(%esp)
  803921:	00 
  803922:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  803929:	e8 60 b7 00 00       	call   80f08e <_panic>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes into dhcp->msg_in[]\n",
     sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN));

  if (dhcp->options_in != NULL) {
  80392e:	8b 46 14             	mov    0x14(%esi),%eax
  803931:	85 c0                	test   %eax,%eax
  803933:	0f 84 f3 02 00 00    	je     803c2c <dhcp_recv+0x43f>
    /** copy the DHCP options */
    ret = pbuf_copy_partial(dhcp->p, dhcp->options_in, dhcp->options_in_len, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
  803939:	c7 44 24 0c f0 00 00 	movl   $0xf0,0xc(%esp)
  803940:	00 
  803941:	0f b7 56 18          	movzwl 0x18(%esi),%edx
  803945:	89 54 24 08          	mov    %edx,0x8(%esp)
  803949:	89 44 24 04          	mov    %eax,0x4(%esp)
  80394d:	8b 46 0c             	mov    0xc(%esi),%eax
  803950:	89 04 24             	mov    %eax,(%esp)
  803953:	e8 27 1c 00 00       	call   80557f <pbuf_copy_partial>
    LWIP_ASSERT("ret == dhcp->options_in_len", ret == dhcp->options_in_len);
  803958:	66 3b 46 18          	cmp    0x18(%esi),%ax
  80395c:	0f 84 ca 02 00 00    	je     803c2c <dhcp_recv+0x43f>
  803962:	c7 44 24 08 38 26 81 	movl   $0x812638,0x8(%esp)
  803969:	00 
  80396a:	c7 44 24 04 a7 04 00 	movl   $0x4a7,0x4(%esp)
  803971:	00 
  803972:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  803979:	e8 10 b7 00 00       	call   80f08e <_panic>
 */
static u8_t
dhcp_get_option_byte(u8_t *ptr)
{
  LWIP_DEBUGF(DHCP_DEBUG, ("option byte value=%"U16_F"\n", (u16_t)(*ptr)));
  return *ptr;
  80397e:	0f b6 40 02          	movzbl 0x2(%eax),%eax
  }

  /* read DHCP message type */
  msg_type = dhcp_get_option_byte(options_ptr + 2);
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  803982:	3c 05                	cmp    $0x5,%al
  803984:	0f 85 c3 01 00 00    	jne    803b4d <dhcp_recv+0x360>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
  80398a:	0f b6 06             	movzbl (%esi),%eax
  80398d:	3c 01                	cmp    $0x1,%al
  80398f:	0f 85 9b 01 00 00    	jne    803b30 <dhcp_recv+0x343>
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  803995:	8b 43 20             	mov    0x20(%ebx),%eax
  803998:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  u8_t *option_ptr;
  /* clear options we might not get from the ACK */
  dhcp->offered_sn_mask.addr = 0;
  80399b:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
  dhcp->offered_gw_addr.addr = 0;
  8039a2:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
  dhcp->offered_bc_addr.addr = 0;
  8039a9:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)

  /* lease time given? */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_LEASE_TIME);
  8039b0:	ba 33 00 00 00       	mov    $0x33,%edx
  8039b5:	e8 d5 f1 ff ff       	call   802b8f <dhcp_get_option_ptr>
  if (option_ptr != NULL) {
  8039ba:	85 c0                	test   %eax,%eax
  8039bc:	74 0e                	je     8039cc <dhcp_recv+0x1df>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_long(option_ptr + 2);
  8039be:	83 c0 02             	add    $0x2,%eax
  8039c1:	e8 cb f2 ff ff       	call   802c91 <dhcp_get_option_long>
  8039c6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8039c9:	89 41 4c             	mov    %eax,0x4c(%ecx)
  }
  /* renewal period given? */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_T1);
  8039cc:	ba 3a 00 00 00       	mov    $0x3a,%edx
  8039d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8039d4:	e8 b6 f1 ff ff       	call   802b8f <dhcp_get_option_ptr>
  if (option_ptr != NULL) {
  8039d9:	85 c0                	test   %eax,%eax
  8039db:	74 10                	je     8039ed <dhcp_recv+0x200>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_long(option_ptr + 2);
  8039dd:	83 c0 02             	add    $0x2,%eax
  8039e0:	e8 ac f2 ff ff       	call   802c91 <dhcp_get_option_long>
  8039e5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8039e8:	89 41 50             	mov    %eax,0x50(%ecx)
  8039eb:	eb 0e                	jmp    8039fb <dhcp_recv+0x20e>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  8039ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8039f0:	8b 41 4c             	mov    0x4c(%ecx),%eax
  8039f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  8039f6:	d1 e8                	shr    %eax
  8039f8:	89 41 50             	mov    %eax,0x50(%ecx)
  }

  /* renewal period given? */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_T2);
  8039fb:	ba 3b 00 00 00       	mov    $0x3b,%edx
  803a00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803a03:	e8 87 f1 ff ff       	call   802b8f <dhcp_get_option_ptr>
  if (option_ptr != NULL) {
  803a08:	85 c0                	test   %eax,%eax
  803a0a:	74 10                	je     803a1c <dhcp_recv+0x22f>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_long(option_ptr + 2);
  803a0c:	83 c0 02             	add    $0x2,%eax
  803a0f:	e8 7d f2 ff ff       	call   802c91 <dhcp_get_option_long>
  803a14:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803a17:	89 41 54             	mov    %eax,0x54(%ecx)
  803a1a:	eb 09                	jmp    803a25 <dhcp_recv+0x238>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
  803a1c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803a1f:	8b 41 4c             	mov    0x4c(%ecx),%eax
  803a22:	89 41 54             	mov    %eax,0x54(%ecx)
  }

  /* (y)our internet address */
  ip_addr_set(&dhcp->offered_ip_addr, &dhcp->msg_in->yiaddr);
  803a25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803a28:	8b 40 10             	mov    0x10(%eax),%eax
  803a2b:	83 f8 f0             	cmp    $0xfffffff0,%eax
  803a2e:	74 05                	je     803a35 <dhcp_recv+0x248>
  803a30:	8b 40 10             	mov    0x10(%eax),%eax
  803a33:	eb 05                	jmp    803a3a <dhcp_recv+0x24d>
  803a35:	b8 00 00 00 00       	mov    $0x0,%eax
  803a3a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803a3d:	89 41 30             	mov    %eax,0x30(%ecx)
    strcpy(dhcp->boot_file_name, dhcp->msg_in->file);
  }
#endif

  /* subnet mask */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_SUBNET_MASK);
  803a40:	ba 01 00 00 00       	mov    $0x1,%edx
  803a45:	89 c8                	mov    %ecx,%eax
  803a47:	e8 43 f1 ff ff       	call   802b8f <dhcp_get_option_ptr>
  /* subnet mask given? */
  if (option_ptr != NULL) {
  803a4c:	85 c0                	test   %eax,%eax
  803a4e:	74 16                	je     803a66 <dhcp_recv+0x279>
    dhcp->offered_sn_mask.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
  803a50:	83 c0 02             	add    $0x2,%eax
  803a53:	e8 39 f2 ff ff       	call   802c91 <dhcp_get_option_long>
  803a58:	89 04 24             	mov    %eax,(%esp)
  803a5b:	e8 10 43 00 00       	call   807d70 <htonl>
  803a60:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803a63:	89 41 34             	mov    %eax,0x34(%ecx)
  }

  /* gateway router */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_ROUTER);
  803a66:	ba 03 00 00 00       	mov    $0x3,%edx
  803a6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803a6e:	e8 1c f1 ff ff       	call   802b8f <dhcp_get_option_ptr>
  if (option_ptr != NULL) {
  803a73:	85 c0                	test   %eax,%eax
  803a75:	74 16                	je     803a8d <dhcp_recv+0x2a0>
    dhcp->offered_gw_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
  803a77:	83 c0 02             	add    $0x2,%eax
  803a7a:	e8 12 f2 ff ff       	call   802c91 <dhcp_get_option_long>
  803a7f:	89 04 24             	mov    %eax,(%esp)
  803a82:	e8 e9 42 00 00       	call   807d70 <htonl>
  803a87:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803a8a:	89 41 38             	mov    %eax,0x38(%ecx)
  }

  /* broadcast address */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_BROADCAST);
  803a8d:	ba 1c 00 00 00       	mov    $0x1c,%edx
  803a92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803a95:	e8 f5 f0 ff ff       	call   802b8f <dhcp_get_option_ptr>
  if (option_ptr != NULL) {
  803a9a:	85 c0                	test   %eax,%eax
  803a9c:	74 16                	je     803ab4 <dhcp_recv+0x2c7>
    dhcp->offered_bc_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
  803a9e:	83 c0 02             	add    $0x2,%eax
  803aa1:	e8 eb f1 ff ff       	call   802c91 <dhcp_get_option_long>
  803aa6:	89 04 24             	mov    %eax,(%esp)
  803aa9:	e8 c2 42 00 00       	call   807d70 <htonl>
  803aae:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803ab1:	89 41 3c             	mov    %eax,0x3c(%ecx)
  }
  
  /* DNS servers */
  option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_DNS_SERVER);
  803ab4:	ba 06 00 00 00       	mov    $0x6,%edx
  803ab9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803abc:	e8 ce f0 ff ff       	call   802b8f <dhcp_get_option_ptr>
  803ac1:	89 45 dc             	mov    %eax,-0x24(%ebp)
  if (option_ptr != NULL) {
  803ac4:	85 c0                	test   %eax,%eax
  803ac6:	74 56                	je     803b1e <dhcp_recv+0x331>
    u8_t n;
    dhcp->dns_count = dhcp_get_option_byte(&option_ptr[1]) / (u32_t)sizeof(struct ip_addr);
  803ac8:	0f b6 40 01          	movzbl 0x1(%eax),%eax
  803acc:	c0 e8 02             	shr    $0x2,%al
  803acf:	0f b6 c0             	movzbl %al,%eax
    /* limit to at most DHCP_MAX_DNS DNS servers */
    if (dhcp->dns_count > DHCP_MAX_DNS)
      dhcp->dns_count = DHCP_MAX_DNS;
  803ad2:	83 f8 03             	cmp    $0x3,%eax
  803ad5:	ba 02 00 00 00       	mov    $0x2,%edx
  803ada:	0f 43 c2             	cmovae %edx,%eax
  803add:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803ae0:	89 41 40             	mov    %eax,0x40(%ecx)
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
  }

  /* (y)our internet address */
  ip_addr_set(&dhcp->offered_ip_addr, &dhcp->msg_in->yiaddr);
  803ae3:	c6 45 e0 00          	movb   $0x0,-0x20(%ebp)
  803ae7:	89 5d 08             	mov    %ebx,0x8(%ebp)
  803aea:	eb 23                	jmp    803b0f <dhcp_recv+0x322>
    dhcp->dns_count = dhcp_get_option_byte(&option_ptr[1]) / (u32_t)sizeof(struct ip_addr);
    /* limit to at most DHCP_MAX_DNS DNS servers */
    if (dhcp->dns_count > DHCP_MAX_DNS)
      dhcp->dns_count = DHCP_MAX_DNS;
    for (n = 0; n < dhcp->dns_count; n++) {
      dhcp->offered_dns_addr[n].addr = htonl(dhcp_get_option_long(&option_ptr[2 + n * 4]));
  803aec:	0f b6 5d e0          	movzbl -0x20(%ebp),%ebx
  803af0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  803af3:	8d 44 98 02          	lea    0x2(%eax,%ebx,4),%eax
  803af7:	e8 95 f1 ff ff       	call   802c91 <dhcp_get_option_long>
  803afc:	89 04 24             	mov    %eax,(%esp)
  803aff:	e8 6c 42 00 00       	call   807d70 <htonl>
  803b04:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803b07:	89 44 99 44          	mov    %eax,0x44(%ecx,%ebx,4)
    u8_t n;
    dhcp->dns_count = dhcp_get_option_byte(&option_ptr[1]) / (u32_t)sizeof(struct ip_addr);
    /* limit to at most DHCP_MAX_DNS DNS servers */
    if (dhcp->dns_count > DHCP_MAX_DNS)
      dhcp->dns_count = DHCP_MAX_DNS;
    for (n = 0; n < dhcp->dns_count; n++) {
  803b0b:	80 45 e0 01          	addb   $0x1,-0x20(%ebp)
  803b0f:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
  803b13:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803b16:	3b 41 40             	cmp    0x40(%ecx),%eax
  803b19:	72 d1                	jb     803aec <dhcp_recv+0x2ff>
  803b1b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (msg_type == DHCP_ACK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
      dhcp_handle_ack(netif);
      dhcp->request_timeout = 0;
  803b1e:	66 c7 46 26 00 00    	movw   $0x0,0x26(%esi)
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
  803b24:	89 d8                	mov    %ebx,%eax
  803b26:	e8 b7 fa ff ff       	call   8035e2 <dhcp_check>
  803b2b:	e9 eb 00 00 00       	jmp    803c1b <dhcp_recv+0x42e>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
  803b30:	83 e8 03             	sub    $0x3,%eax
  803b33:	3c 02                	cmp    $0x2,%al
  803b35:	0f 87 e0 00 00 00    	ja     803c1b <dhcp_recv+0x42e>
      dhcp->request_timeout = 0;
  803b3b:	66 c7 46 26 00 00    	movw   $0x0,0x26(%esi)
      dhcp_bind(netif);
  803b41:	89 d8                	mov    %ebx,%eax
  803b43:	e8 d7 fa ff ff       	call   80361f <dhcp_bind>
  803b48:	e9 ce 00 00 00       	jmp    803c1b <dhcp_recv+0x42e>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  803b4d:	3c 06                	cmp    $0x6,%al
  803b4f:	75 6d                	jne    803bbe <dhcp_recv+0x3d1>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  803b51:	0f b6 06             	movzbl (%esi),%eax
  803b54:	8d 50 fd             	lea    -0x3(%eax),%edx
      dhcp->request_timeout = 0;
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  803b57:	80 fa 02             	cmp    $0x2,%dl
  803b5a:	76 08                	jbe    803b64 <dhcp_recv+0x377>
  803b5c:	3c 01                	cmp    $0x1,%al
  803b5e:	0f 85 b7 00 00 00    	jne    803c1b <dhcp_recv+0x42e>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_NAK received\n"));
    dhcp->request_timeout = 0;
  803b64:	66 c7 46 26 00 00    	movw   $0x0,0x26(%esi)
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  803b6a:	8b 43 20             	mov    0x20(%ebx),%eax
  803b6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  netif_set_down(netif);
  803b70:	89 1c 24             	mov    %ebx,(%esp)
  803b73:	e8 4e 11 00 00       	call   804cc6 <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  803b78:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803b7f:	00 
  803b80:	89 1c 24             	mov    %ebx,(%esp)
  803b83:	e8 6f 0f 00 00       	call   804af7 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
  803b88:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803b8f:	00 
  803b90:	89 1c 24             	mov    %ebx,(%esp)
  803b93:	e8 b5 10 00 00       	call   804c4d <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY); 
  803b98:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803b9f:	00 
  803ba0:	89 1c 24             	mov    %ebx,(%esp)
  803ba3:	e8 c0 10 00 00       	call   804c68 <netif_set_netmask>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  803ba8:	ba 0c 00 00 00       	mov    $0xc,%edx
  803bad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803bb0:	e8 cb ef ff ff       	call   802b80 <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  803bb5:	89 d8                	mov    %ebx,%eax
  803bb7:	e8 37 f7 ff ff       	call   8032f3 <dhcp_discover>
  803bbc:	eb 5d                	jmp    803c1b <dhcp_recv+0x42e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_NAK received\n"));
    dhcp->request_timeout = 0;
    dhcp_handle_nak(netif);
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
  803bbe:	3c 02                	cmp    $0x2,%al
  803bc0:	75 59                	jne    803c1b <dhcp_recv+0x42e>
  803bc2:	80 3e 06             	cmpb   $0x6,(%esi)
  803bc5:	75 54                	jne    803c1b <dhcp_recv+0x42e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
  803bc7:	66 c7 46 26 00 00    	movw   $0x0,0x26(%esi)
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  803bcd:	8b 43 20             	mov    0x20(%ebx),%eax
  803bd0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  /* obtain the server address */
  u8_t *option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_SERVER_ID);
  803bd3:	ba 36 00 00 00       	mov    $0x36,%edx
  803bd8:	e8 b2 ef ff ff       	call   802b8f <dhcp_get_option_ptr>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  if (option_ptr != NULL) {
  803bdd:	85 c0                	test   %eax,%eax
  803bdf:	74 3a                	je     803c1b <dhcp_recv+0x42e>
    dhcp->server_ip_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
  803be1:	83 c0 02             	add    $0x2,%eax
  803be4:	e8 a8 f0 ff ff       	call   802c91 <dhcp_get_option_long>
  803be9:	89 04 24             	mov    %eax,(%esp)
  803bec:	e8 7f 41 00 00       	call   807d70 <htonl>
  803bf1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803bf4:	89 41 2c             	mov    %eax,0x2c(%ecx)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n", dhcp->server_ip_addr.addr));
    /* remember offered address */
    ip_addr_set(&dhcp->offered_ip_addr, (struct ip_addr *)&dhcp->msg_in->yiaddr);
  803bf7:	8b 41 10             	mov    0x10(%ecx),%eax
  803bfa:	83 f8 f0             	cmp    $0xfffffff0,%eax
  803bfd:	74 05                	je     803c04 <dhcp_recv+0x417>
  803bff:	8b 40 10             	mov    0x10(%eax),%eax
  803c02:	eb 05                	jmp    803c09 <dhcp_recv+0x41c>
  803c04:	b8 00 00 00 00       	mov    $0x0,%eax
  803c09:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  803c0c:	89 41 30             	mov    %eax,0x30(%ecx)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n", dhcp->offered_ip_addr.addr));

    dhcp_select(netif);
  803c0f:	89 d8                	mov    %ebx,%eax
  803c11:	e8 36 f8 ff ff       	call   80344c <dhcp_select>
  803c16:	eb 03                	jmp    803c1b <dhcp_recv+0x42e>
  803c18:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  pbuf_free(p);
  803c1b:	89 3c 24             	mov    %edi,(%esp)
  803c1e:	e8 b1 11 00 00       	call   804dd4 <pbuf_free>
  dhcp->p = NULL;
  803c23:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
  803c2a:	eb 16                	jmp    803c42 <dhcp_recv+0x455>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  options_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_MESSAGE_TYPE);
  803c2c:	ba 35 00 00 00       	mov    $0x35,%edx
  803c31:	89 f0                	mov    %esi,%eax
  803c33:	e8 57 ef ff ff       	call   802b8f <dhcp_get_option_ptr>
  if (options_ptr == NULL) {
  803c38:	85 c0                	test   %eax,%eax
  803c3a:	0f 85 3e fd ff ff    	jne    80397e <dhcp_recv+0x191>
  803c40:	eb d9                	jmp    803c1b <dhcp_recv+0x42e>
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  pbuf_free(p);
  dhcp->p = NULL;
}
  803c42:	83 c4 2c             	add    $0x2c,%esp
  803c45:	5b                   	pop    %ebx
  803c46:	5e                   	pop    %esi
  803c47:	5f                   	pop    %edi
  803c48:	5d                   	pop    %ebp
  803c49:	c3                   	ret    

00803c4a <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  803c4a:	55                   	push   %ebp
  803c4b:	89 e5                	mov    %esp,%ebp
  803c4d:	57                   	push   %edi
  803c4e:	56                   	push   %esi
  803c4f:	53                   	push   %ebx
  803c50:	83 ec 2c             	sub    $0x2c,%esp
  803c53:	8b 75 08             	mov    0x8(%ebp),%esi
  struct dhcp *dhcp, *old_dhcp = netif->dhcp;
  803c56:	8b 7e 20             	mov    0x20(%esi),%edi
  err_t result = ERR_OK;
  dhcp = mem_malloc(sizeof(struct dhcp));
  803c59:	c7 04 24 58 00 00 00 	movl   $0x58,(%esp)
  803c60:	e8 3a 0b 00 00       	call   80479f <mem_malloc>
  803c65:	89 c3                	mov    %eax,%ebx
  if (dhcp == NULL) {
  803c67:	85 c0                	test   %eax,%eax
  803c69:	0f 84 47 01 00 00    	je     803db6 <dhcp_inform+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform(): could not allocate dhcp\n"));
    return;
  }
  netif->dhcp = dhcp;
  803c6f:	89 46 20             	mov    %eax,0x20(%esi)
  memset(dhcp, 0, sizeof(struct dhcp));
  803c72:	c7 44 24 08 58 00 00 	movl   $0x58,0x8(%esp)
  803c79:	00 
  803c7a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803c81:	00 
  803c82:	89 04 24             	mov    %eax,(%esp)
  803c85:	e8 7d bc 00 00       	call   80f907 <memset>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): allocated dhcp\n"));
  dhcp->pcb = udp_new();
  803c8a:	e8 75 5b 00 00       	call   809804 <udp_new>
  803c8f:	89 43 08             	mov    %eax,0x8(%ebx)
  if (dhcp->pcb == NULL) {
  803c92:	85 c0                	test   %eax,%eax
  803c94:	75 0d                	jne    803ca3 <dhcp_inform+0x59>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform(): could not obtain pcb"));
    mem_free((void *)dhcp);
  803c96:	89 1c 24             	mov    %ebx,(%esp)
  803c99:	e8 27 08 00 00       	call   8044c5 <mem_free>
    return;
  803c9e:	e9 13 01 00 00       	jmp    803db6 <dhcp_inform+0x16c>
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  803ca3:	89 f0                	mov    %esi,%eax
  803ca5:	e8 9a f2 ff ff       	call   802f44 <dhcp_create_request>
  if (result == ERR_OK) {
  803caa:	84 c0                	test   %al,%al
  803cac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  803cb0:	0f 85 f7 00 00 00    	jne    803dad <dhcp_inform+0x163>

    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  803cb6:	b9 01 00 00 00       	mov    $0x1,%ecx
  803cbb:	ba 35 00 00 00       	mov    $0x35,%edx
  803cc0:	89 d8                	mov    %ebx,%eax
  803cc2:	e8 38 f0 ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_INFORM);
  803cc7:	ba 08 00 00 00       	mov    $0x8,%edx
  803ccc:	89 d8                	mov    %ebx,%eax
  803cce:	e8 e3 ef ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  803cd3:	b9 02 00 00 00       	mov    $0x2,%ecx
  803cd8:	ba 39 00 00 00       	mov    $0x39,%edx
  803cdd:	89 d8                	mov    %ebx,%eax
  803cdf:	e8 1b f0 ff ff       	call   802cff <dhcp_option>
    /* TODO: use netif->mtu ?! */
    dhcp_option_short(dhcp, 576);
  803ce4:	ba 40 02 00 00       	mov    $0x240,%edx
  803ce9:	89 d8                	mov    %ebx,%eax
  803ceb:	e8 7b f0 ff ff       	call   802d6b <dhcp_option_short>

    dhcp_option_trailer(dhcp);
  803cf0:	89 d8                	mov    %ebx,%eax
  803cf2:	e8 e0 f0 ff ff       	call   802dd7 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  803cf7:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  803cfb:	66 05 f0 00          	add    $0xf0,%ax
  803cff:	0f b7 c0             	movzwl %ax,%eax
  803d02:	89 44 24 04          	mov    %eax,0x4(%esp)
  803d06:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803d09:	89 04 24             	mov    %eax,(%esp)
  803d0c:	e8 35 14 00 00       	call   805146 <pbuf_realloc>

    udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
  803d11:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
  803d18:	00 
  803d19:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803d20:	00 
  803d21:	8b 43 08             	mov    0x8(%ebx),%eax
  803d24:	89 04 24             	mov    %eax,(%esp)
  803d27:	e8 f5 56 00 00       	call   809421 <udp_bind>
    udp_connect(dhcp->pcb, IP_ADDR_BROADCAST, DHCP_SERVER_PORT);
  803d2c:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  803d33:	00 
  803d34:	c7 44 24 04 9c 2e 81 	movl   $0x812e9c,0x4(%esp)
  803d3b:	00 
  803d3c:	8b 43 08             	mov    0x8(%ebx),%eax
  803d3f:	89 04 24             	mov    %eax,(%esp)
  803d42:	e8 ce 59 00 00       	call   809715 <udp_connect>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  803d47:	89 74 24 10          	mov    %esi,0x10(%esp)
  803d4b:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  803d52:	00 
  803d53:	c7 44 24 08 9c 2e 81 	movl   $0x812e9c,0x8(%esp)
  803d5a:	00 
  803d5b:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803d5e:	89 44 24 04          	mov    %eax,0x4(%esp)
  803d62:	8b 43 08             	mov    0x8(%ebx),%eax
  803d65:	89 04 24             	mov    %eax,(%esp)
  803d68:	e8 86 57 00 00       	call   8094f3 <udp_sendto_if>
    udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  803d6d:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  803d74:	00 
  803d75:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803d7c:	00 
  803d7d:	8b 43 08             	mov    0x8(%ebx),%eax
  803d80:	89 04 24             	mov    %eax,(%esp)
  803d83:	e8 8d 59 00 00       	call   809715 <udp_connect>
    dhcp_delete_request(netif);
  803d88:	89 f0                	mov    %esi,%eax
  803d8a:	e8 ac f3 ff ff       	call   80313b <dhcp_delete_request>
  803d8f:	eb 1c                	jmp    803dad <dhcp_inform+0x163>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  if (dhcp != NULL) {
    if (dhcp->pcb != NULL) {
      udp_remove(dhcp->pcb);
  803d91:	89 04 24             	mov    %eax,(%esp)
  803d94:	e8 25 5a 00 00       	call   8097be <udp_remove>
    }
    dhcp->pcb = NULL;
  803d99:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    mem_free((void *)dhcp);
  803da0:	89 1c 24             	mov    %ebx,(%esp)
  803da3:	e8 1d 07 00 00       	call   8044c5 <mem_free>
    netif->dhcp = old_dhcp;
  803da8:	89 7e 20             	mov    %edi,0x20(%esi)
  803dab:	eb 09                	jmp    803db6 <dhcp_inform+0x16c>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  if (dhcp != NULL) {
    if (dhcp->pcb != NULL) {
  803dad:	8b 43 08             	mov    0x8(%ebx),%eax
  803db0:	85 c0                	test   %eax,%eax
  803db2:	75 dd                	jne    803d91 <dhcp_inform+0x147>
  803db4:	eb e3                	jmp    803d99 <dhcp_inform+0x14f>
    }
    dhcp->pcb = NULL;
    mem_free((void *)dhcp);
    netif->dhcp = old_dhcp;
  }
}
  803db6:	83 c4 2c             	add    $0x2c,%esp
  803db9:	5b                   	pop    %ebx
  803dba:	5e                   	pop    %esi
  803dbb:	5f                   	pop    %edi
  803dbc:	5d                   	pop    %ebp
  803dbd:	c3                   	ret    

00803dbe <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, struct ip_addr *addr)
{
  803dbe:	55                   	push   %ebp
  803dbf:	89 e5                	mov    %esp,%ebp
  803dc1:	56                   	push   %esi
  803dc2:	53                   	push   %ebx
  803dc3:	83 ec 20             	sub    $0x20,%esp
  803dc6:	8b 75 08             	mov    0x8(%ebp),%esi
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  803dc9:	85 f6                	test   %esi,%esi
  803dcb:	75 1c                	jne    803de9 <dhcp_arp_reply+0x2b>
  803dcd:	c7 44 24 08 02 26 81 	movl   $0x812602,0x8(%esp)
  803dd4:	00 
  803dd5:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
  803ddc:	00 
  803ddd:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  803de4:	e8 a5 b2 00 00       	call   80f08e <_panic>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
  803de9:	8b 5e 20             	mov    0x20(%esi),%ebx
  803dec:	85 db                	test   %ebx,%ebx
  803dee:	0f 84 04 01 00 00    	je     803ef8 <dhcp_arp_reply+0x13a>
  803df4:	80 3b 08             	cmpb   $0x8,(%ebx)
  803df7:	0f 85 fb 00 00 00    	jne    803ef8 <dhcp_arp_reply+0x13a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n", addr->addr));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
  803dfd:	8b 45 0c             	mov    0xc(%ebp),%eax
  803e00:	8b 4b 30             	mov    0x30(%ebx),%ecx
  803e03:	39 08                	cmp    %ecx,(%eax)
  803e05:	0f 85 ed 00 00 00    	jne    803ef8 <dhcp_arp_reply+0x13a>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  803e0b:	ba 0c 00 00 00       	mov    $0xc,%edx
  803e10:	89 d8                	mov    %ebx,%eax
  803e12:	e8 69 ed ff ff       	call   802b80 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  803e17:	89 f0                	mov    %esi,%eax
  803e19:	e8 26 f1 ff ff       	call   802f44 <dhcp_create_request>
  if (result == ERR_OK) {
  803e1e:	84 c0                	test   %al,%al
  803e20:	0f 85 c8 00 00 00    	jne    803eee <dhcp_arp_reply+0x130>
    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  803e26:	b9 01 00 00 00       	mov    $0x1,%ecx
  803e2b:	ba 35 00 00 00       	mov    $0x35,%edx
  803e30:	89 d8                	mov    %ebx,%eax
  803e32:	e8 c8 ee ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_DECLINE);
  803e37:	ba 04 00 00 00       	mov    $0x4,%edx
  803e3c:	89 d8                	mov    %ebx,%eax
  803e3e:	e8 73 ee ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  803e43:	b9 02 00 00 00       	mov    $0x2,%ecx
  803e48:	ba 39 00 00 00       	mov    $0x39,%edx
  803e4d:	89 d8                	mov    %ebx,%eax
  803e4f:	e8 ab ee ff ff       	call   802cff <dhcp_option>
    dhcp_option_short(dhcp, 576);
  803e54:	ba 40 02 00 00       	mov    $0x240,%edx
  803e59:	89 d8                	mov    %ebx,%eax
  803e5b:	e8 0b ef ff ff       	call   802d6b <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  803e60:	b9 04 00 00 00       	mov    $0x4,%ecx
  803e65:	ba 32 00 00 00       	mov    $0x32,%edx
  803e6a:	89 d8                	mov    %ebx,%eax
  803e6c:	e8 8e ee ff ff       	call   802cff <dhcp_option>
    dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
  803e71:	8b 43 30             	mov    0x30(%ebx),%eax
  803e74:	89 04 24             	mov    %eax,(%esp)
  803e77:	e8 2e 41 00 00       	call   807faa <ntohl>
  803e7c:	89 c2                	mov    %eax,%edx
  803e7e:	89 d8                	mov    %ebx,%eax
  803e80:	e8 1c f0 ff ff       	call   802ea1 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  803e85:	89 d8                	mov    %ebx,%eax
  803e87:	e8 4b ef ff ff       	call   802dd7 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  803e8c:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  803e90:	66 05 f0 00          	add    $0xf0,%ax
  803e94:	0f b7 c0             	movzwl %ax,%eax
  803e97:	89 44 24 04          	mov    %eax,0x4(%esp)
  803e9b:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803e9e:	89 04 24             	mov    %eax,(%esp)
  803ea1:	e8 a0 12 00 00       	call   805146 <pbuf_realloc>

    /* @todo: should we really connect here? we are performing sendto() */
    udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  803ea6:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  803ead:	00 
  803eae:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  803eb5:	00 
  803eb6:	8b 43 08             	mov    0x8(%ebx),%eax
  803eb9:	89 04 24             	mov    %eax,(%esp)
  803ebc:	e8 54 58 00 00       	call   809715 <udp_connect>
    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  803ec1:	89 74 24 10          	mov    %esi,0x10(%esp)
  803ec5:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  803ecc:	00 
  803ecd:	c7 44 24 08 9c 2e 81 	movl   $0x812e9c,0x8(%esp)
  803ed4:	00 
  803ed5:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803ed8:	89 44 24 04          	mov    %eax,0x4(%esp)
  803edc:	8b 43 08             	mov    0x8(%ebx),%eax
  803edf:	89 04 24             	mov    %eax,(%esp)
  803ee2:	e8 0c 56 00 00       	call   8094f3 <udp_sendto_if>
    dhcp_delete_request(netif);
  803ee7:	89 f0                	mov    %esi,%eax
  803ee9:	e8 4d f2 ff ff       	call   80313b <dhcp_delete_request>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  803eee:	80 43 01 01          	addb   $0x1,0x1(%ebx)
  msecs = 10*1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  803ef2:	66 c7 43 26 14 00    	movw   $0x14,0x26(%ebx)
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 1, ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
    }
  }
}
  803ef8:	83 c4 20             	add    $0x20,%esp
  803efb:	5b                   	pop    %ebx
  803efc:	5e                   	pop    %esi
  803efd:	5d                   	pop    %ebp
  803efe:	c3                   	ret    

00803eff <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  803eff:	55                   	push   %ebp
  803f00:	89 e5                	mov    %esp,%ebp
  803f02:	57                   	push   %edi
  803f03:	56                   	push   %esi
  803f04:	53                   	push   %ebx
  803f05:	83 ec 2c             	sub    $0x2c,%esp
  803f08:	8b 75 08             	mov    0x8(%ebp),%esi
  struct dhcp *dhcp = netif->dhcp;
  803f0b:	8b 5e 20             	mov    0x20(%esi),%ebx
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
  803f0e:	ba 05 00 00 00       	mov    $0x5,%edx
  803f13:	89 d8                	mov    %ebx,%eax
  803f15:	e8 66 ec ff ff       	call   802b80 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  803f1a:	89 f0                	mov    %esi,%eax
  803f1c:	e8 23 f0 ff ff       	call   802f44 <dhcp_create_request>
  803f21:	89 c7                	mov    %eax,%edi
  if (result == ERR_OK) {
  803f23:	84 c0                	test   %al,%al
  803f25:	0f 85 a4 00 00 00    	jne    803fcf <dhcp_renew+0xd0>

    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  803f2b:	b9 01 00 00 00       	mov    $0x1,%ecx
  803f30:	ba 35 00 00 00       	mov    $0x35,%edx
  803f35:	89 d8                	mov    %ebx,%eax
  803f37:	e8 c3 ed ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_REQUEST);
  803f3c:	ba 03 00 00 00       	mov    $0x3,%edx
  803f41:	89 d8                	mov    %ebx,%eax
  803f43:	e8 6e ed ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  803f48:	b9 02 00 00 00       	mov    $0x2,%ecx
  803f4d:	ba 39 00 00 00       	mov    $0x39,%edx
  803f52:	89 d8                	mov    %ebx,%eax
  803f54:	e8 a6 ed ff ff       	call   802cff <dhcp_option>
    /* TODO: use netif->mtu in some way */
    dhcp_option_short(dhcp, 576);
  803f59:	ba 40 02 00 00       	mov    $0x240,%edx
  803f5e:	89 d8                	mov    %ebx,%eax
  803f60:	e8 06 ee ff ff       	call   802d6b <dhcp_option_short>
#if 0
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif
    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  803f65:	89 d8                	mov    %ebx,%eax
  803f67:	e8 6b ee ff ff       	call   802dd7 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  803f6c:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  803f70:	66 05 f0 00          	add    $0xf0,%ax
  803f74:	0f b7 c0             	movzwl %ax,%eax
  803f77:	89 44 24 04          	mov    %eax,0x4(%esp)
  803f7b:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803f7e:	89 04 24             	mov    %eax,(%esp)
  803f81:	e8 c0 11 00 00       	call   805146 <pbuf_realloc>

    udp_connect(dhcp->pcb, &dhcp->server_ip_addr, DHCP_SERVER_PORT);
  803f86:	8d 43 2c             	lea    0x2c(%ebx),%eax
  803f89:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  803f90:	00 
  803f91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  803f94:	89 44 24 04          	mov    %eax,0x4(%esp)
  803f98:	8b 43 08             	mov    0x8(%ebx),%eax
  803f9b:	89 04 24             	mov    %eax,(%esp)
  803f9e:	e8 72 57 00 00       	call   809715 <udp_connect>
    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  803fa3:	89 74 24 10          	mov    %esi,0x10(%esp)
  803fa7:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  803fae:	00 
  803faf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  803fb2:	89 44 24 08          	mov    %eax,0x8(%esp)
  803fb6:	8b 43 1c             	mov    0x1c(%ebx),%eax
  803fb9:	89 44 24 04          	mov    %eax,0x4(%esp)
  803fbd:	8b 43 08             	mov    0x8(%ebx),%eax
  803fc0:	89 04 24             	mov    %eax,(%esp)
  803fc3:	e8 2b 55 00 00       	call   8094f3 <udp_sendto_if>
    dhcp_delete_request(netif);
  803fc8:	89 f0                	mov    %esi,%eax
  803fca:	e8 6c f1 ff ff       	call   80313b <dhcp_delete_request>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  803fcf:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  803fd3:	8d 48 01             	lea    0x1(%eax),%ecx
  803fd6:	88 4b 01             	mov    %cl,0x1(%ebx)
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  803fd9:	b8 20 4e 00 00       	mov    $0x4e20,%eax
  803fde:	80 f9 09             	cmp    $0x9,%cl
  803fe1:	77 08                	ja     803feb <dhcp_renew+0xec>
  803fe3:	0f b6 c9             	movzbl %cl,%ecx
  803fe6:	66 69 c1 d0 07       	imul   $0x7d0,%cx,%ax
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  803feb:	0f b7 d0             	movzwl %ax,%edx
  803fee:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  803ff4:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
  803ff9:	89 d0                	mov    %edx,%eax
  803ffb:	f7 ee                	imul   %esi
  803ffd:	c1 fa 05             	sar    $0x5,%edx
  804000:	66 89 53 26          	mov    %dx,0x26(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  804004:	89 f8                	mov    %edi,%eax
  804006:	83 c4 2c             	add    $0x2c,%esp
  804009:	5b                   	pop    %ebx
  80400a:	5e                   	pop    %esi
  80400b:	5f                   	pop    %edi
  80400c:	5d                   	pop    %ebp
  80400d:	c3                   	ret    

0080400e <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 *
 */
void
dhcp_coarse_tmr()
{
  80400e:	55                   	push   %ebp
  80400f:	89 e5                	mov    %esp,%ebp
  804011:	53                   	push   %ebx
  804012:	83 ec 14             	sub    $0x14,%esp
  struct netif *netif = netif_list;
  804015:	8b 1d 54 c2 b3 00    	mov    0xb3c254,%ebx
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  80401b:	eb 67                	jmp    804084 <dhcp_coarse_tmr+0x76>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  80401d:	8b 43 20             	mov    0x20(%ebx),%eax
  804020:	85 c0                	test   %eax,%eax
  804022:	74 5e                	je     804082 <dhcp_coarse_tmr+0x74>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
  804024:	0f b7 50 2a          	movzwl 0x2a(%eax),%edx
  804028:	8d 4a ff             	lea    -0x1(%edx),%ecx
  80402b:	66 89 48 2a          	mov    %cx,0x2a(%eax)
  80402f:	66 83 fa 01          	cmp    $0x1,%dx
  804033:	75 1d                	jne    804052 <dhcp_coarse_tmr+0x44>
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEWING)) {
  804035:	8b 43 20             	mov    0x20(%ebx),%eax
  804038:	0f b6 00             	movzbl (%eax),%eax
  80403b:	89 c2                	mov    %eax,%edx
  80403d:	83 e2 fb             	and    $0xfffffffb,%edx
  804040:	80 fa 01             	cmp    $0x1,%dl
  804043:	74 04                	je     804049 <dhcp_coarse_tmr+0x3b>
  804045:	3c 0a                	cmp    $0xa,%al
  804047:	75 39                	jne    804082 <dhcp_coarse_tmr+0x74>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout(): must rebind\n"));
    dhcp_rebind(netif);
  804049:	89 d8                	mov    %ebx,%eax
  80404b:	e8 96 f1 ff ff       	call   8031e6 <dhcp_rebind>
  804050:	eb 30                	jmp    804082 <dhcp_coarse_tmr+0x74>
      if (netif->dhcp->t2_timeout-- == 1) {
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
  804052:	8b 53 20             	mov    0x20(%ebx),%edx
  804055:	0f b7 42 28          	movzwl 0x28(%edx),%eax
  804059:	8d 48 ff             	lea    -0x1(%eax),%ecx
  80405c:	66 89 4a 28          	mov    %cx,0x28(%edx)
  804060:	66 83 f8 01          	cmp    $0x1,%ax
  804064:	75 1c                	jne    804082 <dhcp_coarse_tmr+0x74>
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEWING)) {
  804066:	8b 43 20             	mov    0x20(%ebx),%eax
  804069:	0f b6 00             	movzbl (%eax),%eax
  80406c:	89 c2                	mov    %eax,%edx
  80406e:	83 e2 fb             	and    $0xfffffffb,%edx
  804071:	80 fa 01             	cmp    $0x1,%dl
  804074:	74 04                	je     80407a <dhcp_coarse_tmr+0x6c>
  804076:	3c 0a                	cmp    $0xa,%al
  804078:	75 08                	jne    804082 <dhcp_coarse_tmr+0x74>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t1_timeout(): must renew\n"));
    dhcp_renew(netif);
  80407a:	89 1c 24             	mov    %ebx,(%esp)
  80407d:	e8 7d fe ff ff       	call   803eff <dhcp_renew>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  804082:	8b 1b                	mov    (%ebx),%ebx
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  804084:	85 db                	test   %ebx,%ebx
  804086:	75 95                	jne    80401d <dhcp_coarse_tmr+0xf>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  }
}
  804088:	83 c4 14             	add    $0x14,%esp
  80408b:	5b                   	pop    %ebx
  80408c:	5d                   	pop    %ebp
  80408d:	c3                   	ret    

0080408e <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  80408e:	55                   	push   %ebp
  80408f:	89 e5                	mov    %esp,%ebp
  804091:	57                   	push   %edi
  804092:	56                   	push   %esi
  804093:	53                   	push   %ebx
  804094:	83 ec 2c             	sub    $0x2c,%esp
  804097:	8b 75 08             	mov    0x8(%ebp),%esi
  struct dhcp *dhcp = netif->dhcp;
  80409a:	8b 5e 20             	mov    0x20(%esi),%ebx
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
  80409d:	ba 0d 00 00 00       	mov    $0xd,%edx
  8040a2:	89 d8                	mov    %ebx,%eax
  8040a4:	e8 d7 ea ff ff       	call   802b80 <dhcp_set_state>
  /* clean old DHCP offer */
  dhcp->server_ip_addr.addr = 0;
  8040a9:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
  dhcp->offered_ip_addr.addr = dhcp->offered_sn_mask.addr = 0;
  8040b0:	c7 43 34 00 00 00 00 	movl   $0x0,0x34(%ebx)
  8040b7:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
  dhcp->offered_gw_addr.addr = dhcp->offered_bc_addr.addr = 0;
  8040be:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
  8040c5:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%ebx)
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  8040cc:	c7 43 54 00 00 00 00 	movl   $0x0,0x54(%ebx)
  8040d3:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%ebx)
  8040da:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
  dhcp->dns_count = 0;
  8040e1:	c7 43 40 00 00 00 00 	movl   $0x0,0x40(%ebx)
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_request(netif);
  8040e8:	89 f0                	mov    %esi,%eax
  8040ea:	e8 55 ee ff ff       	call   802f44 <dhcp_create_request>
  8040ef:	89 c7                	mov    %eax,%edi
  if (result == ERR_OK) {
  8040f1:	84 c0                	test   %al,%al
  8040f3:	0f 85 87 00 00 00    	jne    804180 <dhcp_release+0xf2>
    dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  8040f9:	b9 01 00 00 00       	mov    $0x1,%ecx
  8040fe:	ba 35 00 00 00       	mov    $0x35,%edx
  804103:	89 d8                	mov    %ebx,%eax
  804105:	e8 f5 eb ff ff       	call   802cff <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_RELEASE);
  80410a:	ba 07 00 00 00       	mov    $0x7,%edx
  80410f:	89 d8                	mov    %ebx,%eax
  804111:	e8 a0 eb ff ff       	call   802cb6 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
  804116:	89 d8                	mov    %ebx,%eax
  804118:	e8 ba ec ff ff       	call   802dd7 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  80411d:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  804121:	66 05 f0 00          	add    $0xf0,%ax
  804125:	0f b7 c0             	movzwl %ax,%eax
  804128:	89 44 24 04          	mov    %eax,0x4(%esp)
  80412c:	8b 43 1c             	mov    0x1c(%ebx),%eax
  80412f:	89 04 24             	mov    %eax,(%esp)
  804132:	e8 0f 10 00 00       	call   805146 <pbuf_realloc>

    udp_connect(dhcp->pcb, &dhcp->server_ip_addr, DHCP_SERVER_PORT);
  804137:	8d 43 2c             	lea    0x2c(%ebx),%eax
  80413a:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  804141:	00 
  804142:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  804145:	89 44 24 04          	mov    %eax,0x4(%esp)
  804149:	8b 43 08             	mov    0x8(%ebx),%eax
  80414c:	89 04 24             	mov    %eax,(%esp)
  80414f:	e8 c1 55 00 00       	call   809715 <udp_connect>
    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  804154:	89 74 24 10          	mov    %esi,0x10(%esp)
  804158:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  80415f:	00 
  804160:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  804163:	89 44 24 08          	mov    %eax,0x8(%esp)
  804167:	8b 43 1c             	mov    0x1c(%ebx),%eax
  80416a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80416e:	8b 43 08             	mov    0x8(%ebx),%eax
  804171:	89 04 24             	mov    %eax,(%esp)
  804174:	e8 7a 53 00 00       	call   8094f3 <udp_sendto_if>
    dhcp_delete_request(netif);
  804179:	89 f0                	mov    %esi,%eax
  80417b:	e8 bb ef ff ff       	call   80313b <dhcp_delete_request>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  804180:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  804184:	8d 48 01             	lea    0x1(%eax),%ecx
  804187:	88 4b 01             	mov    %cl,0x1(%ebx)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  80418a:	b8 10 27 00 00       	mov    $0x2710,%eax
  80418f:	80 f9 09             	cmp    $0x9,%cl
  804192:	77 08                	ja     80419c <dhcp_release+0x10e>
  804194:	0f b6 c9             	movzbl %cl,%ecx
  804197:	66 69 c1 e8 03       	imul   $0x3e8,%cx,%ax
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  80419c:	0f b7 d0             	movzwl %ax,%edx
  80419f:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  8041a5:	b9 d3 4d 62 10       	mov    $0x10624dd3,%ecx
  8041aa:	89 d0                	mov    %edx,%eax
  8041ac:	f7 e9                	imul   %ecx
  8041ae:	c1 fa 05             	sar    $0x5,%edx
  8041b1:	66 89 53 26          	mov    %dx,0x26(%ebx)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
  8041b5:	89 34 24             	mov    %esi,(%esp)
  8041b8:	e8 09 0b 00 00       	call   804cc6 <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  8041bd:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  8041c4:	00 
  8041c5:	89 34 24             	mov    %esi,(%esp)
  8041c8:	e8 2a 09 00 00       	call   804af7 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
  8041cd:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  8041d4:	00 
  8041d5:	89 34 24             	mov    %esi,(%esp)
  8041d8:	e8 70 0a 00 00       	call   804c4d <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY);
  8041dd:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  8041e4:	00 
  8041e5:	89 34 24             	mov    %esi,(%esp)
  8041e8:	e8 7b 0a 00 00       	call   804c68 <netif_set_netmask>
  
  /* TODO: netif_down(netif); */
  return result;
}
  8041ed:	89 f8                	mov    %edi,%eax
  8041ef:	83 c4 2c             	add    $0x2c,%esp
  8041f2:	5b                   	pop    %ebx
  8041f3:	5e                   	pop    %esi
  8041f4:	5f                   	pop    %edi
  8041f5:	5d                   	pop    %ebp
  8041f6:	c3                   	ret    

008041f7 <dhcp_fine_tmr>:
 * This timer checks whether an outstanding DHCP request is timed out.
 * 
 */
void
dhcp_fine_tmr()
{
  8041f7:	55                   	push   %ebp
  8041f8:	89 e5                	mov    %esp,%ebp
  8041fa:	53                   	push   %ebx
  8041fb:	83 ec 14             	sub    $0x14,%esp
  struct netif *netif = netif_list;
  8041fe:	8b 1d 54 c2 b3 00    	mov    0xb3c254,%ebx
  /* loop through netif's */
  while (netif != NULL) {
  804204:	e9 c3 00 00 00       	jmp    8042cc <dhcp_fine_tmr+0xd5>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  804209:	8b 43 20             	mov    0x20(%ebx),%eax
  80420c:	85 c0                	test   %eax,%eax
  80420e:	0f 84 b6 00 00 00    	je     8042ca <dhcp_fine_tmr+0xd3>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
  804214:	0f b7 50 26          	movzwl 0x26(%eax),%edx
  804218:	66 83 fa 01          	cmp    $0x1,%dx
  80421c:	76 0c                	jbe    80422a <dhcp_fine_tmr+0x33>
        netif->dhcp->request_timeout--;
  80421e:	83 ea 01             	sub    $0x1,%edx
  804221:	66 89 50 26          	mov    %dx,0x26(%eax)
  804225:	e9 a0 00 00 00       	jmp    8042ca <dhcp_fine_tmr+0xd3>
      }
      else if (netif->dhcp->request_timeout == 1) {
  80422a:	66 83 fa 01          	cmp    $0x1,%dx
  80422e:	0f 85 96 00 00 00    	jne    8042ca <dhcp_fine_tmr+0xd3>
        netif->dhcp->request_timeout--;
  804234:	66 c7 40 26 00 00    	movw   $0x0,0x26(%eax)
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  80423a:	8b 53 20             	mov    0x20(%ebx),%edx
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
  80423d:	0f b6 02             	movzbl (%edx),%eax
  804240:	3c 06                	cmp    $0x6,%al
  804242:	74 04                	je     804248 <dhcp_fine_tmr+0x51>
  804244:	3c 0c                	cmp    $0xc,%al
  804246:	75 0a                	jne    804252 <dhcp_fine_tmr+0x5b>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  804248:	89 d8                	mov    %ebx,%eax
  80424a:	e8 a4 f0 ff ff       	call   8032f3 <dhcp_discover>
  80424f:	90                   	nop
  804250:	eb 78                	jmp    8042ca <dhcp_fine_tmr+0xd3>
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
  804252:	3c 01                	cmp    $0x1,%al
  804254:	75 20                	jne    804276 <dhcp_fine_tmr+0x7f>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
  804256:	80 7a 01 05          	cmpb   $0x5,0x1(%edx)
  80425a:	77 09                	ja     804265 <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
  80425c:	89 d8                	mov    %ebx,%eax
  80425e:	e8 e9 f1 ff ff       	call   80344c <dhcp_select>
  804263:	eb 65                	jmp    8042ca <dhcp_fine_tmr+0xd3>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
  804265:	89 1c 24             	mov    %ebx,(%esp)
  804268:	e8 21 fe ff ff       	call   80408e <dhcp_release>
      dhcp_discover(netif);
  80426d:	89 d8                	mov    %ebx,%eax
  80426f:	e8 7f f0 ff ff       	call   8032f3 <dhcp_discover>
  804274:	eb 54                	jmp    8042ca <dhcp_fine_tmr+0xd3>
    }
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
  804276:	3c 08                	cmp    $0x8,%al
  804278:	75 1a                	jne    804294 <dhcp_fine_tmr+0x9d>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
  80427a:	80 7a 01 01          	cmpb   $0x1,0x1(%edx)
  80427e:	66 90                	xchg   %ax,%ax
  804280:	77 09                	ja     80428b <dhcp_fine_tmr+0x94>
      dhcp_check(netif);
  804282:	89 d8                	mov    %ebx,%eax
  804284:	e8 59 f3 ff ff       	call   8035e2 <dhcp_check>
  804289:	eb 3f                	jmp    8042ca <dhcp_fine_tmr+0xd3>
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
  80428b:	89 d8                	mov    %ebx,%eax
  80428d:	e8 8d f3 ff ff       	call   80361f <dhcp_bind>
  804292:	eb 36                	jmp    8042ca <dhcp_fine_tmr+0xd3>
    }
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
  804294:	3c 05                	cmp    $0x5,%al
  804296:	75 0f                	jne    8042a7 <dhcp_fine_tmr+0xb0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  804298:	89 1c 24             	mov    %ebx,(%esp)
  80429b:	90                   	nop
  80429c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  8042a0:	e8 5a fc ff ff       	call   803eff <dhcp_renew>
  8042a5:	eb 23                	jmp    8042ca <dhcp_fine_tmr+0xd3>
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
  8042a7:	3c 04                	cmp    $0x4,%al
  8042a9:	75 1f                	jne    8042ca <dhcp_fine_tmr+0xd3>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
  8042ab:	80 7a 01 08          	cmpb   $0x8,0x1(%edx)
  8042af:	90                   	nop
  8042b0:	77 09                	ja     8042bb <dhcp_fine_tmr+0xc4>
      dhcp_rebind(netif);
  8042b2:	89 d8                	mov    %ebx,%eax
  8042b4:	e8 2d ef ff ff       	call   8031e6 <dhcp_rebind>
  8042b9:	eb 0f                	jmp    8042ca <dhcp_fine_tmr+0xd3>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
  8042bb:	89 1c 24             	mov    %ebx,(%esp)
  8042be:	e8 cb fd ff ff       	call   80408e <dhcp_release>
      dhcp_discover(netif);
  8042c3:	89 d8                	mov    %ebx,%eax
  8042c5:	e8 29 f0 ff ff       	call   8032f3 <dhcp_discover>
        /* this clients' request timeout triggered */
        dhcp_timeout(netif);
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  8042ca:	8b 1b                	mov    (%ebx),%ebx
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
  8042cc:	85 db                	test   %ebx,%ebx
  8042ce:	0f 85 35 ff ff ff    	jne    804209 <dhcp_fine_tmr+0x12>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  }
}
  8042d4:	83 c4 14             	add    $0x14,%esp
  8042d7:	5b                   	pop    %ebx
  8042d8:	5d                   	pop    %ebp
  8042d9:	c3                   	ret    

008042da <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  8042da:	55                   	push   %ebp
  8042db:	89 e5                	mov    %esp,%ebp
  8042dd:	56                   	push   %esi
  8042de:	53                   	push   %ebx
  8042df:	83 ec 10             	sub    $0x10,%esp
  8042e2:	8b 75 08             	mov    0x8(%ebp),%esi
  struct dhcp *dhcp = netif->dhcp;
  8042e5:	8b 5e 20             	mov    0x20(%esi),%ebx
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  8042e8:	85 f6                	test   %esi,%esi
  8042ea:	75 1c                	jne    804308 <dhcp_stop+0x2e>
  8042ec:	c7 44 24 08 54 26 81 	movl   $0x812654,0x8(%esp)
  8042f3:	00 
  8042f4:	c7 44 24 04 2c 04 00 	movl   $0x42c,0x4(%esp)
  8042fb:	00 
  8042fc:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  804303:	e8 86 ad 00 00       	call   80f08e <_panic>
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  804308:	80 66 2e f7          	andb   $0xf7,0x2e(%esi)

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  80430c:	85 db                	test   %ebx,%ebx
  80430e:	74 42                	je     804352 <dhcp_stop+0x78>
    if (dhcp->pcb != NULL) {
  804310:	8b 43 08             	mov    0x8(%ebx),%eax
  804313:	85 c0                	test   %eax,%eax
  804315:	74 0f                	je     804326 <dhcp_stop+0x4c>
      udp_remove(dhcp->pcb);
  804317:	89 04 24             	mov    %eax,(%esp)
  80431a:	e8 9f 54 00 00       	call   8097be <udp_remove>
      dhcp->pcb = NULL;
  80431f:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    }
    if (dhcp->p != NULL) {
  804326:	8b 43 0c             	mov    0xc(%ebx),%eax
  804329:	85 c0                	test   %eax,%eax
  80432b:	74 0f                	je     80433c <dhcp_stop+0x62>
      pbuf_free(dhcp->p);
  80432d:	89 04 24             	mov    %eax,(%esp)
  804330:	e8 9f 0a 00 00       	call   804dd4 <pbuf_free>
      dhcp->p = NULL;
  804335:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    }
    /* free unfolded reply */
    dhcp_free_reply(dhcp);
  80433c:	89 d8                	mov    %ebx,%eax
  80433e:	e8 69 f4 ff ff       	call   8037ac <dhcp_free_reply>
    mem_free((void *)dhcp);
  804343:	89 1c 24             	mov    %ebx,(%esp)
  804346:	e8 7a 01 00 00       	call   8044c5 <mem_free>
    netif->dhcp = NULL;
  80434b:	c7 46 20 00 00 00 00 	movl   $0x0,0x20(%esi)
  }
}
  804352:	83 c4 10             	add    $0x10,%esp
  804355:	5b                   	pop    %ebx
  804356:	5e                   	pop    %esi
  804357:	5d                   	pop    %ebp
  804358:	c3                   	ret    

00804359 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  804359:	55                   	push   %ebp
  80435a:	89 e5                	mov    %esp,%ebp
  80435c:	56                   	push   %esi
  80435d:	53                   	push   %ebx
  80435e:	83 ec 10             	sub    $0x10,%esp
  804361:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct dhcp *dhcp;
  err_t result = ERR_OK;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  804364:	85 db                	test   %ebx,%ebx
  804366:	75 1c                	jne    804384 <dhcp_start+0x2b>
  804368:	c7 44 24 08 02 26 81 	movl   $0x812602,0x8(%esp)
  80436f:	00 
  804370:	c7 44 24 04 38 02 00 	movl   $0x238,0x4(%esp)
  804377:	00 
  804378:	c7 04 24 e2 25 81 00 	movl   $0x8125e2,(%esp)
  80437f:	e8 0a ad 00 00       	call   80f08e <_panic>
  dhcp = netif->dhcp;
  804384:	8b 73 20             	mov    0x20(%ebx),%esi
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  804387:	80 63 2e f7          	andb   $0xf7,0x2e(%ebx)

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  80438b:	85 f6                	test   %esi,%esi
  80438d:	75 19                	jne    8043a8 <dhcp_start+0x4f>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = mem_malloc(sizeof(struct dhcp));
  80438f:	c7 04 24 58 00 00 00 	movl   $0x58,(%esp)
  804396:	e8 04 04 00 00       	call   80479f <mem_malloc>
  80439b:	89 c6                	mov    %eax,%esi
    if (dhcp == NULL) {
  80439d:	85 c0                	test   %eax,%eax
  80439f:	0f 84 ac 00 00 00    	je     804451 <dhcp_start+0xf8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
  8043a5:	89 43 20             	mov    %eax,0x20(%ebx)
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 3, ("dhcp_start(): restarting DHCP configuration\n"));
  }
    
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  8043a8:	c7 44 24 08 58 00 00 	movl   $0x58,0x8(%esp)
  8043af:	00 
  8043b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8043b7:	00 
  8043b8:	89 34 24             	mov    %esi,(%esp)
  8043bb:	e8 47 b5 00 00       	call   80f907 <memset>
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
  8043c0:	e8 3f 54 00 00       	call   809804 <udp_new>
  8043c5:	89 46 08             	mov    %eax,0x8(%esi)
  if (dhcp->pcb == NULL) {
  8043c8:	85 c0                	test   %eax,%eax
  8043ca:	75 16                	jne    8043e2 <dhcp_start+0x89>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    mem_free((void *)dhcp);
  8043cc:	89 34 24             	mov    %esi,(%esp)
  8043cf:	e8 f1 00 00 00       	call   8044c5 <mem_free>
    netif->dhcp = dhcp = NULL;
  8043d4:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    return ERR_MEM;
  8043db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8043e0:	eb 74                	jmp    804456 <dhcp_start+0xfd>
  }
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
  8043e2:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
  8043e9:	00 
  8043ea:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  8043f1:	00 
  8043f2:	89 04 24             	mov    %eax,(%esp)
  8043f5:	e8 27 50 00 00       	call   809421 <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  8043fa:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  804401:	00 
  804402:	c7 44 24 04 a0 2e 81 	movl   $0x812ea0,0x4(%esp)
  804409:	00 
  80440a:	8b 46 08             	mov    0x8(%esi),%eax
  80440d:	89 04 24             	mov    %eax,(%esp)
  804410:	e8 00 53 00 00       	call   809715 <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
  804415:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  804419:	c7 44 24 04 ed 37 80 	movl   $0x8037ed,0x4(%esp)
  804420:	00 
  804421:	8b 46 08             	mov    0x8(%esi),%eax
  804424:	89 04 24             	mov    %eax,(%esp)
  804427:	e8 7e 53 00 00       	call   8097aa <udp_recv>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  80442c:	89 d8                	mov    %ebx,%eax
  80442e:	e8 c0 ee ff ff       	call   8032f3 <dhcp_discover>
  if (result != ERR_OK) {
  804433:	84 c0                	test   %al,%al
  804435:	74 0f                	je     804446 <dhcp_start+0xed>
    /* free resources allocated above */
    dhcp_stop(netif);
  804437:	89 1c 24             	mov    %ebx,(%esp)
  80443a:	e8 9b fe ff ff       	call   8042da <dhcp_stop>
    return ERR_MEM;
  80443f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  804444:	eb 10                	jmp    804456 <dhcp_start+0xfd>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  804446:	80 4b 2e 08          	orb    $0x8,0x2e(%ebx)
  return result;
  80444a:	b8 00 00 00 00       	mov    $0x0,%eax
  80444f:	eb 05                	jmp    804456 <dhcp_start+0xfd>
  if (dhcp == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = mem_malloc(sizeof(struct dhcp));
    if (dhcp == NULL) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  804451:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    return ERR_MEM;
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  return result;
}
  804456:	83 c4 10             	add    $0x10,%esp
  804459:	5b                   	pop    %ebx
  80445a:	5e                   	pop    %esi
  80445b:	5d                   	pop    %ebp
  80445c:	c3                   	ret    

0080445d <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
  80445d:	55                   	push   %ebp
  80445e:	89 e5                	mov    %esp,%ebp
  804460:	83 ec 18             	sub    $0x18,%esp

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = LWIP_MEM_ALIGN(ram_heap);
  804463:	b8 43 63 81 00       	mov    $0x816343,%eax
  804468:	83 e0 fc             	and    $0xfffffffc,%eax
  80446b:	a3 2c 63 81 00       	mov    %eax,0x81632c
  /* initialize the start of the heap */
  mem = (struct mem *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  804470:	c7 00 00 00 22 00    	movl   $0x220000,(%eax)
  mem->prev = 0;
  804476:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mem->used = 0;
  80447d:	c6 40 08 00          	movb   $0x0,0x8(%eax)
  /* initialize the end of the heap */
  ram_end = (struct mem *)&ram[MEM_SIZE_ALIGNED];
  804481:	8d 90 00 00 22 00    	lea    0x220000(%eax),%edx
  804487:	89 15 28 63 81 00    	mov    %edx,0x816328
  ram_end->used = 1;
  80448d:	c6 80 08 00 22 00 01 	movb   $0x1,0x220008(%eax)
  ram_end->next = MEM_SIZE_ALIGNED;
  804494:	c7 80 00 00 22 00 00 	movl   $0x220000,0x220000(%eax)
  80449b:	00 22 00 
  ram_end->prev = MEM_SIZE_ALIGNED;
  80449e:	c7 80 04 00 22 00 00 	movl   $0x220000,0x220004(%eax)
  8044a5:	00 22 00 

  mem_sem = sys_sem_new(1);
  8044a8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  8044af:	e8 4a 61 00 00       	call   80a5fe <sys_sem_new>
  8044b4:	a3 20 63 81 00       	mov    %eax,0x816320

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)ram;
  8044b9:	a1 2c 63 81 00       	mov    0x81632c,%eax
  8044be:	a3 24 63 81 00       	mov    %eax,0x816324

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
}
  8044c3:	c9                   	leave  
  8044c4:	c3                   	ret    

008044c5 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
  8044c5:	55                   	push   %ebp
  8044c6:	89 e5                	mov    %esp,%ebp
  8044c8:	56                   	push   %esi
  8044c9:	53                   	push   %ebx
  8044ca:	83 ec 10             	sub    $0x10,%esp
  8044cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  8044d0:	85 db                	test   %ebx,%ebx
  8044d2:	0f 84 6f 01 00 00    	je     804647 <mem_free+0x182>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | 2, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
  8044d8:	f6 c3 03             	test   $0x3,%bl
  8044db:	74 1c                	je     8044f9 <mem_free+0x34>
  8044dd:	c7 44 24 08 70 26 81 	movl   $0x812670,0x8(%esp)
  8044e4:	00 
  8044e5:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
  8044ec:	00 
  8044ed:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8044f4:	e8 95 ab 00 00       	call   80f08e <_panic>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
  8044f9:	3b 1d 2c 63 81 00    	cmp    0x81632c,%ebx
  8044ff:	72 08                	jb     804509 <mem_free+0x44>
  804501:	3b 1d 28 63 81 00    	cmp    0x816328,%ebx
  804507:	72 1c                	jb     804525 <mem_free+0x60>
  804509:	c7 44 24 08 7b 27 81 	movl   $0x81277b,0x8(%esp)
  804510:	00 
  804511:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
  804518:	00 
  804519:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  804520:	e8 69 ab 00 00       	call   80f08e <_panic>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  804525:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80452c:	00 
  80452d:	a1 20 63 81 00       	mov    0x816320,%eax
  804532:	89 04 24             	mov    %eax,(%esp)
  804535:	e8 1b 64 00 00       	call   80a955 <sys_arch_sem_wait>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  80453a:	8d 43 f4             	lea    -0xc(%ebx),%eax
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  80453d:	80 7b fc 00          	cmpb   $0x0,-0x4(%ebx)
  804541:	75 1c                	jne    80455f <mem_free+0x9a>
  804543:	c7 44 24 08 92 27 81 	movl   $0x812792,0x8(%esp)
  80454a:	00 
  80454b:	c7 44 24 04 43 01 00 	movl   $0x143,0x4(%esp)
  804552:	00 
  804553:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  80455a:	e8 2f ab 00 00       	call   80f08e <_panic>
  /* ... and is now unused. */
  mem->used = 0;
  80455f:	c6 43 fc 00          	movb   $0x0,-0x4(%ebx)

  if (mem < lfree) {
  804563:	3b 05 24 63 81 00    	cmp    0x816324,%eax
  804569:	73 05                	jae    804570 <mem_free+0xab>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  80456b:	a3 24 63 81 00       	mov    %eax,0x816324
plug_holes(struct mem *mem)
{
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
  804570:	8b 15 2c 63 81 00    	mov    0x81632c,%edx
  804576:	39 d0                	cmp    %edx,%eax
  804578:	73 1c                	jae    804596 <mem_free+0xd1>
  80457a:	c7 44 24 08 a6 27 81 	movl   $0x8127a6,0x8(%esp)
  804581:	00 
  804582:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
  804589:	00 
  80458a:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  804591:	e8 f8 aa 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
  804596:	8b 35 28 63 81 00    	mov    0x816328,%esi
  80459c:	39 f0                	cmp    %esi,%eax
  80459e:	72 1c                	jb     8045bc <mem_free+0xf7>
  8045a0:	c7 44 24 08 bd 27 81 	movl   $0x8127bd,0x8(%esp)
  8045a7:	00 
  8045a8:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
  8045af:	00 
  8045b0:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8045b7:	e8 d2 aa 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
  8045bc:	8b 4b f4             	mov    -0xc(%ebx),%ecx
  8045bf:	81 f9 00 00 22 00    	cmp    $0x220000,%ecx
  8045c5:	76 1c                	jbe    8045e3 <mem_free+0x11e>
  8045c7:	c7 44 24 08 94 26 81 	movl   $0x812694,0x8(%esp)
  8045ce:	00 
  8045cf:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
  8045d6:	00 
  8045d7:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8045de:	e8 ab aa 00 00       	call   80f08e <_panic>

  nmem = (struct mem *)&ram[mem->next];
  8045e3:	01 d1                	add    %edx,%ecx
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  8045e5:	39 c8                	cmp    %ecx,%eax
  8045e7:	74 26                	je     80460f <mem_free+0x14a>
  8045e9:	80 79 08 00          	cmpb   $0x0,0x8(%ecx)
  8045ed:	75 20                	jne    80460f <mem_free+0x14a>
  8045ef:	39 ce                	cmp    %ecx,%esi
  8045f1:	74 1c                	je     80460f <mem_free+0x14a>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
  8045f3:	3b 0d 24 63 81 00    	cmp    0x816324,%ecx
  8045f9:	75 05                	jne    804600 <mem_free+0x13b>
      lfree = mem;
  8045fb:	a3 24 63 81 00       	mov    %eax,0x816324
    }
    mem->next = nmem->next;
  804600:	8b 31                	mov    (%ecx),%esi
  804602:	89 73 f4             	mov    %esi,-0xc(%ebx)
    ((struct mem *)&ram[nmem->next])->prev = (u8_t *)mem - ram;
  804605:	8b 09                	mov    (%ecx),%ecx
  804607:	89 c6                	mov    %eax,%esi
  804609:	29 d6                	sub    %edx,%esi
  80460b:	89 74 0a 04          	mov    %esi,0x4(%edx,%ecx,1)
  }

  /* plug hole backward */
  pmem = (struct mem *)&ram[mem->prev];
  80460f:	89 d1                	mov    %edx,%ecx
  804611:	03 4b f8             	add    -0x8(%ebx),%ecx
  if (pmem != mem && pmem->used == 0) {
  804614:	39 c8                	cmp    %ecx,%eax
  804616:	74 22                	je     80463a <mem_free+0x175>
  804618:	80 79 08 00          	cmpb   $0x0,0x8(%ecx)
  80461c:	75 1c                	jne    80463a <mem_free+0x175>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
  80461e:	3b 05 24 63 81 00    	cmp    0x816324,%eax
  804624:	75 06                	jne    80462c <mem_free+0x167>
      lfree = pmem;
  804626:	89 0d 24 63 81 00    	mov    %ecx,0x816324
    }
    pmem->next = mem->next;
  80462c:	8b 43 f4             	mov    -0xc(%ebx),%eax
  80462f:	89 01                	mov    %eax,(%ecx)
    ((struct mem *)&ram[mem->next])->prev = (u8_t *)pmem - ram;
  804631:	8b 43 f4             	mov    -0xc(%ebx),%eax
  804634:	29 d1                	sub    %edx,%ecx
  804636:	89 4c 02 04          	mov    %ecx,0x4(%edx,%eax,1)
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  80463a:	a1 20 63 81 00       	mov    0x816320,%eax
  80463f:	89 04 24             	mov    %eax,(%esp)
  804642:	e8 99 62 00 00       	call   80a8e0 <sys_sem_signal>
}
  804647:	83 c4 10             	add    $0x10,%esp
  80464a:	5b                   	pop    %ebx
  80464b:	5e                   	pop    %esi
  80464c:	5d                   	pop    %ebp
  80464d:	c3                   	ret    

0080464e <mem_realloc>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_realloc(void *rmem, mem_size_t newsize)
{
  80464e:	55                   	push   %ebp
  80464f:	89 e5                	mov    %esp,%ebp
  804651:	57                   	push   %edi
  804652:	56                   	push   %esi
  804653:	53                   	push   %ebx
  804654:	83 ec 1c             	sub    $0x1c,%esp
  804657:	8b 5d 08             	mov    0x8(%ebp),%ebx
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  80465a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80465d:	8d 70 03             	lea    0x3(%eax),%esi
  804660:	83 e6 fc             	and    $0xfffffffc,%esi

  if(newsize < MIN_SIZE_ALIGNED) {
  804663:	83 fe 0b             	cmp    $0xb,%esi
  804666:	76 0d                	jbe    804675 <mem_realloc+0x27>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  804668:	81 fe 00 00 22 00    	cmp    $0x220000,%esi
  80466e:	76 0a                	jbe    80467a <mem_realloc+0x2c>
  804670:	e9 1d 01 00 00       	jmp    804792 <mem_realloc+0x144>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  804675:	be 0c 00 00 00       	mov    $0xc,%esi

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  LWIP_ASSERT("mem_realloc: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
  80467a:	a1 2c 63 81 00       	mov    0x81632c,%eax
  80467f:	39 d8                	cmp    %ebx,%eax
  804681:	77 08                	ja     80468b <mem_realloc+0x3d>
  804683:	3b 1d 28 63 81 00    	cmp    0x816328,%ebx
  804689:	72 1c                	jb     8046a7 <mem_realloc+0x59>
  80468b:	c7 44 24 08 d7 27 81 	movl   $0x8127d7,0x8(%esp)
  804692:	00 
  804693:	c7 44 24 04 79 01 00 	movl   $0x179,0x4(%esp)
  80469a:	00 
  80469b:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8046a2:	e8 e7 a9 00 00       	call   80f08e <_panic>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  8046a7:	8d 53 f4             	lea    -0xc(%ebx),%edx
  /* ... and its offset pointer */
  ptr = (u8_t *)mem - ram;
  8046aa:	29 c2                	sub    %eax,%edx
  8046ac:	89 55 e4             	mov    %edx,-0x1c(%ebp)

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  8046af:	8b 43 f4             	mov    -0xc(%ebx),%eax
  8046b2:	8d 78 f4             	lea    -0xc(%eax),%edi
  8046b5:	29 d7                	sub    %edx,%edi
  LWIP_ASSERT("mem_realloc can only shrink memory", newsize <= size);
  8046b7:	39 f7                	cmp    %esi,%edi
  8046b9:	73 1c                	jae    8046d7 <mem_realloc+0x89>
  8046bb:	c7 44 24 08 c0 26 81 	movl   $0x8126c0,0x8(%esp)
  8046c2:	00 
  8046c3:	c7 44 24 04 8a 01 00 	movl   $0x18a,0x4(%esp)
  8046ca:	00 
  8046cb:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8046d2:	e8 b7 a9 00 00       	call   80f08e <_panic>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
    /* No change in size, simply return */
    return rmem;
  8046d7:	89 d8                	mov    %ebx,%eax
  LWIP_ASSERT("mem_realloc can only shrink memory", newsize <= size);
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  8046d9:	39 fe                	cmp    %edi,%esi
  8046db:	0f 84 b6 00 00 00    	je     804797 <mem_realloc+0x149>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  8046e1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8046e8:	00 
  8046e9:	a1 20 63 81 00       	mov    0x816320,%eax
  8046ee:	89 04 24             	mov    %eax,(%esp)
  8046f1:	e8 5f 62 00 00       	call   80a955 <sys_arch_sem_wait>

  MEM_STATS_DEC_USED(used, (size - newsize));

  mem2 = (struct mem *)&ram[mem->next];
  8046f6:	a1 2c 63 81 00       	mov    0x81632c,%eax
  8046fb:	89 c2                	mov    %eax,%edx
  8046fd:	03 53 f4             	add    -0xc(%ebx),%edx
  if(mem2->used == 0) {
  804700:	80 7a 08 00          	cmpb   $0x0,0x8(%edx)
  804704:	75 3c                	jne    804742 <mem_realloc+0xf4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  804706:	8b 0a                	mov    (%edx),%ecx
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  804708:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  80470b:	8d 74 3e 0c          	lea    0xc(%esi,%edi,1),%esi
    if (lfree == mem2) {
  80470f:	39 15 24 63 81 00    	cmp    %edx,0x816324
  804715:	75 09                	jne    804720 <mem_realloc+0xd2>
      lfree = (struct mem *)&ram[ptr2];
  804717:	8d 14 30             	lea    (%eax,%esi,1),%edx
  80471a:	89 15 24 63 81 00    	mov    %edx,0x816324
    }
    mem2 = (struct mem *)&ram[ptr2];
  804720:	8d 14 30             	lea    (%eax,%esi,1),%edx
    mem2->used = 0;
  804723:	c6 42 08 00          	movb   $0x0,0x8(%edx)
    /* restore the next pointer */
    mem2->next = next;
  804727:	89 0a                	mov    %ecx,(%edx)
    /* link it back to mem */
    mem2->prev = ptr;
  804729:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  80472c:	89 4a 04             	mov    %ecx,0x4(%edx)
    /* link mem to it */
    mem->next = ptr2;
  80472f:	89 73 f4             	mov    %esi,-0xc(%ebx)
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  804732:	8b 12                	mov    (%edx),%edx
  804734:	81 fa 00 00 22 00    	cmp    $0x220000,%edx
  80473a:	74 45                	je     804781 <mem_realloc+0x133>
      ((struct mem *)&ram[mem2->next])->prev = ptr2;
  80473c:	89 74 10 04          	mov    %esi,0x4(%eax,%edx,1)
  804740:	eb 3f                	jmp    804781 <mem_realloc+0x133>
    }
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  804742:	8d 56 18             	lea    0x18(%esi),%edx
  804745:	39 d7                	cmp    %edx,%edi
  804747:	72 38                	jb     804781 <mem_realloc+0x133>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  804749:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  80474c:	8d 4c 0e 0c          	lea    0xc(%esi,%ecx,1),%ecx
    mem2 = (struct mem *)&ram[ptr2];
  804750:	8d 14 08             	lea    (%eax,%ecx,1),%edx
    if (mem2 < lfree) {
  804753:	3b 15 24 63 81 00    	cmp    0x816324,%edx
  804759:	73 06                	jae    804761 <mem_realloc+0x113>
      lfree = mem2;
  80475b:	89 15 24 63 81 00    	mov    %edx,0x816324
    }
    mem2->used = 0;
  804761:	c6 42 08 00          	movb   $0x0,0x8(%edx)
    mem2->next = mem->next;
  804765:	8b 73 f4             	mov    -0xc(%ebx),%esi
  804768:	89 32                	mov    %esi,(%edx)
    mem2->prev = ptr;
  80476a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  80476d:	89 7a 04             	mov    %edi,0x4(%edx)
    mem->next = ptr2;
  804770:	89 4b f4             	mov    %ecx,-0xc(%ebx)
    if (mem2->next != MEM_SIZE_ALIGNED) {
  804773:	8b 12                	mov    (%edx),%edx
  804775:	81 fa 00 00 22 00    	cmp    $0x220000,%edx
  80477b:	74 04                	je     804781 <mem_realloc+0x133>
      ((struct mem *)&ram[mem2->next])->prev = ptr2;
  80477d:	89 4c 10 04          	mov    %ecx,0x4(%eax,%edx,1)
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  804781:	a1 20 63 81 00       	mov    0x816320,%eax
  804786:	89 04 24             	mov    %eax,(%esp)
  804789:	e8 52 61 00 00       	call   80a8e0 <sys_sem_signal>
  return rmem;
  80478e:	89 d8                	mov    %ebx,%eax
  804790:	eb 05                	jmp    804797 <mem_realloc+0x149>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  804792:	b8 00 00 00 00       	mov    $0x0,%eax
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  804797:	83 c4 1c             	add    $0x1c,%esp
  80479a:	5b                   	pop    %ebx
  80479b:	5e                   	pop    %esi
  80479c:	5f                   	pop    %edi
  80479d:	5d                   	pop    %ebp
  80479e:	c3                   	ret    

0080479f <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  80479f:	55                   	push   %ebp
  8047a0:	89 e5                	mov    %esp,%ebp
  8047a2:	57                   	push   %edi
  8047a3:	56                   	push   %esi
  8047a4:	53                   	push   %ebx
  8047a5:	83 ec 1c             	sub    $0x1c,%esp
  8047a8:	8b 75 08             	mov    0x8(%ebp),%esi
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  8047ab:	85 f6                	test   %esi,%esi
  8047ad:	0f 84 69 01 00 00    	je     80491c <mem_malloc+0x17d>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  8047b3:	83 c6 03             	add    $0x3,%esi
  8047b6:	83 e6 fc             	and    $0xfffffffc,%esi

  if(size < MIN_SIZE_ALIGNED) {
  8047b9:	83 fe 0b             	cmp    $0xb,%esi
  8047bc:	76 0d                	jbe    8047cb <mem_malloc+0x2c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  8047be:	81 fe 00 00 22 00    	cmp    $0x220000,%esi
  8047c4:	76 0a                	jbe    8047d0 <mem_malloc+0x31>
  8047c6:	e9 58 01 00 00       	jmp    804923 <mem_malloc+0x184>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  8047cb:	be 0c 00 00 00       	mov    $0xc,%esi
  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_arch_sem_wait(mem_sem, 0);
  8047d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8047d7:	00 
  8047d8:	a1 20 63 81 00       	mov    0x816320,%eax
  8047dd:	89 04 24             	mov    %eax,(%esp)
  8047e0:	e8 70 61 00 00       	call   80a955 <sys_arch_sem_wait>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (u8_t *)lfree - ram; ptr < MEM_SIZE_ALIGNED - size;
  8047e5:	8b 15 2c 63 81 00    	mov    0x81632c,%edx
  8047eb:	a1 24 63 81 00       	mov    0x816324,%eax
  8047f0:	29 d0                	sub    %edx,%eax
  8047f2:	b9 00 00 22 00       	mov    $0x220000,%ecx
  8047f7:	29 f1                	sub    %esi,%ecx
  8047f9:	e9 02 01 00 00       	jmp    804900 <mem_malloc+0x161>
         ptr = ((struct mem *)&ram[ptr])->next) {
      mem = (struct mem *)&ram[ptr];
  8047fe:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  804801:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  804805:	0f 85 f3 00 00 00    	jne    8048fe <mem_malloc+0x15f>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  80480b:	8b 3b                	mov    (%ebx),%edi
  80480d:	83 ef 0c             	sub    $0xc,%edi
  804810:	29 c7                	sub    %eax,%edi
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  804812:	39 f7                	cmp    %esi,%edi
  804814:	0f 82 e4 00 00 00    	jb     8048fe <mem_malloc+0x15f>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  80481a:	8d 4e 18             	lea    0x18(%esi),%ecx
  80481d:	39 f9                	cmp    %edi,%ecx
  80481f:	77 2c                	ja     80484d <mem_malloc+0xae>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  804821:	8d 4c 30 0c          	lea    0xc(%eax,%esi,1),%ecx
          /* create mem2 struct */
          mem2 = (struct mem *)&ram[ptr2];
  804825:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  804828:	01 d1                	add    %edx,%ecx
          mem2->used = 0;
  80482a:	c6 41 08 00          	movb   $0x0,0x8(%ecx)
          mem2->next = mem->next;
  80482e:	8b 3b                	mov    (%ebx),%edi
  804830:	89 39                	mov    %edi,(%ecx)
          mem2->prev = ptr;
  804832:	89 41 04             	mov    %eax,0x4(%ecx)
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  804835:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  804838:	89 3b                	mov    %edi,(%ebx)
          mem->used = 1;
  80483a:	c6 43 08 01          	movb   $0x1,0x8(%ebx)

          if (mem2->next != MEM_SIZE_ALIGNED) {
  80483e:	8b 01                	mov    (%ecx),%eax
  804840:	3d 00 00 22 00       	cmp    $0x220000,%eax
  804845:	74 0a                	je     804851 <mem_malloc+0xb2>
            ((struct mem *)&ram[mem2->next])->prev = ptr2;
  804847:	89 7c 02 04          	mov    %edi,0x4(%edx,%eax,1)
  80484b:	eb 04                	jmp    804851 <mem_malloc+0xb2>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  80484d:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
          MEM_STATS_INC_USED(used, mem->next - ((u8_t *)mem - ram));
        }

        if (mem == lfree) {
  804851:	3b 1d 24 63 81 00    	cmp    0x816324,%ebx
  804857:	75 2c                	jne    804885 <mem_malloc+0xe6>
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
  804859:	8b 15 28 63 81 00    	mov    0x816328,%edx
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)&ram[lfree->next];
  80485f:	8b 0d 2c 63 81 00    	mov    0x81632c,%ecx
  804865:	89 d8                	mov    %ebx,%eax
  804867:	eb 06                	jmp    80486f <mem_malloc+0xd0>
  804869:	89 cf                	mov    %ecx,%edi
  80486b:	03 38                	add    (%eax),%edi
  80486d:	89 f8                	mov    %edi,%eax
          MEM_STATS_INC_USED(used, mem->next - ((u8_t *)mem - ram));
        }

        if (mem == lfree) {
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
  80486f:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
  804873:	75 07                	jne    80487c <mem_malloc+0xdd>
  804875:	a3 24 63 81 00       	mov    %eax,0x816324
  80487a:	eb 09                	jmp    804885 <mem_malloc+0xe6>
  80487c:	39 c2                	cmp    %eax,%edx
  80487e:	75 e9                	jne    804869 <mem_malloc+0xca>
  804880:	a3 24 63 81 00       	mov    %eax,0x816324
            lfree = (struct mem *)&ram[lfree->next];
          }
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_sem_signal(mem_sem);
  804885:	a1 20 63 81 00       	mov    0x816320,%eax
  80488a:	89 04 24             	mov    %eax,(%esp)
  80488d:	e8 4e 60 00 00       	call   80a8e0 <sys_sem_signal>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
  804892:	8d 44 33 0c          	lea    0xc(%ebx,%esi,1),%eax
  804896:	39 05 28 63 81 00    	cmp    %eax,0x816328
  80489c:	73 1c                	jae    8048ba <mem_malloc+0x11b>
  80489e:	c7 44 24 08 e4 26 81 	movl   $0x8126e4,0x8(%esp)
  8048a5:	00 
  8048a6:	c7 44 24 04 4b 02 00 	movl   $0x24b,0x4(%esp)
  8048ad:	00 
  8048ae:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8048b5:	e8 d4 a7 00 00       	call   80f08e <_panic>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
  8048ba:	8d 43 0c             	lea    0xc(%ebx),%eax
  8048bd:	a8 03                	test   $0x3,%al
  8048bf:	74 1c                	je     8048dd <mem_malloc+0x13e>
  8048c1:	c7 44 24 08 14 27 81 	movl   $0x812714,0x8(%esp)
  8048c8:	00 
  8048c9:	c7 44 24 04 4d 02 00 	movl   $0x24d,0x4(%esp)
  8048d0:	00 
  8048d1:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8048d8:	e8 b1 a7 00 00       	call   80f08e <_panic>
         (unsigned long)((u8_t *)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
  8048dd:	f6 c3 03             	test   $0x3,%bl
  8048e0:	74 46                	je     804928 <mem_malloc+0x189>
  8048e2:	c7 44 24 08 44 27 81 	movl   $0x812744,0x8(%esp)
  8048e9:	00 
  8048ea:	c7 44 24 04 4f 02 00 	movl   $0x24f,0x4(%esp)
  8048f1:	00 
  8048f2:	c7 04 24 67 27 81 00 	movl   $0x812767,(%esp)
  8048f9:	e8 90 a7 00 00       	call   80f08e <_panic>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (u8_t *)lfree - ram; ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)&ram[ptr])->next) {
  8048fe:	8b 03                	mov    (%ebx),%eax
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (u8_t *)lfree - ram; ptr < MEM_SIZE_ALIGNED - size;
  804900:	39 c8                	cmp    %ecx,%eax
  804902:	0f 82 f6 fe ff ff    	jb     8047fe <mem_malloc+0x5f>
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | 2, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_sem_signal(mem_sem);
  804908:	a1 20 63 81 00       	mov    0x816320,%eax
  80490d:	89 04 24             	mov    %eax,(%esp)
  804910:	e8 cb 5f 00 00       	call   80a8e0 <sys_sem_signal>
  return NULL;
  804915:	b8 00 00 00 00       	mov    $0x0,%eax
  80491a:	eb 0c                	jmp    804928 <mem_malloc+0x189>
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
  80491c:	b8 00 00 00 00       	mov    $0x0,%eax
  804921:	eb 05                	jmp    804928 <mem_malloc+0x189>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  804923:	b8 00 00 00 00       	mov    $0x0,%eax
  LWIP_DEBUGF(MEM_DEBUG | 2, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_sem_signal(mem_sem);
  return NULL;
}
  804928:	83 c4 1c             	add    $0x1c,%esp
  80492b:	5b                   	pop    %ebx
  80492c:	5e                   	pop    %esi
  80492d:	5f                   	pop    %edi
  80492e:	5d                   	pop    %ebp
  80492f:	c3                   	ret    

00804930 <mem_calloc>:
 * @param count number of objects to allocate
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *mem_calloc(mem_size_t count, mem_size_t size)
{
  804930:	55                   	push   %ebp
  804931:	89 e5                	mov    %esp,%ebp
  804933:	56                   	push   %esi
  804934:	53                   	push   %ebx
  804935:	83 ec 10             	sub    $0x10,%esp
  void *p;

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc(count * size);
  804938:	8b 75 0c             	mov    0xc(%ebp),%esi
  80493b:	0f af 75 08          	imul   0x8(%ebp),%esi
  80493f:	89 34 24             	mov    %esi,(%esp)
  804942:	e8 58 fe ff ff       	call   80479f <mem_malloc>
  804947:	89 c3                	mov    %eax,%ebx
  if (p) {
  804949:	85 c0                	test   %eax,%eax
  80494b:	74 14                	je     804961 <mem_calloc+0x31>
    /* zero the memory */
    memset(p, 0, count * size);
  80494d:	89 74 24 08          	mov    %esi,0x8(%esp)
  804951:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  804958:	00 
  804959:	89 04 24             	mov    %eax,(%esp)
  80495c:	e8 a6 af 00 00       	call   80f907 <memset>
  }
  return p;
}
  804961:	89 d8                	mov    %ebx,%eax
  804963:	83 c4 10             	add    $0x10,%esp
  804966:	5b                   	pop    %ebx
  804967:	5e                   	pop    %esi
  804968:	5d                   	pop    %ebp
  804969:	c3                   	ret    

0080496a <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  80496a:	55                   	push   %ebp
  80496b:	89 e5                	mov    %esp,%ebp
  80496d:	56                   	push   %esi
  80496e:	53                   	push   %ebx
    MEMP_STATS_AVAIL(max, i, 0);
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

  memp = LWIP_MEM_ALIGN(memp_memory);
  80496f:	b8 63 63 a3 00       	mov    $0xa36363,%eax
  804974:	83 e0 fc             	and    $0xfffffffc,%eax
  804977:	ba 00 00 00 00       	mov    $0x0,%edx
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  80497c:	c7 84 12 e0 53 b3 00 	movl   $0x0,0xb353e0(%edx,%edx,1)
  804983:	00 00 00 00 
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  804987:	0f b7 b2 68 28 81 00 	movzwl 0x812868(%edx),%esi
  80498e:	b9 00 00 00 00       	mov    $0x0,%ecx
  804993:	eb 1c                	jmp    8049b1 <memp_init+0x47>
      memp->next = memp_tab[i];
  804995:	8b 9c 12 e0 53 b3 00 	mov    0xb353e0(%edx,%edx,1),%ebx
  80499c:	89 18                	mov    %ebx,(%eax)
      memp_tab[i] = memp;
  80499e:	89 84 12 e0 53 b3 00 	mov    %eax,0xb353e0(%edx,%edx,1)
      memp = (struct memp *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]);
  8049a5:	0f b7 9a 84 28 81 00 	movzwl 0x812884(%edx),%ebx
  8049ac:	01 d8                	add    %ebx,%eax
  memp = LWIP_MEM_ALIGN(memp_memory);
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  8049ae:	83 c1 01             	add    $0x1,%ecx
  8049b1:	66 39 f1             	cmp    %si,%cx
  8049b4:	75 df                	jne    804995 <memp_init+0x2b>
  8049b6:	83 c2 02             	add    $0x2,%edx
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

  memp = LWIP_MEM_ALIGN(memp_memory);
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  8049b9:	83 fa 1c             	cmp    $0x1c,%edx
  8049bc:	75 be                	jne    80497c <memp_init+0x12>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  8049be:	5b                   	pop    %ebx
  8049bf:	5e                   	pop    %esi
  8049c0:	5d                   	pop    %ebp
  8049c1:	c3                   	ret    

008049c2 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  8049c2:	55                   	push   %ebp
  8049c3:	89 e5                	mov    %esp,%ebp
  8049c5:	83 ec 18             	sub    $0x18,%esp
  8049c8:	8b 55 08             	mov    0x8(%ebp),%edx
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  8049cb:	83 fa 0d             	cmp    $0xd,%edx
  8049ce:	76 1c                	jbe    8049ec <memp_malloc+0x2a>
  8049d0:	c7 44 24 08 f1 27 81 	movl   $0x8127f1,0x8(%esp)
  8049d7:	00 
  8049d8:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
  8049df:	00 
  8049e0:	c7 04 24 0e 28 81 00 	movl   $0x81280e,(%esp)
  8049e7:	e8 a2 a6 00 00       	call   80f08e <_panic>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  8049ec:	8b 04 95 e0 53 b3 00 	mov    0xb353e0(,%edx,4),%eax
  
  if (memp != NULL) {    
  8049f3:	85 c0                	test   %eax,%eax
  8049f5:	74 29                	je     804a20 <memp_malloc+0x5e>
    memp_tab[type] = memp->next;    
  8049f7:	8b 08                	mov    (%eax),%ecx
  8049f9:	89 0c 95 e0 53 b3 00 	mov    %ecx,0xb353e0(,%edx,4)
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  804a00:	a8 03                	test   $0x3,%al
  804a02:	74 1c                	je     804a20 <memp_malloc+0x5e>
  804a04:	c7 44 24 08 24 28 81 	movl   $0x812824,0x8(%esp)
  804a0b:	00 
  804a0c:	c7 44 24 04 3f 01 00 	movl   $0x13f,0x4(%esp)
  804a13:	00 
  804a14:	c7 04 24 0e 28 81 00 	movl   $0x81280e,(%esp)
  804a1b:	e8 6e a6 00 00       	call   80f08e <_panic>
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
  804a20:	c9                   	leave  
  804a21:	c3                   	ret    

00804a22 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  804a22:	55                   	push   %ebp
  804a23:	89 e5                	mov    %esp,%ebp
  804a25:	83 ec 18             	sub    $0x18,%esp
  804a28:	8b 55 08             	mov    0x8(%ebp),%edx
  804a2b:	8b 45 0c             	mov    0xc(%ebp),%eax
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  804a2e:	85 c0                	test   %eax,%eax
  804a30:	74 30                	je     804a62 <memp_free+0x40>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
  804a32:	a8 03                	test   $0x3,%al
  804a34:	74 1c                	je     804a52 <memp_free+0x30>
  804a36:	c7 44 24 08 48 28 81 	movl   $0x812848,0x8(%esp)
  804a3d:	00 
  804a3e:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
  804a45:	00 
  804a46:	c7 04 24 0e 28 81 00 	movl   $0x81280e,(%esp)
  804a4d:	e8 3c a6 00 00       	call   80f08e <_panic>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  804a52:	8b 0c 95 e0 53 b3 00 	mov    0xb353e0(,%edx,4),%ecx
  804a59:	89 08                	mov    %ecx,(%eax)
  memp_tab[type] = memp;
  804a5b:	89 04 95 e0 53 b3 00 	mov    %eax,0xb353e0(,%edx,4)
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
  804a62:	c9                   	leave  
  804a63:	c3                   	ret    
  804a64:	66 90                	xchg   %ax,%ax
  804a66:	66 90                	xchg   %ax,%ax
  804a68:	66 90                	xchg   %ax,%ax
  804a6a:	66 90                	xchg   %ax,%ax
  804a6c:	66 90                	xchg   %ax,%ax
  804a6e:	66 90                	xchg   %ax,%ax

00804a70 <netif_remove>:
 * Remove a network interface from the list of lwIP netifs.
 *
 * @param netif the network interface to remove
 */
void netif_remove(struct netif * netif)
{
  804a70:	55                   	push   %ebp
  804a71:	89 e5                	mov    %esp,%ebp
  804a73:	8b 4d 08             	mov    0x8(%ebp),%ecx
  if ( netif == NULL ) return;
  804a76:	85 c9                	test   %ecx,%ecx
  804a78:	74 3c                	je     804ab6 <netif_remove+0x46>
#endif /* LWIP_IGMP */

  snmp_delete_ipaddridx_tree(netif);

  /*  is it the first netif? */
  if (netif_list == netif) {
  804a7a:	a1 54 c2 b3 00       	mov    0xb3c254,%eax
  804a7f:	39 c8                	cmp    %ecx,%eax
  804a81:	75 19                	jne    804a9c <netif_remove+0x2c>
    netif_list = netif->next;
  804a83:	8b 00                	mov    (%eax),%eax
  804a85:	a3 54 c2 b3 00       	mov    %eax,0xb3c254
  804a8a:	eb 18                	jmp    804aa4 <netif_remove+0x34>
  }
  else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
      if (tmpNetif->next == netif) {
  804a8c:	8b 10                	mov    (%eax),%edx
  804a8e:	39 ca                	cmp    %ecx,%edx
  804a90:	74 04                	je     804a96 <netif_remove+0x26>
    snmp_dec_iflist();
  }
  else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
  804a92:	89 d0                	mov    %edx,%eax
  804a94:	eb 06                	jmp    804a9c <netif_remove+0x2c>
      if (tmpNetif->next == netif) {
        tmpNetif->next = netif->next;
  804a96:	8b 11                	mov    (%ecx),%edx
  804a98:	89 10                	mov    %edx,(%eax)
  804a9a:	eb 08                	jmp    804aa4 <netif_remove+0x34>
    snmp_dec_iflist();
  }
  else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
  804a9c:	85 c0                	test   %eax,%eax
  804a9e:	66 90                	xchg   %ax,%ax
  804aa0:	75 ea                	jne    804a8c <netif_remove+0x1c>
  804aa2:	eb 12                	jmp    804ab6 <netif_remove+0x46>
    }
    if (tmpNetif == NULL)
      return; /*  we didn't find any netif today */
  }
  /* this netif is default? */
  if (netif_default == netif)
  804aa4:	39 0d 58 c2 b3 00    	cmp    %ecx,0xb3c258
  804aaa:	75 0a                	jne    804ab6 <netif_remove+0x46>
  else
  {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  804aac:	c7 05 58 c2 b3 00 00 	movl   $0x0,0xb3c258
  804ab3:	00 00 00 
  /* this netif is default? */
  if (netif_default == netif)
    /* reset default netif */
    netif_set_default(NULL);
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  804ab6:	5d                   	pop    %ebp
  804ab7:	c3                   	ret    

00804ab8 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(char *name)
{
  804ab8:	55                   	push   %ebp
  804ab9:	89 e5                	mov    %esp,%ebp
  804abb:	53                   	push   %ebx
  804abc:	8b 4d 08             	mov    0x8(%ebp),%ecx
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  804abf:	85 c9                	test   %ecx,%ecx
  804ac1:	74 2c                	je     804aef <netif_find+0x37>
    return NULL;
  }

  num = name[2] - '0';
  804ac3:	0f b6 41 02          	movzbl 0x2(%ecx),%eax
  804ac7:	8d 50 d0             	lea    -0x30(%eax),%edx

  for(netif = netif_list; netif != NULL; netif = netif->next) {
  804aca:	a1 54 c2 b3 00       	mov    0xb3c254,%eax
  804acf:	eb 18                	jmp    804ae9 <netif_find+0x31>
    if (num == netif->num &&
  804ad1:	38 50 31             	cmp    %dl,0x31(%eax)
  804ad4:	75 11                	jne    804ae7 <netif_find+0x2f>
  804ad6:	0f b6 58 2f          	movzbl 0x2f(%eax),%ebx
  804ada:	38 19                	cmp    %bl,(%ecx)
  804adc:	75 09                	jne    804ae7 <netif_find+0x2f>
       name[0] == netif->name[0] &&
  804ade:	0f b6 58 30          	movzbl 0x30(%eax),%ebx
  804ae2:	38 59 01             	cmp    %bl,0x1(%ecx)
  804ae5:	74 0d                	je     804af4 <netif_find+0x3c>
    return NULL;
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
  804ae7:	8b 00                	mov    (%eax),%eax
  804ae9:	85 c0                	test   %eax,%eax
  804aeb:	75 e4                	jne    804ad1 <netif_find+0x19>
  804aed:	eb 05                	jmp    804af4 <netif_find+0x3c>
{
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
    return NULL;
  804aef:	b8 00 00 00 00       	mov    $0x0,%eax
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
}
  804af4:	5b                   	pop    %ebx
  804af5:	5d                   	pop    %ebp
  804af6:	c3                   	ret    

00804af7 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, struct ip_addr *ipaddr)
{
  804af7:	55                   	push   %ebp
  804af8:	89 e5                	mov    %esp,%ebp
  804afa:	57                   	push   %edi
  804afb:	56                   	push   %esi
  804afc:	53                   	push   %ebx
  804afd:	83 ec 1c             	sub    $0x1c,%esp
  804b00:	8b 5d 08             	mov    0x8(%ebp),%ebx
  804b03:	8b 75 0c             	mov    0xc(%ebp),%esi
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0)
  804b06:	8b 43 04             	mov    0x4(%ebx),%eax
  804b09:	39 06                	cmp    %eax,(%esi)
  804b0b:	74 53                	je     804b60 <netif_set_ipaddr+0x69>
  {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | 1, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  804b0d:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
    while (pcb != NULL) {
  804b12:	eb 19                	jmp    804b2d <netif_set_ipaddr+0x36>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  804b14:	8b 4b 04             	mov    0x4(%ebx),%ecx
  804b17:	39 08                	cmp    %ecx,(%eax)
  804b19:	75 0f                	jne    804b2a <netif_set_ipaddr+0x33>
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
  804b1b:	8b 78 0c             	mov    0xc(%eax),%edi
        LWIP_DEBUGF(NETIF_DEBUG | 1, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  804b1e:	89 04 24             	mov    %eax,(%esp)
  804b21:	e8 93 16 00 00       	call   8061b9 <tcp_abort>
        pcb = next;
  804b26:	89 f8                	mov    %edi,%eax
  804b28:	eb 03                	jmp    804b2d <netif_set_ipaddr+0x36>
      } else {
        pcb = pcb->next;
  804b2a:	8b 40 0c             	mov    0xc(%eax),%eax
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0)
  {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | 1, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
  804b2d:	85 c0                	test   %eax,%eax
  804b2f:	75 e3                	jne    804b14 <netif_set_ipaddr+0x1d>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  804b31:	a1 64 c2 b3 00       	mov    0xb3c264,%eax
  804b36:	eb 24                	jmp    804b5c <netif_set_ipaddr+0x65>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  804b38:	85 c0                	test   %eax,%eax
  804b3a:	74 1d                	je     804b59 <netif_set_ipaddr+0x62>
  804b3c:	8b 10                	mov    (%eax),%edx
  804b3e:	85 d2                	test   %edx,%edx
  804b40:	74 17                	je     804b59 <netif_set_ipaddr+0x62>
  804b42:	3b 53 04             	cmp    0x4(%ebx),%edx
  804b45:	75 12                	jne    804b59 <netif_set_ipaddr+0x62>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  804b47:	85 f6                	test   %esi,%esi
  804b49:	74 07                	je     804b52 <netif_set_ipaddr+0x5b>
  804b4b:	8b 16                	mov    (%esi),%edx
  804b4d:	8d 76 00             	lea    0x0(%esi),%esi
  804b50:	eb 05                	jmp    804b57 <netif_set_ipaddr+0x60>
  804b52:	ba 00 00 00 00       	mov    $0x0,%edx
  804b57:	89 10                	mov    %edx,(%eax)
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  804b59:	8b 40 0c             	mov    0xc(%eax),%eax
  804b5c:	85 c0                	test   %eax,%eax
  804b5e:	75 d8                	jne    804b38 <netif_set_ipaddr+0x41>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  804b60:	85 f6                	test   %esi,%esi
  804b62:	74 04                	je     804b68 <netif_set_ipaddr+0x71>
  804b64:	8b 06                	mov    (%esi),%eax
  804b66:	eb 05                	jmp    804b6d <netif_set_ipaddr+0x76>
  804b68:	b8 00 00 00 00       	mov    $0x0,%eax
  804b6d:	89 43 04             	mov    %eax,0x4(%ebx)
    netif->name[0], netif->name[1],
    ip4_addr1(&netif->ip_addr),
    ip4_addr2(&netif->ip_addr),
    ip4_addr3(&netif->ip_addr),
    ip4_addr4(&netif->ip_addr)));
}
  804b70:	83 c4 1c             	add    $0x1c,%esp
  804b73:	5b                   	pop    %ebx
  804b74:	5e                   	pop    %esi
  804b75:	5f                   	pop    %edi
  804b76:	5d                   	pop    %ebp
  804b77:	c3                   	ret    

00804b78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, struct ip_addr *ipaddr, struct ip_addr *netmask,
    struct ip_addr *gw)
{
  804b78:	55                   	push   %ebp
  804b79:	89 e5                	mov    %esp,%ebp
  804b7b:	57                   	push   %edi
  804b7c:	56                   	push   %esi
  804b7d:	53                   	push   %ebx
  804b7e:	83 ec 1c             	sub    $0x1c,%esp
  804b81:	8b 5d 08             	mov    0x8(%ebp),%ebx
  804b84:	8b 7d 10             	mov    0x10(%ebp),%edi
  804b87:	8b 75 14             	mov    0x14(%ebp),%esi
  netif_set_ipaddr(netif, ipaddr);
  804b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
  804b8d:	89 44 24 04          	mov    %eax,0x4(%esp)
  804b91:	89 1c 24             	mov    %ebx,(%esp)
  804b94:	e8 5e ff ff ff       	call   804af7 <netif_set_ipaddr>
void
netif_set_netmask(struct netif *netif, struct ip_addr *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  804b99:	85 ff                	test   %edi,%edi
  804b9b:	74 04                	je     804ba1 <netif_set_addr+0x29>
  804b9d:	8b 07                	mov    (%edi),%eax
  804b9f:	eb 05                	jmp    804ba6 <netif_set_addr+0x2e>
  804ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  804ba6:	89 43 08             	mov    %eax,0x8(%ebx)
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, struct ip_addr *gw)
{
  ip_addr_set(&(netif->gw), gw);
  804ba9:	85 f6                	test   %esi,%esi
  804bab:	74 04                	je     804bb1 <netif_set_addr+0x39>
  804bad:	8b 06                	mov    (%esi),%eax
  804baf:	eb 05                	jmp    804bb6 <netif_set_addr+0x3e>
  804bb1:	b8 00 00 00 00       	mov    $0x0,%eax
  804bb6:	89 43 0c             	mov    %eax,0xc(%ebx)
    struct ip_addr *gw)
{
  netif_set_ipaddr(netif, ipaddr);
  netif_set_netmask(netif, netmask);
  netif_set_gw(netif, gw);
}
  804bb9:	83 c4 1c             	add    $0x1c,%esp
  804bbc:	5b                   	pop    %ebx
  804bbd:	5e                   	pop    %esi
  804bbe:	5f                   	pop    %edi
  804bbf:	5d                   	pop    %ebp
  804bc0:	c3                   	ret    

00804bc1 <netif_add>:
netif_add(struct netif *netif, struct ip_addr *ipaddr, struct ip_addr *netmask,
  struct ip_addr *gw,
  void *state,
  err_t (* init)(struct netif *netif),
  err_t (* input)(struct pbuf *p, struct netif *netif))
{
  804bc1:	55                   	push   %ebp
  804bc2:	89 e5                	mov    %esp,%ebp
  804bc4:	53                   	push   %ebx
  804bc5:	83 ec 14             	sub    $0x14,%esp
  804bc8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  static u8_t netifnum = 0;

  /* reset new interface configuration state */
  netif->ip_addr.addr = 0;
  804bcb:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  netif->netmask.addr = 0;
  804bd2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  netif->gw.addr = 0;
  804bd9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  netif->flags = 0;
  804be0:	c6 43 2e 00          	movb   $0x0,0x2e(%ebx)
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
  804be4:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  804beb:	8b 45 18             	mov    0x18(%ebp),%eax
  804bee:	89 43 1c             	mov    %eax,0x1c(%ebx)
  netif->num = netifnum++;
  804bf1:	0f b6 05 18 54 b3 00 	movzbl 0xb35418,%eax
  804bf8:	8d 50 01             	lea    0x1(%eax),%edx
  804bfb:	88 15 18 54 b3 00    	mov    %dl,0xb35418
  804c01:	88 43 31             	mov    %al,0x31(%ebx)
  netif->input = input;
  804c04:	8b 45 20             	mov    0x20(%ebp),%eax
  804c07:	89 43 10             	mov    %eax,0x10(%ebx)
#endif /* LWIP_NETIF_HWADDRHINT*/
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
  804c0a:	8b 45 14             	mov    0x14(%ebp),%eax
  804c0d:	89 44 24 0c          	mov    %eax,0xc(%esp)
  804c11:	8b 45 10             	mov    0x10(%ebp),%eax
  804c14:	89 44 24 08          	mov    %eax,0x8(%esp)
  804c18:	8b 45 0c             	mov    0xc(%ebp),%eax
  804c1b:	89 44 24 04          	mov    %eax,0x4(%esp)
  804c1f:	89 1c 24             	mov    %ebx,(%esp)
  804c22:	e8 51 ff ff ff       	call   804b78 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  804c27:	89 1c 24             	mov    %ebx,(%esp)
  804c2a:	ff 55 1c             	call   *0x1c(%ebp)
  804c2d:	84 c0                	test   %al,%al
  804c2f:	75 11                	jne    804c42 <netif_add+0x81>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
  804c31:	a1 54 c2 b3 00       	mov    0xb3c254,%eax
  804c36:	89 03                	mov    %eax,(%ebx)
  netif_list = netif;
  804c38:	89 1d 54 c2 b3 00    	mov    %ebx,0xb3c254
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  804c3e:	89 d8                	mov    %ebx,%eax
  804c40:	eb 05                	jmp    804c47 <netif_add+0x86>

  netif_set_addr(netif, ipaddr, netmask, gw);

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
  804c42:	b8 00 00 00 00       	mov    $0x0,%eax
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
  804c47:	83 c4 14             	add    $0x14,%esp
  804c4a:	5b                   	pop    %ebx
  804c4b:	5d                   	pop    %ebp
  804c4c:	c3                   	ret    

00804c4d <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, struct ip_addr *gw)
{
  804c4d:	55                   	push   %ebp
  804c4e:	89 e5                	mov    %esp,%ebp
  804c50:	8b 45 0c             	mov    0xc(%ebp),%eax
  ip_addr_set(&(netif->gw), gw);
  804c53:	85 c0                	test   %eax,%eax
  804c55:	74 04                	je     804c5b <netif_set_gw+0xe>
  804c57:	8b 10                	mov    (%eax),%edx
  804c59:	eb 05                	jmp    804c60 <netif_set_gw+0x13>
  804c5b:	ba 00 00 00 00       	mov    $0x0,%edx
  804c60:	8b 45 08             	mov    0x8(%ebp),%eax
  804c63:	89 50 0c             	mov    %edx,0xc(%eax)
    netif->name[0], netif->name[1],
    ip4_addr1(&netif->gw),
    ip4_addr2(&netif->gw),
    ip4_addr3(&netif->gw),
    ip4_addr4(&netif->gw)));
}
  804c66:	5d                   	pop    %ebp
  804c67:	c3                   	ret    

00804c68 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, struct ip_addr *netmask)
{
  804c68:	55                   	push   %ebp
  804c69:	89 e5                	mov    %esp,%ebp
  804c6b:	8b 45 0c             	mov    0xc(%ebp),%eax
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  804c6e:	85 c0                	test   %eax,%eax
  804c70:	74 04                	je     804c76 <netif_set_netmask+0xe>
  804c72:	8b 10                	mov    (%eax),%edx
  804c74:	eb 05                	jmp    804c7b <netif_set_netmask+0x13>
  804c76:	ba 00 00 00 00       	mov    $0x0,%edx
  804c7b:	8b 45 08             	mov    0x8(%ebp),%eax
  804c7e:	89 50 08             	mov    %edx,0x8(%eax)
    netif->name[0], netif->name[1],
    ip4_addr1(&netif->netmask),
    ip4_addr2(&netif->netmask),
    ip4_addr3(&netif->netmask),
    ip4_addr4(&netif->netmask)));
}
  804c81:	5d                   	pop    %ebp
  804c82:	c3                   	ret    

00804c83 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  804c83:	55                   	push   %ebp
  804c84:	89 e5                	mov    %esp,%ebp
  else
  {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  804c86:	8b 45 08             	mov    0x8(%ebp),%eax
  804c89:	a3 58 c2 b3 00       	mov    %eax,0xb3c258
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  804c8e:	5d                   	pop    %ebp
  804c8f:	c3                   	ret    

00804c90 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  804c90:	55                   	push   %ebp
  804c91:	89 e5                	mov    %esp,%ebp
  804c93:	83 ec 18             	sub    $0x18,%esp
  804c96:	8b 55 08             	mov    0x8(%ebp),%edx
  if ( !(netif->flags & NETIF_FLAG_UP )) {
  804c99:	0f b6 42 2e          	movzbl 0x2e(%edx),%eax
  804c9d:	a8 01                	test   $0x1,%al
  804c9f:	75 23                	jne    804cc4 <netif_set_up+0x34>
    netif->flags |= NETIF_FLAG_UP;
  804ca1:	89 c1                	mov    %eax,%ecx
  804ca3:	83 c9 01             	or     $0x1,%ecx
  804ca6:	88 4a 2e             	mov    %cl,0x2e(%edx)
    /** For Ethernet network interfaces, we would like to send a
     *  "gratuitous ARP"; this is an ARP packet sent by a node in order
     *  to spontaneously cause other nodes to update an entry in their
     *  ARP cache. From RFC 3220 "IP Mobility Support for IPv4" section 4.6.
     */ 
    if (netif->flags & NETIF_FLAG_ETHARP) {
  804ca9:	a8 20                	test   $0x20,%al
  804cab:	74 17                	je     804cc4 <netif_set_up+0x34>
      etharp_query(netif, &(netif->ip_addr), NULL);
  804cad:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804cb4:	00 
  804cb5:	8d 42 04             	lea    0x4(%edx),%eax
  804cb8:	89 44 24 04          	mov    %eax,0x4(%esp)
  804cbc:	89 14 24             	mov    %edx,(%esp)
  804cbf:	e8 20 54 00 00       	call   80a0e4 <etharp_query>
    }
#endif /* LWIP_ARP */
    
  }
}
  804cc4:	c9                   	leave  
  804cc5:	c3                   	ret    

00804cc6 <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  804cc6:	55                   	push   %ebp
  804cc7:	89 e5                	mov    %esp,%ebp
  804cc9:	8b 45 08             	mov    0x8(%ebp),%eax
  if ( netif->flags & NETIF_FLAG_UP )
  804ccc:	0f b6 50 2e          	movzbl 0x2e(%eax),%edx
  804cd0:	f6 c2 01             	test   $0x1,%dl
  804cd3:	74 06                	je     804cdb <netif_set_down+0x15>
    {
      netif->flags &= ~NETIF_FLAG_UP;
  804cd5:	83 e2 fe             	and    $0xfffffffe,%edx
  804cd8:	88 50 2e             	mov    %dl,0x2e(%eax)
#endif
      
      NETIF_LINK_CALLBACK(netif);
      NETIF_STATUS_CALLBACK(netif);
    }
}
  804cdb:	5d                   	pop    %ebp
  804cdc:	c3                   	ret    

00804cdd <netif_is_up>:

/**
 * Ask if an interface is up
 */ 
u8_t netif_is_up(struct netif *netif)
{
  804cdd:	55                   	push   %ebp
  804cde:	89 e5                	mov    %esp,%ebp
  return (netif->flags & NETIF_FLAG_UP)?1:0;
  804ce0:	8b 45 08             	mov    0x8(%ebp),%eax
  804ce3:	0f b6 40 2e          	movzbl 0x2e(%eax),%eax
  804ce7:	83 e0 01             	and    $0x1,%eax
}
  804cea:	5d                   	pop    %ebp
  804ceb:	c3                   	ret    
  804cec:	66 90                	xchg   %ax,%ax
  804cee:	66 90                	xchg   %ax,%ax

00804cf0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  804cf0:	55                   	push   %ebp
  804cf1:	89 e5                	mov    %esp,%ebp
  804cf3:	56                   	push   %esi
  804cf4:	53                   	push   %ebx
  804cf5:	83 ec 10             	sub    $0x10,%esp
  804cf8:	8b 55 08             	mov    0x8(%ebp),%edx
  804cfb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  804cfe:	85 d2                	test   %edx,%edx
  804d00:	75 1c                	jne    804d1e <pbuf_header+0x2e>
  804d02:	c7 44 24 08 64 29 81 	movl   $0x812964,0x8(%esp)
  804d09:	00 
  804d0a:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
  804d11:	00 
  804d12:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804d19:	e8 70 a3 00 00       	call   80f08e <_panic>
  if ((header_size_increment == 0) || (p == NULL))
  804d1e:	66 85 c9             	test   %cx,%cx
  804d21:	0f 84 a1 00 00 00    	je     804dc8 <pbuf_header+0xd8>
  if (header_size_increment < 0){
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = header_size_increment;
  804d27:	89 cb                	mov    %ecx,%ebx

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL))
    return 0;
 
  if (header_size_increment < 0){
  804d29:	66 85 c9             	test   %cx,%cx
  804d2c:	79 24                	jns    804d52 <pbuf_header+0x62>
    increment_magnitude = -header_size_increment;
  804d2e:	f7 db                	neg    %ebx
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  804d30:	66 3b 5a 0a          	cmp    0xa(%edx),%bx
  804d34:	76 1c                	jbe    804d52 <pbuf_header+0x62>
  804d36:	c7 44 24 08 b5 28 81 	movl   $0x8128b5,0x8(%esp)
  804d3d:	00 
  804d3e:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
  804d45:	00 
  804d46:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804d4d:	e8 3c a3 00 00       	call   80f08e <_panic>
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  804d52:	0f b6 42 0c          	movzbl 0xc(%edx),%eax
  /* remember current payload pointer */
  payload = p->payload;
  804d56:	8b 72 04             	mov    0x4(%edx),%esi

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  804d59:	66 83 f8 03          	cmp    $0x3,%ax
  804d5d:	74 05                	je     804d64 <pbuf_header+0x74>
  804d5f:	66 85 c0             	test   %ax,%ax
  804d62:	75 13                	jne    804d77 <pbuf_header+0x87>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  804d64:	0f bf c1             	movswl %cx,%eax
  804d67:	29 c6                	sub    %eax,%esi
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  804d69:	8d 5a 10             	lea    0x10(%edx),%ebx
        (void *)p->payload,
        (void *)(p + 1)));\
      /* restore old payload pointer */
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
  804d6c:	b8 01 00 00 00       	mov    $0x1,%eax
  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  804d71:	39 de                	cmp    %ebx,%esi
  804d73:	73 41                	jae    804db6 <pbuf_header+0xc6>
  804d75:	eb 56                	jmp    804dcd <pbuf_header+0xdd>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  804d77:	83 e8 01             	sub    $0x1,%eax
  804d7a:	66 83 f8 01          	cmp    $0x1,%ax
  804d7e:	77 1a                	ja     804d9a <pbuf_header+0xaa>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
  804d80:	b8 01 00 00 00       	mov    $0x1,%eax
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  804d85:	66 85 c9             	test   %cx,%cx
  804d88:	79 43                	jns    804dcd <pbuf_header+0xdd>
  804d8a:	66 3b 5a 0a          	cmp    0xa(%edx),%bx
  804d8e:	77 3d                	ja     804dcd <pbuf_header+0xdd>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  804d90:	0f bf c1             	movswl %cx,%eax
  804d93:	29 c6                	sub    %eax,%esi
  804d95:	89 72 04             	mov    %esi,0x4(%edx)
  804d98:	eb 1f                	jmp    804db9 <pbuf_header+0xc9>
      return 1;
    }
  }
  else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  804d9a:	c7 44 24 08 d3 28 81 	movl   $0x8128d3,0x8(%esp)
  804da1:	00 
  804da2:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
  804da9:	00 
  804daa:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804db1:	e8 d8 a2 00 00       	call   80f08e <_panic>
  payload = p->payload;

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  804db6:	89 72 04             	mov    %esi,0x4(%edx)
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  804db9:	66 01 4a 0a          	add    %cx,0xa(%edx)
  p->tot_len += header_size_increment;
  804dbd:	66 01 4a 08          	add    %cx,0x8(%edx)

  LWIP_DEBUGF(PBUF_DEBUG, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  804dc1:	b8 00 00 00 00       	mov    $0x0,%eax
  804dc6:	eb 05                	jmp    804dcd <pbuf_header+0xdd>
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL))
    return 0;
  804dc8:	b8 00 00 00 00       	mov    $0x0,%eax

  LWIP_DEBUGF(PBUF_DEBUG, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
  804dcd:	83 c4 10             	add    $0x10,%esp
  804dd0:	5b                   	pop    %ebx
  804dd1:	5e                   	pop    %esi
  804dd2:	5d                   	pop    %ebp
  804dd3:	c3                   	ret    

00804dd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  804dd4:	55                   	push   %ebp
  804dd5:	89 e5                	mov    %esp,%ebp
  804dd7:	56                   	push   %esi
  804dd8:	53                   	push   %ebx
  804dd9:	83 ec 10             	sub    $0x10,%esp
  804ddc:	8b 55 08             	mov    0x8(%ebp),%edx
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  804ddf:	85 d2                	test   %edx,%edx
  804de1:	75 1c                	jne    804dff <pbuf_free+0x2b>
    LWIP_ASSERT("p != NULL", p != NULL);
  804de3:	c7 44 24 08 64 29 81 	movl   $0x812964,0x8(%esp)
  804dea:	00 
  804deb:	c7 44 24 04 d0 01 00 	movl   $0x1d0,0x4(%esp)
  804df2:	00 
  804df3:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804dfa:	e8 8f a2 00 00       	call   80f08e <_panic>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  804dff:	80 7a 0c 03          	cmpb   $0x3,0xc(%edx)
  804e03:	0f 86 99 00 00 00    	jbe    804ea2 <pbuf_free+0xce>
  804e09:	c7 44 24 08 e1 28 81 	movl   $0x8128e1,0x8(%esp)
  804e10:	00 
  804e11:	c7 44 24 04 db 01 00 	movl   $0x1db,0x4(%esp)
  804e18:	00 
  804e19:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804e20:	e8 69 a2 00 00       	call   80f08e <_panic>
      } else {
        mem_free(p);
      }
      count++;
      /* proceed to next pbuf */
      p = q;
  804e25:	89 f2                	mov    %esi,%edx
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  804e27:	0f b7 4a 0e          	movzwl 0xe(%edx),%ecx
  804e2b:	66 85 c9             	test   %cx,%cx
  804e2e:	75 1c                	jne    804e4c <pbuf_free+0x78>
  804e30:	c7 44 24 08 f6 28 81 	movl   $0x8128f6,0x8(%esp)
  804e37:	00 
  804e38:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
  804e3f:	00 
  804e40:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804e47:	e8 42 a2 00 00       	call   80f08e <_panic>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  804e4c:	83 e9 01             	sub    $0x1,%ecx
  804e4f:	66 89 4a 0e          	mov    %cx,0xe(%edx)
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  804e53:	66 85 c9             	test   %cx,%cx
  804e56:	75 54                	jne    804eac <pbuf_free+0xd8>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  804e58:	8b 32                	mov    (%edx),%esi
      LWIP_DEBUGF( PBUF_DEBUG | 2, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  804e5a:	0f b6 42 0c          	movzbl 0xc(%edx),%eax
      /* is this a pbuf from the pool? */
      if (type == PBUF_POOL) {
  804e5e:	66 83 f8 03          	cmp    $0x3,%ax
  804e62:	75 12                	jne    804e76 <pbuf_free+0xa2>
        memp_free(MEMP_PBUF_POOL, p);
  804e64:	89 54 24 04          	mov    %edx,0x4(%esp)
  804e68:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  804e6f:	e8 ae fb ff ff       	call   804a22 <memp_free>
  804e74:	eb 23                	jmp    804e99 <pbuf_free+0xc5>
      /* is this a ROM or RAM referencing pbuf? */
      } else if (type == PBUF_ROM || type == PBUF_REF) {
  804e76:	83 e8 01             	sub    $0x1,%eax
  804e79:	66 83 f8 01          	cmp    $0x1,%ax
  804e7d:	77 12                	ja     804e91 <pbuf_free+0xbd>
        memp_free(MEMP_PBUF, p);
  804e7f:	89 54 24 04          	mov    %edx,0x4(%esp)
  804e83:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  804e8a:	e8 93 fb ff ff       	call   804a22 <memp_free>
  804e8f:	eb 08                	jmp    804e99 <pbuf_free+0xc5>
      /* type == PBUF_RAM */
      } else {
        mem_free(p);
  804e91:	89 14 24             	mov    %edx,(%esp)
  804e94:	e8 2c f6 ff ff       	call   8044c5 <mem_free>
      }
      count++;
  804e99:	83 c3 01             	add    $0x1,%ebx
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  804e9c:	85 f6                	test   %esi,%esi
  804e9e:	75 85                	jne    804e25 <pbuf_free+0x51>
  804ea0:	eb 0a                	jmp    804eac <pbuf_free+0xd8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  804ea2:	bb 00 00 00 00       	mov    $0x0,%ebx
  804ea7:	e9 7b ff ff ff       	jmp    804e27 <pbuf_free+0x53>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  804eac:	89 d8                	mov    %ebx,%eax
  804eae:	83 c4 10             	add    $0x10,%esp
  804eb1:	5b                   	pop    %ebx
  804eb2:	5e                   	pop    %esi
  804eb3:	5d                   	pop    %ebp
  804eb4:	c3                   	ret    

00804eb5 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  804eb5:	55                   	push   %ebp
  804eb6:	89 e5                	mov    %esp,%ebp
  804eb8:	57                   	push   %edi
  804eb9:	56                   	push   %esi
  804eba:	53                   	push   %ebx
  804ebb:	83 ec 1c             	sub    $0x1c,%esp
  804ebe:	8b 45 08             	mov    0x8(%ebp),%eax
  804ec1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
  switch (layer) {
  804ec4:	83 f8 01             	cmp    $0x1,%eax
  804ec7:	74 11                	je     804eda <pbuf_alloc+0x25>
  804ec9:	83 f8 01             	cmp    $0x1,%eax
  804ecc:	72 14                	jb     804ee2 <pbuf_alloc+0x2d>
  804ece:	83 f8 02             	cmp    $0x2,%eax
  804ed1:	74 19                	je     804eec <pbuf_alloc+0x37>
  804ed3:	83 f8 03             	cmp    $0x3,%eax
  804ed6:	74 3a                	je     804f12 <pbuf_alloc+0x5d>
  804ed8:	eb 1c                	jmp    804ef6 <pbuf_alloc+0x41>
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
  804eda:	bf 00 00 00 00       	mov    $0x0,%edi
  804edf:	90                   	nop
  804ee0:	eb 05                	jmp    804ee7 <pbuf_alloc+0x32>
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset += PBUF_TRANSPORT_HLEN;
  804ee2:	bf 14 00 00 00       	mov    $0x14,%edi
    /* FALLTHROUGH */
  case PBUF_IP:
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
  804ee7:	83 c7 14             	add    $0x14,%edi
  804eea:	eb 05                	jmp    804ef1 <pbuf_alloc+0x3c>
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
  804eec:	bf 00 00 00 00       	mov    $0x0,%edi
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
    /* FALLTHROUGH */
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
  804ef1:	83 c7 0e             	add    $0xe,%edi
    break;
  804ef4:	eb 21                	jmp    804f17 <pbuf_alloc+0x62>
  case PBUF_RAW:
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  804ef6:	c7 44 24 08 0c 29 81 	movl   $0x81290c,0x8(%esp)
  804efd:	00 
  804efe:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
  804f05:	00 
  804f06:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804f0d:	e8 7c a1 00 00       	call   80f08e <_panic>
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
  804f12:	bf 00 00 00 00       	mov    $0x0,%edi
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
  804f17:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
  804f1b:	77 0f                	ja     804f2c <pbuf_alloc+0x77>
  804f1d:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
  804f21:	0f 82 6a 01 00 00    	jb     805091 <pbuf_alloc+0x1dc>
  804f27:	e9 a5 01 00 00       	jmp    8050d1 <pbuf_alloc+0x21c>
  804f2c:	83 7d 10 03          	cmpl   $0x3,0x10(%ebp)
  804f30:	0f 85 cb 01 00 00    	jne    805101 <pbuf_alloc+0x24c>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
      p = memp_malloc(MEMP_PBUF_POOL);
  804f36:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  804f3d:	e8 80 fa ff ff       	call   8049c2 <memp_malloc>
  804f42:	89 c6                	mov    %eax,%esi
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  804f44:	85 c0                	test   %eax,%eax
  804f46:	0f 84 df 01 00 00    	je     80512b <pbuf_alloc+0x276>
      return NULL;
    }
    p->type = type;
  804f4c:	c6 40 0c 03          	movb   $0x3,0xc(%eax)
    p->next = NULL;
  804f50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  804f56:	0f b7 ff             	movzwl %di,%edi
  804f59:	8d 54 38 13          	lea    0x13(%eax,%edi,1),%edx
  804f5d:	83 e2 fc             	and    $0xfffffffc,%edx
  804f60:	89 50 04             	mov    %edx,0x4(%eax)
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  804f63:	66 89 58 08          	mov    %bx,0x8(%eax)
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  804f67:	0f b7 db             	movzwl %bx,%ebx
  804f6a:	83 c7 03             	add    $0x3,%edi
  804f6d:	83 e7 fc             	and    $0xfffffffc,%edi
  804f70:	b8 d0 07 00 00       	mov    $0x7d0,%eax
  804f75:	29 f8                	sub    %edi,%eax
  804f77:	39 d8                	cmp    %ebx,%eax
  804f79:	0f 4f c3             	cmovg  %ebx,%eax
  804f7c:	66 89 46 0a          	mov    %ax,0xa(%esi)
  804f80:	0f b7 c0             	movzwl %ax,%eax
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  804f83:	8d be e0 07 00 00    	lea    0x7e0(%esi),%edi
  804f89:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  804f8c:	01 c2                	add    %eax,%edx
  804f8e:	39 d7                	cmp    %edx,%edi
  804f90:	73 1c                	jae    804fae <pbuf_alloc+0xf9>
  804f92:	c7 44 24 08 24 2a 81 	movl   $0x812a24,0x8(%esp)
  804f99:	00 
  804f9a:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
  804fa1:	00 
  804fa2:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  804fa9:	e8 e0 a0 00 00       	call   80f08e <_panic>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  804fae:	66 c7 46 0e 01 00    	movw   $0x1,0xe(%esi)
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
  804fb4:	29 c3                	sub    %eax,%ebx
    p->ref = 1;

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  804fb6:	89 f7                	mov    %esi,%edi
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  804fb8:	e9 c7 00 00 00       	jmp    805084 <pbuf_alloc+0x1cf>
      q = memp_malloc(MEMP_PBUF_POOL);
  804fbd:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  804fc4:	e8 f9 f9 ff ff       	call   8049c2 <memp_malloc>
      if (q == NULL) {
  804fc9:	85 c0                	test   %eax,%eax
  804fcb:	75 12                	jne    804fdf <pbuf_alloc+0x12a>
        /* free chain so far allocated */
        pbuf_free(p);
  804fcd:	89 34 24             	mov    %esi,(%esp)
  804fd0:	e8 ff fd ff ff       	call   804dd4 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
  804fd5:	b8 00 00 00 00       	mov    $0x0,%eax
  804fda:	e9 5f 01 00 00       	jmp    80513e <pbuf_alloc+0x289>
      }
      q->type = type;
  804fdf:	c6 40 0c 03          	movb   $0x3,0xc(%eax)
      q->flags = 0;
  804fe3:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
      q->next = NULL;
  804fe7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      /* make previous pbuf point to this pbuf */
      r->next = q;
  804fed:	89 07                	mov    %eax,(%edi)
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  804fef:	81 fb fe ff 00 00    	cmp    $0xfffe,%ebx
  804ff5:	7e 1c                	jle    805013 <pbuf_alloc+0x15e>
  804ff7:	c7 44 24 08 27 29 81 	movl   $0x812927,0x8(%esp)
  804ffe:	00 
  804fff:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
  805006:	00 
  805007:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  80500e:	e8 7b a0 00 00       	call   80f08e <_panic>
      q->tot_len = (u16_t)rem_len;
  805013:	66 89 58 08          	mov    %bx,0x8(%eax)
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  805017:	66 81 fb cf 07       	cmp    $0x7cf,%bx
  80501c:	b9 d0 07 00 00       	mov    $0x7d0,%ecx
  805021:	0f 46 cb             	cmovbe %ebx,%ecx
  805024:	66 89 48 0a          	mov    %cx,0xa(%eax)
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  805028:	8d 50 10             	lea    0x10(%eax),%edx
  80502b:	89 50 04             	mov    %edx,0x4(%eax)
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  80502e:	f6 c2 03             	test   $0x3,%dl
  805031:	74 1c                	je     80504f <pbuf_alloc+0x19a>
  805033:	c7 44 24 08 58 2a 81 	movl   $0x812a58,0x8(%esp)
  80503a:	00 
  80503b:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
  805042:	00 
  805043:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  80504a:	e8 3f a0 00 00       	call   80f08e <_panic>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  80504f:	0f b7 56 0a          	movzwl 0xa(%esi),%edx
  805053:	03 56 04             	add    0x4(%esi),%edx
  805056:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
  805059:	73 1c                	jae    805077 <pbuf_alloc+0x1c2>
  80505b:	c7 44 24 08 24 2a 81 	movl   $0x812a24,0x8(%esp)
  805062:	00 
  805063:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
  80506a:	00 
  80506b:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  805072:	e8 17 a0 00 00       	call   80f08e <_panic>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  805077:	66 c7 40 0e 01 00    	movw   $0x1,0xe(%eax)
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  80507d:	0f b7 c9             	movzwl %cx,%ecx
  805080:	29 cb                	sub    %ecx,%ebx
      /* remember this pbuf for linkage in next iteration */
      r = q;
  805082:	89 c7                	mov    %eax,%edi
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  805084:	85 db                	test   %ebx,%ebx
  805086:	0f 8f 31 ff ff ff    	jg     804fbd <pbuf_alloc+0x108>
  80508c:	e9 8c 00 00 00       	jmp    80511d <pbuf_alloc+0x268>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  805091:	0f b7 ff             	movzwl %di,%edi
  805094:	8d 57 13             	lea    0x13(%edi),%edx
  805097:	83 e2 fc             	and    $0xfffffffc,%edx
  80509a:	0f b7 c3             	movzwl %bx,%eax
  80509d:	83 c0 03             	add    $0x3,%eax
  8050a0:	83 e0 fc             	and    $0xfffffffc,%eax
  8050a3:	01 d0                	add    %edx,%eax
  8050a5:	89 04 24             	mov    %eax,(%esp)
  8050a8:	e8 f2 f6 ff ff       	call   80479f <mem_malloc>
  8050ad:	89 c6                	mov    %eax,%esi
    if (p == NULL) {
  8050af:	85 c0                	test   %eax,%eax
  8050b1:	74 7f                	je     805132 <pbuf_alloc+0x27d>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  8050b3:	8d 44 38 13          	lea    0x13(%eax,%edi,1),%eax
  8050b7:	83 e0 fc             	and    $0xfffffffc,%eax
  8050ba:	89 46 04             	mov    %eax,0x4(%esi)
    p->len = p->tot_len = length;
  8050bd:	66 89 5e 08          	mov    %bx,0x8(%esi)
  8050c1:	66 89 5e 0a          	mov    %bx,0xa(%esi)
    p->next = NULL;
  8050c5:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
    p->type = type;
  8050cb:	c6 46 0c 00          	movb   $0x0,0xc(%esi)
  8050cf:	eb 4c                	jmp    80511d <pbuf_alloc+0x268>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = memp_malloc(MEMP_PBUF);
  8050d1:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  8050d8:	e8 e5 f8 ff ff       	call   8049c2 <memp_malloc>
  8050dd:	89 c6                	mov    %eax,%esi
    if (p == NULL) {
  8050df:	85 c0                	test   %eax,%eax
  8050e1:	74 56                	je     805139 <pbuf_alloc+0x284>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 2, ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  8050e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    p->len = p->tot_len = length;
  8050ea:	66 89 58 08          	mov    %bx,0x8(%eax)
  8050ee:	66 89 58 0a          	mov    %bx,0xa(%eax)
    p->next = NULL;
  8050f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    p->type = type;
  8050f8:	0f b6 45 10          	movzbl 0x10(%ebp),%eax
  8050fc:	88 46 0c             	mov    %al,0xc(%esi)
    break;
  8050ff:	eb 1c                	jmp    80511d <pbuf_alloc+0x268>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  805101:	c7 44 24 08 3b 29 81 	movl   $0x81293b,0x8(%esp)
  805108:	00 
  805109:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
  805110:	00 
  805111:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  805118:	e8 71 9f 00 00       	call   80f08e <_panic>
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
  80511d:	66 c7 46 0e 01 00    	movw   $0x1,0xe(%esi)
  /* set flags */
  p->flags = 0;
  805123:	c6 46 0d 00          	movb   $0x0,0xd(%esi)
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  805127:	89 f0                	mov    %esi,%eax
  805129:	eb 13                	jmp    80513e <pbuf_alloc+0x289>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
      p = memp_malloc(MEMP_PBUF_POOL);
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
      return NULL;
  80512b:	b8 00 00 00 00       	mov    $0x0,%eax
  805130:	eb 0c                	jmp    80513e <pbuf_alloc+0x289>
    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    if (p == NULL) {
      return NULL;
  805132:	b8 00 00 00 00       	mov    $0x0,%eax
  805137:	eb 05                	jmp    80513e <pbuf_alloc+0x289>
    /* only allocate memory for the pbuf structure */
    p = memp_malloc(MEMP_PBUF);
    if (p == NULL) {
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 2, ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  805139:	b8 00 00 00 00       	mov    $0x0,%eax
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
  80513e:	83 c4 1c             	add    $0x1c,%esp
  805141:	5b                   	pop    %ebx
  805142:	5e                   	pop    %esi
  805143:	5f                   	pop    %edi
  805144:	5d                   	pop    %ebp
  805145:	c3                   	ret    

00805146 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  805146:	55                   	push   %ebp
  805147:	89 e5                	mov    %esp,%ebp
  805149:	56                   	push   %esi
  80514a:	53                   	push   %ebx
  80514b:	83 ec 10             	sub    $0x10,%esp
  80514e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  805151:	8b 55 0c             	mov    0xc(%ebp),%edx
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  805154:	85 db                	test   %ebx,%ebx
  805156:	75 1c                	jne    805174 <pbuf_realloc+0x2e>
  805158:	c7 44 24 08 56 29 81 	movl   $0x812956,0x8(%esp)
  80515f:	00 
  805160:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
  805167:	00 
  805168:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  80516f:	e8 1a 9f 00 00       	call   80f08e <_panic>
  805174:	89 d6                	mov    %edx,%esi
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  805176:	80 7b 0c 03          	cmpb   $0x3,0xc(%ebx)
  80517a:	76 1c                	jbe    805198 <pbuf_realloc+0x52>
  80517c:	c7 44 24 08 6e 29 81 	movl   $0x81296e,0x8(%esp)
  805183:	00 
  805184:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
  80518b:	00 
  80518c:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  805193:	e8 f6 9e 00 00       	call   80f08e <_panic>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  805198:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80519c:	66 39 d0             	cmp    %dx,%ax
  80519f:	0f 86 be 00 00 00    	jbe    805263 <pbuf_realloc+0x11d>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  8051a5:	0f b7 d2             	movzwl %dx,%edx
  8051a8:	0f b7 c0             	movzwl %ax,%eax
  8051ab:	29 c2                	sub    %eax,%edx

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  8051ad:	eb 4c                	jmp    8051fb <pbuf_realloc+0xb5>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  8051af:	29 c6                	sub    %eax,%esi
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  8051b1:	81 fa fe ff 00 00    	cmp    $0xfffe,%edx
  8051b7:	7e 1c                	jle    8051d5 <pbuf_realloc+0x8f>
  8051b9:	c7 44 24 08 89 29 81 	movl   $0x812989,0x8(%esp)
  8051c0:	00 
  8051c1:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
  8051c8:	00 
  8051c9:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8051d0:	e8 b9 9e 00 00       	call   80f08e <_panic>
    q->tot_len += (u16_t)grow;
  8051d5:	66 01 53 08          	add    %dx,0x8(%ebx)
    /* proceed to next pbuf in chain */
    q = q->next;
  8051d9:	8b 1b                	mov    (%ebx),%ebx
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  8051db:	85 db                	test   %ebx,%ebx
  8051dd:	75 1c                	jne    8051fb <pbuf_realloc+0xb5>
  8051df:	c7 44 24 08 9a 29 81 	movl   $0x81299a,0x8(%esp)
  8051e6:	00 
  8051e7:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
  8051ee:	00 
  8051ef:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8051f6:	e8 93 9e 00 00       	call   80f08e <_panic>

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  8051fb:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  8051ff:	66 39 c6             	cmp    %ax,%si
  805202:	77 ab                	ja     8051af <pbuf_realloc+0x69>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  805204:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
  805208:	75 3d                	jne    805247 <pbuf_realloc+0x101>
  80520a:	66 39 c6             	cmp    %ax,%si
  80520d:	74 38                	je     805247 <pbuf_realloc+0x101>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = mem_realloc(q, (u8_t *)q->payload - (u8_t *)q + rem_len);
  80520f:	8b 4b 04             	mov    0x4(%ebx),%ecx
  805212:	29 d9                	sub    %ebx,%ecx
  805214:	0f b7 c6             	movzwl %si,%eax
  805217:	01 c8                	add    %ecx,%eax
  805219:	89 44 24 04          	mov    %eax,0x4(%esp)
  80521d:	89 1c 24             	mov    %ebx,(%esp)
  805220:	e8 29 f4 ff ff       	call   80464e <mem_realloc>
  805225:	89 c3                	mov    %eax,%ebx
    LWIP_ASSERT("mem_realloc give q == NULL", q != NULL);
  805227:	85 c0                	test   %eax,%eax
  805229:	75 1c                	jne    805247 <pbuf_realloc+0x101>
  80522b:	c7 44 24 08 b2 29 81 	movl   $0x8129b2,0x8(%esp)
  805232:	00 
  805233:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
  80523a:	00 
  80523b:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  805242:	e8 47 9e 00 00       	call   80f08e <_panic>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  805247:	66 89 73 0a          	mov    %si,0xa(%ebx)
  q->tot_len = q->len;
  80524b:	66 89 73 08          	mov    %si,0x8(%ebx)

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  80524f:	8b 03                	mov    (%ebx),%eax
  805251:	85 c0                	test   %eax,%eax
  805253:	74 08                	je     80525d <pbuf_realloc+0x117>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  805255:	89 04 24             	mov    %eax,(%esp)
  805258:	e8 77 fb ff ff       	call   804dd4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  80525d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)

}
  805263:	83 c4 10             	add    $0x10,%esp
  805266:	5b                   	pop    %ebx
  805267:	5e                   	pop    %esi
  805268:	5d                   	pop    %ebp
  805269:	c3                   	ret    

0080526a <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
  80526a:	55                   	push   %ebp
  80526b:	89 e5                	mov    %esp,%ebp
  80526d:	8b 55 08             	mov    0x8(%ebp),%edx
  u8_t len;

  len = 0;
  805270:	b8 00 00 00 00       	mov    $0x0,%eax
  while (p != NULL) {
  805275:	eb 05                	jmp    80527c <pbuf_clen+0x12>
    ++len;
  805277:	83 c0 01             	add    $0x1,%eax
    p = p->next;
  80527a:	8b 12                	mov    (%edx),%edx
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  80527c:	85 d2                	test   %edx,%edx
  80527e:	75 f7                	jne    805277 <pbuf_clen+0xd>
    ++len;
    p = p->next;
  }
  return len;
}
  805280:	5d                   	pop    %ebp
  805281:	c3                   	ret    

00805282 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  805282:	55                   	push   %ebp
  805283:	89 e5                	mov    %esp,%ebp
  805285:	8b 45 08             	mov    0x8(%ebp),%eax
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  805288:	85 c0                	test   %eax,%eax
  80528a:	74 05                	je     805291 <pbuf_ref+0xf>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  80528c:	66 83 40 0e 01       	addw   $0x1,0xe(%eax)
    SYS_ARCH_UNPROTECT(old_level);
  }
}
  805291:	5d                   	pop    %ebp
  805292:	c3                   	ret    

00805293 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  805293:	55                   	push   %ebp
  805294:	89 e5                	mov    %esp,%ebp
  805296:	53                   	push   %ebx
  805297:	83 ec 14             	sub    $0x14,%esp
  80529a:	8b 45 08             	mov    0x8(%ebp),%eax
  80529d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  8052a0:	85 c0                	test   %eax,%eax
  8052a2:	74 04                	je     8052a8 <pbuf_cat+0x15>
  8052a4:	85 db                	test   %ebx,%ebx
  8052a6:	75 26                	jne    8052ce <pbuf_cat+0x3b>
  8052a8:	c7 44 24 08 88 2a 81 	movl   $0x812a88,0x8(%esp)
  8052af:	00 
  8052b0:	c7 44 24 04 42 02 00 	movl   $0x242,0x4(%esp)
  8052b7:	00 
  8052b8:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8052bf:	e8 ca 9d 00 00       	call   80f08e <_panic>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  8052c4:	0f b7 4b 08          	movzwl 0x8(%ebx),%ecx
  8052c8:	66 01 48 08          	add    %cx,0x8(%eax)

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  8052cc:	89 d0                	mov    %edx,%eax
  8052ce:	8b 10                	mov    (%eax),%edx
  8052d0:	85 d2                	test   %edx,%edx
  8052d2:	75 f0                	jne    8052c4 <pbuf_cat+0x31>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  8052d4:	0f b7 50 08          	movzwl 0x8(%eax),%edx
  8052d8:	66 3b 50 0a          	cmp    0xa(%eax),%dx
  8052dc:	74 1c                	je     8052fa <pbuf_cat+0x67>
  8052de:	c7 44 24 08 c0 2a 81 	movl   $0x812ac0,0x8(%esp)
  8052e5:	00 
  8052e6:	c7 44 24 04 4a 02 00 	movl   $0x24a,0x4(%esp)
  8052ed:	00 
  8052ee:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8052f5:	e8 94 9d 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  8052fa:	66 03 53 08          	add    0x8(%ebx),%dx
  8052fe:	66 89 50 08          	mov    %dx,0x8(%eax)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  805302:	89 18                	mov    %ebx,(%eax)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  805304:	83 c4 14             	add    $0x14,%esp
  805307:	5b                   	pop    %ebx
  805308:	5d                   	pop    %ebp
  805309:	c3                   	ret    

0080530a <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  80530a:	55                   	push   %ebp
  80530b:	89 e5                	mov    %esp,%ebp
  80530d:	53                   	push   %ebx
  80530e:	83 ec 14             	sub    $0x14,%esp
  805311:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  pbuf_cat(h, t);
  805314:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  805318:	8b 45 08             	mov    0x8(%ebp),%eax
  80531b:	89 04 24             	mov    %eax,(%esp)
  80531e:	e8 70 ff ff ff       	call   805293 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  805323:	89 1c 24             	mov    %ebx,(%esp)
  805326:	e8 57 ff ff ff       	call   805282 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_FRESH | 2, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  80532b:	83 c4 14             	add    $0x14,%esp
  80532e:	5b                   	pop    %ebx
  80532f:	5d                   	pop    %ebp
  805330:	c3                   	ret    

00805331 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  805331:	55                   	push   %ebp
  805332:	89 e5                	mov    %esp,%ebp
  805334:	57                   	push   %edi
  805335:	56                   	push   %esi
  805336:	53                   	push   %ebx
  805337:	83 ec 1c             	sub    $0x1c,%esp
  80533a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct pbuf *q;
  u8_t tail_gone = 1;
  /* tail */
  q = p->next;
  80533d:	8b 33                	mov    (%ebx),%esi
  /* pbuf has successor in chain? */
  if (q != NULL) {
  80533f:	85 f6                	test   %esi,%esi
  805341:	0f 84 86 00 00 00    	je     8053cd <pbuf_dechain+0x9c>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  805347:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
  80534b:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80534f:	0f b7 4e 08          	movzwl 0x8(%esi),%ecx
  805353:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  805356:	0f b7 fa             	movzwl %dx,%edi
  805359:	0f b7 c8             	movzwl %ax,%ecx
  80535c:	29 cf                	sub    %ecx,%edi
  80535e:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
  805361:	74 1c                	je     80537f <pbuf_dechain+0x4e>
  805363:	c7 44 24 08 f0 2a 81 	movl   $0x812af0,0x8(%esp)
  80536a:	00 
  80536b:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
  805372:	00 
  805373:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  80537a:	e8 0f 9d 00 00       	call   80f08e <_panic>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  80537f:	29 c2                	sub    %eax,%edx
  805381:	66 89 56 08          	mov    %dx,0x8(%esi)
    /* decouple pbuf from remainder */
    p->next = NULL;
  805385:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  80538b:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80538f:	66 89 43 08          	mov    %ax,0x8(%ebx)
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_STATE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  805393:	89 34 24             	mov    %esi,(%esp)
  805396:	e8 39 fa ff ff       	call   804dd4 <pbuf_free>
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  80539b:	0f b7 4b 0a          	movzwl 0xa(%ebx),%ecx
  80539f:	66 39 4b 08          	cmp    %cx,0x8(%ebx)
  8053a3:	74 1c                	je     8053c1 <pbuf_dechain+0x90>
  8053a5:	c7 44 24 08 cd 29 81 	movl   $0x8129cd,0x8(%esp)
  8053ac:	00 
  8053ad:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
  8053b4:	00 
  8053b5:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8053bc:	e8 cd 9c 00 00       	call   80f08e <_panic>
  return ((tail_gone > 0) ? NULL : q);
  8053c1:	84 c0                	test   %al,%al
  8053c3:	b8 00 00 00 00       	mov    $0x0,%eax
  8053c8:	0f 44 c6             	cmove  %esi,%eax
  8053cb:	eb 0f                	jmp    8053dc <pbuf_dechain+0xab>
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  8053cd:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  8053d1:	66 39 43 08          	cmp    %ax,0x8(%ebx)
  8053d5:	75 ce                	jne    8053a5 <pbuf_dechain+0x74>
  return ((tail_gone > 0) ? NULL : q);
  8053d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8053dc:	83 c4 1c             	add    $0x1c,%esp
  8053df:	5b                   	pop    %ebx
  8053e0:	5e                   	pop    %esi
  8053e1:	5f                   	pop    %edi
  8053e2:	5d                   	pop    %ebp
  8053e3:	c3                   	ret    

008053e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  8053e4:	55                   	push   %ebp
  8053e5:	89 e5                	mov    %esp,%ebp
  8053e7:	57                   	push   %edi
  8053e8:	56                   	push   %esi
  8053e9:	53                   	push   %ebx
  8053ea:	83 ec 1c             	sub    $0x1c,%esp
  8053ed:	8b 75 08             	mov    0x8(%ebp),%esi
  8053f0:	8b 5d 0c             	mov    0xc(%ebp),%ebx

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  8053f3:	85 f6                	test   %esi,%esi
  8053f5:	74 0e                	je     805405 <pbuf_copy+0x21>
  8053f7:	85 db                	test   %ebx,%ebx
  8053f9:	74 0a                	je     805405 <pbuf_copy+0x21>
  8053fb:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  8053ff:	66 39 46 08          	cmp    %ax,0x8(%esi)
  805403:	73 1c                	jae    805421 <pbuf_copy+0x3d>
  805405:	c7 44 24 08 14 2b 81 	movl   $0x812b14,0x8(%esp)
  80540c:	00 
  80540d:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
  805414:	00 
  805415:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  80541c:	e8 6d 9c 00 00       	call   80f08e <_panic>
  805421:	bf 00 00 00 00       	mov    $0x0,%edi
  805426:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%ebp)
  80542c:	66 89 7d e6          	mov    %di,-0x1a(%ebp)
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do
  {
    LWIP_ASSERT("p_to != NULL", p_to != NULL);
  805430:	85 f6                	test   %esi,%esi
  805432:	75 1c                	jne    805450 <pbuf_copy+0x6c>
  805434:	c7 44 24 08 e2 29 81 	movl   $0x8129e2,0x8(%esp)
  80543b:	00 
  80543c:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
  805443:	00 
  805444:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  80544b:	e8 3e 9c 00 00       	call   80f08e <_panic>
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  805450:	0f b7 4e 0a          	movzwl 0xa(%esi),%ecx
  805454:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  805458:	29 c1                	sub    %eax,%ecx
  80545a:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  80545e:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  805462:	29 c2                	sub    %eax,%edx
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  805464:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  805468:	66 2b 45 e6          	sub    -0x1a(%ebp),%ax
  80546c:	0f b7 7e 0a          	movzwl 0xa(%esi),%edi
  805470:	66 2b 7d e4          	sub    -0x1c(%ebp),%di
  805474:	39 d1                	cmp    %edx,%ecx
  805476:	0f 4c c7             	cmovl  %edi,%eax
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  805479:	89 c7                	mov    %eax,%edi
  80547b:	0f b7 c0             	movzwl %ax,%eax
  80547e:	89 44 24 08          	mov    %eax,0x8(%esp)
  805482:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  805486:	03 43 04             	add    0x4(%ebx),%eax
  805489:	89 44 24 04          	mov    %eax,0x4(%esp)
  80548d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  805491:	03 46 04             	add    0x4(%esi),%eax
  805494:	89 04 24             	mov    %eax,(%esp)
  805497:	e8 20 a5 00 00       	call   80f9bc <memcpy>
    offset_to += len;
  80549c:	66 01 7d e4          	add    %di,-0x1c(%ebp)
    offset_from += len;
  8054a0:	66 01 7d e6          	add    %di,-0x1a(%ebp)
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  8054a4:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  8054a8:	66 39 45 e4          	cmp    %ax,-0x1c(%ebp)
  8054ac:	76 1c                	jbe    8054ca <pbuf_copy+0xe6>
  8054ae:	c7 44 24 08 ef 29 81 	movl   $0x8129ef,0x8(%esp)
  8054b5:	00 
  8054b6:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
  8054bd:	00 
  8054be:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8054c5:	e8 c4 9b 00 00       	call   80f08e <_panic>
    if (offset_to == p_to->len) {
  8054ca:	66 39 45 e4          	cmp    %ax,-0x1c(%ebp)
  8054ce:	75 08                	jne    8054d8 <pbuf_copy+0xf4>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
  8054d0:	8b 36                	mov    (%esi),%esi
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
  8054d2:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%ebp)
      p_to = p_to->next;
    }
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  8054d8:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  8054dc:	66 39 45 e6          	cmp    %ax,-0x1a(%ebp)
  8054e0:	76 1c                	jbe    8054fe <pbuf_copy+0x11a>
  8054e2:	c7 44 24 08 06 2a 81 	movl   $0x812a06,0x8(%esp)
  8054e9:	00 
  8054ea:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
  8054f1:	00 
  8054f2:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8054f9:	e8 90 9b 00 00       	call   80f08e <_panic>
    if (offset_from >= p_from->len) {
  8054fe:	66 39 45 e6          	cmp    %ax,-0x1a(%ebp)
  805502:	72 08                	jb     80550c <pbuf_copy+0x128>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
  805504:	8b 1b                	mov    (%ebx),%ebx
      p_to = p_to->next;
    }
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  805506:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
      p_from = p_from->next;
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  80550c:	85 db                	test   %ebx,%ebx
  80550e:	74 2b                	je     80553b <pbuf_copy+0x157>
  805510:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  805514:	66 39 43 0a          	cmp    %ax,0xa(%ebx)
  805518:	75 21                	jne    80553b <pbuf_copy+0x157>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  80551a:	83 3b 00             	cmpl   $0x0,(%ebx)
  80551d:	74 1c                	je     80553b <pbuf_copy+0x157>
  80551f:	c7 44 24 08 44 2b 81 	movl   $0x812b44,0x8(%esp)
  805526:	00 
  805527:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
  80552e:	00 
  80552f:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  805536:	e8 53 9b 00 00       	call   80f08e <_panic>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  80553b:	85 f6                	test   %esi,%esi
  80553d:	74 2b                	je     80556a <pbuf_copy+0x186>
  80553f:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  805543:	66 39 46 0a          	cmp    %ax,0xa(%esi)
  805547:	75 21                	jne    80556a <pbuf_copy+0x186>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  805549:	83 3e 00             	cmpl   $0x0,(%esi)
  80554c:	74 1c                	je     80556a <pbuf_copy+0x186>
  80554e:	c7 44 24 08 44 2b 81 	movl   $0x812b44,0x8(%esp)
  805555:	00 
  805556:	c7 44 24 04 d7 02 00 	movl   $0x2d7,0x4(%esp)
  80555d:	00 
  80555e:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  805565:	e8 24 9b 00 00       	call   80f08e <_panic>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  80556a:	85 db                	test   %ebx,%ebx
  80556c:	0f 85 be fe ff ff    	jne    805430 <pbuf_copy+0x4c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 1, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
  805572:	b8 00 00 00 00       	mov    $0x0,%eax
  805577:	83 c4 1c             	add    $0x1c,%esp
  80557a:	5b                   	pop    %ebx
  80557b:	5e                   	pop    %esi
  80557c:	5f                   	pop    %edi
  80557d:	5d                   	pop    %ebp
  80557e:	c3                   	ret    

0080557f <pbuf_copy_partial>:
 * @param len length of data to copy (dataptr must be big enough)
 * @param offset offset into the packet buffer from where to begin copying len bytes
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  80557f:	55                   	push   %ebp
  805580:	89 e5                	mov    %esp,%ebp
  805582:	57                   	push   %edi
  805583:	56                   	push   %esi
  805584:	53                   	push   %ebx
  805585:	83 ec 1c             	sub    $0x1c,%esp
  805588:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80558b:	0f b7 75 10          	movzwl 0x10(%ebp),%esi
  80558f:	0f b7 45 14          	movzwl 0x14(%ebp),%eax
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("netbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  805593:	85 db                	test   %ebx,%ebx
  805595:	75 1c                	jne    8055b3 <pbuf_copy_partial+0x34>
  805597:	c7 44 24 08 70 2b 81 	movl   $0x812b70,0x8(%esp)
  80559e:	00 
  80559f:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
  8055a6:	00 
  8055a7:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8055ae:	e8 db 9a 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  8055b3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  8055b7:	74 0e                	je     8055c7 <pbuf_copy_partial+0x48>
  8055b9:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%ebp)
  8055bf:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
  8055c5:	eb 6b                	jmp    805632 <pbuf_copy_partial+0xb3>
  8055c7:	c7 44 24 08 94 2b 81 	movl   $0x812b94,0x8(%esp)
  8055ce:	00 
  8055cf:	c7 44 24 04 f0 02 00 	movl   $0x2f0,0x4(%esp)
  8055d6:	00 
  8055d7:	c7 04 24 a0 28 81 00 	movl   $0x8128a0,(%esp)
  8055de:	e8 ab 9a 00 00       	call   80f08e <_panic>
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    if ((offset != 0) && (offset >= p->len)) {
  8055e3:	66 85 c0             	test   %ax,%ax
  8055e6:	74 0d                	je     8055f5 <pbuf_copy_partial+0x76>
  8055e8:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  8055ec:	66 39 d0             	cmp    %dx,%ax
  8055ef:	72 04                	jb     8055f5 <pbuf_copy_partial+0x76>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  8055f1:	29 d0                	sub    %edx,%eax
  8055f3:	eb 3b                	jmp    805630 <pbuf_copy_partial+0xb1>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  8055f5:	0f b7 7b 0a          	movzwl 0xa(%ebx),%edi
  8055f9:	29 c7                	sub    %eax,%edi
  8055fb:	66 39 f7             	cmp    %si,%di
  8055fe:	0f 47 fe             	cmova  %esi,%edi
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  805601:	0f b7 d7             	movzwl %di,%edx
  805604:	89 54 24 08          	mov    %edx,0x8(%esp)
  805608:	0f b7 c0             	movzwl %ax,%eax
  80560b:	03 43 04             	add    0x4(%ebx),%eax
  80560e:	89 44 24 04          	mov    %eax,0x4(%esp)
  805612:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  805616:	03 45 0c             	add    0xc(%ebp),%eax
  805619:	89 04 24             	mov    %eax,(%esp)
  80561c:	e8 9b a3 00 00       	call   80f9bc <memcpy>
      copied_total += buf_copy_len;
  805621:	66 01 7d e4          	add    %di,-0x1c(%ebp)
      left += buf_copy_len;
  805625:	66 01 7d e6          	add    %di,-0x1a(%ebp)
      len -= buf_copy_len;
  805629:	29 fe                	sub    %edi,%esi
      offset = 0;
  80562b:	b8 00 00 00 00       	mov    $0x0,%eax
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  805630:	8b 1b                	mov    (%ebx),%ebx
  805632:	85 db                	test   %ebx,%ebx
  805634:	74 05                	je     80563b <pbuf_copy_partial+0xbc>
  805636:	66 85 f6             	test   %si,%si
  805639:	75 a8                	jne    8055e3 <pbuf_copy_partial+0x64>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
  80563b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  80563f:	83 c4 1c             	add    $0x1c,%esp
  805642:	5b                   	pop    %ebx
  805643:	5e                   	pop    %esi
  805644:	5f                   	pop    %edi
  805645:	5d                   	pop    %ebp
  805646:	c3                   	ret    
  805647:	66 90                	xchg   %ax,%ax
  805649:	66 90                	xchg   %ax,%ax
  80564b:	66 90                	xchg   %ax,%ax
  80564d:	66 90                	xchg   %ax,%ax
  80564f:	90                   	nop

00805650 <sswt_handler>:
 *
 * @param arg struct sswt_cb* used to signal a semaphore and end waiting.
 */
static void
sswt_handler(void *arg)
{
  805650:	55                   	push   %ebp
  805651:	89 e5                	mov    %esp,%ebp
  805653:	83 ec 18             	sub    $0x18,%esp
  805656:	8b 45 08             	mov    0x8(%ebp),%eax
  struct sswt_cb *sswt_cb = (struct sswt_cb *) arg;

  /* Timeout. Set flag to TRUE and signal semaphore */
  sswt_cb->timeflag = 1;
  805659:	66 c7 00 01 00       	movw   $0x1,(%eax)
  sys_sem_signal(*(sswt_cb->psem));
  80565e:	8b 40 04             	mov    0x4(%eax),%eax
  805661:	8b 00                	mov    (%eax),%eax
  805663:	89 04 24             	mov    %eax,(%esp)
  805666:	e8 75 52 00 00       	call   80a8e0 <sys_sem_signal>
}
  80566b:	c9                   	leave  
  80566c:	c3                   	ret    

0080566d <sys_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_mbox_fetch(sys_mbox_t mbox, void **msg)
{
  80566d:	55                   	push   %ebp
  80566e:	89 e5                	mov    %esp,%ebp
  805670:	57                   	push   %edi
  805671:	56                   	push   %esi
  805672:	53                   	push   %ebx
  805673:	83 ec 1c             	sub    $0x1c,%esp
  805676:	8b 7d 0c             	mov    0xc(%ebp),%edi
  struct sys_timeo *tmptimeout;
  sys_timeout_handler h;
  void *arg;

 again:
  timeouts = sys_arch_timeouts();
  805679:	e8 ce 56 00 00       	call   80ad4c <sys_arch_timeouts>
  80567e:	89 c3                	mov    %eax,%ebx

  if (!timeouts || !timeouts->next) {
  805680:	85 c0                	test   %eax,%eax
  805682:	74 06                	je     80568a <sys_mbox_fetch+0x1d>
  805684:	8b 00                	mov    (%eax),%eax
  805686:	85 c0                	test   %eax,%eax
  805688:	75 19                	jne    8056a3 <sys_mbox_fetch+0x36>
    UNLOCK_TCPIP_CORE();
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  80568a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  805691:	00 
  805692:	89 7c 24 04          	mov    %edi,0x4(%esp)
  805696:	8b 45 08             	mov    0x8(%ebp),%eax
  805699:	89 04 24             	mov    %eax,(%esp)
  80569c:	e8 d7 54 00 00       	call   80ab78 <sys_arch_mbox_fetch>
  8056a1:	eb 5d                	jmp    805700 <sys_mbox_fetch+0x93>
    LOCK_TCPIP_CORE();
  } else {
    if (timeouts->next->time > 0) {
  8056a3:	8b 40 04             	mov    0x4(%eax),%eax
  8056a6:	85 c0                	test   %eax,%eax
  8056a8:	74 18                	je     8056c2 <sys_mbox_fetch+0x55>
      UNLOCK_TCPIP_CORE();
      time_needed = sys_arch_mbox_fetch(mbox, msg, timeouts->next->time);
  8056aa:	89 44 24 08          	mov    %eax,0x8(%esp)
  8056ae:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8056b2:	8b 45 08             	mov    0x8(%ebp),%eax
  8056b5:	89 04 24             	mov    %eax,(%esp)
  8056b8:	e8 bb 54 00 00       	call   80ab78 <sys_arch_mbox_fetch>
      LOCK_TCPIP_CORE();
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
  8056bd:	83 f8 ff             	cmp    $0xffffffff,%eax
  8056c0:	75 27                	jne    8056e9 <sys_mbox_fetch+0x7c>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = timeouts->next;
  8056c2:	8b 03                	mov    (%ebx),%eax
      timeouts->next = tmptimeout->next;
  8056c4:	8b 10                	mov    (%eax),%edx
  8056c6:	89 13                	mov    %edx,(%ebx)
      h   = tmptimeout->h;
  8056c8:	8b 58 08             	mov    0x8(%eax),%ebx
      arg = tmptimeout->arg;
  8056cb:	8b 70 0c             	mov    0xc(%eax),%esi
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  8056ce:	89 44 24 04          	mov    %eax,0x4(%esp)
  8056d2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  8056d9:	e8 44 f3 ff ff       	call   804a22 <memp_free>
      if (h != NULL) {
  8056de:	85 db                	test   %ebx,%ebx
  8056e0:	74 97                	je     805679 <sys_mbox_fetch+0xc>
        LWIP_DEBUGF(SYS_DEBUG, ("smf calling h=%p(%p)\n", (void*)&h, arg));
        h(arg);
  8056e2:	89 34 24             	mov    %esi,(%esp)
  8056e5:	ff d3                	call   *%ebx
  8056e7:	eb 90                	jmp    805679 <sys_mbox_fetch+0xc>
      goto again;
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < timeouts->next->time) {
  8056e9:	8b 13                	mov    (%ebx),%edx
  8056eb:	8b 4a 04             	mov    0x4(%edx),%ecx
  8056ee:	39 c8                	cmp    %ecx,%eax
  8056f0:	73 07                	jae    8056f9 <sys_mbox_fetch+0x8c>
        timeouts->next->time -= time_needed;
  8056f2:	29 c1                	sub    %eax,%ecx
  8056f4:	89 4a 04             	mov    %ecx,0x4(%edx)
  8056f7:	eb 07                	jmp    805700 <sys_mbox_fetch+0x93>
      } else {
        timeouts->next->time = 0;
  8056f9:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
      }
    }
  }
}
  805700:	83 c4 1c             	add    $0x1c,%esp
  805703:	5b                   	pop    %ebx
  805704:	5e                   	pop    %esi
  805705:	5f                   	pop    %edi
  805706:	5d                   	pop    %ebp
  805707:	c3                   	ret    

00805708 <sys_sem_wait>:
 *
 * @param sem semaphore to wait for
 */
void
sys_sem_wait(sys_sem_t sem)
{
  805708:	55                   	push   %ebp
  805709:	89 e5                	mov    %esp,%ebp
  80570b:	57                   	push   %edi
  80570c:	56                   	push   %esi
  80570d:	53                   	push   %ebx
  80570e:	83 ec 1c             	sub    $0x1c,%esp
  805711:	8b 75 08             	mov    0x8(%ebp),%esi
  sys_timeout_handler h;
  void *arg;

 again:

  timeouts = sys_arch_timeouts();
  805714:	e8 33 56 00 00       	call   80ad4c <sys_arch_timeouts>
  805719:	89 c3                	mov    %eax,%ebx

  if (!timeouts || !timeouts->next) {
  80571b:	85 c0                	test   %eax,%eax
  80571d:	74 06                	je     805725 <sys_sem_wait+0x1d>
  80571f:	8b 00                	mov    (%eax),%eax
  805721:	85 c0                	test   %eax,%eax
  805723:	75 12                	jne    805737 <sys_sem_wait+0x2f>
    sys_arch_sem_wait(sem, 0);
  805725:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80572c:	00 
  80572d:	89 34 24             	mov    %esi,(%esp)
  805730:	e8 20 52 00 00       	call   80a955 <sys_arch_sem_wait>
  805735:	eb 56                	jmp    80578d <sys_sem_wait+0x85>
  } else {
    if (timeouts->next->time > 0) {
  805737:	8b 40 04             	mov    0x4(%eax),%eax
  80573a:	85 c0                	test   %eax,%eax
  80573c:	74 11                	je     80574f <sys_sem_wait+0x47>
      time_needed = sys_arch_sem_wait(sem, timeouts->next->time);
  80573e:	89 44 24 04          	mov    %eax,0x4(%esp)
  805742:	89 34 24             	mov    %esi,(%esp)
  805745:	e8 0b 52 00 00       	call   80a955 <sys_arch_sem_wait>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
  80574a:	83 f8 ff             	cmp    $0xffffffff,%eax
  80574d:	75 27                	jne    805776 <sys_sem_wait+0x6e>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
        could be fetched. We should now call the timeout handler and
        deallocate the memory allocated for the timeout. */
      tmptimeout = timeouts->next;
  80574f:	8b 03                	mov    (%ebx),%eax
      timeouts->next = tmptimeout->next;
  805751:	8b 10                	mov    (%eax),%edx
  805753:	89 13                	mov    %edx,(%ebx)
      h = tmptimeout->h;
  805755:	8b 58 08             	mov    0x8(%eax),%ebx
      arg = tmptimeout->arg;
  805758:	8b 78 0c             	mov    0xc(%eax),%edi
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  80575b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80575f:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  805766:	e8 b7 f2 ff ff       	call   804a22 <memp_free>
      if (h != NULL) {
  80576b:	85 db                	test   %ebx,%ebx
  80576d:	74 a5                	je     805714 <sys_sem_wait+0xc>
        LWIP_DEBUGF(SYS_DEBUG, ("ssw h=%p(%p)\n", (void*)&h, (void *)arg));
        h(arg);
  80576f:	89 3c 24             	mov    %edi,(%esp)
  805772:	ff d3                	call   *%ebx
  805774:	eb 9e                	jmp    805714 <sys_sem_wait+0xc>
      goto again;
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < timeouts->next->time) {
  805776:	8b 13                	mov    (%ebx),%edx
  805778:	8b 4a 04             	mov    0x4(%edx),%ecx
  80577b:	39 c8                	cmp    %ecx,%eax
  80577d:	73 07                	jae    805786 <sys_sem_wait+0x7e>
        timeouts->next->time -= time_needed;
  80577f:	29 c1                	sub    %eax,%ecx
  805781:	89 4a 04             	mov    %ecx,0x4(%edx)
  805784:	eb 07                	jmp    80578d <sys_sem_wait+0x85>
      } else {
        timeouts->next->time = 0;
  805786:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
      }
    }
  }
}
  80578d:	83 c4 1c             	add    $0x1c,%esp
  805790:	5b                   	pop    %ebx
  805791:	5e                   	pop    %esi
  805792:	5f                   	pop    %edi
  805793:	5d                   	pop    %ebp
  805794:	c3                   	ret    

00805795 <sys_timeout>:
 * @param h callback function to call when msecs have elapsed
 * @param arg argument to pass to the callback function
 */
void
sys_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
{
  805795:	55                   	push   %ebp
  805796:	89 e5                	mov    %esp,%ebp
  805798:	56                   	push   %esi
  805799:	53                   	push   %ebx
  80579a:	83 ec 10             	sub    $0x10,%esp
  80579d:	8b 75 08             	mov    0x8(%ebp),%esi
  struct sys_timeouts *timeouts;
  struct sys_timeo *timeout, *t;

  timeout = memp_malloc(MEMP_SYS_TIMEOUT);
  8057a0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  8057a7:	e8 16 f2 ff ff       	call   8049c2 <memp_malloc>
  8057ac:	89 c3                	mov    %eax,%ebx
  if (timeout == NULL) {
  8057ae:	85 c0                	test   %eax,%eax
  8057b0:	75 1c                	jne    8057ce <sys_timeout+0x39>
    LWIP_ASSERT("sys_timeout: timeout != NULL", timeout != NULL);
  8057b2:	c7 44 24 08 b9 2b 81 	movl   $0x812bb9,0x8(%esp)
  8057b9:	00 
  8057ba:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
  8057c1:	00 
  8057c2:	c7 04 24 d6 2b 81 00 	movl   $0x812bd6,(%esp)
  8057c9:	e8 c0 98 00 00       	call   80f08e <_panic>
    return;
  }
  timeout->next = NULL;
  8057ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  timeout->h = h;
  8057d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  8057d7:	89 43 08             	mov    %eax,0x8(%ebx)
  timeout->arg = arg;
  8057da:	8b 45 10             	mov    0x10(%ebp),%eax
  8057dd:	89 43 0c             	mov    %eax,0xc(%ebx)
  timeout->time = msecs;
  8057e0:	89 73 04             	mov    %esi,0x4(%ebx)

  timeouts = sys_arch_timeouts();
  8057e3:	e8 64 55 00 00       	call   80ad4c <sys_arch_timeouts>

  LWIP_DEBUGF(SYS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" h=%p arg=%p\n",
    (void *)timeout, msecs, (void*)&h, (void *)arg));

  if (timeouts == NULL) {
  8057e8:	85 c0                	test   %eax,%eax
  8057ea:	75 1c                	jne    805808 <sys_timeout+0x73>
    LWIP_ASSERT("sys_timeout: timeouts != NULL", timeouts != NULL);
  8057ec:	c7 44 24 08 ea 2b 81 	movl   $0x812bea,0x8(%esp)
  8057f3:	00 
  8057f4:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
  8057fb:	00 
  8057fc:	c7 04 24 d6 2b 81 00 	movl   $0x812bd6,(%esp)
  805803:	e8 86 98 00 00       	call   80f08e <_panic>
    return;
  }

  if (timeouts->next == NULL) {
  805808:	8b 08                	mov    (%eax),%ecx
  80580a:	85 c9                	test   %ecx,%ecx
  80580c:	75 04                	jne    805812 <sys_timeout+0x7d>
    timeouts->next = timeout;
  80580e:	89 18                	mov    %ebx,(%eax)
    return;
  805810:	eb 35                	jmp    805847 <sys_timeout+0xb2>
  }

  if (timeouts->next->time > msecs) {
  805812:	8b 51 04             	mov    0x4(%ecx),%edx
  805815:	39 d6                	cmp    %edx,%esi
  805817:	73 0d                	jae    805826 <sys_timeout+0x91>
    timeouts->next->time -= msecs;
  805819:	29 f2                	sub    %esi,%edx
  80581b:	89 51 04             	mov    %edx,0x4(%ecx)
    timeout->next = timeouts->next;
  80581e:	8b 10                	mov    (%eax),%edx
  805820:	89 13                	mov    %edx,(%ebx)
    timeouts->next = timeout;
  805822:	89 18                	mov    %ebx,(%eax)
  805824:	eb 21                	jmp    805847 <sys_timeout+0xb2>
  } else {
    for(t = timeouts->next; t != NULL; t = t->next) {
      timeout->time -= t->time;
  805826:	8b 43 04             	mov    0x4(%ebx),%eax
  805829:	2b 41 04             	sub    0x4(%ecx),%eax
  80582c:	89 43 04             	mov    %eax,0x4(%ebx)
      if (t->next == NULL || t->next->time > timeout->time) {
  80582f:	8b 11                	mov    (%ecx),%edx
  805831:	85 d2                	test   %edx,%edx
  805833:	74 0c                	je     805841 <sys_timeout+0xac>
  805835:	3b 42 04             	cmp    0x4(%edx),%eax
  805838:	72 04                	jb     80583e <sys_timeout+0xa9>
  80583a:	89 d1                	mov    %edx,%ecx
  80583c:	eb e8                	jmp    805826 <sys_timeout+0x91>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  80583e:	29 42 04             	sub    %eax,0x4(%edx)
        }
        timeout->next = t->next;
  805841:	8b 01                	mov    (%ecx),%eax
  805843:	89 03                	mov    %eax,(%ebx)
        t->next = timeout;
  805845:	89 19                	mov    %ebx,(%ecx)
        break;
      }
    }
  }
}
  805847:	83 c4 10             	add    $0x10,%esp
  80584a:	5b                   	pop    %ebx
  80584b:	5e                   	pop    %esi
  80584c:	5d                   	pop    %ebp
  80584d:	c3                   	ret    

0080584e <sys_untimeout>:
 * @param h callback function that would be called by the timeout
 * @param arg callback argument that would be passed to h
*/
void
sys_untimeout(sys_timeout_handler h, void *arg)
{
  80584e:	55                   	push   %ebp
  80584f:	89 e5                	mov    %esp,%ebp
  805851:	57                   	push   %edi
  805852:	56                   	push   %esi
  805853:	53                   	push   %ebx
  805854:	83 ec 1c             	sub    $0x1c,%esp
  805857:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80585a:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct sys_timeouts *timeouts;
  struct sys_timeo *prev_t, *t;

  timeouts = sys_arch_timeouts();
  80585d:	e8 ea 54 00 00       	call   80ad4c <sys_arch_timeouts>

  if (timeouts == NULL) {
  805862:	85 c0                	test   %eax,%eax
  805864:	75 1c                	jne    805882 <sys_untimeout+0x34>
    LWIP_ASSERT("sys_untimeout: timeouts != NULL", timeouts != NULL);
  805866:	c7 44 24 08 08 2c 81 	movl   $0x812c08,0x8(%esp)
  80586d:	00 
  80586e:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
  805875:	00 
  805876:	c7 04 24 d6 2b 81 00 	movl   $0x812bd6,(%esp)
  80587d:	e8 0c 98 00 00       	call   80f08e <_panic>
    return;
  }
  if (timeouts->next == NULL) {
  805882:	8b 10                	mov    (%eax),%edx
  805884:	85 d2                	test   %edx,%edx
  805886:	74 4a                	je     8058d2 <sys_untimeout+0x84>
  805888:	bf 00 00 00 00       	mov    $0x0,%edi
    return;
  }

  for (t = timeouts->next, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
    if ((t->h == h) && (t->arg == arg)) {
  80588d:	39 5a 08             	cmp    %ebx,0x8(%edx)
  805890:	75 32                	jne    8058c4 <sys_untimeout+0x76>
  805892:	39 72 0c             	cmp    %esi,0xc(%edx)
  805895:	75 2d                	jne    8058c4 <sys_untimeout+0x76>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL)
  805897:	85 ff                	test   %edi,%edi
  805899:	75 07                	jne    8058a2 <sys_untimeout+0x54>
        timeouts->next = t->next;
  80589b:	8b 0a                	mov    (%edx),%ecx
  80589d:	89 08                	mov    %ecx,(%eax)
  80589f:	90                   	nop
  8058a0:	eb 04                	jmp    8058a6 <sys_untimeout+0x58>
      else
        prev_t->next = t->next;
  8058a2:	8b 02                	mov    (%edx),%eax
  8058a4:	89 07                	mov    %eax,(%edi)
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL)
  8058a6:	8b 02                	mov    (%edx),%eax
  8058a8:	85 c0                	test   %eax,%eax
  8058aa:	74 06                	je     8058b2 <sys_untimeout+0x64>
        t->next->time += t->time;
  8058ac:	8b 4a 04             	mov    0x4(%edx),%ecx
  8058af:	01 48 04             	add    %ecx,0x4(%eax)
      memp_free(MEMP_SYS_TIMEOUT, t);
  8058b2:	89 54 24 04          	mov    %edx,0x4(%esp)
  8058b6:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  8058bd:	e8 60 f1 ff ff       	call   804a22 <memp_free>
      return;
  8058c2:	eb 0e                	jmp    8058d2 <sys_untimeout+0x84>
  }
  if (timeouts->next == NULL) {
    return;
  }

  for (t = timeouts->next, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  8058c4:	8b 0a                	mov    (%edx),%ecx
  8058c6:	85 c9                	test   %ecx,%ecx
  8058c8:	74 08                	je     8058d2 <sys_untimeout+0x84>
  8058ca:	89 d7                	mov    %edx,%edi
  8058cc:	89 ca                	mov    %ecx,%edx
  8058ce:	66 90                	xchg   %ax,%ax
  8058d0:	eb bb                	jmp    80588d <sys_untimeout+0x3f>
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
}
  8058d2:	83 c4 1c             	add    $0x1c,%esp
  8058d5:	5b                   	pop    %ebx
  8058d6:	5e                   	pop    %esi
  8058d7:	5f                   	pop    %edi
  8058d8:	5d                   	pop    %ebp
  8058d9:	c3                   	ret    

008058da <sys_sem_wait_timeout>:
 * @param timeout timeout in ms (0: wait forever)
 * @return 0 on timeout, 1 otherwise
 */
int
sys_sem_wait_timeout(sys_sem_t sem, u32_t timeout)
{
  8058da:	55                   	push   %ebp
  8058db:	89 e5                	mov    %esp,%ebp
  8058dd:	83 ec 28             	sub    $0x28,%esp
  8058e0:	8b 45 0c             	mov    0xc(%ebp),%eax
  struct sswt_cb sswt_cb;

  sswt_cb.psem = &sem;
  8058e3:	8d 4d 08             	lea    0x8(%ebp),%ecx
  8058e6:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  sswt_cb.timeflag = 0;
  8058e9:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)

  /* If timeout is zero, then just wait forever */
  if (timeout > 0) {
  8058ef:	85 c0                	test   %eax,%eax
  8058f1:	74 17                	je     80590a <sys_sem_wait_timeout+0x30>
    /* Create a timer and pass it the address of our flag */
    sys_timeout(timeout, sswt_handler, &sswt_cb);
  8058f3:	8d 55 f0             	lea    -0x10(%ebp),%edx
  8058f6:	89 54 24 08          	mov    %edx,0x8(%esp)
  8058fa:	c7 44 24 04 50 56 80 	movl   $0x805650,0x4(%esp)
  805901:	00 
  805902:	89 04 24             	mov    %eax,(%esp)
  805905:	e8 8b fe ff ff       	call   805795 <sys_timeout>
  }
  sys_sem_wait(sem);
  80590a:	8b 45 08             	mov    0x8(%ebp),%eax
  80590d:	89 04 24             	mov    %eax,(%esp)
  805910:	e8 f3 fd ff ff       	call   805708 <sys_sem_wait>
  /* Was it a timeout? */
  if (sswt_cb.timeflag) {
    /* timeout */
    return 0;
  805915:	b8 00 00 00 00       	mov    $0x0,%eax
    /* Create a timer and pass it the address of our flag */
    sys_timeout(timeout, sswt_handler, &sswt_cb);
  }
  sys_sem_wait(sem);
  /* Was it a timeout? */
  if (sswt_cb.timeflag) {
  80591a:	66 83 7d f0 00       	cmpw   $0x0,-0x10(%ebp)
  80591f:	75 18                	jne    805939 <sys_sem_wait_timeout+0x5f>
    /* timeout */
    return 0;
  } else {
    /* Not a timeout. Remove timeout entry */
    sys_untimeout(sswt_handler, &sswt_cb);
  805921:	8d 45 f0             	lea    -0x10(%ebp),%eax
  805924:	89 44 24 04          	mov    %eax,0x4(%esp)
  805928:	c7 04 24 50 56 80 00 	movl   $0x805650,(%esp)
  80592f:	e8 1a ff ff ff       	call   80584e <sys_untimeout>
    return 1;
  805934:	b8 01 00 00 00       	mov    $0x1,%eax
  }
}
  805939:	c9                   	leave  
  80593a:	c3                   	ret    

0080593b <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  80593b:	55                   	push   %ebp
  80593c:	89 e5                	mov    %esp,%ebp
  80593e:	53                   	push   %ebx
  80593f:	83 ec 14             	sub    $0x14,%esp
  sys_sem_t delaysem = sys_sem_new(0);
  805942:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  805949:	e8 b0 4c 00 00       	call   80a5fe <sys_sem_new>
  80594e:	89 c3                	mov    %eax,%ebx

  sys_sem_wait_timeout(delaysem, ms);
  805950:	8b 45 08             	mov    0x8(%ebp),%eax
  805953:	89 44 24 04          	mov    %eax,0x4(%esp)
  805957:	89 1c 24             	mov    %ebx,(%esp)
  80595a:	e8 7b ff ff ff       	call   8058da <sys_sem_wait_timeout>

  sys_sem_free(delaysem);
  80595f:	89 1c 24             	mov    %ebx,(%esp)
  805962:	e8 20 4d 00 00       	call   80a687 <sys_sem_free>
}
  805967:	83 c4 14             	add    $0x14,%esp
  80596a:	5b                   	pop    %ebx
  80596b:	5d                   	pop    %ebp
  80596c:	c3                   	ret    
  80596d:	66 90                	xchg   %ax,%ax
  80596f:	90                   	nop

00805970 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  805970:	55                   	push   %ebp
  805971:	89 e5                	mov    %esp,%ebp
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
  805973:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  805978:	5d                   	pop    %ebp
  805979:	c3                   	ret    

0080597a <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  80597a:	55                   	push   %ebp
  80597b:	89 e5                	mov    %esp,%ebp
  80597d:	57                   	push   %edi
  80597e:	56                   	push   %esi
  80597f:	53                   	push   %ebx
 again:
  if (++port > TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  805980:	8b 1d 5c c2 b3 00    	mov    0xb3c25c,%ebx
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  805986:	8b 35 70 c2 b3 00    	mov    0xb3c270,%esi
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs; pcb != NULL; pcb = pcb->next) {
  80598c:	8b 3d 64 c2 b3 00    	mov    0xb3c264,%edi
  805992:	0f b7 05 0c 50 81 00 	movzwl 0x81500c,%eax
#endif
  static u16_t port = TCP_LOCAL_PORT_RANGE_START;
  
 again:
  if (++port > TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  805999:	b9 00 10 00 00       	mov    $0x1000,%ecx
#define TCP_LOCAL_PORT_RANGE_END   0x7fff
#endif
  static u16_t port = TCP_LOCAL_PORT_RANGE_START;
  
 again:
  if (++port > TCP_LOCAL_PORT_RANGE_END) {
  80599e:	66 83 c0 01          	add    $0x1,%ax
    port = TCP_LOCAL_PORT_RANGE_START;
  8059a2:	0f 48 c1             	cmovs  %ecx,%eax
  }
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  8059a5:	89 da                	mov    %ebx,%edx
  8059a7:	eb 09                	jmp    8059b2 <tcp_new_port+0x38>
    if (pcb->local_port == port) {
  8059a9:	66 3b 42 1c          	cmp    0x1c(%edx),%ax
  8059ad:	74 ef                	je     80599e <tcp_new_port+0x24>
 again:
  if (++port > TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  8059af:	8b 52 0c             	mov    0xc(%edx),%edx
  8059b2:	85 d2                	test   %edx,%edx
  8059b4:	75 f3                	jne    8059a9 <tcp_new_port+0x2f>
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  8059b6:	89 f2                	mov    %esi,%edx
  8059b8:	eb 09                	jmp    8059c3 <tcp_new_port+0x49>
    if (pcb->local_port == port) {
  8059ba:	66 3b 42 1c          	cmp    0x1c(%edx),%ax
  8059be:	74 de                	je     80599e <tcp_new_port+0x24>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  8059c0:	8b 52 0c             	mov    0xc(%edx),%edx
  8059c3:	85 d2                	test   %edx,%edx
  8059c5:	75 f3                	jne    8059ba <tcp_new_port+0x40>
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs; pcb != NULL; pcb = pcb->next) {
  8059c7:	89 fa                	mov    %edi,%edx
  8059c9:	eb 09                	jmp    8059d4 <tcp_new_port+0x5a>
    if (pcb->local_port == port) {
  8059cb:	66 3b 42 1c          	cmp    0x1c(%edx),%ax
  8059cf:	74 cd                	je     80599e <tcp_new_port+0x24>
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs; pcb != NULL; pcb = pcb->next) {
  8059d1:	8b 52 0c             	mov    0xc(%edx),%edx
  8059d4:	85 d2                	test   %edx,%edx
  8059d6:	75 f3                	jne    8059cb <tcp_new_port+0x51>
  8059d8:	66 a3 0c 50 81 00    	mov    %ax,0x81500c
    if (pcb->local_port == port) {
      goto again;
    }
  }
  return port;
}
  8059de:	5b                   	pop    %ebx
  8059df:	5e                   	pop    %esi
  8059e0:	5f                   	pop    %edi
  8059e1:	5d                   	pop    %ebp
  8059e2:	c3                   	ret    

008059e3 <tcp_bind>:
 * @return ERR_USE if the port is already in use
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
{
  8059e3:	55                   	push   %ebp
  8059e4:	89 e5                	mov    %esp,%ebp
  8059e6:	57                   	push   %edi
  8059e7:	56                   	push   %esi
  8059e8:	53                   	push   %ebx
  8059e9:	83 ec 1c             	sub    $0x1c,%esp
  8059ec:	8b 75 08             	mov    0x8(%ebp),%esi
  8059ef:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  8059f2:	8b 55 10             	mov    0x10(%ebp),%edx
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_connect: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  8059f5:	83 7e 10 00          	cmpl   $0x0,0x10(%esi)
  8059f9:	74 1c                	je     805a17 <tcp_bind+0x34>
  8059fb:	c7 44 24 08 28 2c 81 	movl   $0x812c28,0x8(%esp)
  805a02:	00 
  805a03:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
  805a0a:	00 
  805a0b:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  805a12:	e8 77 96 00 00       	call   80f08e <_panic>
  805a17:	89 d0                	mov    %edx,%eax

  if (port == 0) {
  805a19:	66 85 d2             	test   %dx,%dx
  805a1c:	75 05                	jne    805a23 <tcp_bind+0x40>
    port = tcp_new_port();
  805a1e:	e8 57 ff ff ff       	call   80597a <tcp_new_port>
  }
  /* Check if the address already is in use. */
  /* Check the listen pcbs. */
  for(cpcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs;
  805a23:	8b 15 64 c2 b3 00    	mov    0xb3c264,%edx
  805a29:	eb 35                	jmp    805a60 <tcp_bind+0x7d>
      cpcb != NULL; cpcb = cpcb->next) {
    if (cpcb->local_port == port) {
  805a2b:	66 39 42 1c          	cmp    %ax,0x1c(%edx)
  805a2f:	75 2c                	jne    805a5d <tcp_bind+0x7a>
      if (ip_addr_isany(&(cpcb->local_ip)) ||
  805a31:	85 d2                	test   %edx,%edx
  805a33:	0f 84 f7 00 00 00    	je     805b30 <tcp_bind+0x14d>
  805a39:	8b 0a                	mov    (%edx),%ecx
  805a3b:	85 c9                	test   %ecx,%ecx
  805a3d:	0f 84 f4 00 00 00    	je     805b37 <tcp_bind+0x154>
  805a43:	85 db                	test   %ebx,%ebx
  805a45:	0f 84 f3 00 00 00    	je     805b3e <tcp_bind+0x15b>
          ip_addr_isany(ipaddr) ||
  805a4b:	8b 3b                	mov    (%ebx),%edi
  805a4d:	85 ff                	test   %edi,%edi
  805a4f:	0f 84 f0 00 00 00    	je     805b45 <tcp_bind+0x162>
  805a55:	39 f9                	cmp    %edi,%ecx
  805a57:	0f 84 ef 00 00 00    	je     805b4c <tcp_bind+0x169>
    port = tcp_new_port();
  }
  /* Check if the address already is in use. */
  /* Check the listen pcbs. */
  for(cpcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs;
      cpcb != NULL; cpcb = cpcb->next) {
  805a5d:	8b 52 0c             	mov    0xc(%edx),%edx
  if (port == 0) {
    port = tcp_new_port();
  }
  /* Check if the address already is in use. */
  /* Check the listen pcbs. */
  for(cpcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs;
  805a60:	85 d2                	test   %edx,%edx
  805a62:	75 c7                	jne    805a2b <tcp_bind+0x48>
        return ERR_USE;
      }
    }
  }
  /* Check the connected pcbs. */
  for(cpcb = tcp_active_pcbs;
  805a64:	8b 15 5c c2 b3 00    	mov    0xb3c25c,%edx
  805a6a:	eb 35                	jmp    805aa1 <tcp_bind+0xbe>
      cpcb != NULL; cpcb = cpcb->next) {
    if (cpcb->local_port == port) {
  805a6c:	66 39 42 1c          	cmp    %ax,0x1c(%edx)
  805a70:	75 2c                	jne    805a9e <tcp_bind+0xbb>
      if (ip_addr_isany(&(cpcb->local_ip)) ||
  805a72:	85 d2                	test   %edx,%edx
  805a74:	0f 84 d9 00 00 00    	je     805b53 <tcp_bind+0x170>
  805a7a:	8b 0a                	mov    (%edx),%ecx
  805a7c:	85 c9                	test   %ecx,%ecx
  805a7e:	0f 84 d6 00 00 00    	je     805b5a <tcp_bind+0x177>
  805a84:	85 db                	test   %ebx,%ebx
  805a86:	0f 84 d5 00 00 00    	je     805b61 <tcp_bind+0x17e>
          ip_addr_isany(ipaddr) ||
  805a8c:	8b 3b                	mov    (%ebx),%edi
  805a8e:	85 ff                	test   %edi,%edi
  805a90:	0f 84 d2 00 00 00    	je     805b68 <tcp_bind+0x185>
  805a96:	39 f9                	cmp    %edi,%ecx
  805a98:	0f 84 d1 00 00 00    	je     805b6f <tcp_bind+0x18c>
      }
    }
  }
  /* Check the connected pcbs. */
  for(cpcb = tcp_active_pcbs;
      cpcb != NULL; cpcb = cpcb->next) {
  805a9e:	8b 52 0c             	mov    0xc(%edx),%edx
        return ERR_USE;
      }
    }
  }
  /* Check the connected pcbs. */
  for(cpcb = tcp_active_pcbs;
  805aa1:	85 d2                	test   %edx,%edx
  805aa3:	75 c7                	jne    805a6c <tcp_bind+0x89>
        return ERR_USE;
      }
    }
  }
  /* Check the bound, not yet connected pcbs. */
  for(cpcb = tcp_bound_pcbs; cpcb != NULL; cpcb = cpcb->next) {
  805aa5:	8b 15 6c c2 b3 00    	mov    0xb3c26c,%edx
  805aab:	eb 35                	jmp    805ae2 <tcp_bind+0xff>
    if (cpcb->local_port == port) {
  805aad:	66 39 42 1c          	cmp    %ax,0x1c(%edx)
  805ab1:	75 2c                	jne    805adf <tcp_bind+0xfc>
      if (ip_addr_isany(&(cpcb->local_ip)) ||
  805ab3:	85 d2                	test   %edx,%edx
  805ab5:	0f 84 bb 00 00 00    	je     805b76 <tcp_bind+0x193>
  805abb:	8b 0a                	mov    (%edx),%ecx
  805abd:	85 c9                	test   %ecx,%ecx
  805abf:	0f 84 b8 00 00 00    	je     805b7d <tcp_bind+0x19a>
  805ac5:	85 db                	test   %ebx,%ebx
  805ac7:	0f 84 b7 00 00 00    	je     805b84 <tcp_bind+0x1a1>
          ip_addr_isany(ipaddr) ||
  805acd:	8b 3b                	mov    (%ebx),%edi
  805acf:	85 ff                	test   %edi,%edi
  805ad1:	0f 84 b4 00 00 00    	je     805b8b <tcp_bind+0x1a8>
  805ad7:	39 f9                	cmp    %edi,%ecx
  805ad9:	0f 84 b3 00 00 00    	je     805b92 <tcp_bind+0x1af>
        return ERR_USE;
      }
    }
  }
  /* Check the bound, not yet connected pcbs. */
  for(cpcb = tcp_bound_pcbs; cpcb != NULL; cpcb = cpcb->next) {
  805adf:	8b 52 0c             	mov    0xc(%edx),%edx
  805ae2:	85 d2                	test   %edx,%edx
  805ae4:	75 c7                	jne    805aad <tcp_bind+0xca>
      }
    }
  }
  /* @todo: until SO_REUSEADDR is implemented (see task #6995 on savannah),
   * we have to check the pcbs in TIME-WAIT state, also: */
  for(cpcb = tcp_tw_pcbs; cpcb != NULL; cpcb = cpcb->next) {
  805ae6:	8b 15 70 c2 b3 00    	mov    0xb3c270,%edx
  805aec:	eb 13                	jmp    805b01 <tcp_bind+0x11e>
    if (cpcb->local_port == port) {
  805aee:	66 39 42 1c          	cmp    %ax,0x1c(%edx)
  805af2:	75 0a                	jne    805afe <tcp_bind+0x11b>
      if (ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
  805af4:	8b 3b                	mov    (%ebx),%edi
  805af6:	39 3a                	cmp    %edi,(%edx)
  805af8:	0f 84 9b 00 00 00    	je     805b99 <tcp_bind+0x1b6>
      }
    }
  }
  /* @todo: until SO_REUSEADDR is implemented (see task #6995 on savannah),
   * we have to check the pcbs in TIME-WAIT state, also: */
  for(cpcb = tcp_tw_pcbs; cpcb != NULL; cpcb = cpcb->next) {
  805afe:	8b 52 0c             	mov    0xc(%edx),%edx
  805b01:	85 d2                	test   %edx,%edx
  805b03:	75 e9                	jne    805aee <tcp_bind+0x10b>
        return ERR_USE;
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  805b05:	85 db                	test   %ebx,%ebx
  805b07:	74 09                	je     805b12 <tcp_bind+0x12f>
  805b09:	83 3b 00             	cmpl   $0x0,(%ebx)
  805b0c:	74 04                	je     805b12 <tcp_bind+0x12f>
    pcb->local_ip = *ipaddr;
  805b0e:	8b 13                	mov    (%ebx),%edx
  805b10:	89 16                	mov    %edx,(%esi)
  }
  pcb->local_port = port;
  805b12:	66 89 46 1c          	mov    %ax,0x1c(%esi)
  TCP_REG(&tcp_bound_pcbs, pcb);
  805b16:	a1 6c c2 b3 00       	mov    0xb3c26c,%eax
  805b1b:	89 46 0c             	mov    %eax,0xc(%esi)
  805b1e:	89 35 6c c2 b3 00    	mov    %esi,0xb3c26c
  805b24:	e8 29 ca ff ff       	call   802552 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  805b29:	b8 00 00 00 00       	mov    $0x0,%eax
  805b2e:	eb 6e                	jmp    805b9e <tcp_bind+0x1bb>
      cpcb != NULL; cpcb = cpcb->next) {
    if (cpcb->local_port == port) {
      if (ip_addr_isany(&(cpcb->local_ip)) ||
          ip_addr_isany(ipaddr) ||
          ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
        return ERR_USE;
  805b30:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b35:	eb 67                	jmp    805b9e <tcp_bind+0x1bb>
  805b37:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b3c:	eb 60                	jmp    805b9e <tcp_bind+0x1bb>
  805b3e:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b43:	eb 59                	jmp    805b9e <tcp_bind+0x1bb>
  805b45:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b4a:	eb 52                	jmp    805b9e <tcp_bind+0x1bb>
  805b4c:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b51:	eb 4b                	jmp    805b9e <tcp_bind+0x1bb>
      cpcb != NULL; cpcb = cpcb->next) {
    if (cpcb->local_port == port) {
      if (ip_addr_isany(&(cpcb->local_ip)) ||
          ip_addr_isany(ipaddr) ||
          ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
        return ERR_USE;
  805b53:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b58:	eb 44                	jmp    805b9e <tcp_bind+0x1bb>
  805b5a:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b5f:	eb 3d                	jmp    805b9e <tcp_bind+0x1bb>
  805b61:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b66:	eb 36                	jmp    805b9e <tcp_bind+0x1bb>
  805b68:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b6d:	eb 2f                	jmp    805b9e <tcp_bind+0x1bb>
  805b6f:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b74:	eb 28                	jmp    805b9e <tcp_bind+0x1bb>
  for(cpcb = tcp_bound_pcbs; cpcb != NULL; cpcb = cpcb->next) {
    if (cpcb->local_port == port) {
      if (ip_addr_isany(&(cpcb->local_ip)) ||
          ip_addr_isany(ipaddr) ||
          ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
        return ERR_USE;
  805b76:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b7b:	eb 21                	jmp    805b9e <tcp_bind+0x1bb>
  805b7d:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b82:	eb 1a                	jmp    805b9e <tcp_bind+0x1bb>
  805b84:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b89:	eb 13                	jmp    805b9e <tcp_bind+0x1bb>
  805b8b:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b90:	eb 0c                	jmp    805b9e <tcp_bind+0x1bb>
  805b92:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  805b97:	eb 05                	jmp    805b9e <tcp_bind+0x1bb>
  /* @todo: until SO_REUSEADDR is implemented (see task #6995 on savannah),
   * we have to check the pcbs in TIME-WAIT state, also: */
  for(cpcb = tcp_tw_pcbs; cpcb != NULL; cpcb = cpcb->next) {
    if (cpcb->local_port == port) {
      if (ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
        return ERR_USE;
  805b99:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
}
  805b9e:	83 c4 1c             	add    $0x1c,%esp
  805ba1:	5b                   	pop    %ebx
  805ba2:	5e                   	pop    %esi
  805ba3:	5f                   	pop    %edi
  805ba4:	5d                   	pop    %ebp
  805ba5:	c3                   	ret    

00805ba6 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  805ba6:	55                   	push   %ebp
  805ba7:	89 e5                	mov    %esp,%ebp
  805ba9:	56                   	push   %esi
  805baa:	53                   	push   %ebx
  805bab:	83 ec 10             	sub    $0x10,%esp
  805bae:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  805bb1:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
  805bb5:	74 1c                	je     805bd3 <tcp_listen_with_backlog+0x2d>
  805bb7:	c7 44 24 08 54 2c 81 	movl   $0x812c54,0x8(%esp)
  805bbe:	00 
  805bbf:	c7 44 24 04 60 01 00 	movl   $0x160,0x4(%esp)
  805bc6:	00 
  805bc7:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  805bce:	e8 bb 94 00 00       	call   80f08e <_panic>

  /* already listening? */
  if (pcb->state == LISTEN) {
    return pcb;
  }
  lpcb = memp_malloc(MEMP_TCP_PCB_LISTEN);
  805bd3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  805bda:	e8 e3 ed ff ff       	call   8049c2 <memp_malloc>
  805bdf:	89 c6                	mov    %eax,%esi
  if (lpcb == NULL) {
  805be1:	85 c0                	test   %eax,%eax
  805be3:	0f 84 af 00 00 00    	je     805c98 <tcp_listen_with_backlog+0xf2>
    return NULL;
  }
  lpcb->callback_arg = pcb->callback_arg;
  805be9:	8b 43 18             	mov    0x18(%ebx),%eax
  805bec:	89 46 18             	mov    %eax,0x18(%esi)
  lpcb->local_port = pcb->local_port;
  805bef:	0f b7 43 1c          	movzwl 0x1c(%ebx),%eax
  805bf3:	66 89 46 1c          	mov    %ax,0x1c(%esi)
  lpcb->state = LISTEN;
  805bf7:	c7 46 10 01 00 00 00 	movl   $0x1,0x10(%esi)
  lpcb->so_options = pcb->so_options;
  lpcb->so_options |= SOF_ACCEPTCONN;
  805bfe:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  805c02:	83 c8 02             	or     $0x2,%eax
  805c05:	66 89 46 08          	mov    %ax,0x8(%esi)
  lpcb->ttl = pcb->ttl;
  805c09:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
  805c0d:	88 46 0b             	mov    %al,0xb(%esi)
  lpcb->tos = pcb->tos;
  805c10:	0f b6 43 0a          	movzbl 0xa(%ebx),%eax
  805c14:	88 46 0a             	mov    %al,0xa(%esi)
  ip_addr_set(&lpcb->local_ip, &pcb->local_ip);
  805c17:	85 db                	test   %ebx,%ebx
  805c19:	74 04                	je     805c1f <tcp_listen_with_backlog+0x79>
  805c1b:	8b 03                	mov    (%ebx),%eax
  805c1d:	eb 05                	jmp    805c24 <tcp_listen_with_backlog+0x7e>
  805c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  805c24:	89 06                	mov    %eax,(%esi)
  TCP_RMV(&tcp_bound_pcbs, pcb);
  805c26:	a1 6c c2 b3 00       	mov    0xb3c26c,%eax
  805c2b:	39 d8                	cmp    %ebx,%eax
  805c2d:	75 0a                	jne    805c39 <tcp_listen_with_backlog+0x93>
  805c2f:	8b 40 0c             	mov    0xc(%eax),%eax
  805c32:	a3 6c c2 b3 00       	mov    %eax,0xb3c26c
  805c37:	eb 2a                	jmp    805c63 <tcp_listen_with_backlog+0xbd>
  805c39:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  805c3e:	eb 1a                	jmp    805c5a <tcp_listen_with_backlog+0xb4>
  805c40:	8b 50 0c             	mov    0xc(%eax),%edx
  805c43:	85 d2                	test   %edx,%edx
  805c45:	74 11                	je     805c58 <tcp_listen_with_backlog+0xb2>
  805c47:	39 d3                	cmp    %edx,%ebx
  805c49:	75 0d                	jne    805c58 <tcp_listen_with_backlog+0xb2>
  805c4b:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  805c50:	8b 53 0c             	mov    0xc(%ebx),%edx
  805c53:	89 50 0c             	mov    %edx,0xc(%eax)
  805c56:	eb 0b                	jmp    805c63 <tcp_listen_with_backlog+0xbd>
  805c58:	89 d0                	mov    %edx,%eax
  805c5a:	85 c0                	test   %eax,%eax
  805c5c:	75 e2                	jne    805c40 <tcp_listen_with_backlog+0x9a>
  805c5e:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  805c63:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  memp_free(MEMP_TCP_PCB, pcb);
  805c6a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  805c6e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  805c75:	e8 a8 ed ff ff       	call   804a22 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  805c7a:	c7 46 20 70 59 80 00 	movl   $0x805970,0x20(%esi)
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.listen_pcbs, lpcb);
  805c81:	a1 64 c2 b3 00       	mov    0xb3c264,%eax
  805c86:	89 46 0c             	mov    %eax,0xc(%esi)
  805c89:	89 35 64 c2 b3 00    	mov    %esi,0xb3c264
  805c8f:	e8 be c8 ff ff       	call   802552 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
  805c94:	89 f0                	mov    %esi,%eax
  805c96:	eb 05                	jmp    805c9d <tcp_listen_with_backlog+0xf7>
  if (pcb->state == LISTEN) {
    return pcb;
  }
  lpcb = memp_malloc(MEMP_TCP_PCB_LISTEN);
  if (lpcb == NULL) {
    return NULL;
  805c98:	b8 00 00 00 00       	mov    $0x0,%eax
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.listen_pcbs, lpcb);
  return (struct tcp_pcb *)lpcb;
}
  805c9d:	83 c4 10             	add    $0x10,%esp
  805ca0:	5b                   	pop    %ebx
  805ca1:	5e                   	pop    %esi
  805ca2:	5d                   	pop    %ebp
  805ca3:	c3                   	ret    

00805ca4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  805ca4:	55                   	push   %ebp
  805ca5:	89 e5                	mov    %esp,%ebp
  805ca7:	56                   	push   %esi
  805ca8:	53                   	push   %ebx
  805ca9:	83 ec 10             	sub    $0x10,%esp
  805cac:	8b 45 08             	mov    0x8(%ebp),%eax
  805caf:	8b 55 0c             	mov    0xc(%ebp),%edx
  if ((u32_t)pcb->rcv_wnd + len > TCP_WND) {
  805cb2:	0f b7 48 28          	movzwl 0x28(%eax),%ecx
  805cb6:	0f b7 f2             	movzwl %dx,%esi
  805cb9:	0f b7 d9             	movzwl %cx,%ebx
  805cbc:	01 f3                	add    %esi,%ebx
  805cbe:	81 fb c0 5d 00 00    	cmp    $0x5dc0,%ebx
  805cc4:	76 0e                	jbe    805cd4 <tcp_recved+0x30>
    pcb->rcv_wnd = TCP_WND;
  805cc6:	66 c7 40 28 c0 5d    	movw   $0x5dc0,0x28(%eax)
    pcb->rcv_ann_wnd = TCP_WND;
  805ccc:	66 c7 40 2a c0 5d    	movw   $0x5dc0,0x2a(%eax)
  805cd2:	eb 10                	jmp    805ce4 <tcp_recved+0x40>
  } else {
    pcb->rcv_wnd += len;
  805cd4:	01 ca                	add    %ecx,%edx
  805cd6:	66 89 50 28          	mov    %dx,0x28(%eax)
    if (pcb->rcv_wnd >= pcb->mss) {
  805cda:	66 3b 50 34          	cmp    0x34(%eax),%dx
  805cde:	72 04                	jb     805ce4 <tcp_recved+0x40>
      pcb->rcv_ann_wnd = pcb->rcv_wnd;
  805ce0:	66 89 50 2a          	mov    %dx,0x2a(%eax)
    }
  }

  if (!(pcb->flags & TF_ACK_DELAY) &&
  805ce4:	0f b6 50 20          	movzbl 0x20(%eax),%edx
  805ce8:	f6 c2 03             	test   $0x3,%dl
  805ceb:	75 20                	jne    805d0d <tcp_recved+0x69>
     * two ACKs being sent for each received packet in some limited cases
     * (where the application is only receiving data, and is slow to
     * process it) but it is necessary to guarantee that the sender can
     * continue to transmit.
     */
    tcp_ack(pcb);
  805ced:	f6 c2 01             	test   $0x1,%dl
  805cf0:	74 13                	je     805d05 <tcp_recved+0x61>
  805cf2:	83 e2 fe             	and    $0xfffffffe,%edx
  805cf5:	83 ca 02             	or     $0x2,%edx
  805cf8:	88 50 20             	mov    %dl,0x20(%eax)
  805cfb:	89 04 24             	mov    %eax,(%esp)
  805cfe:	e8 3e 2a 00 00       	call   808741 <tcp_output>
  805d03:	eb 23                	jmp    805d28 <tcp_recved+0x84>
  805d05:	83 ca 01             	or     $0x1,%edx
  805d08:	88 50 20             	mov    %dl,0x20(%eax)
  805d0b:	eb 1b                	jmp    805d28 <tcp_recved+0x84>
  } 
  else if (pcb->flags & TF_ACK_DELAY && pcb->rcv_wnd >= TCP_WND/2) {
  805d0d:	f6 c2 01             	test   $0x1,%dl
  805d10:	74 16                	je     805d28 <tcp_recved+0x84>
  805d12:	66 81 78 28 df 2e    	cmpw   $0x2edf,0x28(%eax)
  805d18:	76 0e                	jbe    805d28 <tcp_recved+0x84>
     * nagle-like in its goals, and tries to hit a compromise between
     * sending acks each time the window is updated, and only sending
     * window updates when a timer expires.  The "threshold" used
     * above (currently TCP_WND/2) can be tuned to be more or less
     * aggressive  */
    tcp_ack_now(pcb);
  805d1a:	83 ca 02             	or     $0x2,%edx
  805d1d:	88 50 20             	mov    %dl,0x20(%eax)
  805d20:	89 04 24             	mov    %eax,(%esp)
  805d23:	e8 19 2a 00 00       	call   808741 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
  805d28:	83 c4 10             	add    $0x10,%esp
  805d2b:	5b                   	pop    %ebx
  805d2c:	5e                   	pop    %esi
  805d2d:	5d                   	pop    %ebp
  805d2e:	c3                   	ret    

00805d2f <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  805d2f:	55                   	push   %ebp
  805d30:	89 e5                	mov    %esp,%ebp
  805d32:	53                   	push   %ebx
  805d33:	83 ec 14             	sub    $0x14,%esp
  struct tcp_pcb *pcb;

  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  805d36:	8b 1d 5c c2 b3 00    	mov    0xb3c25c,%ebx
  805d3c:	eb 61                	jmp    805d9f <tcp_fasttmr+0x70>
    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  805d3e:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
  805d44:	85 c0                	test   %eax,%eax
  805d46:	74 3a                	je     805d82 <tcp_fasttmr+0x53>
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
  805d48:	8b 93 88 00 00 00    	mov    0x88(%ebx),%edx
  805d4e:	85 d2                	test   %edx,%edx
  805d50:	74 1e                	je     805d70 <tcp_fasttmr+0x41>
  805d52:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  805d59:	00 
  805d5a:	89 44 24 08          	mov    %eax,0x8(%esp)
  805d5e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  805d62:	8b 43 18             	mov    0x18(%ebx),%eax
  805d65:	89 04 24             	mov    %eax,(%esp)
  805d68:	ff d2                	call   *%edx
      if (err == ERR_OK) {
  805d6a:	84 c0                	test   %al,%al
  805d6c:	75 14                	jne    805d82 <tcp_fasttmr+0x53>
  805d6e:	eb 08                	jmp    805d78 <tcp_fasttmr+0x49>
    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
  805d70:	89 04 24             	mov    %eax,(%esp)
  805d73:	e8 5c f0 ff ff       	call   804dd4 <pbuf_free>
      if (err == ERR_OK) {
        pcb->refused_data = NULL;
  805d78:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  805d7f:	00 00 00 
      }
    }

    /* send delayed ACKs */  
    if (pcb->flags & TF_ACK_DELAY) {
  805d82:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  805d86:	a8 01                	test   $0x1,%al
  805d88:	74 12                	je     805d9c <tcp_fasttmr+0x6d>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
      tcp_ack_now(pcb);
  805d8a:	83 c8 02             	or     $0x2,%eax
  805d8d:	88 43 20             	mov    %al,0x20(%ebx)
  805d90:	89 1c 24             	mov    %ebx,(%esp)
  805d93:	e8 a9 29 00 00       	call   808741 <tcp_output>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  805d98:	80 63 20 fc          	andb   $0xfc,0x20(%ebx)
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  805d9c:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  805d9f:	85 db                	test   %ebx,%ebx
  805da1:	75 9b                	jne    805d3e <tcp_fasttmr+0xf>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
      tcp_ack_now(pcb);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
  }
}
  805da3:	83 c4 14             	add    $0x14,%esp
  805da6:	5b                   	pop    %ebx
  805da7:	5d                   	pop    %ebp
  805da8:	c3                   	ret    

00805da9 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 * @return the number of pbufs that were deallocated
 */
u8_t
tcp_seg_free(struct tcp_seg *seg)
{
  805da9:	55                   	push   %ebp
  805daa:	89 e5                	mov    %esp,%ebp
  805dac:	56                   	push   %esi
  805dad:	53                   	push   %ebx
  805dae:	83 ec 10             	sub    $0x10,%esp
  805db1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  u8_t count = 0;
  
  if (seg != NULL) {
  805db4:	85 db                	test   %ebx,%ebx
  805db6:	74 28                	je     805de0 <tcp_seg_free+0x37>
    if (seg->p != NULL) {
  805db8:	8b 43 04             	mov    0x4(%ebx),%eax
 * @return the number of pbufs that were deallocated
 */
u8_t
tcp_seg_free(struct tcp_seg *seg)
{
  u8_t count = 0;
  805dbb:	be 00 00 00 00       	mov    $0x0,%esi
  
  if (seg != NULL) {
    if (seg->p != NULL) {
  805dc0:	85 c0                	test   %eax,%eax
  805dc2:	74 0a                	je     805dce <tcp_seg_free+0x25>
      count = pbuf_free(seg->p);
  805dc4:	89 04 24             	mov    %eax,(%esp)
  805dc7:	e8 08 f0 ff ff       	call   804dd4 <pbuf_free>
  805dcc:	89 c6                	mov    %eax,%esi
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  805dce:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  805dd2:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  805dd9:	e8 44 ec ff ff       	call   804a22 <memp_free>
  805dde:	eb 05                	jmp    805de5 <tcp_seg_free+0x3c>
 * @return the number of pbufs that were deallocated
 */
u8_t
tcp_seg_free(struct tcp_seg *seg)
{
  u8_t count = 0;
  805de0:	be 00 00 00 00       	mov    $0x0,%esi
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  }
  return count;
}
  805de5:	89 f0                	mov    %esi,%eax
  805de7:	83 c4 10             	add    $0x10,%esp
  805dea:	5b                   	pop    %ebx
  805deb:	5e                   	pop    %esi
  805dec:	5d                   	pop    %ebp
  805ded:	c3                   	ret    

00805dee <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 * @return the number of pbufs that were deallocated
 */
u8_t
tcp_segs_free(struct tcp_seg *seg)
{
  805dee:	55                   	push   %ebp
  805def:	89 e5                	mov    %esp,%ebp
  805df1:	56                   	push   %esi
  805df2:	53                   	push   %ebx
  805df3:	83 ec 10             	sub    $0x10,%esp
  805df6:	8b 55 08             	mov    0x8(%ebp),%edx
  u8_t count = 0;
  805df9:	bb 00 00 00 00       	mov    $0x0,%ebx
  struct tcp_seg *next;
  while (seg != NULL) {
  805dfe:	eb 0e                	jmp    805e0e <tcp_segs_free+0x20>
    next = seg->next;
  805e00:	8b 32                	mov    (%edx),%esi
    count += tcp_seg_free(seg);
  805e02:	89 14 24             	mov    %edx,(%esp)
  805e05:	e8 9f ff ff ff       	call   805da9 <tcp_seg_free>
  805e0a:	01 c3                	add    %eax,%ebx
    seg = next;
  805e0c:	89 f2                	mov    %esi,%edx
u8_t
tcp_segs_free(struct tcp_seg *seg)
{
  u8_t count = 0;
  struct tcp_seg *next;
  while (seg != NULL) {
  805e0e:	85 d2                	test   %edx,%edx
  805e10:	75 ee                	jne    805e00 <tcp_segs_free+0x12>
    next = seg->next;
    count += tcp_seg_free(seg);
    seg = next;
  }
  return count;
}
  805e12:	89 d8                	mov    %ebx,%eax
  805e14:	83 c4 10             	add    $0x10,%esp
  805e17:	5b                   	pop    %ebx
  805e18:	5e                   	pop    %esi
  805e19:	5d                   	pop    %ebp
  805e1a:	c3                   	ret    

00805e1b <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  805e1b:	55                   	push   %ebp
  805e1c:	89 e5                	mov    %esp,%ebp
  pcb->prio = prio;
  805e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
  805e21:	8b 55 08             	mov    0x8(%ebp),%edx
  805e24:	88 42 14             	mov    %al,0x14(%edx)
}
  805e27:	5d                   	pop    %ebp
  805e28:	c3                   	ret    

00805e29 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  805e29:	55                   	push   %ebp
  805e2a:	89 e5                	mov    %esp,%ebp
  805e2c:	53                   	push   %ebx
  805e2d:	83 ec 14             	sub    $0x14,%esp
  struct tcp_seg *cseg;

  cseg = memp_malloc(MEMP_TCP_SEG);
  805e30:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  805e37:	e8 86 eb ff ff       	call   8049c2 <memp_malloc>
  805e3c:	89 c3                	mov    %eax,%ebx
  if (cseg == NULL) {
  805e3e:	85 c0                	test   %eax,%eax
  805e40:	74 22                	je     805e64 <tcp_seg_copy+0x3b>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  805e42:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  805e49:	00 
  805e4a:	8b 45 08             	mov    0x8(%ebp),%eax
  805e4d:	89 44 24 04          	mov    %eax,0x4(%esp)
  805e51:	89 1c 24             	mov    %ebx,(%esp)
  805e54:	e8 63 9b 00 00       	call   80f9bc <memcpy>
  pbuf_ref(cseg->p);
  805e59:	8b 43 04             	mov    0x4(%ebx),%eax
  805e5c:	89 04 24             	mov    %eax,(%esp)
  805e5f:	e8 1e f4 ff ff       	call   805282 <pbuf_ref>
  return cseg;
}
  805e64:	89 d8                	mov    %ebx,%eax
  805e66:	83 c4 14             	add    $0x14,%esp
  805e69:	5b                   	pop    %ebx
  805e6a:	5d                   	pop    %ebp
  805e6b:	c3                   	ret    

00805e6c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{  
  805e6c:	55                   	push   %ebp
  805e6d:	89 e5                	mov    %esp,%ebp
  pcb->callback_arg = arg;
  805e6f:	8b 55 0c             	mov    0xc(%ebp),%edx
  805e72:	8b 45 08             	mov    0x8(%ebp),%eax
  805e75:	89 50 18             	mov    %edx,0x18(%eax)
}
  805e78:	5d                   	pop    %ebp
  805e79:	c3                   	ret    

00805e7a <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb,
   err_t (* recv)(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err))
{
  805e7a:	55                   	push   %ebp
  805e7b:	89 e5                	mov    %esp,%ebp
  pcb->recv = recv;
  805e7d:	8b 55 0c             	mov    0xc(%ebp),%edx
  805e80:	8b 45 08             	mov    0x8(%ebp),%eax
  805e83:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
}
  805e89:	5d                   	pop    %ebp
  805e8a:	c3                   	ret    

00805e8b <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb,
   err_t (* sent)(void *arg, struct tcp_pcb *tpcb, u16_t len))
{
  805e8b:	55                   	push   %ebp
  805e8c:	89 e5                	mov    %esp,%ebp
  pcb->sent = sent;
  805e8e:	8b 55 0c             	mov    0xc(%ebp),%edx
  805e91:	8b 45 08             	mov    0x8(%ebp),%eax
  805e94:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
}
  805e9a:	5d                   	pop    %ebp
  805e9b:	c3                   	ret    

00805e9c <tcp_err>:
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb,
   void (* errf)(void *arg, err_t err))
{
  805e9c:	55                   	push   %ebp
  805e9d:	89 e5                	mov    %esp,%ebp
  pcb->errf = errf;
  805e9f:	8b 55 0c             	mov    0xc(%ebp),%edx
  805ea2:	8b 45 08             	mov    0x8(%ebp),%eax
  805ea5:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
}
  805eab:	5d                   	pop    %ebp
  805eac:	c3                   	ret    

00805ead <tcp_accept>:
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb,
     err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err))
{
  805ead:	55                   	push   %ebp
  805eae:	89 e5                	mov    %esp,%ebp
  ((struct tcp_pcb_listen *)pcb)->accept = accept;
  805eb0:	8b 55 0c             	mov    0xc(%ebp),%edx
  805eb3:	8b 45 08             	mov    0x8(%ebp),%eax
  805eb6:	89 50 20             	mov    %edx,0x20(%eax)
}
  805eb9:	5d                   	pop    %ebp
  805eba:	c3                   	ret    

00805ebb <tcp_poll>:
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb,
   err_t (* poll)(void *arg, struct tcp_pcb *tpcb), u8_t interval)
{
  805ebb:	55                   	push   %ebp
  805ebc:	89 e5                	mov    %esp,%ebp
  805ebe:	8b 45 08             	mov    0x8(%ebp),%eax
  805ec1:	8b 55 10             	mov    0x10(%ebp),%edx
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  805ec4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  805ec7:	89 88 94 00 00 00    	mov    %ecx,0x94(%eax)
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  805ecd:	88 50 31             	mov    %dl,0x31(%eax)
}
  805ed0:	5d                   	pop    %ebp
  805ed1:	c3                   	ret    

00805ed2 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  805ed2:	55                   	push   %ebp
  805ed3:	89 e5                	mov    %esp,%ebp
  805ed5:	53                   	push   %ebx
  805ed6:	83 ec 14             	sub    $0x14,%esp
  805ed9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (pcb->state != CLOSED &&
  805edc:	8b 43 10             	mov    0x10(%ebx),%eax
  805edf:	83 f8 01             	cmp    $0x1,%eax
  805ee2:	76 5d                	jbe    805f41 <tcp_pcb_purge+0x6f>
  805ee4:	83 f8 0a             	cmp    $0xa,%eax
  805ee7:	74 58                	je     805f41 <tcp_pcb_purge+0x6f>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    if (pcb->refused_data != NULL) {
  805ee9:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
  805eef:	85 c0                	test   %eax,%eax
  805ef1:	74 12                	je     805f05 <tcp_pcb_purge+0x33>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  805ef3:	89 04 24             	mov    %eax,(%esp)
  805ef6:	e8 d9 ee ff ff       	call   804dd4 <pbuf_free>
      pcb->refused_data = NULL;
  805efb:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  805f02:	00 00 00 
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  805f05:	66 c7 43 32 ff ff    	movw   $0xffff,0x32(%ebx)

    tcp_segs_free(pcb->ooseq);
  805f0b:	8b 43 7c             	mov    0x7c(%ebx),%eax
  805f0e:	89 04 24             	mov    %eax,(%esp)
  805f11:	e8 d8 fe ff ff       	call   805dee <tcp_segs_free>
    pcb->ooseq = NULL;
  805f16:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
#endif /* TCP_QUEUE_OOSEQ */
    tcp_segs_free(pcb->unsent);
  805f1d:	8b 43 74             	mov    0x74(%ebx),%eax
  805f20:	89 04 24             	mov    %eax,(%esp)
  805f23:	e8 c6 fe ff ff       	call   805dee <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  805f28:	8b 43 78             	mov    0x78(%ebx),%eax
  805f2b:	89 04 24             	mov    %eax,(%esp)
  805f2e:	e8 bb fe ff ff       	call   805dee <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  805f33:	c7 43 74 00 00 00 00 	movl   $0x0,0x74(%ebx)
  805f3a:	c7 43 78 00 00 00 00 	movl   $0x0,0x78(%ebx)
  }
}
  805f41:	83 c4 14             	add    $0x14,%esp
  805f44:	5b                   	pop    %ebx
  805f45:	5d                   	pop    %ebp
  805f46:	c3                   	ret    

00805f47 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is also deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  805f47:	55                   	push   %ebp
  805f48:	89 e5                	mov    %esp,%ebp
  805f4a:	53                   	push   %ebx
  805f4b:	83 ec 14             	sub    $0x14,%esp
  805f4e:	8b 45 08             	mov    0x8(%ebp),%eax
  805f51:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  TCP_RMV(pcblist, pcb);
  805f54:	8b 10                	mov    (%eax),%edx
  805f56:	39 da                	cmp    %ebx,%edx
  805f58:	75 07                	jne    805f61 <tcp_pcb_remove+0x1a>
  805f5a:	8b 52 0c             	mov    0xc(%edx),%edx
  805f5d:	89 10                	mov    %edx,(%eax)
  805f5f:	eb 2d                	jmp    805f8e <tcp_pcb_remove+0x47>
  805f61:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  805f67:	eb 1b                	jmp    805f84 <tcp_pcb_remove+0x3d>
  805f69:	8b 42 0c             	mov    0xc(%edx),%eax
  805f6c:	85 c0                	test   %eax,%eax
  805f6e:	74 12                	je     805f82 <tcp_pcb_remove+0x3b>
  805f70:	39 c3                	cmp    %eax,%ebx
  805f72:	75 0e                	jne    805f82 <tcp_pcb_remove+0x3b>
  805f74:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  805f7a:	8b 43 0c             	mov    0xc(%ebx),%eax
  805f7d:	89 42 0c             	mov    %eax,0xc(%edx)
  805f80:	eb 0c                	jmp    805f8e <tcp_pcb_remove+0x47>
  805f82:	89 c2                	mov    %eax,%edx
  805f84:	85 d2                	test   %edx,%edx
  805f86:	75 e1                	jne    805f69 <tcp_pcb_remove+0x22>
  805f88:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  805f8e:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)

  tcp_pcb_purge(pcb);
  805f95:	89 1c 24             	mov    %ebx,(%esp)
  805f98:	e8 35 ff ff ff       	call   805ed2 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  805f9d:	8b 43 10             	mov    0x10(%ebx),%eax
  805fa0:	83 f8 01             	cmp    $0x1,%eax
  805fa3:	74 1b                	je     805fc0 <tcp_pcb_remove+0x79>
  805fa5:	83 f8 0a             	cmp    $0xa,%eax
  805fa8:	74 16                	je     805fc0 <tcp_pcb_remove+0x79>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  805faa:	0f b6 43 20          	movzbl 0x20(%ebx),%eax

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
  805fae:	a8 01                	test   $0x1,%al
  805fb0:	74 0e                	je     805fc0 <tcp_pcb_remove+0x79>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
  805fb2:	83 c8 02             	or     $0x2,%eax
  805fb5:	88 43 20             	mov    %al,0x20(%ebx)
    tcp_output(pcb);
  805fb8:	89 1c 24             	mov    %ebx,(%esp)
  805fbb:	e8 81 27 00 00       	call   808741 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  805fc0:	83 7b 10 01          	cmpl   $0x1,0x10(%ebx)
  805fc4:	74 66                	je     80602c <tcp_pcb_remove+0xe5>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  805fc6:	83 7b 74 00          	cmpl   $0x0,0x74(%ebx)
  805fca:	74 1c                	je     805fe8 <tcp_pcb_remove+0xa1>
  805fcc:	c7 44 24 08 1e 2e 81 	movl   $0x812e1e,0x8(%esp)
  805fd3:	00 
  805fd4:	c7 44 24 04 b4 04 00 	movl   $0x4b4,0x4(%esp)
  805fdb:	00 
  805fdc:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  805fe3:	e8 a6 90 00 00       	call   80f08e <_panic>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  805fe8:	83 7b 78 00          	cmpl   $0x0,0x78(%ebx)
  805fec:	74 1c                	je     80600a <tcp_pcb_remove+0xc3>
  805fee:	c7 44 24 08 36 2e 81 	movl   $0x812e36,0x8(%esp)
  805ff5:	00 
  805ff6:	c7 44 24 04 b5 04 00 	movl   $0x4b5,0x4(%esp)
  805ffd:	00 
  805ffe:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  806005:	e8 84 90 00 00       	call   80f08e <_panic>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  80600a:	83 7b 7c 00          	cmpl   $0x0,0x7c(%ebx)
  80600e:	74 1c                	je     80602c <tcp_pcb_remove+0xe5>
  806010:	c7 44 24 08 4f 2e 81 	movl   $0x812e4f,0x8(%esp)
  806017:	00 
  806018:	c7 44 24 04 b7 04 00 	movl   $0x4b7,0x4(%esp)
  80601f:	00 
  806020:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  806027:	e8 62 90 00 00       	call   80f08e <_panic>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  80602c:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  806033:	83 c4 14             	add    $0x14,%esp
  806036:	5b                   	pop    %ebx
  806037:	5d                   	pop    %ebp
  806038:	c3                   	ret    

00806039 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  806039:	55                   	push   %ebp
  80603a:	89 e5                	mov    %esp,%ebp
  80603c:	53                   	push   %ebx
  80603d:	83 ec 14             	sub    $0x14,%esp
  806040:	8b 5d 08             	mov    0x8(%ebp),%ebx
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  switch (pcb->state) {
  806043:	83 7b 10 07          	cmpl   $0x7,0x10(%ebx)
  806047:	0f 87 14 01 00 00    	ja     806161 <tcp_close+0x128>
  80604d:	8b 43 10             	mov    0x10(%ebx),%eax
  806050:	ff 24 85 68 2e 81 00 	jmp    *0x812e68(,%eax,4)
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    TCP_RMV(&tcp_bound_pcbs, pcb);
  806057:	8b 15 6c c2 b3 00    	mov    0xb3c26c,%edx
  80605d:	39 da                	cmp    %ebx,%edx
  80605f:	75 0a                	jne    80606b <tcp_close+0x32>
  806061:	8b 42 0c             	mov    0xc(%edx),%eax
  806064:	a3 6c c2 b3 00       	mov    %eax,0xb3c26c
  806069:	eb 2d                	jmp    806098 <tcp_close+0x5f>
  80606b:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  806071:	eb 1b                	jmp    80608e <tcp_close+0x55>
  806073:	8b 42 0c             	mov    0xc(%edx),%eax
  806076:	85 c0                	test   %eax,%eax
  806078:	74 12                	je     80608c <tcp_close+0x53>
  80607a:	39 c3                	cmp    %eax,%ebx
  80607c:	75 0e                	jne    80608c <tcp_close+0x53>
  80607e:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  806084:	8b 43 0c             	mov    0xc(%ebx),%eax
  806087:	89 42 0c             	mov    %eax,0xc(%edx)
  80608a:	eb 0c                	jmp    806098 <tcp_close+0x5f>
  80608c:	89 c2                	mov    %eax,%edx
  80608e:	85 d2                	test   %edx,%edx
  806090:	75 e1                	jne    806073 <tcp_close+0x3a>
  806092:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  806098:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    memp_free(MEMP_TCP_PCB, pcb);
  80609f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8060a3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8060aa:	e8 73 e9 ff ff       	call   804a22 <memp_free>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
  8060af:	b8 00 00 00 00       	mov    $0x0,%eax
    TCP_RMV(&tcp_bound_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    break;
  8060b4:	e9 c5 00 00 00       	jmp    80617e <tcp_close+0x145>
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove((struct tcp_pcb **)&tcp_listen_pcbs.pcbs, pcb);
  8060b9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8060bd:	c7 04 24 64 c2 b3 00 	movl   $0xb3c264,(%esp)
  8060c4:	e8 7e fe ff ff       	call   805f47 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  8060c9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8060cd:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  8060d4:	e8 49 e9 ff ff       	call   804a22 <memp_free>
    TCP_RMV(&tcp_bound_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    break;
  case LISTEN:
    err = ERR_OK;
  8060d9:	b8 00 00 00 00       	mov    $0x0,%eax
    tcp_pcb_remove((struct tcp_pcb **)&tcp_listen_pcbs.pcbs, pcb);
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    pcb = NULL;
    break;
  8060de:	e9 9b 00 00 00       	jmp    80617e <tcp_close+0x145>
  case SYN_SENT:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
  8060e3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8060e7:	c7 04 24 5c c2 b3 00 	movl   $0xb3c25c,(%esp)
  8060ee:	e8 54 fe ff ff       	call   805f47 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  8060f3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8060f7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8060fe:	e8 1f e9 ff ff       	call   804a22 <memp_free>
    tcp_pcb_remove((struct tcp_pcb **)&tcp_listen_pcbs.pcbs, pcb);
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
  806103:	b8 00 00 00 00       	mov    $0x0,%eax
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    snmp_inc_tcpattemptfails();
    break;
  806108:	eb 74                	jmp    80617e <tcp_close+0x145>
  case SYN_RCVD:
    err = tcp_send_ctrl(pcb, TCP_FIN);
  80610a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  806111:	00 
  806112:	89 1c 24             	mov    %ebx,(%esp)
  806115:	e8 78 25 00 00       	call   808692 <tcp_send_ctrl>
    if (err == ERR_OK) {
  80611a:	84 c0                	test   %al,%al
  80611c:	75 60                	jne    80617e <tcp_close+0x145>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
  80611e:	c7 43 10 05 00 00 00 	movl   $0x5,0x10(%ebx)
  806125:	eb 3f                	jmp    806166 <tcp_close+0x12d>
    }
    break;
  case ESTABLISHED:
    err = tcp_send_ctrl(pcb, TCP_FIN);
  806127:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80612e:	00 
  80612f:	89 1c 24             	mov    %ebx,(%esp)
  806132:	e8 5b 25 00 00       	call   808692 <tcp_send_ctrl>
    if (err == ERR_OK) {
  806137:	84 c0                	test   %al,%al
  806139:	75 43                	jne    80617e <tcp_close+0x145>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
  80613b:	c7 43 10 05 00 00 00 	movl   $0x5,0x10(%ebx)
  806142:	eb 22                	jmp    806166 <tcp_close+0x12d>
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_ctrl(pcb, TCP_FIN);
  806144:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80614b:	00 
  80614c:	89 1c 24             	mov    %ebx,(%esp)
  80614f:	e8 3e 25 00 00       	call   808692 <tcp_send_ctrl>
    if (err == ERR_OK) {
  806154:	84 c0                	test   %al,%al
  806156:	75 26                	jne    80617e <tcp_close+0x145>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
  806158:	c7 43 10 09 00 00 00 	movl   $0x9,0x10(%ebx)
  80615f:	eb 05                	jmp    806166 <tcp_close+0x12d>
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
    pcb = NULL;
  806161:	bb 00 00 00 00       	mov    $0x0,%ebx
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
  806166:	85 db                	test   %ebx,%ebx
  806168:	74 0f                	je     806179 <tcp_close+0x140>
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent when tcp_close returns. */
    tcp_output(pcb);
  80616a:	89 1c 24             	mov    %ebx,(%esp)
  80616d:	e8 cf 25 00 00       	call   808741 <tcp_output>
  806172:	b8 00 00 00 00       	mov    $0x0,%eax
  806177:	eb 05                	jmp    80617e <tcp_close+0x145>
  806179:	b8 00 00 00 00       	mov    $0x0,%eax
  }
  return err;
}
  80617e:	83 c4 14             	add    $0x14,%esp
  806181:	5b                   	pop    %ebx
  806182:	5d                   	pop    %ebp
  806183:	c3                   	ret    

00806184 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
static err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  806184:	55                   	push   %ebp
  806185:	89 e5                	mov    %esp,%ebp
  806187:	83 ec 18             	sub    $0x18,%esp
  80618a:	8b 45 10             	mov    0x10(%ebp),%eax
  80618d:	8b 55 14             	mov    0x14(%ebp),%edx
  arg = arg;
  if (p != NULL) {
  806190:	85 c0                	test   %eax,%eax
  806192:	74 0f                	je     8061a3 <tcp_recv_null+0x1f>
    pbuf_free(p);
  806194:	89 04 24             	mov    %eax,(%esp)
  806197:	e8 38 ec ff ff       	call   804dd4 <pbuf_free>
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
  }
  return ERR_OK;
  80619c:	b8 00 00 00 00       	mov    $0x0,%eax
  8061a1:	eb 14                	jmp    8061b7 <tcp_recv_null+0x33>
  8061a3:	b8 00 00 00 00       	mov    $0x0,%eax
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  arg = arg;
  if (p != NULL) {
    pbuf_free(p);
  } else if (err == ERR_OK) {
  8061a8:	84 d2                	test   %dl,%dl
  8061aa:	75 0b                	jne    8061b7 <tcp_recv_null+0x33>
    return tcp_close(pcb);
  8061ac:	8b 45 0c             	mov    0xc(%ebp),%eax
  8061af:	89 04 24             	mov    %eax,(%esp)
  8061b2:	e8 82 fe ff ff       	call   806039 <tcp_close>
  }
  return ERR_OK;
}
  8061b7:	c9                   	leave  
  8061b8:	c3                   	ret    

008061b9 <tcp_abort>:
 *
 * @param pcb the tcp_pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  8061b9:	55                   	push   %ebp
  8061ba:	89 e5                	mov    %esp,%ebp
  8061bc:	57                   	push   %edi
  8061bd:	56                   	push   %esi
  8061be:	53                   	push   %ebx
  8061bf:	83 ec 4c             	sub    $0x4c,%esp
  8061c2:	8b 5d 08             	mov    0x8(%ebp),%ebx

  
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  8061c5:	83 7b 10 0a          	cmpl   $0xa,0x10(%ebx)
  8061c9:	75 25                	jne    8061f0 <tcp_abort+0x37>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  8061cb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8061cf:	c7 04 24 70 c2 b3 00 	movl   $0xb3c270,(%esp)
  8061d6:	e8 6c fd ff ff       	call   805f47 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  8061db:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8061df:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8061e6:	e8 37 e8 ff ff       	call   804a22 <memp_free>
  8061eb:	e9 d5 00 00 00       	jmp    8062c5 <tcp_abort+0x10c>
  } else {
    seqno = pcb->snd_nxt;
  8061f0:	8b 43 54             	mov    0x54(%ebx),%eax
  8061f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    ackno = pcb->rcv_nxt;
  8061f6:	8b 7b 24             	mov    0x24(%ebx),%edi
    ip_addr_set(&local_ip, &(pcb->local_ip));
  8061f9:	85 db                	test   %ebx,%ebx
  8061fb:	74 04                	je     806201 <tcp_abort+0x48>
  8061fd:	8b 03                	mov    (%ebx),%eax
  8061ff:	eb 05                	jmp    806206 <tcp_abort+0x4d>
  806201:	b8 00 00 00 00       	mov    $0x0,%eax
  806206:	89 45 e0             	mov    %eax,-0x20(%ebp)
    ip_addr_set(&remote_ip, &(pcb->remote_ip));
  806209:	83 fb fc             	cmp    $0xfffffffc,%ebx
  80620c:	74 05                	je     806213 <tcp_abort+0x5a>
  80620e:	8b 43 04             	mov    0x4(%ebx),%eax
  806211:	eb 05                	jmp    806218 <tcp_abort+0x5f>
  806213:	b8 00 00 00 00       	mov    $0x0,%eax
  806218:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    local_port = pcb->local_port;
  80621b:	0f b7 43 1c          	movzwl 0x1c(%ebx),%eax
  80621f:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
    remote_port = pcb->remote_port;
  806223:	0f b7 43 1e          	movzwl 0x1e(%ebx),%eax
  806227:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
#if LWIP_CALLBACK_API
    errf = pcb->errf;
  80622b:	8b b3 98 00 00 00    	mov    0x98(%ebx),%esi
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
  806231:	8b 43 18             	mov    0x18(%ebx),%eax
  806234:	89 45 cc             	mov    %eax,-0x34(%ebp)
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
  806237:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80623b:	c7 04 24 5c c2 b3 00 	movl   $0xb3c25c,(%esp)
  806242:	e8 00 fd ff ff       	call   805f47 <tcp_pcb_remove>
    if (pcb->unacked != NULL) {
  806247:	8b 43 78             	mov    0x78(%ebx),%eax
  80624a:	85 c0                	test   %eax,%eax
  80624c:	74 08                	je     806256 <tcp_abort+0x9d>
      tcp_segs_free(pcb->unacked);
  80624e:	89 04 24             	mov    %eax,(%esp)
  806251:	e8 98 fb ff ff       	call   805dee <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
  806256:	8b 43 74             	mov    0x74(%ebx),%eax
  806259:	85 c0                	test   %eax,%eax
  80625b:	74 08                	je     806265 <tcp_abort+0xac>
      tcp_segs_free(pcb->unsent);
  80625d:	89 04 24             	mov    %eax,(%esp)
  806260:	e8 89 fb ff ff       	call   805dee <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
  806265:	8b 43 7c             	mov    0x7c(%ebx),%eax
  806268:	85 c0                	test   %eax,%eax
  80626a:	74 08                	je     806274 <tcp_abort+0xbb>
      tcp_segs_free(pcb->ooseq);
  80626c:	89 04 24             	mov    %eax,(%esp)
  80626f:	e8 7a fb ff ff       	call   805dee <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    memp_free(MEMP_TCP_PCB, pcb);
  806274:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  806278:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80627f:	e8 9e e7 ff ff       	call   804a22 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  806284:	85 f6                	test   %esi,%esi
  806286:	74 10                	je     806298 <tcp_abort+0xdf>
  806288:	c7 44 24 04 fb ff ff 	movl   $0xfffffffb,0x4(%esp)
  80628f:	ff 
  806290:	8b 45 cc             	mov    -0x34(%ebp),%eax
  806293:	89 04 24             	mov    %eax,(%esp)
  806296:	ff d6                	call   *%esi
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abort: sending RST\n"));
    tcp_rst(seqno, ackno, &local_ip, &remote_ip, local_port, remote_port);
  806298:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
  80629c:	89 44 24 14          	mov    %eax,0x14(%esp)
  8062a0:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
  8062a4:	89 44 24 10          	mov    %eax,0x10(%esp)
  8062a8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  8062ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8062af:	8d 45 e0             	lea    -0x20(%ebp),%eax
  8062b2:	89 44 24 08          	mov    %eax,0x8(%esp)
  8062b6:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8062ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  8062bd:	89 04 24             	mov    %eax,(%esp)
  8062c0:	e8 10 29 00 00       	call   808bd5 <tcp_rst>
  }
}
  8062c5:	83 c4 4c             	add    $0x4c,%esp
  8062c8:	5b                   	pop    %ebx
  8062c9:	5e                   	pop    %esi
  8062ca:	5f                   	pop    %edi
  8062cb:	5d                   	pop    %ebp
  8062cc:	c3                   	ret    

008062cd <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  8062cd:	55                   	push   %ebp
  8062ce:	89 e5                	mov    %esp,%ebp
  8062d0:	57                   	push   %edi
  8062d1:	56                   	push   %esi
  8062d2:	53                   	push   %ebx
  8062d3:	83 ec 2c             	sub    $0x2c,%esp
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
  8062d6:	83 05 60 c2 b3 00 01 	addl   $0x1,0xb3c260

  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
  8062dd:	8b 1d 5c c2 b3 00    	mov    0xb3c25c,%ebx
  struct tcp_pcb *pcb, *pcb2, *prev;
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  err_t err;

  err = ERR_OK;
  8062e3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)

  ++tcp_ticks;

  /* Steps through all of the active PCBs. */
  prev = NULL;
  8062e7:	bf 00 00 00 00       	mov    $0x0,%edi
  8062ec:	e9 3a 03 00 00       	jmp    80662b <tcp_slowtmr+0x35e>
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  8062f1:	8b 43 10             	mov    0x10(%ebx),%eax
  8062f4:	85 c0                	test   %eax,%eax
  8062f6:	75 1c                	jne    806314 <tcp_slowtmr+0x47>
  8062f8:	c7 44 24 08 78 2c 81 	movl   $0x812c78,0x8(%esp)
  8062ff:	00 
  806300:	c7 44 24 04 36 02 00 	movl   $0x236,0x4(%esp)
  806307:	00 
  806308:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  80630f:	e8 7a 8d 00 00       	call   80f08e <_panic>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  806314:	83 f8 01             	cmp    $0x1,%eax
  806317:	75 1c                	jne    806335 <tcp_slowtmr+0x68>
  806319:	c7 44 24 08 a4 2c 81 	movl   $0x812ca4,0x8(%esp)
  806320:	00 
  806321:	c7 44 24 04 37 02 00 	movl   $0x237,0x4(%esp)
  806328:	00 
  806329:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  806330:	e8 59 8d 00 00       	call   80f08e <_panic>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  806335:	83 f8 0a             	cmp    $0xa,%eax
  806338:	75 1c                	jne    806356 <tcp_slowtmr+0x89>
  80633a:	c7 44 24 08 d0 2c 81 	movl   $0x812cd0,0x8(%esp)
  806341:	00 
  806342:	c7 44 24 04 38 02 00 	movl   $0x238,0x4(%esp)
  806349:	00 
  80634a:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  806351:	e8 38 8d 00 00       	call   80f08e <_panic>

    pcb_remove = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  806356:	83 f8 02             	cmp    $0x2,%eax
  806359:	75 0f                	jne    80636a <tcp_slowtmr+0x9d>
      ++pcb_remove;
  80635b:	be 01 00 00 00       	mov    $0x1,%esi
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  806360:	80 7b 46 06          	cmpb   $0x6,0x46(%ebx)
  806364:	0f 84 16 01 00 00    	je     806480 <tcp_slowtmr+0x1b3>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  80636a:	0f b6 53 46          	movzbl 0x46(%ebx),%edx
      ++pcb_remove;
  80636e:	be 01 00 00 00       	mov    $0x1,%esi

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  806373:	80 fa 0c             	cmp    $0xc,%dl
  806376:	0f 84 e9 00 00 00    	je     806465 <tcp_slowtmr+0x198>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  80637c:	0f b6 8b a4 00 00 00 	movzbl 0xa4(%ebx),%ecx
  806383:	84 c9                	test   %cl,%cl
  806385:	74 50                	je     8063d7 <tcp_slowtmr+0x10a>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
  806387:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
  80638d:	83 c0 01             	add    $0x1,%eax
  806390:	89 83 a0 00 00 00    	mov    %eax,0xa0(%ebx)
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  806396:	0f b6 d1             	movzbl %cl,%edx
  806399:	0f b6 92 87 2e 81 00 	movzbl 0x812e87(%edx),%edx
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
  8063a0:	be 00 00 00 00       	mov    $0x0,%esi
    } else {
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  8063a5:	39 d0                	cmp    %edx,%eax
  8063a7:	0f 82 b8 00 00 00    	jb     806465 <tcp_slowtmr+0x198>
          pcb->persist_cnt = 0;
  8063ad:	c7 83 a0 00 00 00 00 	movl   $0x0,0xa0(%ebx)
  8063b4:	00 00 00 
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  8063b7:	80 f9 06             	cmp    $0x6,%cl
  8063ba:	77 09                	ja     8063c5 <tcp_slowtmr+0xf8>
            pcb->persist_backoff++;
  8063bc:	83 c1 01             	add    $0x1,%ecx
  8063bf:	88 8b a4 00 00 00    	mov    %cl,0xa4(%ebx)
          }
          tcp_zero_window_probe(pcb);
  8063c5:	89 1c 24             	mov    %ebx,(%esp)
  8063c8:	e8 58 2b 00 00       	call   808f25 <tcp_zero_window_probe>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
  8063cd:	be 00 00 00 00       	mov    $0x0,%esi
  8063d2:	e9 8e 00 00 00       	jmp    806465 <tcp_slowtmr+0x198>
          }
          tcp_zero_window_probe(pcb);
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0)
  8063d7:	0f b7 4b 32          	movzwl 0x32(%ebx),%ecx
  8063db:	66 85 c9             	test   %cx,%cx
  8063de:	78 07                	js     8063e7 <tcp_slowtmr+0x11a>
          ++pcb->rtime;
  8063e0:	83 c1 01             	add    $0x1,%ecx
  8063e3:	66 89 4b 32          	mov    %cx,0x32(%ebx)

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  8063e7:	83 7b 78 00          	cmpl   $0x0,0x78(%ebx)
  8063eb:	74 73                	je     806460 <tcp_slowtmr+0x193>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
  8063ed:	be 00 00 00 00       	mov    $0x0,%esi
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0)
          ++pcb->rtime;

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  8063f2:	0f b7 4b 44          	movzwl 0x44(%ebx),%ecx
  8063f6:	66 39 4b 32          	cmp    %cx,0x32(%ebx)
  8063fa:	7c 69                	jl     806465 <tcp_slowtmr+0x198>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  8063fc:	83 f8 02             	cmp    $0x2,%eax
  8063ff:	74 1f                	je     806420 <tcp_slowtmr+0x153>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  806401:	0f b7 43 40          	movzwl 0x40(%ebx),%eax
  806405:	66 c1 f8 03          	sar    $0x3,%ax
  806409:	98                   	cwtl   
  80640a:	0f bf 4b 42          	movswl 0x42(%ebx),%ecx
  80640e:	01 c8                	add    %ecx,%eax
  806410:	0f b6 d2             	movzbl %dl,%edx
  806413:	0f b6 8a 8f 2e 81 00 	movzbl 0x812e8f(%edx),%ecx
  80641a:	d3 e0                	shl    %cl,%eax
  80641c:	66 89 43 44          	mov    %ax,0x44(%ebx)
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  806420:	66 c7 43 32 00 00    	movw   $0x0,0x32(%ebx)

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  806426:	0f b7 43 5c          	movzwl 0x5c(%ebx),%eax
  80642a:	66 39 43 4e          	cmp    %ax,0x4e(%ebx)
  80642e:	66 0f 46 43 4e       	cmovbe 0x4e(%ebx),%ax
          pcb->ssthresh = eff_wnd >> 1;
  806433:	66 d1 e8             	shr    %ax
  806436:	66 89 43 50          	mov    %ax,0x50(%ebx)
          if (pcb->ssthresh < pcb->mss) {
  80643a:	0f b7 53 34          	movzwl 0x34(%ebx),%edx
  80643e:	66 39 d0             	cmp    %dx,%ax
  806441:	73 06                	jae    806449 <tcp_slowtmr+0x17c>
            pcb->ssthresh = pcb->mss * 2;
  806443:	01 d2                	add    %edx,%edx
  806445:	66 89 53 50          	mov    %dx,0x50(%ebx)
          }
          pcb->cwnd = pcb->mss;
  806449:	0f b7 43 34          	movzwl 0x34(%ebx),%eax
  80644d:	66 89 43 4e          	mov    %ax,0x4e(%ebx)
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  806451:	89 1c 24             	mov    %ebx,(%esp)
  806454:	e8 d6 28 00 00       	call   808d2f <tcp_rexmit_rto>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
  806459:	be 00 00 00 00       	mov    $0x0,%esi
  80645e:	eb 05                	jmp    806465 <tcp_slowtmr+0x198>
  806460:	be 00 00 00 00       	mov    $0x0,%esi
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  806465:	8b 43 10             	mov    0x10(%ebx),%eax
  806468:	83 f8 06             	cmp    $0x6,%eax
  80646b:	75 13                	jne    806480 <tcp_slowtmr+0x1b3>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  80646d:	8b 15 60 c2 b3 00    	mov    0xb3c260,%edx
  806473:	2b 53 2c             	sub    0x2c(%ebx),%edx
          TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  806476:	83 fa 29             	cmp    $0x29,%edx
  806479:	89 f1                	mov    %esi,%ecx
  80647b:	80 d9 ff             	sbb    $0xff,%cl
  80647e:	89 ce                	mov    %ecx,%esi
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
      }
    }

    /* Check if KEEPALIVE should be sent */
    if((pcb->so_options & SOF_KEEPALIVE) && 
  806480:	f6 43 08 08          	testb  $0x8,0x8(%ebx)
  806484:	74 67                	je     8064ed <tcp_slowtmr+0x220>
  806486:	83 f8 07             	cmp    $0x7,%eax
  806489:	74 05                	je     806490 <tcp_slowtmr+0x1c3>
  80648b:	83 f8 04             	cmp    $0x4,%eax
  80648e:	75 5d                	jne    8064ed <tcp_slowtmr+0x220>
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) > 
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) > 
  806490:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  806495:	2b 43 2c             	sub    0x2c(%ebx),%eax
  806498:	89 45 e4             	mov    %eax,-0x1c(%ebp)
         (pcb->keep_idle + TCP_MAXIDLE) / TCP_SLOW_INTERVAL)
  80649b:	8b 8b 9c 00 00 00    	mov    0x9c(%ebx),%ecx
  8064a1:	8d 91 b8 4c 0a 00    	lea    0xa4cb8(%ecx),%edx
  8064a7:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  8064ac:	f7 e2                	mul    %edx
  8064ae:	c1 ea 05             	shr    $0x5,%edx
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) > 
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) > 
  8064b1:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
  8064b4:	76 0a                	jbe    8064c0 <tcp_slowtmr+0x1f3>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1(&pcb->remote_ip), ip4_addr2(&pcb->remote_ip),
                                ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip)));
        
        tcp_abort(pcb);
  8064b6:	89 1c 24             	mov    %ebx,(%esp)
  8064b9:	e8 fb fc ff ff       	call   8061b9 <tcp_abort>
  8064be:	eb 2d                	jmp    8064ed <tcp_slowtmr+0x220>
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
  8064c0:	0f b6 93 a5 00 00 00 	movzbl 0xa5(%ebx),%edx
  8064c7:	69 d2 f8 24 01 00    	imul   $0x124f8,%edx,%edx
  8064cd:	01 d1                	add    %edx,%ecx
              / TCP_SLOW_INTERVAL)
  8064cf:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  8064d4:	f7 e1                	mul    %ecx
  8064d6:	c1 ea 05             	shr    $0x5,%edx
#if LWIP_TCP_KEEPALIVE
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  8064d9:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
  8064dc:	76 0f                	jbe    8064ed <tcp_slowtmr+0x220>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
              / TCP_SLOW_INTERVAL)
#endif /* LWIP_TCP_KEEPALIVE */
      {
        tcp_keepalive(pcb);
  8064de:	89 1c 24             	mov    %ebx,(%esp)
  8064e1:	e8 eb 28 00 00       	call   808dd1 <tcp_keepalive>
        pcb->keep_cnt_sent++;
  8064e6:	80 83 a5 00 00 00 01 	addb   $0x1,0xa5(%ebx)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL &&
  8064ed:	8b 53 7c             	mov    0x7c(%ebx),%edx
  8064f0:	85 d2                	test   %edx,%edx
  8064f2:	74 25                	je     806519 <tcp_slowtmr+0x24c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  8064f4:	8b 0d 60 c2 b3 00    	mov    0xb3c260,%ecx
  8064fa:	2b 4b 2c             	sub    0x2c(%ebx),%ecx
  8064fd:	0f bf 43 44          	movswl 0x44(%ebx),%eax
  806501:	8d 04 40             	lea    (%eax,%eax,2),%eax
  806504:	01 c0                	add    %eax,%eax

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL &&
  806506:	39 c1                	cmp    %eax,%ecx
  806508:	72 0f                	jb     806519 <tcp_slowtmr+0x24c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
  80650a:	89 14 24             	mov    %edx,(%esp)
  80650d:	e8 dc f8 ff ff       	call   805dee <tcp_segs_free>
      pcb->ooseq = NULL;
  806512:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  806519:	8b 43 10             	mov    0x10(%ebx),%eax
  80651c:	83 f8 03             	cmp    $0x3,%eax
  80651f:	75 13                	jne    806534 <tcp_slowtmr+0x267>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  806521:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  806526:	2b 43 2c             	sub    0x2c(%ebx),%eax
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  806529:	83 f8 29             	cmp    $0x29,%eax
  80652c:	89 f0                	mov    %esi,%eax
  80652e:	1c ff                	sbb    $0xff,%al
  806530:	89 c6                	mov    %eax,%esi
  806532:	eb 18                	jmp    80654c <tcp_slowtmr+0x27f>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  806534:	83 f8 09             	cmp    $0x9,%eax
  806537:	75 13                	jne    80654c <tcp_slowtmr+0x27f>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  806539:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  80653e:	2b 43 2c             	sub    0x2c(%ebx),%eax
        ++pcb_remove;
  806541:	3d f1 00 00 00       	cmp    $0xf1,%eax
  806546:	89 f0                	mov    %esi,%eax
  806548:	1c ff                	sbb    $0xff,%al
  80654a:	89 c6                	mov    %eax,%esi
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  80654c:	89 f0                	mov    %esi,%eax
  80654e:	84 c0                	test   %al,%al
  806550:	0f 84 96 00 00 00    	je     8065ec <tcp_slowtmr+0x31f>
      tcp_pcb_purge(pcb);      
  806556:	89 1c 24             	mov    %ebx,(%esp)
  806559:	e8 74 f9 ff ff       	call   805ed2 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  80655e:	85 ff                	test   %edi,%edi
  806560:	74 2c                	je     80658e <tcp_slowtmr+0x2c1>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  806562:	3b 1d 5c c2 b3 00    	cmp    0xb3c25c,%ebx
  806568:	75 1c                	jne    806586 <tcp_slowtmr+0x2b9>
  80656a:	c7 44 24 08 00 2d 81 	movl   $0x812d00,0x8(%esp)
  806571:	00 
  806572:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
  806579:	00 
  80657a:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  806581:	e8 08 8b 00 00       	call   80f08e <_panic>
        prev->next = pcb->next;
  806586:	8b 43 0c             	mov    0xc(%ebx),%eax
  806589:	89 47 0c             	mov    %eax,0xc(%edi)
  80658c:	eb 2d                	jmp    8065bb <tcp_slowtmr+0x2ee>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  80658e:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  806593:	39 d8                	cmp    %ebx,%eax
  806595:	74 1c                	je     8065b3 <tcp_slowtmr+0x2e6>
  806597:	c7 44 24 08 2c 2d 81 	movl   $0x812d2c,0x8(%esp)
  80659e:	00 
  80659f:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
  8065a6:	00 
  8065a7:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  8065ae:	e8 db 8a 00 00       	call   80f08e <_panic>
        tcp_active_pcbs = pcb->next;
  8065b3:	8b 40 0c             	mov    0xc(%eax),%eax
  8065b6:	a3 5c c2 b3 00       	mov    %eax,0xb3c25c
      }

      TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_ABRT);
  8065bb:	8b 83 98 00 00 00    	mov    0x98(%ebx),%eax
  8065c1:	85 c0                	test   %eax,%eax
  8065c3:	74 10                	je     8065d5 <tcp_slowtmr+0x308>
  8065c5:	c7 44 24 04 fb ff ff 	movl   $0xfffffffb,0x4(%esp)
  8065cc:	ff 
  8065cd:	8b 53 18             	mov    0x18(%ebx),%edx
  8065d0:	89 14 24             	mov    %edx,(%esp)
  8065d3:	ff d0                	call   *%eax

      pcb2 = pcb->next;
  8065d5:	8b 73 0c             	mov    0xc(%ebx),%esi
      memp_free(MEMP_TCP_PCB, pcb);
  8065d8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8065dc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8065e3:	e8 3a e4 ff ff       	call   804a22 <memp_free>
      pcb = pcb2;
  8065e8:	89 f3                	mov    %esi,%ebx
  8065ea:	eb 3f                	jmp    80662b <tcp_slowtmr+0x35e>
    } else {

      /* We check if we should poll the connection. */
      ++pcb->polltmr;
  8065ec:	0f b6 43 30          	movzbl 0x30(%ebx),%eax
  8065f0:	83 c0 01             	add    $0x1,%eax
  8065f3:	88 43 30             	mov    %al,0x30(%ebx)
      if (pcb->polltmr >= pcb->pollinterval) {
  8065f6:	3a 43 31             	cmp    0x31(%ebx),%al
  8065f9:	72 2b                	jb     806626 <tcp_slowtmr+0x359>
        pcb->polltmr = 0;
  8065fb:	c6 43 30 00          	movb   $0x0,0x30(%ebx)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        TCP_EVENT_POLL(pcb, err);
  8065ff:	8b 83 94 00 00 00    	mov    0x94(%ebx),%eax
  806605:	85 c0                	test   %eax,%eax
  806607:	74 0f                	je     806618 <tcp_slowtmr+0x34b>
  806609:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80660d:	8b 53 18             	mov    0x18(%ebx),%edx
  806610:	89 14 24             	mov    %edx,(%esp)
  806613:	ff d0                	call   *%eax
  806615:	88 45 e3             	mov    %al,-0x1d(%ebp)
        if (err == ERR_OK) {
  806618:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
  80661c:	75 08                	jne    806626 <tcp_slowtmr+0x359>
          tcp_output(pcb);
  80661e:	89 1c 24             	mov    %ebx,(%esp)
  806621:	e8 1b 21 00 00       	call   808741 <tcp_output>
        }
      }
      
      prev = pcb;
  806626:	89 df                	mov    %ebx,%edi
      pcb = pcb->next;
  806628:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  80662b:	85 db                	test   %ebx,%ebx
  80662d:	0f 85 be fc ff ff    	jne    8062f1 <tcp_slowtmr+0x24>
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;    
  pcb = tcp_tw_pcbs;
  806633:	8b 35 70 c2 b3 00    	mov    0xb3c270,%esi
  while (pcb != NULL) {
  806639:	e9 b2 00 00 00       	jmp    8066f0 <tcp_slowtmr+0x423>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  80663e:	83 7e 10 0a          	cmpl   $0xa,0x10(%esi)
  806642:	74 1c                	je     806660 <tcp_slowtmr+0x393>
  806644:	c7 44 24 08 58 2d 81 	movl   $0x812d58,0x8(%esp)
  80664b:	00 
  80664c:	c7 44 24 04 e5 02 00 	movl   $0x2e5,0x4(%esp)
  806653:	00 
  806654:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  80665b:	e8 2e 8a 00 00       	call   80f08e <_panic>
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  806660:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  806665:	2b 46 2c             	sub    0x2c(%esi),%eax
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  806668:	3d f0 00 00 00       	cmp    $0xf0,%eax
  80666d:	76 7c                	jbe    8066eb <tcp_slowtmr+0x41e>
      tcp_pcb_purge(pcb);      
  80666f:	89 34 24             	mov    %esi,(%esp)
  806672:	e8 5b f8 ff ff       	call   805ed2 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  806677:	85 db                	test   %ebx,%ebx
  806679:	74 2c                	je     8066a7 <tcp_slowtmr+0x3da>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  80667b:	3b 35 70 c2 b3 00    	cmp    0xb3c270,%esi
  806681:	75 1c                	jne    80669f <tcp_slowtmr+0x3d2>
  806683:	c7 44 24 08 88 2d 81 	movl   $0x812d88,0x8(%esp)
  80668a:	00 
  80668b:	c7 44 24 04 f4 02 00 	movl   $0x2f4,0x4(%esp)
  806692:	00 
  806693:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  80669a:	e8 ef 89 00 00       	call   80f08e <_panic>
        prev->next = pcb->next;
  80669f:	8b 46 0c             	mov    0xc(%esi),%eax
  8066a2:	89 43 0c             	mov    %eax,0xc(%ebx)
  8066a5:	eb 2d                	jmp    8066d4 <tcp_slowtmr+0x407>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  8066a7:	a1 70 c2 b3 00       	mov    0xb3c270,%eax
  8066ac:	39 f0                	cmp    %esi,%eax
  8066ae:	74 1c                	je     8066cc <tcp_slowtmr+0x3ff>
  8066b0:	c7 44 24 08 b0 2d 81 	movl   $0x812db0,0x8(%esp)
  8066b7:	00 
  8066b8:	c7 44 24 04 f8 02 00 	movl   $0x2f8,0x4(%esp)
  8066bf:	00 
  8066c0:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  8066c7:	e8 c2 89 00 00       	call   80f08e <_panic>
        tcp_tw_pcbs = pcb->next;
  8066cc:	8b 40 0c             	mov    0xc(%eax),%eax
  8066cf:	a3 70 c2 b3 00       	mov    %eax,0xb3c270
      }
      pcb2 = pcb->next;
  8066d4:	8b 7e 0c             	mov    0xc(%esi),%edi
      memp_free(MEMP_TCP_PCB, pcb);
  8066d7:	89 74 24 04          	mov    %esi,0x4(%esp)
  8066db:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8066e2:	e8 3b e3 ff ff       	call   804a22 <memp_free>
      pcb = pcb2;
  8066e7:	89 fe                	mov    %edi,%esi
  8066e9:	eb 05                	jmp    8066f0 <tcp_slowtmr+0x423>
    } else {
      prev = pcb;
  8066eb:	89 f3                	mov    %esi,%ebx
      pcb = pcb->next;
  8066ed:	8b 76 0c             	mov    0xc(%esi),%esi

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;    
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
  8066f0:	85 f6                	test   %esi,%esi
  8066f2:	0f 85 46 ff ff ff    	jne    80663e <tcp_slowtmr+0x371>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
  8066f8:	83 c4 2c             	add    $0x2c,%esp
  8066fb:	5b                   	pop    %ebx
  8066fc:	5e                   	pop    %esi
  8066fd:	5f                   	pop    %edi
  8066fe:	5d                   	pop    %ebp
  8066ff:	c3                   	ret    

00806700 <tcp_tmr>:
 * Called periodically to dispatch TCP timers.
 *
 */
void
tcp_tmr(void)
{
  806700:	55                   	push   %ebp
  806701:	89 e5                	mov    %esp,%ebp
  806703:	83 ec 08             	sub    $0x8,%esp
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  806706:	e8 24 f6 ff ff       	call   805d2f <tcp_fasttmr>

  if (++tcp_timer & 1) {
  80670b:	0f b6 05 19 54 b3 00 	movzbl 0xb35419,%eax
  806712:	83 c0 01             	add    $0x1,%eax
  806715:	a2 19 54 b3 00       	mov    %al,0xb35419
  80671a:	a8 01                	test   $0x1,%al
  80671c:	74 05                	je     806723 <tcp_tmr+0x23>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  80671e:	e8 aa fb ff ff       	call   8062cd <tcp_slowtmr>
  }
}
  806723:	c9                   	leave  
  806724:	c3                   	ret    

00806725 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
  806725:	55                   	push   %ebp
  806726:	89 e5                	mov    %esp,%ebp
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  806728:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  80672d:	03 05 08 50 81 00    	add    0x815008,%eax
  806733:	a3 08 50 81 00       	mov    %eax,0x815008
  return iss;
}
  806738:	5d                   	pop    %ebp
  806739:	c3                   	ret    

0080673a <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  80673a:	55                   	push   %ebp
  80673b:	89 e5                	mov    %esp,%ebp
  80673d:	57                   	push   %edi
  80673e:	56                   	push   %esi
  80673f:	53                   	push   %ebx
  806740:	83 ec 2c             	sub    $0x2c,%esp
  806743:	0f b6 5d 08          	movzbl 0x8(%ebp),%ebx
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = memp_malloc(MEMP_TCP_PCB);
  806747:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80674e:	e8 6f e2 ff ff       	call   8049c2 <memp_malloc>
  806753:	89 c6                	mov    %eax,%esi
  if (pcb == NULL) {
  806755:	85 c0                	test   %eax,%eax
  806757:	0f 85 b3 00 00 00    	jne    806810 <tcp_alloc+0xd6>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  80675d:	a1 70 c2 b3 00       	mov    0xb3c270,%eax
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  806762:	8b 35 60 c2 b3 00    	mov    0xb3c260,%esi
tcp_kill_timewait(void)
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  806768:	b9 00 00 00 00       	mov    $0x0,%ecx
  inactive = NULL;
  80676d:	bf 00 00 00 00       	mov    $0x0,%edi
  806772:	eb 10                	jmp    806784 <tcp_alloc+0x4a>
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  806774:	89 f2                	mov    %esi,%edx
  806776:	2b 50 2c             	sub    0x2c(%eax),%edx
  806779:	39 ca                	cmp    %ecx,%edx
  80677b:	72 04                	jb     806781 <tcp_alloc+0x47>
      inactivity = tcp_ticks - pcb->tmr;
  80677d:	89 d1                	mov    %edx,%ecx
      inactive = pcb;
  80677f:	89 c7                	mov    %eax,%edi
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  806781:	8b 40 0c             	mov    0xc(%eax),%eax
  806784:	85 c0                	test   %eax,%eax
  806786:	75 ec                	jne    806774 <tcp_alloc+0x3a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
  806788:	85 ff                	test   %edi,%edi
  80678a:	74 08                	je     806794 <tcp_alloc+0x5a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  80678c:	89 3c 24             	mov    %edi,(%esp)
  80678f:	e8 25 fa ff ff       	call   8061b9 <tcp_abort>
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = memp_malloc(MEMP_TCP_PCB);
  806794:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80679b:	e8 22 e2 ff ff       	call   8049c2 <memp_malloc>
  8067a0:	89 c6                	mov    %eax,%esi
    if (pcb == NULL) {
  8067a2:	85 c0                	test   %eax,%eax
  8067a4:	75 6a                	jne    806810 <tcp_alloc+0xd6>
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  8067a6:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  8067ab:	8b 3d 60 c2 b3 00    	mov    0xb3c260,%edi
  8067b1:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
  8067b4:	b9 7f 00 00 00       	mov    $0x7f,%ecx
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  8067b9:	bf 00 00 00 00       	mov    $0x0,%edi
  inactive = NULL;
  8067be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  8067c5:	eb 20                	jmp    8067e7 <tcp_alloc+0xad>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
  8067c7:	0f b6 50 14          	movzbl 0x14(%eax),%edx
  8067cb:	38 d3                	cmp    %dl,%bl
  8067cd:	72 15                	jb     8067e4 <tcp_alloc+0xaa>
  8067cf:	38 ca                	cmp    %cl,%dl
  8067d1:	77 11                	ja     8067e4 <tcp_alloc+0xaa>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  8067d3:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  8067d6:	2b 70 2c             	sub    0x2c(%eax),%esi
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
  8067d9:	39 fe                	cmp    %edi,%esi
  8067db:	72 07                	jb     8067e4 <tcp_alloc+0xaa>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
  8067dd:	89 d1                	mov    %edx,%ecx
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
  8067df:	89 f7                	mov    %esi,%edi
      inactive = pcb;
  8067e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  8067e4:	8b 40 0c             	mov    0xc(%eax),%eax
  8067e7:	85 c0                	test   %eax,%eax
  8067e9:	75 dc                	jne    8067c7 <tcp_alloc+0x8d>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
  8067eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
  8067ee:	85 c0                	test   %eax,%eax
  8067f0:	74 08                	je     8067fa <tcp_alloc+0xc0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  8067f2:	89 04 24             	mov    %eax,(%esp)
  8067f5:	e8 bf f9 ff ff       	call   8061b9 <tcp_abort>
    pcb = memp_malloc(MEMP_TCP_PCB);
    if (pcb == NULL) {
      /* Try killing active connections with lower priority than the new one. */
      tcp_kill_prio(prio);
      /* Try to allocate a tcp_pcb again. */
      pcb = memp_malloc(MEMP_TCP_PCB);
  8067fa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  806801:	e8 bc e1 ff ff       	call   8049c2 <memp_malloc>
  806806:	89 c6                	mov    %eax,%esi
    }
  }
  if (pcb != NULL) {
  806808:	85 c0                	test   %eax,%eax
  80680a:	0f 84 9b 00 00 00    	je     8068ab <tcp_alloc+0x171>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  806810:	c7 44 24 08 a8 00 00 	movl   $0xa8,0x8(%esp)
  806817:	00 
  806818:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80681f:	00 
  806820:	89 34 24             	mov    %esi,(%esp)
  806823:	e8 df 90 00 00       	call   80f907 <memset>
    pcb->prio = TCP_PRIO_NORMAL;
  806828:	c6 46 14 40          	movb   $0x40,0x14(%esi)
    pcb->snd_buf = TCP_SND_BUF;
  80682c:	66 c7 46 6e 40 5b    	movw   $0x5b40,0x6e(%esi)
    pcb->snd_queuelen = 0;
  806832:	66 c7 46 70 00 00    	movw   $0x0,0x70(%esi)
    pcb->rcv_wnd = TCP_WND;
  806838:	66 c7 46 28 c0 5d    	movw   $0x5dc0,0x28(%esi)
    pcb->rcv_ann_wnd = TCP_WND;
  80683e:	66 c7 46 2a c0 5d    	movw   $0x5dc0,0x2a(%esi)
    pcb->tos = 0;
  806844:	c6 46 0a 00          	movb   $0x0,0xa(%esi)
    pcb->ttl = TCP_TTL;
  806848:	c6 46 0b ff          	movb   $0xff,0xb(%esi)
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  80684c:	66 c7 46 34 18 02    	movw   $0x218,0x34(%esi)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  806852:	66 c7 46 44 06 00    	movw   $0x6,0x44(%esi)
    pcb->sa = 0;
  806858:	66 c7 46 40 00 00    	movw   $0x0,0x40(%esi)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  80685e:	66 c7 46 42 06 00    	movw   $0x6,0x42(%esi)
    pcb->rtime = -1;
  806864:	66 c7 46 32 ff ff    	movw   $0xffff,0x32(%esi)
    pcb->cwnd = 1;
  80686a:	66 c7 46 4e 01 00    	movw   $0x1,0x4e(%esi)
    iss = tcp_next_iss();
  806870:	e8 b0 fe ff ff       	call   806725 <tcp_next_iss>
    pcb->snd_wl2 = iss;
  806875:	89 46 64             	mov    %eax,0x64(%esi)
    pcb->snd_nxt = iss;
  806878:	89 46 54             	mov    %eax,0x54(%esi)
    pcb->snd_max = iss;
  80687b:	89 46 58             	mov    %eax,0x58(%esi)
    pcb->lastack = iss;
  80687e:	89 46 48             	mov    %eax,0x48(%esi)
    pcb->snd_lbb = iss;   
  806881:	89 46 68             	mov    %eax,0x68(%esi)
    pcb->tmr = tcp_ticks;
  806884:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  806889:	89 46 2c             	mov    %eax,0x2c(%esi)

    pcb->polltmr = 0;
  80688c:	c6 46 30 00          	movb   $0x0,0x30(%esi)

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  806890:	c7 86 88 00 00 00 84 	movl   $0x806184,0x88(%esi)
  806897:	61 80 00 
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  80689a:	c7 86 9c 00 00 00 00 	movl   $0x6ddd00,0x9c(%esi)
  8068a1:	dd 6d 00 
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  8068a4:	c6 86 a5 00 00 00 00 	movb   $0x0,0xa5(%esi)
  }
  return pcb;
}
  8068ab:	89 f0                	mov    %esi,%eax
  8068ad:	83 c4 2c             	add    $0x2c,%esp
  8068b0:	5b                   	pop    %ebx
  8068b1:	5e                   	pop    %esi
  8068b2:	5f                   	pop    %edi
  8068b3:	5d                   	pop    %ebp
  8068b4:	c3                   	ret    

008068b5 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  8068b5:	55                   	push   %ebp
  8068b6:	89 e5                	mov    %esp,%ebp
  8068b8:	83 ec 18             	sub    $0x18,%esp
  return tcp_alloc(TCP_PRIO_NORMAL);
  8068bb:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  8068c2:	e8 73 fe ff ff       	call   80673a <tcp_alloc>
}
  8068c7:	c9                   	leave  
  8068c8:	c3                   	ret    

008068c9 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, struct ip_addr *addr)
{
  8068c9:	55                   	push   %ebp
  8068ca:	89 e5                	mov    %esp,%ebp
  8068cc:	56                   	push   %esi
  8068cd:	53                   	push   %ebx
  8068ce:	83 ec 10             	sub    $0x10,%esp
  8068d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8068d4:	89 de                	mov    %ebx,%esi
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  8068d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  8068d9:	89 04 24             	mov    %eax,(%esp)
  8068dc:	e8 df 01 00 00       	call   806ac0 <ip_route>
  if ((outif != NULL) && (outif->mtu != 0)) {
  8068e1:	85 c0                	test   %eax,%eax
  8068e3:	74 12                	je     8068f7 <tcp_eff_send_mss+0x2e>
  8068e5:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  8068e9:	66 85 c0             	test   %ax,%ax
  8068ec:	74 09                	je     8068f7 <tcp_eff_send_mss+0x2e>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  8068ee:	8d 70 d8             	lea    -0x28(%eax),%esi
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * but we only send options with SYN and that is never filled with data! */
    sendmss = LWIP_MIN(sendmss, mss_s);
  8068f1:	66 39 f3             	cmp    %si,%bx
  8068f4:	0f 46 f3             	cmovbe %ebx,%esi
  }
  return sendmss;
}
  8068f7:	89 f0                	mov    %esi,%eax
  8068f9:	83 c4 10             	add    $0x10,%esp
  8068fc:	5b                   	pop    %ebx
  8068fd:	5e                   	pop    %esi
  8068fe:	5d                   	pop    %ebp
  8068ff:	c3                   	ret    

00806900 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port,
      err_t (* connected)(void *arg, struct tcp_pcb *tpcb, err_t err))
{
  806900:	55                   	push   %ebp
  806901:	89 e5                	mov    %esp,%ebp
  806903:	56                   	push   %esi
  806904:	53                   	push   %ebx
  806905:	83 ec 30             	sub    $0x30,%esp
  806908:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80690b:	8b 75 0c             	mov    0xc(%ebp),%esi
  80690e:	8b 45 10             	mov    0x10(%ebp),%eax
  u32_t optdata;
  err_t ret;
  u32_t iss;

  LWIP_ERROR("tcp_connect: can only connected from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  806911:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
  806915:	74 1c                	je     806933 <tcp_connect+0x33>
  806917:	c7 44 24 08 d8 2d 81 	movl   $0x812dd8,0x8(%esp)
  80691e:	00 
  80691f:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
  806926:	00 
  806927:	c7 04 24 0a 2e 81 00 	movl   $0x812e0a,(%esp)
  80692e:	e8 5b 87 00 00       	call   80f08e <_panic>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
  806933:	85 f6                	test   %esi,%esi
  806935:	0f 84 2a 01 00 00    	je     806a65 <tcp_connect+0x165>
    pcb->remote_ip = *ipaddr;
  80693b:	8b 16                	mov    (%esi),%edx
  80693d:	89 53 04             	mov    %edx,0x4(%ebx)
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
  806940:	66 89 43 1e          	mov    %ax,0x1e(%ebx)
  if (pcb->local_port == 0) {
  806944:	66 83 7b 1c 00       	cmpw   $0x0,0x1c(%ebx)
  806949:	75 09                	jne    806954 <tcp_connect+0x54>
    pcb->local_port = tcp_new_port();
  80694b:	e8 2a f0 ff ff       	call   80597a <tcp_new_port>
  806950:	66 89 43 1c          	mov    %ax,0x1c(%ebx)
  }
  iss = tcp_next_iss();
  806954:	e8 cc fd ff ff       	call   806725 <tcp_next_iss>
  pcb->rcv_nxt = 0;
  806959:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
  pcb->snd_nxt = iss;
  806960:	89 43 54             	mov    %eax,0x54(%ebx)
  pcb->lastack = iss - 1;
  806963:	83 e8 01             	sub    $0x1,%eax
  806966:	89 43 48             	mov    %eax,0x48(%ebx)
  pcb->snd_lbb = iss - 1;
  806969:	89 43 68             	mov    %eax,0x68(%ebx)
  pcb->rcv_wnd = TCP_WND;
  80696c:	66 c7 43 28 c0 5d    	movw   $0x5dc0,0x28(%ebx)
  pcb->rcv_ann_wnd = TCP_WND;
  806972:	66 c7 43 2a c0 5d    	movw   $0x5dc0,0x2a(%ebx)
  pcb->snd_wnd = TCP_WND;
  806978:	66 c7 43 5c c0 5d    	movw   $0x5dc0,0x5c(%ebx)
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  80697e:	66 c7 43 34 18 02    	movw   $0x218,0x34(%ebx)
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
  806984:	89 74 24 04          	mov    %esi,0x4(%esp)
  806988:	c7 04 24 18 02 00 00 	movl   $0x218,(%esp)
  80698f:	e8 35 ff ff ff       	call   8068c9 <tcp_eff_send_mss>
  806994:	66 89 43 34          	mov    %ax,0x34(%ebx)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  806998:	66 c7 43 4e 01 00    	movw   $0x1,0x4e(%ebx)
  pcb->ssthresh = pcb->mss * 10;
  80699e:	8d 04 80             	lea    (%eax,%eax,4),%eax
  8069a1:	01 c0                	add    %eax,%eax
  8069a3:	66 89 43 50          	mov    %ax,0x50(%ebx)
  pcb->state = SYN_SENT;
  8069a7:	c7 43 10 02 00 00 00 	movl   $0x2,0x10(%ebx)
#if LWIP_CALLBACK_API  
  pcb->connected = connected;
  8069ae:	8b 45 14             	mov    0x14(%ebp),%eax
  8069b1:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
#endif /* LWIP_CALLBACK_API */
  TCP_RMV(&tcp_bound_pcbs, pcb);
  8069b7:	8b 15 6c c2 b3 00    	mov    0xb3c26c,%edx
  8069bd:	39 da                	cmp    %ebx,%edx
  8069bf:	75 0a                	jne    8069cb <tcp_connect+0xcb>
  8069c1:	8b 42 0c             	mov    0xc(%edx),%eax
  8069c4:	a3 6c c2 b3 00       	mov    %eax,0xb3c26c
  8069c9:	eb 2d                	jmp    8069f8 <tcp_connect+0xf8>
  8069cb:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  8069d1:	eb 1b                	jmp    8069ee <tcp_connect+0xee>
  8069d3:	8b 42 0c             	mov    0xc(%edx),%eax
  8069d6:	85 c0                	test   %eax,%eax
  8069d8:	74 12                	je     8069ec <tcp_connect+0xec>
  8069da:	39 c3                	cmp    %eax,%ebx
  8069dc:	75 0e                	jne    8069ec <tcp_connect+0xec>
  8069de:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  8069e4:	8b 43 0c             	mov    0xc(%ebx),%eax
  8069e7:	89 42 0c             	mov    %eax,0xc(%edx)
  8069ea:	eb 0c                	jmp    8069f8 <tcp_connect+0xf8>
  8069ec:	89 c2                	mov    %eax,%edx
  8069ee:	85 d2                	test   %edx,%edx
  8069f0:	75 e1                	jne    8069d3 <tcp_connect+0xd3>
  8069f2:	89 15 68 c2 b3 00    	mov    %edx,0xb3c268
  TCP_REG(&tcp_active_pcbs, pcb);
  8069f8:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  8069fd:	89 43 0c             	mov    %eax,0xc(%ebx)
  806a00:	89 1d 5c c2 b3 00    	mov    %ebx,0xb3c25c
  806a06:	e8 47 bb ff ff       	call   802552 <tcp_timer_needed>

  snmp_inc_tcpactiveopens();
  
  /* Build an MSS option */
  optdata = TCP_BUILD_MSS_OPTION();
  806a0b:	c7 04 24 b4 05 04 02 	movl   $0x20405b4,(%esp)
  806a12:	e8 59 13 00 00       	call   807d70 <htonl>
  806a17:	89 45 f4             	mov    %eax,-0xc(%ebp)

  ret = tcp_enqueue(pcb, NULL, 0, TCP_SYN, 0, (u8_t *)&optdata, 4);
  806a1a:	c7 44 24 18 04 00 00 	movl   $0x4,0x18(%esp)
  806a21:	00 
  806a22:	8d 45 f4             	lea    -0xc(%ebp),%eax
  806a25:	89 44 24 14          	mov    %eax,0x14(%esp)
  806a29:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  806a30:	00 
  806a31:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
  806a38:	00 
  806a39:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  806a40:	00 
  806a41:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  806a48:	00 
  806a49:	89 1c 24             	mov    %ebx,(%esp)
  806a4c:	e8 6f 15 00 00       	call   807fc0 <tcp_enqueue>
  806a51:	89 c6                	mov    %eax,%esi
  if (ret == ERR_OK) { 
  806a53:	89 f1                	mov    %esi,%ecx
  806a55:	84 c9                	test   %cl,%cl
  806a57:	75 11                	jne    806a6a <tcp_connect+0x16a>
    tcp_output(pcb);
  806a59:	89 1c 24             	mov    %ebx,(%esp)
  806a5c:	e8 e0 1c 00 00       	call   808741 <tcp_output>
  }
  return ret;
  806a61:	89 f0                	mov    %esi,%eax
  806a63:	eb 05                	jmp    806a6a <tcp_connect+0x16a>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
  806a65:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  ret = tcp_enqueue(pcb, NULL, 0, TCP_SYN, 0, (u8_t *)&optdata, 4);
  if (ret == ERR_OK) { 
    tcp_output(pcb);
  }
  return ret;
} 
  806a6a:	83 c4 30             	add    $0x30,%esp
  806a6d:	5b                   	pop    %ebx
  806a6e:	5e                   	pop    %esi
  806a6f:	5d                   	pop    %ebp
  806a70:	c3                   	ret    

00806a71 <ip_addr_isbroadcast>:
 * @param addr address to be checked
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t ip_addr_isbroadcast(struct ip_addr *addr, struct netif *netif)
{
  806a71:	55                   	push   %ebp
  806a72:	89 e5                	mov    %esp,%ebp
  806a74:	53                   	push   %ebx
  806a75:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  u32_t addr2test;

  addr2test = addr->addr;
  806a78:	8b 45 08             	mov    0x8(%ebp),%eax
  806a7b:	8b 10                	mov    (%eax),%edx
  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr2test == IP_ADDR_ANY_VALUE) ||
  806a7d:	8d 5a ff             	lea    -0x1(%edx),%ebx
      (addr2test == IP_ADDR_ANY_VALUE))
    return 1;
  806a80:	b8 01 00 00 00       	mov    $0x1,%eax
{
  u32_t addr2test;

  addr2test = addr->addr;
  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr2test == IP_ADDR_ANY_VALUE) ||
  806a85:	83 fb fd             	cmp    $0xfffffffd,%ebx
  806a88:	77 32                	ja     806abc <ip_addr_isbroadcast+0x4b>
    return 1;
  /* no broadcast support on this network interface? */
  else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0)
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  806a8a:	b8 00 00 00 00       	mov    $0x0,%eax
  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr2test == IP_ADDR_ANY_VALUE) ||
      (addr2test == IP_ADDR_ANY_VALUE))
    return 1;
  /* no broadcast support on this network interface? */
  else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0)
  806a8f:	f6 41 2e 02          	testb  $0x2,0x2e(%ecx)
  806a93:	74 27                	je     806abc <ip_addr_isbroadcast+0x4b>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  else if (addr2test == netif->ip_addr.addr)
  806a95:	8b 41 04             	mov    0x4(%ecx),%eax
  806a98:	39 d0                	cmp    %edx,%eax
  806a9a:	74 1b                	je     806ab7 <ip_addr_isbroadcast+0x46>
    return 0;
  /*  on the same (sub) network... */
  else if (ip_addr_netcmp(addr, &(netif->ip_addr), &(netif->netmask))
  806a9c:	8b 49 08             	mov    0x8(%ecx),%ecx
  806a9f:	31 d0                	xor    %edx,%eax
  806aa1:	89 c3                	mov    %eax,%ebx
          && ((addr2test & ~netif->netmask.addr) ==
           (IP_ADDR_BROADCAST_VALUE & ~netif->netmask.addr)))
    /* => network broadcast address */
    return 1;
  else
    return 0;
  806aa3:	b8 00 00 00 00       	mov    $0x0,%eax
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  else if (addr2test == netif->ip_addr.addr)
    return 0;
  /*  on the same (sub) network... */
  else if (ip_addr_netcmp(addr, &(netif->ip_addr), &(netif->netmask))
  806aa8:	85 cb                	test   %ecx,%ebx
  806aaa:	75 10                	jne    806abc <ip_addr_isbroadcast+0x4b>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr2test & ~netif->netmask.addr) ==
  806aac:	f7 d1                	not    %ecx
  806aae:	21 ca                	and    %ecx,%edx
  806ab0:	39 d1                	cmp    %edx,%ecx
  806ab2:	0f 94 c0             	sete   %al
  806ab5:	eb 05                	jmp    806abc <ip_addr_isbroadcast+0x4b>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  else if (addr2test == netif->ip_addr.addr)
    return 0;
  806ab7:	b8 00 00 00 00       	mov    $0x0,%eax
           (IP_ADDR_BROADCAST_VALUE & ~netif->netmask.addr)))
    /* => network broadcast address */
    return 1;
  else
    return 0;
}
  806abc:	5b                   	pop    %ebx
  806abd:	5d                   	pop    %ebp
  806abe:	c3                   	ret    
  806abf:	90                   	nop

00806ac0 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(struct ip_addr *dest)
{
  806ac0:	55                   	push   %ebp
  806ac1:	89 e5                	mov    %esp,%ebp
  806ac3:	56                   	push   %esi
  806ac4:	53                   	push   %ebx
  806ac5:	83 ec 10             	sub    $0x10,%esp
  806ac8:	8b 75 08             	mov    0x8(%ebp),%esi
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
  806acb:	8b 1d 54 c2 b3 00    	mov    0xb3c254,%ebx
  806ad1:	eb 18                	jmp    806aeb <ip_route+0x2b>
    /* network mask matches? */
    if (netif_is_up(netif)) {
  806ad3:	89 1c 24             	mov    %ebx,(%esp)
  806ad6:	e8 02 e2 ff ff       	call   804cdd <netif_is_up>
  806adb:	84 c0                	test   %al,%al
  806add:	74 0a                	je     806ae9 <ip_route+0x29>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  806adf:	8b 43 04             	mov    0x4(%ebx),%eax
  806ae2:	33 06                	xor    (%esi),%eax
  806ae4:	85 43 08             	test   %eax,0x8(%ebx)
  806ae7:	74 27                	je     806b10 <ip_route+0x50>
ip_route(struct ip_addr *dest)
{
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
  806ae9:	8b 1b                	mov    (%ebx),%ebx
  806aeb:	85 db                	test   %ebx,%ebx
  806aed:	75 e4                	jne    806ad3 <ip_route+0x13>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  806aef:	a1 58 c2 b3 00       	mov    0xb3c258,%eax
  806af4:	85 c0                	test   %eax,%eax
  806af6:	74 1c                	je     806b14 <ip_route+0x54>
  806af8:	89 04 24             	mov    %eax,(%esp)
  806afb:	e8 dd e1 ff ff       	call   804cdd <netif_is_up>
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  }
  /* no matching netif found, use default netif */
  return netif_default;
  806b00:	84 c0                	test   %al,%al
  806b02:	b8 00 00 00 00       	mov    $0x0,%eax
  806b07:	0f 45 05 58 c2 b3 00 	cmovne 0xb3c258,%eax
  806b0e:	eb 09                	jmp    806b19 <ip_route+0x59>
  806b10:	89 d8                	mov    %ebx,%eax
  806b12:	eb 05                	jmp    806b19 <ip_route+0x59>
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    LWIP_DEBUGF(IP_DEBUG | 2, ("ip_route: No route to 0x%"X32_F"\n", dest->addr));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  806b14:	b8 00 00 00 00       	mov    $0x0,%eax
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  806b19:	83 c4 10             	add    $0x10,%esp
  806b1c:	5b                   	pop    %ebx
  806b1d:	5e                   	pop    %esi
  806b1e:	5d                   	pop    %ebp
  806b1f:	c3                   	ret    

00806b20 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  806b20:	55                   	push   %ebp
  806b21:	89 e5                	mov    %esp,%ebp
  806b23:	57                   	push   %edi
  806b24:	56                   	push   %esi
  806b25:	53                   	push   %ebx
  806b26:	83 ec 2c             	sub    $0x2c,%esp

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = p->payload;
  806b29:	8b 45 08             	mov    0x8(%ebp),%eax
  806b2c:	8b 70 04             	mov    0x4(%eax),%esi
  if (IPH_V(iphdr) != 4) {
  806b2f:	0f b7 06             	movzwl (%esi),%eax
  806b32:	89 04 24             	mov    %eax,(%esp)
  806b35:	e8 29 12 00 00       	call   807d63 <ntohs>
  806b3a:	66 c1 e8 0c          	shr    $0xc,%ax
  806b3e:	66 83 f8 04          	cmp    $0x4,%ax
  806b42:	74 10                	je     806b54 <ip_input+0x34>
    LWIP_DEBUGF(IP_DEBUG | 1, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  806b44:	8b 45 08             	mov    0x8(%ebp),%eax
  806b47:	89 04 24             	mov    %eax,(%esp)
  806b4a:	e8 85 e2 ff ff       	call   804dd4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  806b4f:	e9 9d 02 00 00       	jmp    806df1 <ip_input+0x2d1>
  }

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  806b54:	0f b7 06             	movzwl (%esi),%eax
  806b57:	89 04 24             	mov    %eax,(%esp)
  806b5a:	e8 04 12 00 00       	call   807d63 <ntohs>
  806b5f:	66 c1 e8 06          	shr    $0x6,%ax
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  806b63:	83 e0 3c             	and    $0x3c,%eax
  806b66:	89 c7                	mov    %eax,%edi
  806b68:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  806b6c:	0f b7 46 02          	movzwl 0x2(%esi),%eax
  806b70:	89 04 24             	mov    %eax,(%esp)
  806b73:	e8 eb 11 00 00       	call   807d63 <ntohs>
  806b78:	89 c3                	mov    %eax,%ebx

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  806b7a:	8b 55 08             	mov    0x8(%ebp),%edx
  806b7d:	66 3b 7a 0a          	cmp    0xa(%edx),%di
  806b81:	77 06                	ja     806b89 <ip_input+0x69>
  806b83:	66 3b 5a 08          	cmp    0x8(%edx),%bx
  806b87:	76 10                	jbe    806b99 <ip_input+0x79>
    if (iphdr_len > p->tot_len)
    LWIP_DEBUGF(IP_DEBUG | 2, ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), "
                               "IP packet dropped.\n",
                               iphdr_len, p->tot_len));
    /* free (drop) packet pbufs */
    pbuf_free(p);
  806b89:	8b 45 08             	mov    0x8(%ebp),%eax
  806b8c:	89 04 24             	mov    %eax,(%esp)
  806b8f:	e8 40 e2 ff ff       	call   804dd4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
  806b94:	e9 58 02 00 00       	jmp    806df1 <ip_input+0x2d1>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  806b99:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
  806b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
  806ba1:	89 34 24             	mov    %esi,(%esp)
  806ba4:	e8 58 10 00 00       	call   807c01 <inet_chksum>
  806ba9:	66 85 c0             	test   %ax,%ax
  806bac:	74 10                	je     806bbe <ip_input+0x9e>

    LWIP_DEBUGF(IP_DEBUG | 2, ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
  806bae:	8b 45 08             	mov    0x8(%ebp),%eax
  806bb1:	89 04 24             	mov    %eax,(%esp)
  806bb4:	e8 1b e2 ff ff       	call   804dd4 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  806bb9:	e9 33 02 00 00       	jmp    806df1 <ip_input+0x2d1>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  806bbe:	0f b7 db             	movzwl %bx,%ebx
  806bc1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  806bc5:	8b 45 08             	mov    0x8(%ebp),%eax
  806bc8:	89 04 24             	mov    %eax,(%esp)
  806bcb:	e8 76 e5 ff ff       	call   805146 <pbuf_realloc>
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
    netif = inp;
  806bd0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  806bd3:	bf 01 00 00 00       	mov    $0x1,%edi
      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&(iphdr->dest), &(netif->ip_addr)) ||
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&(iphdr->dest), netif)) {
  806bd8:	8d 46 10             	lea    0x10(%esi),%eax
  806bdb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  806bde:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  806be1:	89 de                	mov    %ebx,%esi
          iphdr->dest.addr & netif->netmask.addr,
          netif->ip_addr.addr & netif->netmask.addr,
          iphdr->dest.addr & ~(netif->netmask.addr)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  806be3:	89 1c 24             	mov    %ebx,(%esp)
  806be6:	e8 f2 e0 ff ff       	call   804cdd <netif_is_up>
  806beb:	84 c0                	test   %al,%al
  806bed:	74 27                	je     806c16 <ip_input+0xf6>
  806bef:	83 fb fc             	cmp    $0xfffffffc,%ebx
  806bf2:	74 22                	je     806c16 <ip_input+0xf6>
  806bf4:	8b 43 04             	mov    0x4(%ebx),%eax
  806bf7:	85 c0                	test   %eax,%eax
  806bf9:	74 1b                	je     806c16 <ip_input+0xf6>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&(iphdr->dest), &(netif->ip_addr)) ||
  806bfb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  806bfe:	3b 41 10             	cmp    0x10(%ecx),%eax
  806c01:	74 32                	je     806c35 <ip_input+0x115>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&(iphdr->dest), netif)) {
  806c03:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  806c07:	8b 45 dc             	mov    -0x24(%ebp),%eax
  806c0a:	89 04 24             	mov    %eax,(%esp)
  806c0d:	e8 5f fe ff ff       	call   806a71 <ip_addr_isbroadcast>
          iphdr->dest.addr & ~(netif->netmask.addr)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&(iphdr->dest), &(netif->ip_addr)) ||
  806c12:	84 c0                	test   %al,%al
  806c14:	75 26                	jne    806c3c <ip_input+0x11c>
              netif->name[0], netif->name[1]));
          /* break out of for loop */
          break;
        }
      }
      if (first) {
  806c16:	85 ff                	test   %edi,%edi
  806c18:	74 08                	je     806c22 <ip_input+0x102>
        first = 0;
        netif = netif_list;
  806c1a:	8b 1d 54 c2 b3 00    	mov    0xb3c254,%ebx
  806c20:	eb 02                	jmp    806c24 <ip_input+0x104>
      } else {
        netif = netif->next;
  806c22:	8b 1b                	mov    (%ebx),%ebx
      }
      if (netif == inp) {
  806c24:	39 f3                	cmp    %esi,%ebx
  806c26:	75 02                	jne    806c2a <ip_input+0x10a>
        netif = netif->next;
  806c28:	8b 1e                	mov    (%esi),%ebx
      }
    } while(netif != NULL);
  806c2a:	85 db                	test   %ebx,%ebx
  806c2c:	74 1d                	je     806c4b <ip_input+0x12b>
  806c2e:	bf 00 00 00 00       	mov    $0x0,%edi
  806c33:	eb ae                	jmp    806be3 <ip_input+0xc3>
  806c35:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  806c38:	89 d8                	mov    %ebx,%eax
  806c3a:	eb 05                	jmp    806c41 <ip_input+0x121>
  806c3c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  806c3f:	89 d8                	mov    %ebx,%eax
#if LWIP_DHCP
  /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
   * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
   * According to RFC 1542 section 3.1.1, referred by RFC 2131).
   */
  if (netif == NULL) {
  806c41:	85 c0                	test   %eax,%eax
  806c43:	0f 85 89 01 00 00    	jne    806dd2 <ip_input+0x2b2>
  806c49:	eb 03                	jmp    806c4e <ip_input+0x12e>
  806c4b:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  806c4e:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  806c52:	89 04 24             	mov    %eax,(%esp)
  806c55:	e8 09 11 00 00       	call   807d63 <ntohs>
  806c5a:	bb 00 00 00 00       	mov    $0x0,%ebx
  806c5f:	3c 11                	cmp    $0x11,%al
  806c61:	0f 85 6b 01 00 00    	jne    806dd2 <ip_input+0x2b2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | 1, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(((struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen))->dest)));
      if (ntohs(((struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen))->dest) == DHCP_CLIENT_PORT) {
  806c67:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
  806c6b:	0f b7 44 06 02       	movzwl 0x2(%esi,%eax,1),%eax
  806c70:	89 04 24             	mov    %eax,(%esp)
  806c73:	e8 eb 10 00 00       	call   807d63 <ntohs>
  806c78:	66 83 f8 44          	cmp    $0x44,%ax
  806c7c:	74 36                	je     806cb4 <ip_input+0x194>
  806c7e:	e9 4f 01 00 00       	jmp    806dd2 <ip_input+0x2b2>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_DHCP
  if (check_ip_src)
#endif /* LWIP_DHCP */
  {  if ((ip_addr_isbroadcast(&(iphdr->src), inp)) ||
         (ip_addr_ismulticast(&(iphdr->src)))) {
  806c83:	8b 7e 0c             	mov    0xc(%esi),%edi
  806c86:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  806c8d:	e8 18 13 00 00       	call   807faa <ntohl>
  806c92:	21 c7                	and    %eax,%edi
  806c94:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  806c9b:	e8 0a 13 00 00       	call   807faa <ntohl>

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_DHCP
  if (check_ip_src)
#endif /* LWIP_DHCP */
  {  if ((ip_addr_isbroadcast(&(iphdr->src), inp)) ||
  806ca0:	39 c7                	cmp    %eax,%edi
  806ca2:	75 13                	jne    806cb7 <ip_input+0x197>
         (ip_addr_ismulticast(&(iphdr->src)))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | 1, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  806ca4:	8b 45 08             	mov    0x8(%ebp),%eax
  806ca7:	89 04 24             	mov    %eax,(%esp)
  806caa:	e8 25 e1 ff ff       	call   804dd4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
  806caf:	e9 3d 01 00 00       	jmp    806df1 <ip_input+0x2d1>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | 1, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(((struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen))->dest)));
      if (ntohs(((struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen))->dest) == DHCP_CLIENT_PORT) {
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | 1, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
  806cb4:	8b 5d 0c             	mov    0xc(%ebp),%ebx
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  806cb7:	85 db                	test   %ebx,%ebx
  806cb9:	75 10                	jne    806ccb <ip_input+0x1ab>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  806cbb:	8b 45 08             	mov    0x8(%ebp),%eax
  806cbe:	89 04 24             	mov    %eax,(%esp)
  806cc1:	e8 0e e1 ff ff       	call   804dd4 <pbuf_free>
    return ERR_OK;
  806cc6:	e9 26 01 00 00       	jmp    806df1 <ip_input+0x2d1>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & htons(IP_OFFMASK | IP_MF)) != 0) {
  806ccb:	0f b7 5e 06          	movzwl 0x6(%esi),%ebx
  806ccf:	c7 04 24 ff 3f 00 00 	movl   $0x3fff,(%esp)
  806cd6:	e8 7b 10 00 00       	call   807d56 <htons>
  806cdb:	66 85 d8             	test   %bx,%ax
  806cde:	74 19                	je     806cf9 <ip_input+0x1d9>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & htons(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  806ce0:	8b 45 08             	mov    0x8(%ebp),%eax
  806ce3:	89 04 24             	mov    %eax,(%esp)
  806ce6:	e8 52 05 00 00       	call   80723d <ip_reass>
  806ceb:	89 45 08             	mov    %eax,0x8(%ebp)
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  806cee:	85 c0                	test   %eax,%eax
  806cf0:	0f 84 fb 00 00 00    	je     806df1 <ip_input+0x2d1>
      return ERR_OK;
    }
    iphdr = p->payload;
  806cf6:	8b 70 04             	mov    0x4(%eax),%esi
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  806cf9:	8b 45 0c             	mov    0xc(%ebp),%eax
  806cfc:	89 44 24 04          	mov    %eax,0x4(%esp)
  806d00:	8b 45 08             	mov    0x8(%ebp),%eax
  806d03:	89 04 24             	mov    %eax,(%esp)
  806d06:	e8 be 7a 00 00       	call   80e7c9 <raw_input>
  806d0b:	84 c0                	test   %al,%al
  806d0d:	0f 85 de 00 00 00    	jne    806df1 <ip_input+0x2d1>
#endif /* LWIP_RAW */
  {

    switch (IPH_PROTO(iphdr)) {
  806d13:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  806d17:	89 04 24             	mov    %eax,(%esp)
  806d1a:	e8 44 10 00 00       	call   807d63 <ntohs>
  806d1f:	0f b6 c0             	movzbl %al,%eax
  806d22:	66 83 f8 06          	cmp    $0x6,%ax
  806d26:	74 25                	je     806d4d <ip_input+0x22d>
  806d28:	66 83 f8 11          	cmp    $0x11,%ax
  806d2c:	74 08                	je     806d36 <ip_input+0x216>
  806d2e:	66 83 f8 01          	cmp    $0x1,%ax
  806d32:	75 44                	jne    806d78 <ip_input+0x258>
  806d34:	eb 2e                	jmp    806d64 <ip_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
  806d36:	8b 45 0c             	mov    0xc(%ebp),%eax
  806d39:	89 44 24 04          	mov    %eax,0x4(%esp)
  806d3d:	8b 45 08             	mov    0x8(%ebp),%eax
  806d40:	89 04 24             	mov    %eax,(%esp)
  806d43:	e8 58 23 00 00       	call   8090a0 <udp_input>
      break;
  806d48:	e9 a4 00 00 00       	jmp    806df1 <ip_input+0x2d1>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
  806d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
  806d50:	89 44 24 04          	mov    %eax,0x4(%esp)
  806d54:	8b 45 08             	mov    0x8(%ebp),%eax
  806d57:	89 04 24             	mov    %eax,(%esp)
  806d5a:	e8 29 6d 00 00       	call   80da88 <tcp_input>
      break;
  806d5f:	e9 8d 00 00 00       	jmp    806df1 <ip_input+0x2d1>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
  806d64:	8b 45 0c             	mov    0xc(%ebp),%eax
  806d67:	89 44 24 04          	mov    %eax,0x4(%esp)
  806d6b:	8b 45 08             	mov    0x8(%ebp),%eax
  806d6e:	89 04 24             	mov    %eax,(%esp)
  806d71:	e8 4a 7d 00 00       	call   80eac0 <icmp_input>
      break;
  806d76:	eb 79                	jmp    806df1 <ip_input+0x2d1>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&(iphdr->dest), inp) &&
  806d78:	8b 45 0c             	mov    0xc(%ebp),%eax
  806d7b:	89 44 24 04          	mov    %eax,0x4(%esp)
  806d7f:	8d 46 10             	lea    0x10(%esi),%eax
  806d82:	89 04 24             	mov    %eax,(%esp)
  806d85:	e8 e7 fc ff ff       	call   806a71 <ip_addr_isbroadcast>
  806d8a:	84 c0                	test   %al,%al
  806d8c:	75 37                	jne    806dc5 <ip_input+0x2a5>
          !ip_addr_ismulticast(&(iphdr->dest))) {
  806d8e:	8b 5e 10             	mov    0x10(%esi),%ebx
  806d91:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  806d98:	e8 0d 12 00 00       	call   807faa <ntohl>
  806d9d:	21 c3                	and    %eax,%ebx
  806d9f:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  806da6:	e8 ff 11 00 00       	call   807faa <ntohl>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&(iphdr->dest), inp) &&
  806dab:	39 c3                	cmp    %eax,%ebx
  806dad:	74 16                	je     806dc5 <ip_input+0x2a5>
          !ip_addr_ismulticast(&(iphdr->dest))) {
        p->payload = iphdr;
  806daf:	8b 45 08             	mov    0x8(%ebp),%eax
  806db2:	89 70 04             	mov    %esi,0x4(%eax)
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  806db5:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  806dbc:	00 
  806dbd:	89 04 24             	mov    %eax,(%esp)
  806dc0:	e8 40 80 00 00       	call   80ee05 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  806dc5:	8b 45 08             	mov    0x8(%ebp),%eax
  806dc8:	89 04 24             	mov    %eax,(%esp)
  806dcb:	e8 04 e0 ff ff       	call   804dd4 <pbuf_free>
  806dd0:	eb 1f                	jmp    806df1 <ip_input+0x2d1>

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_DHCP
  if (check_ip_src)
#endif /* LWIP_DHCP */
  {  if ((ip_addr_isbroadcast(&(iphdr->src), inp)) ||
  806dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
  806dd5:	89 44 24 04          	mov    %eax,0x4(%esp)
  806dd9:	8d 46 0c             	lea    0xc(%esi),%eax
  806ddc:	89 04 24             	mov    %eax,(%esp)
  806ddf:	e8 8d fc ff ff       	call   806a71 <ip_addr_isbroadcast>
  806de4:	84 c0                	test   %al,%al
  806de6:	0f 84 97 fe ff ff    	je     806c83 <ip_input+0x163>
  806dec:	e9 b3 fe ff ff       	jmp    806ca4 <ip_input+0x184>
      snmp_inc_ipinunknownprotos();
    }
  }

  return ERR_OK;
}
  806df1:	b8 00 00 00 00       	mov    $0x0,%eax
  806df6:	83 c4 2c             	add    $0x2c,%esp
  806df9:	5b                   	pop    %ebx
  806dfa:	5e                   	pop    %esi
  806dfb:	5f                   	pop    %edi
  806dfc:	5d                   	pop    %ebp
  806dfd:	c3                   	ret    

00806dfe <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  806dfe:	55                   	push   %ebp
  806dff:	89 e5                	mov    %esp,%ebp
  806e01:	57                   	push   %edi
  806e02:	56                   	push   %esi
  806e03:	53                   	push   %ebx
  806e04:	83 ec 2c             	sub    $0x2c,%esp
  806e07:	8b 75 08             	mov    0x8(%ebp),%esi
  806e0a:	8b 7d 14             	mov    0x14(%ebp),%edi
  806e0d:	8b 45 18             	mov    0x18(%ebp),%eax
  806e10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  806e13:	8b 45 1c             	mov    0x1c(%ebp),%eax
  806e16:	89 45 e0             	mov    %eax,-0x20(%ebp)
  static u16_t ip_id = 0;

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  806e19:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  806e1d:	0f 84 17 01 00 00    	je     806f3a <ip_output_if+0x13c>
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  806e23:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  806e2a:	00 
  806e2b:	89 34 24             	mov    %esi,(%esp)
  806e2e:	e8 bd de ff ff       	call   804cf0 <pbuf_header>
  806e33:	84 c0                	test   %al,%al
  806e35:	0f 85 48 01 00 00    	jne    806f83 <ip_output_if+0x185>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = p->payload;
  806e3b:	8b 5e 04             	mov    0x4(%esi),%ebx
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  806e3e:	66 83 7e 0a 13       	cmpw   $0x13,0xa(%esi)
  806e43:	77 1c                	ja     806e61 <ip_output_if+0x63>
  806e45:	c7 44 24 08 a4 2e 81 	movl   $0x812ea4,0x8(%esp)
  806e4c:	00 
  806e4d:	c7 44 24 04 ee 01 00 	movl   $0x1ee,0x4(%esp)
  806e54:	00 
  806e55:	c7 04 24 d1 2e 81 00 	movl   $0x812ed1,(%esp)
  806e5c:	e8 2d 82 00 00       	call   80f08e <_panic>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  806e61:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  806e65:	89 04 24             	mov    %eax,(%esp)
  806e68:	e8 f6 0e 00 00       	call   807d63 <ntohs>
  806e6d:	0f b6 c0             	movzbl %al,%eax
  806e70:	c1 e7 08             	shl    $0x8,%edi
  806e73:	09 c7                	or     %eax,%edi
  806e75:	0f b7 ff             	movzwl %di,%edi
  806e78:	89 3c 24             	mov    %edi,(%esp)
  806e7b:	e8 d6 0e 00 00       	call   807d56 <htons>
  806e80:	66 89 43 08          	mov    %ax,0x8(%ebx)
    IPH_PROTO_SET(iphdr, proto);
  806e84:	0f b7 c0             	movzwl %ax,%eax
  806e87:	89 04 24             	mov    %eax,(%esp)
  806e8a:	e8 d4 0e 00 00       	call   807d63 <ntohs>
  806e8f:	25 00 ff 00 00       	and    $0xff00,%eax
  806e94:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
  806e98:	09 d0                	or     %edx,%eax
  806e9a:	0f b7 c0             	movzwl %ax,%eax
  806e9d:	89 04 24             	mov    %eax,(%esp)
  806ea0:	e8 b1 0e 00 00       	call   807d56 <htons>
  806ea5:	66 89 43 08          	mov    %ax,0x8(%ebx)

    ip_addr_set(&(iphdr->dest), dest);
  806ea9:	8b 45 10             	mov    0x10(%ebp),%eax
  806eac:	8b 00                	mov    (%eax),%eax
  806eae:	89 43 10             	mov    %eax,0x10(%ebx)

    IPH_VHLTOS_SET(iphdr, 4, IP_HLEN / 4, tos);
  806eb1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  806eb5:	80 cc 45             	or     $0x45,%ah
  806eb8:	89 04 24             	mov    %eax,(%esp)
  806ebb:	e8 96 0e 00 00       	call   807d56 <htons>
  806ec0:	66 89 03             	mov    %ax,(%ebx)
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  806ec3:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  806ec7:	89 04 24             	mov    %eax,(%esp)
  806eca:	e8 87 0e 00 00       	call   807d56 <htons>
  806ecf:	66 89 43 02          	mov    %ax,0x2(%ebx)
    IPH_OFFSET_SET(iphdr, 0);
  806ed3:	66 c7 43 06 00 00    	movw   $0x0,0x6(%ebx)
    IPH_ID_SET(iphdr, htons(ip_id));
  806ed9:	0f b7 05 1a 54 b3 00 	movzwl 0xb3541a,%eax
  806ee0:	89 04 24             	mov    %eax,(%esp)
  806ee3:	e8 6e 0e 00 00       	call   807d56 <htons>
  806ee8:	66 89 43 04          	mov    %ax,0x4(%ebx)
    ++ip_id;
  806eec:	66 83 05 1a 54 b3 00 	addw   $0x1,0xb3541a
  806ef3:	01 

    if (ip_addr_isany(src)) {
  806ef4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  806ef8:	74 09                	je     806f03 <ip_output_if+0x105>
  806efa:	8b 45 0c             	mov    0xc(%ebp),%eax
  806efd:	8b 00                	mov    (%eax),%eax
  806eff:	85 c0                	test   %eax,%eax
  806f01:	75 18                	jne    806f1b <ip_output_if+0x11d>
      ip_addr_set(&(iphdr->src), &(netif->ip_addr));
  806f03:	83 7d 20 fc          	cmpl   $0xfffffffc,0x20(%ebp)
  806f07:	74 08                	je     806f11 <ip_output_if+0x113>
  806f09:	8b 45 20             	mov    0x20(%ebp),%eax
  806f0c:	8b 40 04             	mov    0x4(%eax),%eax
  806f0f:	eb 05                	jmp    806f16 <ip_output_if+0x118>
  806f11:	b8 00 00 00 00       	mov    $0x0,%eax
  806f16:	89 43 0c             	mov    %eax,0xc(%ebx)
  806f19:	eb 03                	jmp    806f1e <ip_output_if+0x120>
    } else {
      ip_addr_set(&(iphdr->src), src);
  806f1b:	89 43 0c             	mov    %eax,0xc(%ebx)
    }

    IPH_CHKSUM_SET(iphdr, 0);
  806f1e:	66 c7 43 0a 00 00    	movw   $0x0,0xa(%ebx)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  806f24:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  806f2b:	00 
  806f2c:	89 1c 24             	mov    %ebx,(%esp)
  806f2f:	e8 cd 0c 00 00       	call   807c01 <inet_chksum>
  806f34:	66 89 43 0a          	mov    %ax,0xa(%ebx)
  806f38:	eb 09                	jmp    806f43 <ip_output_if+0x145>
#endif
  } else {
    /* IP header already included in p */
    iphdr = p->payload;
    dest = &(iphdr->dest);
  806f3a:	8b 46 04             	mov    0x4(%esi),%eax
  806f3d:	83 c0 10             	add    $0x10,%eax
  806f40:	89 45 10             	mov    %eax,0x10(%ebp)
  }

#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu))
  806f43:	8b 45 20             	mov    0x20(%ebp),%eax
  806f46:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  806f4a:	66 85 c0             	test   %ax,%ax
  806f4d:	74 1e                	je     806f6d <ip_output_if+0x16f>
  806f4f:	66 3b 46 08          	cmp    0x8(%esi),%ax
  806f53:	73 18                	jae    806f6d <ip_output_if+0x16f>
    return ip_frag(p,netif,dest);
  806f55:	8b 45 10             	mov    0x10(%ebp),%eax
  806f58:	89 44 24 08          	mov    %eax,0x8(%esp)
  806f5c:	8b 45 20             	mov    0x20(%ebp),%eax
  806f5f:	89 44 24 04          	mov    %eax,0x4(%esp)
  806f63:	89 34 24             	mov    %esi,(%esp)
  806f66:	e8 07 08 00 00       	call   807772 <ip_frag>
  806f6b:	eb 1b                	jmp    806f88 <ip_output_if+0x18a>
  } else
#endif /* (LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF) */
  {
    LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));

    return netif->output(netif, p, dest);
  806f6d:	8b 45 10             	mov    0x10(%ebp),%eax
  806f70:	89 44 24 08          	mov    %eax,0x8(%esp)
  806f74:	89 74 24 04          	mov    %esi,0x4(%esp)
  806f78:	8b 45 20             	mov    0x20(%ebp),%eax
  806f7b:	89 04 24             	mov    %eax,(%esp)
  806f7e:	ff 50 14             	call   *0x14(%eax)
  806f81:	eb 05                	jmp    806f88 <ip_output_if+0x18a>
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | 2, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
  806f83:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  {
    LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));

    return netif->output(netif, p, dest);
  }
}
  806f88:	83 c4 2c             	add    $0x2c,%esp
  806f8b:	5b                   	pop    %ebx
  806f8c:	5e                   	pop    %esi
  806f8d:	5f                   	pop    %edi
  806f8e:	5d                   	pop    %ebp
  806f8f:	c3                   	ret    

00806f90 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  806f90:	55                   	push   %ebp
  806f91:	89 e5                	mov    %esp,%ebp
  806f93:	57                   	push   %edi
  806f94:	56                   	push   %esi
  806f95:	53                   	push   %ebx
  806f96:	83 ec 2c             	sub    $0x2c,%esp
  806f99:	8b 5d 14             	mov    0x14(%ebp),%ebx
  806f9c:	8b 75 18             	mov    0x18(%ebp),%esi
  806f9f:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  struct netif *netif;

  if ((netif = ip_route(dest)) == NULL) {
  806fa2:	8b 45 10             	mov    0x10(%ebp),%eax
  806fa5:	89 04 24             	mov    %eax,(%esp)
  806fa8:	e8 13 fb ff ff       	call   806ac0 <ip_route>
  806fad:	85 c0                	test   %eax,%eax
  806faf:	74 38                	je     806fe9 <ip_output+0x59>
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  806fb1:	89 44 24 18          	mov    %eax,0x18(%esp)
  806fb5:	89 f8                	mov    %edi,%eax
  806fb7:	0f b6 f8             	movzbl %al,%edi
  806fba:	89 7c 24 14          	mov    %edi,0x14(%esp)
  806fbe:	89 f0                	mov    %esi,%eax
  806fc0:	0f b6 f0             	movzbl %al,%esi
  806fc3:	89 74 24 10          	mov    %esi,0x10(%esp)
  806fc7:	0f b6 db             	movzbl %bl,%ebx
  806fca:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  806fce:	8b 45 10             	mov    0x10(%ebp),%eax
  806fd1:	89 44 24 08          	mov    %eax,0x8(%esp)
  806fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
  806fd8:	89 44 24 04          	mov    %eax,0x4(%esp)
  806fdc:	8b 45 08             	mov    0x8(%ebp),%eax
  806fdf:	89 04 24             	mov    %eax,(%esp)
  806fe2:	e8 17 fe ff ff       	call   806dfe <ip_output_if>
  806fe7:	eb 05                	jmp    806fee <ip_output+0x5e>
          u8_t ttl, u8_t tos, u8_t proto)
{
  struct netif *netif;

  if ((netif = ip_route(dest)) == NULL) {
    return ERR_RTE;
  806fe9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
}
  806fee:	83 c4 2c             	add    $0x2c,%esp
  806ff1:	5b                   	pop    %ebx
  806ff2:	5e                   	pop    %esi
  806ff3:	5f                   	pop    %edi
  806ff4:	5d                   	pop    %ebp
  806ff5:	c3                   	ret    
  806ff6:	66 90                	xchg   %ax,%ax
  806ff8:	66 90                	xchg   %ax,%ax
  806ffa:	66 90                	xchg   %ax,%ax
  806ffc:	66 90                	xchg   %ax,%ax
  806ffe:	66 90                	xchg   %ax,%ax

00807000 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  807000:	55                   	push   %ebp
  807001:	89 e5                	mov    %esp,%ebp
  807003:	83 ec 18             	sub    $0x18,%esp
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  807006:	8b 0d 00 5a b3 00    	mov    0xb35a00,%ecx
  80700c:	39 c1                	cmp    %eax,%ecx
  80700e:	75 0a                	jne    80701a <ip_reass_dequeue_datagram+0x1a>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  807010:	8b 11                	mov    (%ecx),%edx
  807012:	89 15 00 5a b3 00    	mov    %edx,0xb35a00
  807018:	eb 24                	jmp    80703e <ip_reass_dequeue_datagram+0x3e>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  80701a:	85 d2                	test   %edx,%edx
  80701c:	75 1c                	jne    80703a <ip_reass_dequeue_datagram+0x3a>
  80701e:	c7 44 24 08 e9 2e 81 	movl   $0x812ee9,0x8(%esp)
  807025:	00 
  807026:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
  80702d:	00 
  80702e:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  807035:	e8 54 80 00 00       	call   80f08e <_panic>
    prev->next = ipr->next;
  80703a:	8b 08                	mov    (%eax),%ecx
  80703c:	89 0a                	mov    %ecx,(%edx)
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  80703e:	89 44 24 04          	mov    %eax,0x4(%esp)
  807042:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  807049:	e8 d4 d9 ff ff       	call   804a22 <memp_free>
}
  80704e:	c9                   	leave  
  80704f:	c3                   	ret    

00807050 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  807050:	55                   	push   %ebp
  807051:	89 e5                	mov    %esp,%ebp
  807053:	57                   	push   %edi
  807054:	56                   	push   %esi
  807055:	53                   	push   %ebx
  807056:	83 ec 2c             	sub    $0x2c,%esp
  807059:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80705c:	89 55 e0             	mov    %edx,-0x20(%ebp)
  int pbufs_freed = 0;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  80705f:	39 c2                	cmp    %eax,%edx
  807061:	75 1c                	jne    80707f <ip_reass_free_complete_datagram+0x2f>
  807063:	c7 44 24 08 1f 2f 81 	movl   $0x812f1f,0x8(%esp)
  80706a:	00 
  80706b:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
  807072:	00 
  807073:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  80707a:	e8 0f 80 00 00       	call   80f08e <_panic>
  if (prev != NULL) {
  80707f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  807082:	85 c0                	test   %eax,%eax
  807084:	74 23                	je     8070a9 <ip_reass_free_complete_datagram+0x59>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  807086:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  807089:	39 08                	cmp    %ecx,(%eax)
  80708b:	74 1c                	je     8070a9 <ip_reass_free_complete_datagram+0x59>
  80708d:	c7 44 24 08 2b 2f 81 	movl   $0x812f2b,0x8(%esp)
  807094:	00 
  807095:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
  80709c:	00 
  80709d:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  8070a4:	e8 e5 7f 00 00       	call   80f08e <_panic>
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  8070a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8070ac:	8b 58 04             	mov    0x4(%eax),%ebx
  8070af:	8b 43 04             	mov    0x4(%ebx),%eax
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  int pbufs_freed = 0;
  8070b2:	be 00 00 00 00       	mov    $0x0,%esi
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  if (iprh->start == 0) {
  8070b7:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)
  8070bc:	75 45                	jne    807103 <ip_reass_free_complete_datagram+0xb3>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    ipr->p = iprh->next_pbuf;
  8070be:	8b 00                	mov    (%eax),%eax
  8070c0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8070c3:	89 41 04             	mov    %eax,0x4(%ecx)
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  8070c6:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  8070cd:	00 
  8070ce:	8d 41 08             	lea    0x8(%ecx),%eax
  8070d1:	89 44 24 04          	mov    %eax,0x4(%esp)
  8070d5:	8b 43 04             	mov    0x4(%ebx),%eax
  8070d8:	89 04 24             	mov    %eax,(%esp)
  8070db:	e8 dc 88 00 00       	call   80f9bc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  8070e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  8070e7:	00 
  8070e8:	89 1c 24             	mov    %ebx,(%esp)
  8070eb:	e8 27 7e 00 00       	call   80ef17 <icmp_time_exceeded>
    pbufs_freed += pbuf_clen(p);
  8070f0:	89 1c 24             	mov    %ebx,(%esp)
  8070f3:	e8 72 e1 ff ff       	call   80526a <pbuf_clen>
  8070f8:	0f b6 f0             	movzbl %al,%esi
    pbuf_free(p);
  8070fb:	89 1c 24             	mov    %ebx,(%esp)
  8070fe:	e8 d1 dc ff ff       	call   804dd4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  807103:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  807106:	8b 58 04             	mov    0x4(%eax),%ebx
  while (p != NULL) {
  807109:	eb 1c                	jmp    807127 <ip_reass_free_complete_datagram+0xd7>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  80710b:	8b 43 04             	mov    0x4(%ebx),%eax
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  80710e:	8b 38                	mov    (%eax),%edi
    pbufs_freed += pbuf_clen(pcur);
  807110:	89 1c 24             	mov    %ebx,(%esp)
  807113:	e8 52 e1 ff ff       	call   80526a <pbuf_clen>
  807118:	0f b6 c0             	movzbl %al,%eax
  80711b:	01 c6                	add    %eax,%esi
    pbuf_free(pcur);    
  80711d:	89 1c 24             	mov    %ebx,(%esp)
  807120:	e8 af dc ff ff       	call   804dd4 <pbuf_free>
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  807125:	89 fb                	mov    %edi,%ebx
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
  807127:	85 db                	test   %ebx,%ebx
  807129:	75 e0                	jne    80710b <ip_reass_free_complete_datagram+0xbb>
    p = iprh->next_pbuf;
    pbufs_freed += pbuf_clen(pcur);
    pbuf_free(pcur);    
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  80712b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  80712e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  807131:	e8 ca fe ff ff       	call   807000 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  807136:	0f b7 05 fc 59 b3 00 	movzwl 0xb359fc,%eax
  80713d:	0f b7 d0             	movzwl %ax,%edx
  807140:	39 f2                	cmp    %esi,%edx
  807142:	7d 1c                	jge    807160 <ip_reass_free_complete_datagram+0x110>
  807144:	c7 44 24 08 3d 2f 81 	movl   $0x812f3d,0x8(%esp)
  80714b:	00 
  80714c:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
  807153:	00 
  807154:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  80715b:	e8 2e 7f 00 00       	call   80f08e <_panic>
  ip_reass_pbufcount -= pbufs_freed;
  807160:	29 f0                	sub    %esi,%eax
  807162:	66 a3 fc 59 b3 00    	mov    %ax,0xb359fc

  return pbufs_freed;
}
  807168:	89 f0                	mov    %esi,%eax
  80716a:	83 c4 2c             	add    $0x2c,%esp
  80716d:	5b                   	pop    %ebx
  80716e:	5e                   	pop    %esi
  80716f:	5f                   	pop    %edi
  807170:	5d                   	pop    %ebp
  807171:	c3                   	ret    

00807172 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  807172:	55                   	push   %ebp
  807173:	89 e5                	mov    %esp,%ebp
  807175:	57                   	push   %edi
  807176:	56                   	push   %esi
  807177:	53                   	push   %ebx
  807178:	83 ec 1c             	sub    $0x1c,%esp
  80717b:	89 c6                	mov    %eax,%esi
  80717d:	89 55 dc             	mov    %edx,-0x24(%ebp)
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
  807180:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
  807187:	8b 0d 00 5a b3 00    	mov    0xb35a00,%ecx
  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
  80718d:	bb 00 00 00 00       	mov    $0x0,%ebx

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
  807192:	ba 00 00 00 00       	mov    $0x0,%edx
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  807197:	b8 00 00 00 00       	mov    $0x0,%eax
  80719c:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
  80719f:	eb 39                	jmp    8071da <ip_reass_remove_oldest_datagram+0x68>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  8071a1:	8b 5e 0c             	mov    0xc(%esi),%ebx
  8071a4:	39 59 14             	cmp    %ebx,0x14(%ecx)
  8071a7:	75 12                	jne    8071bb <ip_reass_remove_oldest_datagram+0x49>
  8071a9:	8b 7e 10             	mov    0x10(%esi),%edi
  8071ac:	39 79 18             	cmp    %edi,0x18(%ecx)
  8071af:	75 0a                	jne    8071bb <ip_reass_remove_oldest_datagram+0x49>
  8071b1:	0f b7 7e 04          	movzwl 0x4(%esi),%edi
  8071b5:	66 39 79 0c          	cmp    %di,0xc(%ecx)
  8071b9:	74 16                	je     8071d1 <ip_reass_remove_oldest_datagram+0x5f>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  8071bb:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
        if (oldest == NULL) {
  8071bf:	85 c0                	test   %eax,%eax
  8071c1:	74 0c                	je     8071cf <ip_reass_remove_oldest_datagram+0x5d>
          oldest = r;
        } else if (r->timer <= oldest->timer) {
          /* older than the previous oldest */
          oldest = r;
  8071c3:	0f b6 58 1f          	movzbl 0x1f(%eax),%ebx
  8071c7:	38 59 1f             	cmp    %bl,0x1f(%ecx)
  8071ca:	0f 46 c1             	cmovbe %ecx,%eax
  8071cd:	eb 02                	jmp    8071d1 <ip_reass_remove_oldest_datagram+0x5f>
    while (r != NULL) {
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
        /* Not the same datagram as fraghdr */
        other_datagrams++;
        if (oldest == NULL) {
          oldest = r;
  8071cf:	89 c8                	mov    %ecx,%eax
        } else if (r->timer <= oldest->timer) {
          /* older than the previous oldest */
          oldest = r;
        }
      }
      if (r->next != NULL) {
  8071d1:	8b 39                	mov    (%ecx),%edi
  8071d3:	85 ff                	test   %edi,%edi
  8071d5:	0f 45 d1             	cmovne %ecx,%edx
  8071d8:	89 f9                	mov    %edi,%ecx
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
  8071da:	85 c9                	test   %ecx,%ecx
  8071dc:	75 c3                	jne    8071a1 <ip_reass_remove_oldest_datagram+0x2f>
  8071de:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
  8071e1:	85 c0                	test   %eax,%eax
  8071e3:	74 08                	je     8071ed <ip_reass_remove_oldest_datagram+0x7b>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  8071e5:	e8 66 fe ff ff       	call   807050 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
  8071ea:	01 45 e0             	add    %eax,-0x20(%ebp)
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  8071ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
  8071f0:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  8071f3:	7d 05                	jge    8071fa <ip_reass_remove_oldest_datagram+0x88>
  8071f5:	83 fb 01             	cmp    $0x1,%ebx
  8071f8:	7f 8d                	jg     807187 <ip_reass_remove_oldest_datagram+0x15>
  return pbufs_freed;
}
  8071fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
  8071fd:	83 c4 1c             	add    $0x1c,%esp
  807200:	5b                   	pop    %ebx
  807201:	5e                   	pop    %esi
  807202:	5f                   	pop    %edi
  807203:	5d                   	pop    %ebp
  807204:	c3                   	ret    

00807205 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  807205:	55                   	push   %ebp
  807206:	89 e5                	mov    %esp,%ebp
  807208:	56                   	push   %esi
  807209:	53                   	push   %ebx
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  80720a:	a1 00 5a b3 00       	mov    0xb35a00,%eax
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;
  80720f:	bb 00 00 00 00       	mov    $0x0,%ebx

  r = reassdatagrams;
  while (r != NULL) {
  807214:	eb 1f                	jmp    807235 <ip_reass_tmr+0x30>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  807216:	0f b6 48 1f          	movzbl 0x1f(%eax),%ecx
  80721a:	84 c9                	test   %cl,%cl
  80721c:	74 0c                	je     80722a <ip_reass_tmr+0x25>
      r->timer--;
  80721e:	83 e9 01             	sub    $0x1,%ecx
  807221:	88 48 1f             	mov    %cl,0x1f(%eax)
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  807224:	89 c3                	mov    %eax,%ebx
      r = r->next;
  807226:	8b 00                	mov    (%eax),%eax
  807228:	eb 0b                	jmp    807235 <ip_reass_tmr+0x30>
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
  80722a:	8b 30                	mov    (%eax),%esi
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  80722c:	89 da                	mov    %ebx,%edx
  80722e:	e8 1d fe ff ff       	call   807050 <ip_reass_free_complete_datagram>
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
  807233:	89 f0                	mov    %esi,%eax
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
  807235:	85 c0                	test   %eax,%eax
  807237:	75 dd                	jne    807216 <ip_reass_tmr+0x11>
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
     }
   }
}
  807239:	5b                   	pop    %ebx
  80723a:	5e                   	pop    %esi
  80723b:	5d                   	pop    %ebp
  80723c:	c3                   	ret    

0080723d <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  80723d:	55                   	push   %ebp
  80723e:	89 e5                	mov    %esp,%ebp
  807240:	57                   	push   %edi
  807241:	56                   	push   %esi
  807242:	53                   	push   %ebx
  807243:	83 ec 3c             	sub    $0x3c,%esp
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  807246:	8b 45 08             	mov    0x8(%ebp),%eax
  807249:	8b 58 04             	mov    0x4(%eax),%ebx

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  80724c:	0f b7 03             	movzwl (%ebx),%eax
  80724f:	89 04 24             	mov    %eax,(%esp)
  807252:	e8 0c 0b 00 00       	call   807d63 <ntohs>
  807257:	66 c1 e8 08          	shr    $0x8,%ax
  80725b:	83 e0 0f             	and    $0xf,%eax
  80725e:	83 f8 05             	cmp    $0x5,%eax
  807261:	0f 85 14 04 00 00    	jne    80767b <ip_reass+0x43e>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  807267:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  80726b:	89 04 24             	mov    %eax,(%esp)
  80726e:	e8 f0 0a 00 00       	call   807d63 <ntohs>
  807273:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  807277:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  80727b:	89 04 24             	mov    %eax,(%esp)
  80727e:	e8 e0 0a 00 00       	call   807d63 <ntohs>
  807283:	66 89 45 da          	mov    %ax,-0x26(%ebp)
  807287:	0f b7 03             	movzwl (%ebx),%eax
  80728a:	89 04 24             	mov    %eax,(%esp)
  80728d:	e8 d1 0a 00 00       	call   807d63 <ntohs>
  807292:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  807296:	8b 45 08             	mov    0x8(%ebp),%eax
  807299:	89 04 24             	mov    %eax,(%esp)
  80729c:	e8 c9 df ff ff       	call   80526a <pbuf_clen>
  8072a1:	88 45 e4             	mov    %al,-0x1c(%ebp)
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  8072a4:	0f b6 f0             	movzbl %al,%esi
  8072a7:	0f b7 05 fc 59 b3 00 	movzwl 0xb359fc,%eax
  8072ae:	01 f0                	add    %esi,%eax
  8072b0:	83 f8 0a             	cmp    $0xa,%eax
  8072b3:	7e 23                	jle    8072d8 <ip_reass+0x9b>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  8072b5:	89 f2                	mov    %esi,%edx
  8072b7:	89 d8                	mov    %ebx,%eax
  8072b9:	e8 b4 fe ff ff       	call   807172 <ip_reass_remove_oldest_datagram>
  8072be:	85 c0                	test   %eax,%eax
  8072c0:	0f 84 b5 03 00 00    	je     80767b <ip_reass+0x43e>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  8072c6:	0f b7 05 fc 59 b3 00 	movzwl 0xb359fc,%eax
  8072cd:	01 f0                	add    %esi,%eax

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  8072cf:	83 f8 0a             	cmp    $0xa,%eax
  8072d2:	0f 8f a3 03 00 00    	jg     80767b <ip_reass+0x43e>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  8072d8:	8b 3d 00 5a b3 00    	mov    0xb35a00,%edi
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
  8072de:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  8072e3:	eb 1e                	jmp    807303 <ip_reass+0xc6>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  8072e5:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  8072e8:	39 4f 14             	cmp    %ecx,0x14(%edi)
  8072eb:	75 12                	jne    8072ff <ip_reass+0xc2>
  8072ed:	8b 53 10             	mov    0x10(%ebx),%edx
  8072f0:	39 57 18             	cmp    %edx,0x18(%edi)
  8072f3:	75 0a                	jne    8072ff <ip_reass+0xc2>
  8072f5:	0f b7 4b 04          	movzwl 0x4(%ebx),%ecx
  8072f9:	66 39 4f 0c          	cmp    %cx,0xc(%edi)
  8072fd:	74 4d                	je     80734c <ip_reass+0x10f>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  8072ff:	89 f8                	mov    %edi,%eax
  807301:	8b 3f                	mov    (%edi),%edi
  807303:	85 ff                	test   %edi,%edi
  807305:	75 de                	jne    8072e5 <ip_reass+0xa8>
  807307:	89 45 e0             	mov    %eax,-0x20(%ebp)
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = memp_malloc(MEMP_REASSDATA);
  80730a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  807311:	e8 ac d6 ff ff       	call   8049c2 <memp_malloc>
  807316:	89 c7                	mov    %eax,%edi
  if (ipr == NULL) {
  807318:	85 c0                	test   %eax,%eax
  80731a:	0f 85 05 04 00 00    	jne    807725 <ip_reass+0x4e8>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  807320:	89 f2                	mov    %esi,%edx
  807322:	89 d8                	mov    %ebx,%eax
  807324:	e8 49 fe ff ff       	call   807172 <ip_reass_remove_oldest_datagram>
  807329:	39 c6                	cmp    %eax,%esi
  80732b:	0f 8f 4a 03 00 00    	jg     80767b <ip_reass+0x43e>
      ipr = memp_malloc(MEMP_REASSDATA);
  807331:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  807338:	e8 85 d6 ff ff       	call   8049c2 <memp_malloc>
  80733d:	89 c7                	mov    %eax,%edi
    }
    if (ipr == NULL)
  80733f:	85 c0                	test   %eax,%eax
  807341:	0f 85 de 03 00 00    	jne    807725 <ip_reass+0x4e8>
  807347:	e9 2f 03 00 00       	jmp    80767b <ip_reass+0x43e>
  80734c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  80734f:	89 fe                	mov    %edi,%esi
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  807351:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  807355:	89 04 24             	mov    %eax,(%esp)
  807358:	e8 06 0a 00 00       	call   807d63 <ntohs>
  80735d:	66 a9 ff 1f          	test   $0x1fff,%ax
  807361:	75 29                	jne    80738c <ip_reass+0x14f>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  807363:	0f b7 47 0e          	movzwl 0xe(%edi),%eax
  807367:	89 04 24             	mov    %eax,(%esp)
  80736a:	e8 f4 09 00 00       	call   807d63 <ntohs>
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  80736f:	66 a9 ff 1f          	test   $0x1fff,%ax
  807373:	74 17                	je     80738c <ip_reass+0x14f>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  807375:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  80737c:	00 
  80737d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  807381:	83 c6 08             	add    $0x8,%esi
  807384:	89 34 24             	mov    %esi,(%esp)
  807387:	e8 30 86 00 00       	call   80f9bc <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  80738c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  807390:	66 01 05 fc 59 b3 00 	add    %ax,0xb359fc

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((ntohs(IPH_OFFSET(fraghdr)) & IP_MF) == 0) {
  807397:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  80739b:	89 04 24             	mov    %eax,(%esp)
  80739e:	e8 c0 09 00 00       	call   807d63 <ntohs>
  8073a3:	f6 c4 20             	test   $0x20,%ah
  8073a6:	75 20                	jne    8073c8 <ip_reass+0x18b>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  8073a8:	80 4f 1e 01          	orb    $0x1,0x1e(%edi)
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  8073ac:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  8073b0:	0f b7 75 da          	movzwl -0x26(%ebp),%esi
  8073b4:	8d 04 c6             	lea    (%esi,%eax,8),%eax
  8073b7:	0f b7 55 d4          	movzwl -0x2c(%ebp),%edx
  8073bb:	66 c1 ea 06          	shr    $0x6,%dx
  8073bf:	83 e2 3c             	and    $0x3c,%edx
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((ntohs(IPH_OFFSET(fraghdr)) & IP_MF) == 0) {
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
    ipr->datagram_len = offset + len;
  8073c2:	29 d0                	sub    %edx,%eax
  8073c4:	66 89 47 1c          	mov    %ax,0x1c(%edi)
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  8073c8:	8b 45 08             	mov    0x8(%ebp),%eax
  8073cb:	8b 58 04             	mov    0x4(%eax),%ebx
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  8073ce:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  8073d2:	89 04 24             	mov    %eax,(%esp)
  8073d5:	e8 89 09 00 00       	call   807d63 <ntohs>
  8073da:	89 c6                	mov    %eax,%esi
  8073dc:	0f b7 03             	movzwl (%ebx),%eax
  8073df:	89 04 24             	mov    %eax,(%esp)
  8073e2:	e8 7c 09 00 00       	call   807d63 <ntohs>
  8073e7:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  8073eb:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  8073ef:	89 04 24             	mov    %eax,(%esp)
  8073f2:	e8 6c 09 00 00       	call   807d63 <ntohs>
  8073f7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  8073fe:	8b 4d 08             	mov    0x8(%ebp),%ecx
  807401:	8b 51 04             	mov    0x4(%ecx),%edx
  807404:	89 55 dc             	mov    %edx,-0x24(%ebp)
  iprh->next_pbuf = NULL;
  807407:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
  iprh->start = offset;
  80740d:	66 89 5a 04          	mov    %bx,0x4(%edx)
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  807411:	01 de                	add    %ebx,%esi
  807413:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  807417:	66 c1 e8 06          	shr    $0x6,%ax
  80741b:	83 e0 3c             	and    $0x3c,%eax
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  iprh->next_pbuf = NULL;
  iprh->start = offset;
  iprh->end = offset + len;
  80741e:	29 c6                	sub    %eax,%esi
  807420:	66 89 75 da          	mov    %si,-0x26(%ebp)
  807424:	66 89 72 06          	mov    %si,0x6(%edx)

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  807428:	8b 47 04             	mov    0x4(%edi),%eax
  80742b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  80742e:	b9 01 00 00 00       	mov    $0x1,%ecx
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  807433:	be 00 00 00 00       	mov    $0x0,%esi
  807438:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  80743b:	89 cf                	mov    %ecx,%edi
  80743d:	eb 6f                	jmp    8074ae <ip_reass+0x271>
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  80743f:	8b 50 04             	mov    0x4(%eax),%edx
    if (iprh->start < iprh_tmp->start) {
  807442:	0f b7 4a 04          	movzwl 0x4(%edx),%ecx
  807446:	66 39 cb             	cmp    %cx,%bx
  807449:	73 3c                	jae    807487 <ip_reass+0x24a>
  80744b:	89 7d d0             	mov    %edi,-0x30(%ebp)
  80744e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  807451:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  807454:	89 01                	mov    %eax,(%ecx)
      if (iprh_prev != NULL) {
  807456:	85 f6                	test   %esi,%esi
  807458:	74 22                	je     80747c <ip_reass+0x23f>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  80745a:	66 3b 5e 06          	cmp    0x6(%esi),%bx
  80745e:	0f 82 92 01 00 00    	jb     8075f6 <ip_reass+0x3b9>
  807464:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
  807468:	66 3b 42 04          	cmp    0x4(%edx),%ax
  80746c:	0f 87 84 01 00 00    	ja     8075f6 <ip_reass+0x3b9>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  807472:	8b 45 08             	mov    0x8(%ebp),%eax
  807475:	89 06                	mov    %eax,(%esi)
  807477:	e9 a0 00 00 00       	jmp    80751c <ip_reass+0x2df>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
  80747c:	8b 45 08             	mov    0x8(%ebp),%eax
  80747f:	89 47 04             	mov    %eax,0x4(%edi)
  807482:	e9 95 00 00 00       	jmp    80751c <ip_reass+0x2df>
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
  807487:	66 39 cb             	cmp    %cx,%bx
  80748a:	0f 84 66 01 00 00    	je     8075f6 <ip_reass+0x3b9>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  807490:	66 3b 5a 06          	cmp    0x6(%edx),%bx
  807494:	0f 82 5c 01 00 00    	jb     8075f6 <ip_reass+0x3b9>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
  80749a:	85 f6                	test   %esi,%esi
  80749c:	74 0c                	je     8074aa <ip_reass+0x26d>
        if (iprh_prev->end != iprh_tmp->start) {
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  80749e:	66 3b 4e 06          	cmp    0x6(%esi),%cx
  8074a2:	b8 00 00 00 00       	mov    $0x0,%eax
  8074a7:	0f 45 f8             	cmovne %eax,%edi
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  8074aa:	8b 02                	mov    (%edx),%eax
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  8074ac:	89 d6                	mov    %edx,%esi
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  8074ae:	85 c0                	test   %eax,%eax
  8074b0:	75 8d                	jne    80743f <ip_reass+0x202>
  8074b2:	e9 d9 01 00 00       	jmp    807690 <ip_reass+0x453>
  if (q == NULL) {
    if (iprh_prev != NULL) {
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  8074b7:	0f b7 46 06          	movzwl 0x6(%esi),%eax
  8074bb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  8074be:	66 3b 41 04          	cmp    0x4(%ecx),%ax
  8074c2:	76 1c                	jbe    8074e0 <ip_reass+0x2a3>
  8074c4:	c7 44 24 08 58 2f 81 	movl   $0x812f58,0x8(%esp)
  8074cb:	00 
  8074cc:	c7 44 24 04 83 01 00 	movl   $0x183,0x4(%esp)
  8074d3:	00 
  8074d4:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  8074db:	e8 ae 7b 00 00       	call   80f08e <_panic>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  8074e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
  8074e3:	89 0e                	mov    %ecx,(%esi)
      if (iprh_prev->end != iprh->start) {
  8074e5:	8b 75 dc             	mov    -0x24(%ebp),%esi
  8074e8:	66 3b 46 04          	cmp    0x4(%esi),%ax
  8074ec:	0f 85 c3 01 00 00    	jne    8076b5 <ip_reass+0x478>
  8074f2:	eb 28                	jmp    80751c <ip_reass+0x2df>
        valid = 0;
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  8074f4:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  8074f8:	74 1c                	je     807516 <ip_reass+0x2d9>
  8074fa:	c7 44 24 08 84 2f 81 	movl   $0x812f84,0x8(%esp)
  807501:	00 
  807502:	c7 44 24 04 8c 01 00 	movl   $0x18c,0x4(%esp)
  807509:	00 
  80750a:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  807511:	e8 78 7b 00 00       	call   80f08e <_panic>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  807516:	8b 45 08             	mov    0x8(%ebp),%eax
  807519:	89 47 04             	mov    %eax,0x4(%edi)
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  80751c:	f6 47 1e 01          	testb  $0x1,0x1e(%edi)
  807520:	0f 84 8f 01 00 00    	je     8076b5 <ip_reass+0x478>
    /* and had no wholes so far */
    if (valid) {
  807526:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  80752a:	0f 84 85 01 00 00    	je     8076b5 <ip_reass+0x478>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  807530:	8b 4f 04             	mov    0x4(%edi),%ecx
  807533:	8b 59 04             	mov    0x4(%ecx),%ebx
  807536:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)
  80753b:	0f 85 74 01 00 00    	jne    8076b5 <ip_reass+0x478>
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
  807541:	8b 45 dc             	mov    -0x24(%ebp),%eax
  807544:	8b 10                	mov    (%eax),%edx
  807546:	89 c6                	mov    %eax,%esi
  807548:	eb 15                	jmp    80755f <ip_reass+0x322>
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
  80754a:	8b 42 04             	mov    0x4(%edx),%eax
          if (iprh_prev->end != iprh->start) {
  80754d:	0f b7 50 04          	movzwl 0x4(%eax),%edx
  807551:	66 39 56 06          	cmp    %dx,0x6(%esi)
  807555:	0f 85 5a 01 00 00    	jne    8076b5 <ip_reass+0x478>
            valid = 0;
            break;
          }
          iprh_prev = iprh;
          q = iprh->next_pbuf;
  80755b:	8b 10                	mov    (%eax),%edx
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
  80755d:	89 c6                	mov    %eax,%esi
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
  80755f:	85 d2                	test   %edx,%edx
  807561:	75 e7                	jne    80754a <ip_reass+0x30d>
  807563:	e9 3b 01 00 00       	jmp    8076a3 <ip_reass+0x466>
          q = iprh->next_pbuf;
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  807568:	c7 44 24 08 76 2f 81 	movl   $0x812f76,0x8(%esp)
  80756f:	00 
  807570:	c7 44 24 04 ac 01 00 	movl   $0x1ac,0x4(%esp)
  807577:	00 
  807578:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  80757f:	e8 0a 7b 00 00       	call   80f08e <_panic>
          LWIP_ASSERT("sanity check",
  807584:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
  807587:	75 1c                	jne    8075a5 <ip_reass+0x368>
  807589:	c7 44 24 08 76 2f 81 	movl   $0x812f76,0x8(%esp)
  807590:	00 
  807591:	c7 44 24 04 ae 01 00 	movl   $0x1ae,0x4(%esp)
  807598:	00 
  807599:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  8075a0:	e8 e9 7a 00 00       	call   80f08e <_panic>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  8075a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  8075a8:	83 38 00             	cmpl   $0x0,(%eax)
  8075ab:	74 1c                	je     8075c9 <ip_reass+0x38c>
  8075ad:	c7 44 24 08 bc 2f 81 	movl   $0x812fbc,0x8(%esp)
  8075b4:	00 
  8075b5:	c7 44 24 04 b0 01 00 	movl   $0x1b0,0x4(%esp)
  8075bc:	00 
  8075bd:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  8075c4:	e8 c5 7a 00 00       	call   80f08e <_panic>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  8075c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  8075cc:	0f b7 40 06          	movzwl 0x6(%eax),%eax
  8075d0:	66 3b 47 1c          	cmp    0x1c(%edi),%ax
  8075d4:	0f 84 e5 00 00 00    	je     8076bf <ip_reass+0x482>
  8075da:	c7 44 24 08 e0 2f 81 	movl   $0x812fe0,0x8(%esp)
  8075e1:	00 
  8075e2:	c7 44 24 04 b2 01 00 	movl   $0x1b2,0x4(%esp)
  8075e9:	00 
  8075ea:	c7 04 24 02 2f 81 00 	movl   $0x812f02,(%esp)
  8075f1:	e8 98 7a 00 00       	call   80f08e <_panic>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
  8075f6:	0f b7 1d fc 59 b3 00 	movzwl 0xb359fc,%ebx
  8075fd:	8b 45 08             	mov    0x8(%ebp),%eax
  807600:	89 04 24             	mov    %eax,(%esp)
  807603:	e8 62 dc ff ff       	call   80526a <pbuf_clen>
  807608:	0f b6 c0             	movzbl %al,%eax
  80760b:	29 c3                	sub    %eax,%ebx
  80760d:	66 89 1d fc 59 b3 00 	mov    %bx,0xb359fc
  pbuf_free(new_p);
  807614:	8b 45 08             	mov    0x8(%ebp),%eax
  807617:	89 04 24             	mov    %eax,(%esp)
  80761a:	e8 b5 d7 ff ff       	call   804dd4 <pbuf_free>
  80761f:	e9 91 00 00 00       	jmp    8076b5 <ip_reass+0x478>

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
      iprh = (struct ip_reass_helper*)r->payload;
  807624:	8b 73 04             	mov    0x4(%ebx),%esi

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  807627:	c7 44 24 04 ec ff ff 	movl   $0xffffffec,0x4(%esp)
  80762e:	ff 
  80762f:	89 1c 24             	mov    %ebx,(%esp)
  807632:	e8 b9 d6 ff ff       	call   804cf0 <pbuf_header>
      pbuf_cat(p, r);
  807637:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80763b:	89 3c 24             	mov    %edi,(%esp)
  80763e:	e8 50 dc ff ff       	call   805293 <pbuf_cat>
      r = iprh->next_pbuf;
  807643:	8b 1e                	mov    (%esi),%ebx
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  807645:	85 db                	test   %ebx,%ebx
  807647:	75 db                	jne    807624 <ip_reass+0x3e7>
  807649:	8b 7d dc             	mov    -0x24(%ebp),%edi
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  80764c:	8b 55 e0             	mov    -0x20(%ebp),%edx
  80764f:	89 f8                	mov    %edi,%eax
  807651:	e8 aa f9 ff ff       	call   807000 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  807656:	0f b7 1d fc 59 b3 00 	movzwl 0xb359fc,%ebx
  80765d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  807660:	89 34 24             	mov    %esi,(%esp)
  807663:	e8 02 dc ff ff       	call   80526a <pbuf_clen>
  807668:	0f b6 c0             	movzbl %al,%eax
  80766b:	29 c3                	sub    %eax,%ebx
  80766d:	66 89 1d fc 59 b3 00 	mov    %bx,0xb359fc

    /* Return the pbuf chain */
    return p;
  807674:	89 f0                	mov    %esi,%eax
  807676:	e9 ef 00 00 00       	jmp    80776a <ip_reass+0x52d>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  80767b:	8b 45 08             	mov    0x8(%ebp),%eax
  80767e:	89 04 24             	mov    %eax,(%esp)
  807681:	e8 4e d7 ff ff       	call   804dd4 <pbuf_free>
  return NULL;
  807686:	b8 00 00 00 00       	mov    $0x0,%eax
  80768b:	e9 da 00 00 00       	jmp    80776a <ip_reass+0x52d>
  807690:	89 7d d0             	mov    %edi,-0x30(%ebp)
  807693:	8b 7d e4             	mov    -0x1c(%ebp),%edi
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    if (iprh_prev != NULL) {
  807696:	85 f6                	test   %esi,%esi
  807698:	0f 85 19 fe ff ff    	jne    8074b7 <ip_reass+0x27a>
  80769e:	e9 51 fe ff ff       	jmp    8074f4 <ip_reass+0x2b7>
  8076a3:	89 75 dc             	mov    %esi,-0x24(%ebp)
          q = iprh->next_pbuf;
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  8076a6:	85 c9                	test   %ecx,%ecx
  8076a8:	0f 85 d6 fe ff ff    	jne    807584 <ip_reass+0x347>
  8076ae:	66 90                	xchg   %ax,%ax
  8076b0:	e9 b3 fe ff ff       	jmp    807568 <ip_reass+0x32b>
    /* Return the pbuf chain */
    return p;
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  8076b5:	b8 00 00 00 00       	mov    $0x0,%eax
  8076ba:	e9 ab 00 00 00       	jmp    80776a <ip_reass+0x52d>
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  8076bf:	83 c0 14             	add    $0x14,%eax
  8076c2:	66 89 47 1c          	mov    %ax,0x1c(%edi)

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  8076c6:	8b 47 04             	mov    0x4(%edi),%eax
  8076c9:	8b 70 04             	mov    0x4(%eax),%esi
  8076cc:	8b 1e                	mov    (%esi),%ebx

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  8076ce:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  8076d5:	00 
  8076d6:	8d 47 08             	lea    0x8(%edi),%eax
  8076d9:	89 44 24 04          	mov    %eax,0x4(%esp)
  8076dd:	89 34 24             	mov    %esi,(%esp)
  8076e0:	e8 d7 82 00 00       	call   80f9bc <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  8076e5:	0f b7 47 1c          	movzwl 0x1c(%edi),%eax
  8076e9:	89 04 24             	mov    %eax,(%esp)
  8076ec:	e8 65 06 00 00       	call   807d56 <htons>
  8076f1:	66 89 46 02          	mov    %ax,0x2(%esi)
    IPH_OFFSET_SET(fraghdr, 0);
  8076f5:	66 c7 46 06 00 00    	movw   $0x0,0x6(%esi)
    IPH_CHKSUM_SET(fraghdr, 0);
  8076fb:	66 c7 46 0a 00 00    	movw   $0x0,0xa(%esi)
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  807701:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  807708:	00 
  807709:	89 34 24             	mov    %esi,(%esp)
  80770c:	e8 f0 04 00 00       	call   807c01 <inet_chksum>
  807711:	66 89 46 0a          	mov    %ax,0xa(%esi)

    p = ipr->p;
  807715:	8b 47 04             	mov    0x4(%edi),%eax
  807718:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80771b:	89 7d dc             	mov    %edi,-0x24(%ebp)
  80771e:	89 c7                	mov    %eax,%edi

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  807720:	e9 20 ff ff ff       	jmp    807645 <ip_reass+0x408>
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  807725:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
  80772c:	00 
  80772d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  807734:	00 
  807735:	89 3c 24             	mov    %edi,(%esp)
  807738:	e8 ca 81 00 00       	call   80f907 <memset>
  ipr->timer = IP_REASS_MAXAGE;
  80773d:	c6 47 1f 03          	movb   $0x3,0x1f(%edi)

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  807741:	a1 00 5a b3 00       	mov    0xb35a00,%eax
  807746:	89 07                	mov    %eax,(%edi)
  reassdatagrams = ipr;
  807748:	89 3d 00 5a b3 00    	mov    %edi,0xb35a00
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  80774e:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  807755:	00 
  807756:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80775a:	8d 47 08             	lea    0x8(%edi),%eax
  80775d:	89 04 24             	mov    %eax,(%esp)
  807760:	e8 57 82 00 00       	call   80f9bc <memcpy>
  807765:	e9 22 fc ff ff       	jmp    80738c <ip_reass+0x14f>
nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  return NULL;
}
  80776a:	83 c4 3c             	add    $0x3c,%esp
  80776d:	5b                   	pop    %ebx
  80776e:	5e                   	pop    %esi
  80776f:	5f                   	pop    %edi
  807770:	5d                   	pop    %ebp
  807771:	c3                   	ret    

00807772 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, struct ip_addr *dest)
{
  807772:	55                   	push   %ebp
  807773:	89 e5                	mov    %esp,%ebp
  807775:	57                   	push   %edi
  807776:	56                   	push   %esi
  807777:	53                   	push   %ebx
  807778:	83 ec 3c             	sub    $0x3c,%esp
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  80777b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80777e:	0f b7 70 2c          	movzwl 0x2c(%eax),%esi
#if IP_FRAG_USES_STATIC_BUF
  /* When using a static buffer, we use a PBUF_REF, which we will
   * use to reference the packet (without link header).
   * Layer and length is irrelevant.
   */
  rambuf = pbuf_alloc(PBUF_LINK, 0, PBUF_REF);
  807782:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  807789:	00 
  80778a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  807791:	00 
  807792:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  807799:	e8 17 d7 ff ff       	call   804eb5 <pbuf_alloc>
  80779e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  if (rambuf == NULL) {
  8077a1:	89 c1                	mov    %eax,%ecx
  8077a3:	85 c0                	test   %eax,%eax
  8077a5:	0f 84 d2 01 00 00    	je     80797d <ip_frag+0x20b>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));
    return ERR_MEM;
  }
  rambuf->tot_len = rambuf->len = mtu;
  8077ab:	66 89 70 0a          	mov    %si,0xa(%eax)
  8077af:	66 89 70 08          	mov    %si,0x8(%eax)
  rambuf->payload = LWIP_MEM_ALIGN((void *)buf);
  8077b3:	b8 23 54 b3 00       	mov    $0xb35423,%eax
  8077b8:	83 e0 fc             	and    $0xfffffffc,%eax
  8077bb:	89 c3                	mov    %eax,%ebx
  8077bd:	89 59 04             	mov    %ebx,0x4(%ecx)

  /* Copy the IP header in it */
  iphdr = rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
  8077c0:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  8077c7:	00 
  8077c8:	8b 45 08             	mov    0x8(%ebp),%eax
  8077cb:	8b 40 04             	mov    0x4(%eax),%eax
  8077ce:	89 44 24 04          	mov    %eax,0x4(%esp)
  8077d2:	89 1c 24             	mov    %ebx,(%esp)
  8077d5:	e8 e2 81 00 00       	call   80f9bc <memcpy>
  original_iphdr = p->payload;
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  8077da:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  8077de:	89 04 24             	mov    %eax,(%esp)
  8077e1:	e8 7d 05 00 00       	call   807d63 <ntohs>
  ofo = tmp & IP_OFFMASK;
  8077e6:	89 c1                	mov    %eax,%ecx
  8077e8:	66 81 e1 ff 1f       	and    $0x1fff,%cx
  8077ed:	66 89 4d e0          	mov    %cx,-0x20(%ebp)
  omf = tmp & IP_MF;
  8077f1:	66 25 00 20          	and    $0x2000,%ax
  8077f5:	66 89 45 da          	mov    %ax,-0x26(%ebp)

  left = p->tot_len - IP_HLEN;
  8077f9:	8b 45 08             	mov    0x8(%ebp),%eax
  8077fc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  807800:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
  807804:	83 e8 14             	sub    $0x14,%eax
  807807:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)

  nfb = (mtu - IP_HLEN) / 8;
  80780b:	0f b7 d6             	movzwl %si,%edx
  80780e:	8d 42 f3             	lea    -0xd(%edx),%eax
  807811:	83 ea 14             	sub    $0x14,%edx
  807814:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  807817:	0f 49 c2             	cmovns %edx,%eax
  80781a:	c1 f8 03             	sar    $0x3,%eax
  80781d:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  807821:	66 c7 45 e2 14 00    	movw   $0x14,-0x1e(%ebp)
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last)
      tmp = tmp | IP_MF;

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  807827:	c1 e0 03             	shl    $0x3,%eax
  80782a:	66 89 45 ce          	mov    %ax,-0x32(%ebp)

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
  80782e:	8d 43 14             	lea    0x14(%ebx),%eax
  807831:	89 45 d0             	mov    %eax,-0x30(%ebp)

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
  807834:	e9 27 01 00 00       	jmp    807960 <ip_frag+0x1ee>
    last = (left <= mtu - IP_HLEN);
  807839:	0f b7 4d e4          	movzwl -0x1c(%ebp),%ecx
  80783d:	0f b7 c1             	movzwl %cx,%eax
  807840:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
  807843:	0f 9d c0             	setge  %al
  807846:	0f b6 f0             	movzbl %al,%esi

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
  807849:	0f b7 7d e0          	movzwl -0x20(%ebp),%edi
  80784d:	66 81 e7 ff 1f       	and    $0x1fff,%di
  807852:	66 0b 7d da          	or     -0x26(%ebp),%di
    if (!last)
      tmp = tmp | IP_MF;

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  807856:	66 89 4d e6          	mov    %cx,-0x1a(%ebp)
  while (left) {
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last)
  80785a:	66 85 f6             	test   %si,%si
  80785d:	75 0d                	jne    80786c <ip_frag+0xfa>
      tmp = tmp | IP_MF;
  80785f:	66 81 cf 00 20       	or     $0x2000,%di

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  807864:	0f b7 45 ce          	movzwl -0x32(%ebp),%eax
  807868:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
  80786c:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
  807870:	89 44 24 0c          	mov    %eax,0xc(%esp)
  807874:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  807878:	89 44 24 08          	mov    %eax,0x8(%esp)
  80787c:	8b 55 d0             	mov    -0x30(%ebp),%edx
  80787f:	89 54 24 04          	mov    %edx,0x4(%esp)
  807883:	8b 55 08             	mov    0x8(%ebp),%edx
  807886:	89 14 24             	mov    %edx,(%esp)
  807889:	e8 f1 dc ff ff       	call   80557f <pbuf_copy_partial>
  80788e:	66 01 45 e2          	add    %ax,-0x1e(%ebp)
    }
    poff = newpbuflen;
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  807892:	0f b7 ff             	movzwl %di,%edi
  807895:	89 3c 24             	mov    %edi,(%esp)
  807898:	e8 b9 04 00 00       	call   807d56 <htons>
  80789d:	66 89 43 06          	mov    %ax,0x6(%ebx)
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  8078a1:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  8078a5:	83 c0 14             	add    $0x14,%eax
  8078a8:	0f b7 c0             	movzwl %ax,%eax
  8078ab:	89 04 24             	mov    %eax,(%esp)
  8078ae:	e8 a3 04 00 00       	call   807d56 <htons>
  8078b3:	66 89 43 02          	mov    %ax,0x2(%ebx)
    IPH_CHKSUM_SET(iphdr, 0);
  8078b7:	66 c7 43 0a 00 00    	movw   $0x0,0xa(%ebx)
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  8078bd:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  8078c4:	00 
  8078c5:	89 1c 24             	mov    %ebx,(%esp)
  8078c8:	e8 34 03 00 00       	call   807c01 <inet_chksum>
  8078cd:	66 89 43 0a          	mov    %ax,0xa(%ebx)

#if IP_FRAG_USES_STATIC_BUF
    if (last)
  8078d1:	66 85 f6             	test   %si,%si
  8078d4:	74 19                	je     8078ef <ip_frag+0x17d>
      pbuf_realloc(rambuf, left + IP_HLEN);
  8078d6:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  8078da:	83 c0 14             	add    $0x14,%eax
  8078dd:	0f b7 c0             	movzwl %ax,%eax
  8078e0:	89 44 24 04          	mov    %eax,0x4(%esp)
  8078e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  8078e7:	89 04 24             	mov    %eax,(%esp)
  8078ea:	e8 57 d8 ff ff       	call   805146 <pbuf_realloc>
    /* This part is ugly: we alloc a RAM based pbuf for 
     * the link level header for each chunk and then 
     * free it.A PBUF_ROM style pbuf for which pbuf_header
     * worked would make things simpler.
     */
    header = pbuf_alloc(PBUF_LINK, 0, PBUF_RAM);
  8078ef:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8078f6:	00 
  8078f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8078fe:	00 
  8078ff:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  807906:	e8 aa d5 ff ff       	call   804eb5 <pbuf_alloc>
  80790b:	89 c6                	mov    %eax,%esi
    if (header != NULL) {
  80790d:	85 c0                	test   %eax,%eax
  80790f:	74 3d                	je     80794e <ip_frag+0x1dc>
      pbuf_chain(header, rambuf);
  807911:	8b 45 dc             	mov    -0x24(%ebp),%eax
  807914:	89 44 24 04          	mov    %eax,0x4(%esp)
  807918:	89 34 24             	mov    %esi,(%esp)
  80791b:	e8 ea d9 ff ff       	call   80530a <pbuf_chain>
      netif->output(netif, header, dest);
  807920:	8b 45 10             	mov    0x10(%ebp),%eax
  807923:	89 44 24 08          	mov    %eax,0x8(%esp)
  807927:	89 74 24 04          	mov    %esi,0x4(%esp)
  80792b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80792e:	89 04 24             	mov    %eax,(%esp)
  807931:	ff 50 14             	call   *0x14(%eax)
      IPFRAG_STATS_INC(ip_frag.xmit);
      snmp_inc_ipfragcreates();
      pbuf_free(header);
  807934:	89 34 24             	mov    %esi,(%esp)
  807937:	e8 98 d4 ff ff       	call   804dd4 <pbuf_free>
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  80793c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  807940:	66 29 45 e4          	sub    %ax,-0x1c(%ebp)
    ofo += nfb;
  807944:	0f b7 45 d8          	movzwl -0x28(%ebp),%eax
  807948:	66 01 45 e0          	add    %ax,-0x20(%ebp)
  80794c:	eb 12                	jmp    807960 <ip_frag+0x1ee>
      IPFRAG_STATS_INC(ip_frag.xmit);
      snmp_inc_ipfragcreates();
      pbuf_free(header);
    } else {
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc() for header failed\n"));
      pbuf_free(rambuf);
  80794e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  807951:	89 04 24             	mov    %eax,(%esp)
  807954:	e8 7b d4 ff ff       	call   804dd4 <pbuf_free>
      return ERR_MEM;
  807959:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80795e:	eb 22                	jmp    807982 <ip_frag+0x210>

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
  807960:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  807965:	0f 85 ce fe ff ff    	jne    807839 <ip_frag+0xc7>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
    ofo += nfb;
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
  80796b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80796e:	89 04 24             	mov    %eax,(%esp)
  807971:	e8 5e d4 ff ff       	call   804dd4 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  807976:	b8 00 00 00 00       	mov    $0x0,%eax
  80797b:	eb 05                	jmp    807982 <ip_frag+0x210>
   * Layer and length is irrelevant.
   */
  rambuf = pbuf_alloc(PBUF_LINK, 0, PBUF_REF);
  if (rambuf == NULL) {
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));
    return ERR_MEM;
  80797d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
}
  807982:	83 c4 3c             	add    $0x3c,%esp
  807985:	5b                   	pop    %ebx
  807986:	5e                   	pop    %esi
  807987:	5f                   	pop    %edi
  807988:	5d                   	pop    %ebp
  807989:	c3                   	ret    

0080798a <lwip_standard_chksum>:
 * @note accumulator size limits summable length to 64k
 * @note host endianess is irrelevant (p3 RFC1071)
 */
static u16_t
lwip_standard_chksum(void *dataptr, u16_t len)
{
  80798a:	55                   	push   %ebp
  80798b:	89 e5                	mov    %esp,%ebp
  80798d:	57                   	push   %edi
  80798e:	56                   	push   %esi
  80798f:	53                   	push   %ebx
  807990:	83 ec 1c             	sub    $0x1c,%esp
  807993:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  u8_t *octetptr;

  acc = 0;
  /* dataptr may be at odd or even addresses */
  octetptr = (u8_t*)dataptr;
  while (len > 1) {
  807996:	89 d1                	mov    %edx,%ecx
{
  u32_t acc;
  u16_t src;
  u8_t *octetptr;

  acc = 0;
  807998:	bb 00 00 00 00       	mov    $0x0,%ebx
  /* dataptr may be at odd or even addresses */
  octetptr = (u8_t*)dataptr;
  while (len > 1) {
  80799d:	eb 17                	jmp    8079b6 <lwip_standard_chksum+0x2c>
    /* declare first octet as most significant
       thus assume network order, ignoring host order */
    src = (*octetptr) << 8;
  80799f:	0f b6 30             	movzbl (%eax),%esi
  8079a2:	c1 e6 08             	shl    $0x8,%esi
    octetptr++;
    /* declare second octet as least significant */
    src |= (*octetptr);
  8079a5:	0f b6 78 01          	movzbl 0x1(%eax),%edi
  8079a9:	09 fe                	or     %edi,%esi
  8079ab:	83 c0 02             	add    $0x2,%eax
    octetptr++;
    acc += src;
  8079ae:	0f b7 f6             	movzwl %si,%esi
  8079b1:	01 f3                	add    %esi,%ebx
    len -= 2;
  8079b3:	83 e9 02             	sub    $0x2,%ecx
  u8_t *octetptr;

  acc = 0;
  /* dataptr may be at odd or even addresses */
  octetptr = (u8_t*)dataptr;
  while (len > 1) {
  8079b6:	66 83 f9 01          	cmp    $0x1,%cx
  8079ba:	77 e3                	ja     80799f <lwip_standard_chksum+0x15>
  8079bc:	89 d0                	mov    %edx,%eax
  8079be:	66 d1 e8             	shr    %ax
  8079c1:	0f b7 c8             	movzwl %ax,%ecx
  8079c4:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  8079c7:	8d 0c 4f             	lea    (%edi,%ecx,2),%ecx
  8079ca:	f7 d8                	neg    %eax
  8079cc:	8d 14 42             	lea    (%edx,%eax,2),%edx
    src |= (*octetptr);
    octetptr++;
    acc += src;
    len -= 2;
  }
  if (len > 0) {
  8079cf:	66 85 d2             	test   %dx,%dx
  8079d2:	74 0b                	je     8079df <lwip_standard_chksum+0x55>
    /* accumulate remaining octet */
    src = (*octetptr) << 8;
  8079d4:	0f b6 01             	movzbl (%ecx),%eax
  8079d7:	c1 e0 08             	shl    $0x8,%eax
    acc += src;
  8079da:	0f b7 c0             	movzwl %ax,%eax
  8079dd:	01 c3                	add    %eax,%ebx
  }
  /* add deferred carry bits */
  acc = (acc >> 16) + (acc & 0x0000ffffUL);
  8079df:	89 d8                	mov    %ebx,%eax
  8079e1:	c1 e8 10             	shr    $0x10,%eax
  8079e4:	0f b7 db             	movzwl %bx,%ebx
  8079e7:	01 c3                	add    %eax,%ebx
  if ((acc & 0xffff0000) != 0) {
  8079e9:	f7 c3 00 00 ff ff    	test   $0xffff0000,%ebx
  8079ef:	74 0a                	je     8079fb <lwip_standard_chksum+0x71>
    acc = (acc >> 16) + (acc & 0x0000ffffUL);
  8079f1:	89 d8                	mov    %ebx,%eax
  8079f3:	c1 e8 10             	shr    $0x10,%eax
  8079f6:	0f b7 db             	movzwl %bx,%ebx
  8079f9:	01 c3                	add    %eax,%ebx
  8079fb:	0f b7 db             	movzwl %bx,%ebx
  }
  /* This maybe a little confusing: reorder sum using htons()
     instead of ntohs() since it has a little less call overhead.
     The caller must invert bits for Internet sum ! */
  return htons((u16_t)acc);
  8079fe:	89 1c 24             	mov    %ebx,(%esp)
  807a01:	e8 50 03 00 00       	call   807d56 <htons>
}
  807a06:	83 c4 1c             	add    $0x1c,%esp
  807a09:	5b                   	pop    %ebx
  807a0a:	5e                   	pop    %esi
  807a0b:	5f                   	pop    %edi
  807a0c:	5d                   	pop    %ebp
  807a0d:	c3                   	ret    

00807a0e <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       struct ip_addr *src, struct ip_addr *dest,
       u8_t proto, u16_t proto_len)
{
  807a0e:	55                   	push   %ebp
  807a0f:	89 e5                	mov    %esp,%ebp
  807a11:	57                   	push   %edi
  807a12:	56                   	push   %esi
  807a13:	53                   	push   %ebx
  807a14:	83 ec 1c             	sub    $0x1c,%esp
  807a17:	8b 5d 08             	mov    0x8(%ebp),%ebx
  807a1a:	8b 45 14             	mov    0x14(%ebp),%eax
  807a1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  807a20:	8b 45 18             	mov    0x18(%ebp),%eax
  807a23:	89 45 e0             	mov    %eax,-0x20(%ebp)
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  807a26:	bf 00 00 00 00       	mov    $0x0,%edi
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  807a2b:	be 00 00 00 00       	mov    $0x0,%esi
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  807a30:	eb 3d                	jmp    807a6f <inet_chksum_pseudo+0x61>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  807a32:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  807a36:	8b 43 04             	mov    0x4(%ebx),%eax
  807a39:	e8 4c ff ff ff       	call   80798a <lwip_standard_chksum>
  807a3e:	0f b7 c0             	movzwl %ax,%eax
  807a41:	01 c6                	add    %eax,%esi
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  807a43:	89 f0                	mov    %esi,%eax
  807a45:	c1 e8 10             	shr    $0x10,%eax
  807a48:	0f b7 f6             	movzwl %si,%esi
  807a4b:	01 c6                	add    %eax,%esi
    if (q->len % 2 != 0) {
  807a4d:	f6 43 0a 01          	testb  $0x1,0xa(%ebx)
  807a51:	74 1a                	je     807a6d <inet_chksum_pseudo+0x5f>
      swapped = 1 - swapped;
  807a53:	b8 01 00 00 00       	mov    $0x1,%eax
  807a58:	89 f9                	mov    %edi,%ecx
  807a5a:	29 c8                	sub    %ecx,%eax
  807a5c:	89 c7                	mov    %eax,%edi
      acc = SWAP_BYTES_IN_WORD(acc);
  807a5e:	89 f0                	mov    %esi,%eax
  807a60:	c1 e0 08             	shl    $0x8,%eax
  807a63:	0f b7 c0             	movzwl %ax,%eax
  807a66:	89 f1                	mov    %esi,%ecx
  807a68:	0f b6 f5             	movzbl %ch,%esi
  807a6b:	09 c6                	or     %eax,%esi
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  807a6d:	8b 1b                	mov    (%ebx),%ebx
  807a6f:	85 db                	test   %ebx,%ebx
  807a71:	75 bf                	jne    807a32 <inet_chksum_pseudo+0x24>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  807a73:	89 f8                	mov    %edi,%eax
  807a75:	84 c0                	test   %al,%al
  807a77:	74 0f                	je     807a88 <inet_chksum_pseudo+0x7a>
    acc = SWAP_BYTES_IN_WORD(acc);
  807a79:	89 f0                	mov    %esi,%eax
  807a7b:	c1 e0 08             	shl    $0x8,%eax
  807a7e:	0f b7 c0             	movzwl %ax,%eax
  807a81:	89 f1                	mov    %esi,%ecx
  807a83:	0f b6 f5             	movzbl %ch,%esi
  807a86:	09 c6                	or     %eax,%esi
  }
  acc += (src->addr & 0xffffUL);
  807a88:	8b 45 0c             	mov    0xc(%ebp),%eax
  807a8b:	8b 10                	mov    (%eax),%edx
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  807a8d:	8b 45 10             	mov    0x10(%ebp),%eax
  807a90:	8b 00                	mov    (%eax),%eax

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  807a92:	89 d1                	mov    %edx,%ecx
  807a94:	c1 e9 10             	shr    $0x10,%ecx
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  807a97:	0f b7 d2             	movzwl %dx,%edx
  807a9a:	01 ca                	add    %ecx,%edx
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  807a9c:	0f b7 c8             	movzwl %ax,%ecx

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  807a9f:	01 ca                	add    %ecx,%edx
  acc += (dest->addr & 0xffffUL);
  acc += ((dest->addr >> 16) & 0xffffUL);
  807aa1:	c1 e8 10             	shr    $0x10,%eax
  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  807aa4:	01 d0                	add    %edx,%eax
  acc += ((dest->addr >> 16) & 0xffffUL);
  807aa6:	01 c6                	add    %eax,%esi
  acc += (u32_t)htons((u16_t)proto);
  807aa8:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  807aac:	89 04 24             	mov    %eax,(%esp)
  807aaf:	e8 a2 02 00 00       	call   807d56 <htons>
  807ab4:	0f b7 c0             	movzwl %ax,%eax
  807ab7:	01 c6                	add    %eax,%esi
  acc += (u32_t)htons(proto_len);
  807ab9:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
  807abd:	89 04 24             	mov    %eax,(%esp)
  807ac0:	e8 91 02 00 00       	call   807d56 <htons>
  807ac5:	0f b7 c0             	movzwl %ax,%eax
  807ac8:	01 c6                	add    %eax,%esi

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  807aca:	89 f2                	mov    %esi,%edx
  807acc:	c1 ea 10             	shr    $0x10,%edx
  807acf:	0f b7 c6             	movzwl %si,%eax
  807ad2:	01 d0                	add    %edx,%eax
  acc = FOLD_U32T(acc);
  807ad4:	89 c2                	mov    %eax,%edx
  807ad6:	c1 ea 10             	shr    $0x10,%edx
  807ad9:	01 d0                	add    %edx,%eax
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  807adb:	f7 d0                	not    %eax
}
  807add:	83 c4 1c             	add    $0x1c,%esp
  807ae0:	5b                   	pop    %ebx
  807ae1:	5e                   	pop    %esi
  807ae2:	5f                   	pop    %edi
  807ae3:	5d                   	pop    %ebp
  807ae4:	c3                   	ret    

00807ae5 <inet_chksum_pseudo_partial>:
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p,
       struct ip_addr *src, struct ip_addr *dest,
       u8_t proto, u16_t proto_len, u16_t chksum_len)
{
  807ae5:	55                   	push   %ebp
  807ae6:	89 e5                	mov    %esp,%ebp
  807ae8:	57                   	push   %edi
  807ae9:	56                   	push   %esi
  807aea:	53                   	push   %ebx
  807aeb:	83 ec 2c             	sub    $0x2c,%esp
  807aee:	8b 75 08             	mov    0x8(%ebp),%esi
  807af1:	8b 45 14             	mov    0x14(%ebp),%eax
  807af4:	89 45 dc             	mov    %eax,-0x24(%ebp)
  807af7:	8b 45 18             	mov    0x18(%ebp),%eax
  807afa:	89 45 d8             	mov    %eax,-0x28(%ebp)
  807afd:	0f b7 5d 1c          	movzwl 0x1c(%ebp),%ebx
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
  swapped = 0;
  807b01:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
  807b05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  807b0c:	eb 73                	jmp    807b81 <inet_chksum_pseudo_partial+0x9c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  807b0e:	0f b7 7e 0a          	movzwl 0xa(%esi),%edi
  807b12:	66 39 fb             	cmp    %di,%bx
  807b15:	0f 46 fb             	cmovbe %ebx,%edi
    if (chklen > chksum_len) {
      chklen = chksum_len;
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  807b18:	0f b7 d7             	movzwl %di,%edx
  807b1b:	8b 46 04             	mov    0x4(%esi),%eax
  807b1e:	e8 67 fe ff ff       	call   80798a <lwip_standard_chksum>
  807b23:	0f b7 c0             	movzwl %ax,%eax
  807b26:	03 45 e4             	add    -0x1c(%ebp),%eax
    chksum_len -= chklen;
  807b29:	29 fb                	sub    %edi,%ebx
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  807b2b:	66 81 fb fe 7f       	cmp    $0x7ffe,%bx
  807b30:	76 1c                	jbe    807b4e <inet_chksum_pseudo_partial+0x69>
  807b32:	c7 44 24 08 0d 30 81 	movl   $0x81300d,0x8(%esp)
  807b39:	00 
  807b3a:	c7 44 24 04 60 01 00 	movl   $0x160,0x4(%esp)
  807b41:	00 
  807b42:	c7 04 24 18 30 81 00 	movl   $0x813018,(%esp)
  807b49:	e8 40 75 00 00       	call   80f08e <_panic>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  807b4e:	89 c2                	mov    %eax,%edx
  807b50:	c1 ea 10             	shr    $0x10,%edx
  807b53:	0f b7 c0             	movzwl %ax,%eax
  807b56:	01 d0                	add    %edx,%eax
  807b58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (q->len % 2 != 0) {
  807b5b:	f6 46 0a 01          	testb  $0x1,0xa(%esi)
  807b5f:	74 1e                	je     807b7f <inet_chksum_pseudo_partial+0x9a>
      swapped = 1 - swapped;
  807b61:	b8 01 00 00 00       	mov    $0x1,%eax
  807b66:	2a 45 e3             	sub    -0x1d(%ebp),%al
  807b69:	88 45 e3             	mov    %al,-0x1d(%ebp)
      acc = SWAP_BYTES_IN_WORD(acc);
  807b6c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  807b6f:	89 c8                	mov    %ecx,%eax
  807b71:	c1 e0 08             	shl    $0x8,%eax
  807b74:	0f b7 c0             	movzwl %ax,%eax
  807b77:	0f b6 d5             	movzbl %ch,%edx
  807b7a:	09 c2                	or     %eax,%edx
  807b7c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  u16_t chklen;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  807b7f:	8b 36                	mov    (%esi),%esi
  807b81:	66 85 db             	test   %bx,%bx
  807b84:	74 04                	je     807b8a <inet_chksum_pseudo_partial+0xa5>
  807b86:	85 f6                	test   %esi,%esi
  807b88:	75 84                	jne    807b0e <inet_chksum_pseudo_partial+0x29>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  807b8a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
  807b8e:	74 13                	je     807ba3 <inet_chksum_pseudo_partial+0xbe>
    acc = SWAP_BYTES_IN_WORD(acc);
  807b90:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  807b93:	89 c8                	mov    %ecx,%eax
  807b95:	c1 e0 08             	shl    $0x8,%eax
  807b98:	0f b7 c0             	movzwl %ax,%eax
  807b9b:	0f b6 d5             	movzbl %ch,%edx
  807b9e:	09 c2                	or     %eax,%edx
  807ba0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  }
  acc += (src->addr & 0xffffUL);
  807ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
  807ba6:	8b 10                	mov    (%eax),%edx
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  807ba8:	8b 45 10             	mov    0x10(%ebp),%eax
  807bab:	8b 00                	mov    (%eax),%eax

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  807bad:	89 d1                	mov    %edx,%ecx
  807baf:	c1 e9 10             	shr    $0x10,%ecx
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  807bb2:	0f b7 f2             	movzwl %dx,%esi
  807bb5:	01 ce                	add    %ecx,%esi
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  807bb7:	0f b7 c8             	movzwl %ax,%ecx

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  807bba:	01 ce                	add    %ecx,%esi
  acc += (dest->addr & 0xffffUL);
  acc += ((dest->addr >> 16) & 0xffffUL);
  807bbc:	c1 e8 10             	shr    $0x10,%eax
  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  807bbf:	01 c6                	add    %eax,%esi
  acc += ((dest->addr >> 16) & 0xffffUL);
  807bc1:	03 75 e4             	add    -0x1c(%ebp),%esi
  acc += (u32_t)htons((u16_t)proto);
  807bc4:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
  807bc8:	89 04 24             	mov    %eax,(%esp)
  807bcb:	e8 86 01 00 00       	call   807d56 <htons>
  807bd0:	0f b7 d8             	movzwl %ax,%ebx
  807bd3:	01 f3                	add    %esi,%ebx
  acc += (u32_t)htons(proto_len);
  807bd5:	0f b7 45 d8          	movzwl -0x28(%ebp),%eax
  807bd9:	89 04 24             	mov    %eax,(%esp)
  807bdc:	e8 75 01 00 00       	call   807d56 <htons>
  807be1:	0f b7 d0             	movzwl %ax,%edx
  807be4:	01 da                	add    %ebx,%edx

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  807be6:	89 d0                	mov    %edx,%eax
  807be8:	c1 e8 10             	shr    $0x10,%eax
  807beb:	0f b7 d2             	movzwl %dx,%edx
  807bee:	01 d0                	add    %edx,%eax
  acc = FOLD_U32T(acc);
  807bf0:	89 c2                	mov    %eax,%edx
  807bf2:	c1 ea 10             	shr    $0x10,%edx
  807bf5:	01 d0                	add    %edx,%eax
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  807bf7:	f7 d0                	not    %eax
}
  807bf9:	83 c4 2c             	add    $0x2c,%esp
  807bfc:	5b                   	pop    %ebx
  807bfd:	5e                   	pop    %esi
  807bfe:	5f                   	pop    %edi
  807bff:	5d                   	pop    %ebp
  807c00:	c3                   	ret    

00807c01 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  807c01:	55                   	push   %ebp
  807c02:	89 e5                	mov    %esp,%ebp
  807c04:	83 ec 08             	sub    $0x8,%esp
  return ~LWIP_CHKSUM(dataptr, len);
  807c07:	0f b7 55 0c          	movzwl 0xc(%ebp),%edx
  807c0b:	8b 45 08             	mov    0x8(%ebp),%eax
  807c0e:	e8 77 fd ff ff       	call   80798a <lwip_standard_chksum>
  807c13:	f7 d0                	not    %eax
}
  807c15:	c9                   	leave  
  807c16:	c3                   	ret    

00807c17 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  807c17:	55                   	push   %ebp
  807c18:	89 e5                	mov    %esp,%ebp
  807c1a:	57                   	push   %edi
  807c1b:	56                   	push   %esi
  807c1c:	53                   	push   %ebx
  807c1d:	83 ec 0c             	sub    $0xc,%esp
  807c20:	8b 5d 08             	mov    0x8(%ebp),%ebx
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  807c23:	bf 00 00 00 00       	mov    $0x0,%edi
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  807c28:	be 00 00 00 00       	mov    $0x0,%esi
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  807c2d:	eb 3d                	jmp    807c6c <inet_chksum_pbuf+0x55>
    acc += LWIP_CHKSUM(q->payload, q->len);
  807c2f:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  807c33:	8b 43 04             	mov    0x4(%ebx),%eax
  807c36:	e8 4f fd ff ff       	call   80798a <lwip_standard_chksum>
  807c3b:	0f b7 c0             	movzwl %ax,%eax
  807c3e:	01 c6                	add    %eax,%esi
    acc = FOLD_U32T(acc);
  807c40:	89 f0                	mov    %esi,%eax
  807c42:	c1 e8 10             	shr    $0x10,%eax
  807c45:	0f b7 f6             	movzwl %si,%esi
  807c48:	01 c6                	add    %eax,%esi
    if (q->len % 2 != 0) {
  807c4a:	f6 43 0a 01          	testb  $0x1,0xa(%ebx)
  807c4e:	74 1a                	je     807c6a <inet_chksum_pbuf+0x53>
      swapped = 1 - swapped;
  807c50:	b8 01 00 00 00       	mov    $0x1,%eax
  807c55:	89 f9                	mov    %edi,%ecx
  807c57:	29 c8                	sub    %ecx,%eax
  807c59:	89 c7                	mov    %eax,%edi
      acc = SWAP_BYTES_IN_WORD(acc);
  807c5b:	89 f0                	mov    %esi,%eax
  807c5d:	c1 e0 08             	shl    $0x8,%eax
  807c60:	0f b7 c0             	movzwl %ax,%eax
  807c63:	89 f1                	mov    %esi,%ecx
  807c65:	0f b6 f5             	movzbl %ch,%esi
  807c68:	09 c6                	or     %eax,%esi
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  807c6a:	8b 1b                	mov    (%ebx),%ebx
  807c6c:	85 db                	test   %ebx,%ebx
  807c6e:	75 bf                	jne    807c2f <inet_chksum_pbuf+0x18>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
  807c70:	89 f8                	mov    %edi,%eax
  807c72:	84 c0                	test   %al,%al
  807c74:	74 0f                	je     807c85 <inet_chksum_pbuf+0x6e>
    acc = SWAP_BYTES_IN_WORD(acc);
  807c76:	89 f0                	mov    %esi,%eax
  807c78:	c1 e0 08             	shl    $0x8,%eax
  807c7b:	0f b7 c0             	movzwl %ax,%eax
  807c7e:	89 f1                	mov    %esi,%ecx
  807c80:	0f b6 f5             	movzbl %ch,%esi
  807c83:	09 c6                	or     %eax,%esi
  }
  return (u16_t)~(acc & 0xffffUL);
  807c85:	89 f0                	mov    %esi,%eax
  807c87:	f7 d0                	not    %eax
}
  807c89:	83 c4 0c             	add    $0xc,%esp
  807c8c:	5b                   	pop    %ebx
  807c8d:	5e                   	pop    %esi
  807c8e:	5f                   	pop    %edi
  807c8f:	5d                   	pop    %ebp
  807c90:	c3                   	ret    
  807c91:	66 90                	xchg   %ax,%ax
  807c93:	66 90                	xchg   %ax,%ax
  807c95:	66 90                	xchg   %ax,%ax
  807c97:	66 90                	xchg   %ax,%ax
  807c99:	66 90                	xchg   %ax,%ax
  807c9b:	66 90                	xchg   %ax,%ax
  807c9d:	66 90                	xchg   %ax,%ax
  807c9f:	90                   	nop

00807ca0 <inet_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
inet_ntoa(struct in_addr addr)
{
  807ca0:	55                   	push   %ebp
  807ca1:	89 e5                	mov    %esp,%ebp
  807ca3:	57                   	push   %edi
  807ca4:	56                   	push   %esi
  807ca5:	53                   	push   %ebx
  807ca6:	83 ec 19             	sub    $0x19,%esp
  static char str[16];
  u32_t s_addr = addr.s_addr;
  807ca9:	8b 45 08             	mov    0x8(%ebp),%eax
  807cac:	89 45 f0             	mov    %eax,-0x10(%ebp)
  u8_t n;
  u8_t i;

  rp = str;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
  807caf:	c6 45 db 00          	movb   $0x0,-0x25(%ebp)
  u8_t rem;
  u8_t n;
  u8_t i;

  rp = str;
  ap = (u8_t *)&s_addr;
  807cb3:	8d 5d f0             	lea    -0x10(%ebp),%ebx
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;

  rp = str;
  807cb6:	c7 45 dc 04 5a b3 00 	movl   $0xb35a04,-0x24(%ebp)
 */
char *
inet_ntoa(struct in_addr addr)
{
  static char str[16];
  u32_t s_addr = addr.s_addr;
  807cbd:	be 00 00 00 00       	mov    $0x0,%esi
  807cc2:	89 5d e0             	mov    %ebx,-0x20(%ebp)
  807cc5:	eb 02                	jmp    807cc9 <inet_ntoa+0x29>
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--)
      *rp++ = inv[i];
    *rp++ = '.';
  807cc7:	89 ce                	mov    %ecx,%esi
  rp = str;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  807cc9:	8b 7d e0             	mov    -0x20(%ebp),%edi
  807ccc:	0f b6 17             	movzbl (%edi),%edx
      *ap /= (u8_t)10;
  807ccf:	0f b6 c2             	movzbl %dl,%eax
  807cd2:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
  807cd5:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
  807cd8:	8d 04 80             	lea    (%eax,%eax,4),%eax
  807cdb:	66 c1 e8 0b          	shr    $0xb,%ax
  807cdf:	88 07                	mov    %al,(%edi)
      inv[i++] = '0' + rem;
  807ce1:	8d 4e 01             	lea    0x1(%esi),%ecx
  807ce4:	89 f3                	mov    %esi,%ebx
  807ce6:	0f b6 f3             	movzbl %bl,%esi
  rp = str;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  807ce9:	8d 3c 80             	lea    (%eax,%eax,4),%edi
  807cec:	01 ff                	add    %edi,%edi
  807cee:	89 fb                	mov    %edi,%ebx
  807cf0:	29 da                	sub    %ebx,%edx
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
  807cf2:	83 c2 30             	add    $0x30,%edx
  807cf5:	88 54 35 ed          	mov    %dl,-0x13(%ebp,%esi,1)
    } while(*ap);
  807cf9:	84 c0                	test   %al,%al
  807cfb:	75 ca                	jne    807cc7 <inet_ntoa+0x27>
  807cfd:	8b 55 dc             	mov    -0x24(%ebp),%edx
  807d00:	89 c8                	mov    %ecx,%eax
  807d02:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  807d05:	89 cf                	mov    %ecx,%edi
  807d07:	eb 0d                	jmp    807d16 <inet_ntoa+0x76>
    while(i--)
      *rp++ = inv[i];
  807d09:	0f b6 f0             	movzbl %al,%esi
  807d0c:	0f b6 4c 35 ed       	movzbl -0x13(%ebp,%esi,1),%ecx
  807d11:	88 0a                	mov    %cl,(%edx)
  807d13:	83 c2 01             	add    $0x1,%edx
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--)
  807d16:	83 e8 01             	sub    $0x1,%eax
  807d19:	3c ff                	cmp    $0xff,%al
  807d1b:	75 ec                	jne    807d09 <inet_ntoa+0x69>
  807d1d:	89 5d e0             	mov    %ebx,-0x20(%ebp)
  807d20:	89 f9                	mov    %edi,%ecx
  807d22:	0f b6 c9             	movzbl %cl,%ecx
  807d25:	03 4d dc             	add    -0x24(%ebp),%ecx
      *rp++ = inv[i];
    *rp++ = '.';
  807d28:	8d 41 01             	lea    0x1(%ecx),%eax
  807d2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
    ap++;
  807d2e:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  u8_t n;
  u8_t i;

  rp = str;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
  807d32:	80 45 db 01          	addb   $0x1,-0x25(%ebp)
  807d36:	80 7d db 03          	cmpb   $0x3,-0x25(%ebp)
  807d3a:	77 0a                	ja     807d46 <inet_ntoa+0xa6>
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--)
      *rp++ = inv[i];
    *rp++ = '.';
  807d3c:	c6 01 2e             	movb   $0x2e,(%ecx)
  807d3f:	b9 00 00 00 00       	mov    $0x0,%ecx
  807d44:	eb 81                	jmp    807cc7 <inet_ntoa+0x27>
    ap++;
  }
  *--rp = 0;
  807d46:	c6 01 00             	movb   $0x0,(%ecx)
  return str;
}
  807d49:	b8 04 5a b3 00       	mov    $0xb35a04,%eax
  807d4e:	83 c4 19             	add    $0x19,%esp
  807d51:	5b                   	pop    %ebx
  807d52:	5e                   	pop    %esi
  807d53:	5f                   	pop    %edi
  807d54:	5d                   	pop    %ebp
  807d55:	c3                   	ret    

00807d56 <htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
htons(u16_t n)
{
  807d56:	55                   	push   %ebp
  807d57:	89 e5                	mov    %esp,%ebp
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  807d59:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  807d5d:	66 c1 c0 08          	rol    $0x8,%ax
}
  807d61:	5d                   	pop    %ebp
  807d62:	c3                   	ret    

00807d63 <ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
ntohs(u16_t n)
{
  807d63:	55                   	push   %ebp
  807d64:	89 e5                	mov    %esp,%ebp
 * @return n in network byte order
 */
u16_t
htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  807d66:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  807d6a:	66 c1 c0 08          	rol    $0x8,%ax
 */
u16_t
ntohs(u16_t n)
{
  return htons(n);
}
  807d6e:	5d                   	pop    %ebp
  807d6f:	c3                   	ret    

00807d70 <htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
htonl(u32_t n)
{
  807d70:	55                   	push   %ebp
  807d71:	89 e5                	mov    %esp,%ebp
  807d73:	8b 55 08             	mov    0x8(%ebp),%edx
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
  807d76:	89 d1                	mov    %edx,%ecx
  807d78:	c1 e9 18             	shr    $0x18,%ecx
 * @return n in network byte order
 */
u32_t
htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
  807d7b:	89 d0                	mov    %edx,%eax
  807d7d:	c1 e0 18             	shl    $0x18,%eax
  807d80:	09 c8                	or     %ecx,%eax
    ((n & 0xff00) << 8) |
  807d82:	89 d1                	mov    %edx,%ecx
  807d84:	81 e1 00 ff 00 00    	and    $0xff00,%ecx
  807d8a:	c1 e1 08             	shl    $0x8,%ecx
  807d8d:	09 c8                	or     %ecx,%eax
    ((n & 0xff0000UL) >> 8) |
  807d8f:	81 e2 00 00 ff 00    	and    $0xff0000,%edx
  807d95:	c1 ea 08             	shr    $0x8,%edx
 * @return n in network byte order
 */
u32_t
htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
  807d98:	09 d0                	or     %edx,%eax
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
  807d9a:	5d                   	pop    %ebp
  807d9b:	c3                   	ret    

00807d9c <inet_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
inet_aton(const char *cp, struct in_addr *addr)
{
  807d9c:	55                   	push   %ebp
  807d9d:	89 e5                	mov    %esp,%ebp
  807d9f:	57                   	push   %edi
  807da0:	56                   	push   %esi
  807da1:	53                   	push   %ebx
  807da2:	83 ec 20             	sub    $0x20,%esp
  807da5:	8b 45 08             	mov    0x8(%ebp),%eax
  u32_t val;
  int base, n, c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
  807da8:	0f be 10             	movsbl (%eax),%edx
inet_aton(const char *cp, struct in_addr *addr)
{
  u32_t val;
  int base, n, c;
  u32_t parts[4];
  u32_t *pp = parts;
  807dab:	8d 75 e4             	lea    -0x1c(%ebp),%esi
  807dae:	89 75 d8             	mov    %esi,-0x28(%ebp)
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
  807db1:	8d 4a d0             	lea    -0x30(%edx),%ecx
  807db4:	80 f9 09             	cmp    $0x9,%cl
  807db7:	0f 87 a6 01 00 00    	ja     807f63 <inet_aton+0x1c7>
      return (0);
    val = 0;
    base = 10;
  807dbd:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
    if (c == '0') {
  807dc4:	83 fa 30             	cmp    $0x30,%edx
  807dc7:	75 2b                	jne    807df4 <inet_aton+0x58>
      c = *++cp;
  807dc9:	0f b6 50 01          	movzbl 0x1(%eax),%edx
      if (c == 'x' || c == 'X') {
  807dcd:	89 d1                	mov    %edx,%ecx
  807dcf:	83 e1 df             	and    $0xffffffdf,%ecx
  807dd2:	80 f9 58             	cmp    $0x58,%cl
  807dd5:	74 0f                	je     807de6 <inet_aton+0x4a>
    if (!isdigit(c))
      return (0);
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
  807dd7:	83 c0 01             	add    $0x1,%eax
  807dda:	0f be d2             	movsbl %dl,%edx
      if (c == 'x' || c == 'X') {
        base = 16;
        c = *++cp;
      } else
        base = 8;
  807ddd:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%ebp)
  807de4:	eb 0e                	jmp    807df4 <inet_aton+0x58>
    base = 10;
    if (c == '0') {
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
        c = *++cp;
  807de6:	0f be 50 02          	movsbl 0x2(%eax),%edx
  807dea:	8d 40 02             	lea    0x2(%eax),%eax
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
  807ded:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
  807df4:	83 c0 01             	add    $0x1,%eax
  807df7:	bf 00 00 00 00       	mov    $0x0,%edi
  807dfc:	eb 03                	jmp    807e01 <inet_aton+0x65>
  807dfe:	83 c0 01             	add    $0x1,%eax
  807e01:	8d 70 ff             	lea    -0x1(%eax),%esi
        c = *++cp;
      } else
        base = 8;
    }
    for (;;) {
      if (isdigit(c)) {
  807e04:	89 d3                	mov    %edx,%ebx
  807e06:	8d 4a d0             	lea    -0x30(%edx),%ecx
  807e09:	80 f9 09             	cmp    $0x9,%cl
  807e0c:	77 0d                	ja     807e1b <inet_aton+0x7f>
        val = (val * base) + (int)(c - '0');
  807e0e:	0f af 7d e0          	imul   -0x20(%ebp),%edi
  807e12:	8d 7c 3a d0          	lea    -0x30(%edx,%edi,1),%edi
        c = *++cp;
  807e16:	0f be 10             	movsbl (%eax),%edx
  807e19:	eb e3                	jmp    807dfe <inet_aton+0x62>
      } else if (base == 16 && isxdigit(c)) {
  807e1b:	83 7d e0 10          	cmpl   $0x10,-0x20(%ebp)
  807e1f:	75 30                	jne    807e51 <inet_aton+0xb5>
  807e21:	8d 4b 9f             	lea    -0x61(%ebx),%ecx
  807e24:	88 4d df             	mov    %cl,-0x21(%ebp)
  807e27:	89 d1                	mov    %edx,%ecx
  807e29:	83 e1 df             	and    $0xffffffdf,%ecx
  807e2c:	83 e9 41             	sub    $0x41,%ecx
  807e2f:	80 f9 05             	cmp    $0x5,%cl
  807e32:	77 23                	ja     807e57 <inet_aton+0xbb>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
  807e34:	89 fb                	mov    %edi,%ebx
  807e36:	c1 e3 04             	shl    $0x4,%ebx
  807e39:	8d 7a 0a             	lea    0xa(%edx),%edi
  807e3c:	80 7d df 1a          	cmpb   $0x1a,-0x21(%ebp)
  807e40:	19 c9                	sbb    %ecx,%ecx
  807e42:	83 e1 20             	and    $0x20,%ecx
  807e45:	83 c1 41             	add    $0x41,%ecx
  807e48:	29 cf                	sub    %ecx,%edi
  807e4a:	09 df                	or     %ebx,%edi
        c = *++cp;
  807e4c:	0f be 10             	movsbl (%eax),%edx
  807e4f:	eb ad                	jmp    807dfe <inet_aton+0x62>
  807e51:	89 d0                	mov    %edx,%eax
  807e53:	89 f9                	mov    %edi,%ecx
  807e55:	eb 04                	jmp    807e5b <inet_aton+0xbf>
  807e57:	89 d0                	mov    %edx,%eax
  807e59:	89 f9                	mov    %edi,%ecx
      } else
        break;
    }
    if (c == '.') {
  807e5b:	83 f8 2e             	cmp    $0x2e,%eax
  807e5e:	75 22                	jne    807e82 <inet_aton+0xe6>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3)
  807e60:	8d 45 f0             	lea    -0x10(%ebp),%eax
  807e63:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  807e66:	0f 84 fe 00 00 00    	je     807f6a <inet_aton+0x1ce>
        return (0);
      *pp++ = val;
  807e6c:	83 45 d8 04          	addl   $0x4,-0x28(%ebp)
  807e70:	8b 45 d8             	mov    -0x28(%ebp),%eax
  807e73:	89 48 fc             	mov    %ecx,-0x4(%eax)
      c = *++cp;
  807e76:	8d 46 01             	lea    0x1(%esi),%eax
  807e79:	0f be 56 01          	movsbl 0x1(%esi),%edx
    } else
      break;
  }
  807e7d:	e9 2f ff ff ff       	jmp    807db1 <inet_aton+0x15>
  807e82:	89 f9                	mov    %edi,%ecx
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && (!isprint(c) || !isspace(c)))
  807e84:	85 d2                	test   %edx,%edx
  807e86:	74 27                	je     807eaf <inet_aton+0x113>
    return (0);
  807e88:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && (!isprint(c) || !isspace(c)))
  807e8d:	80 fb 1f             	cmp    $0x1f,%bl
  807e90:	0f 86 e7 00 00 00    	jbe    807f7d <inet_aton+0x1e1>
  807e96:	84 d2                	test   %dl,%dl
  807e98:	0f 88 d3 00 00 00    	js     807f71 <inet_aton+0x1d5>
  807e9e:	83 fa 20             	cmp    $0x20,%edx
  807ea1:	74 0c                	je     807eaf <inet_aton+0x113>
  807ea3:	83 ea 09             	sub    $0x9,%edx
  807ea6:	83 fa 04             	cmp    $0x4,%edx
  807ea9:	0f 87 ce 00 00 00    	ja     807f7d <inet_aton+0x1e1>
    return (0);
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  n = pp - parts + 1;
  807eaf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  807eb2:	8b 55 d8             	mov    -0x28(%ebp),%edx
  807eb5:	29 c2                	sub    %eax,%edx
  807eb7:	c1 fa 02             	sar    $0x2,%edx
  807eba:	83 c2 01             	add    $0x1,%edx
  switch (n) {
  807ebd:	83 fa 02             	cmp    $0x2,%edx
  807ec0:	74 22                	je     807ee4 <inet_aton+0x148>
  807ec2:	83 fa 02             	cmp    $0x2,%edx
  807ec5:	7f 0f                	jg     807ed6 <inet_aton+0x13a>

  case 0:
    return (0);       /* initial nondigit */
  807ec7:	b8 00 00 00 00       	mov    $0x0,%eax
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  n = pp - parts + 1;
  switch (n) {
  807ecc:	85 d2                	test   %edx,%edx
  807ece:	0f 84 a9 00 00 00    	je     807f7d <inet_aton+0x1e1>
  807ed4:	eb 73                	jmp    807f49 <inet_aton+0x1ad>
  807ed6:	83 fa 03             	cmp    $0x3,%edx
  807ed9:	74 26                	je     807f01 <inet_aton+0x165>
  807edb:	83 fa 04             	cmp    $0x4,%edx
  807ede:	66 90                	xchg   %ax,%ax
  807ee0:	74 40                	je     807f22 <inet_aton+0x186>
  807ee2:	eb 65                	jmp    807f49 <inet_aton+0x1ad>
  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL)
      return (0);
  807ee4:	b8 00 00 00 00       	mov    $0x0,%eax

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL)
  807ee9:	81 f9 ff ff ff 00    	cmp    $0xffffff,%ecx
  807eef:	0f 87 88 00 00 00    	ja     807f7d <inet_aton+0x1e1>
      return (0);
    val |= parts[0] << 24;
  807ef5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  807ef8:	c1 e0 18             	shl    $0x18,%eax
  807efb:	89 cf                	mov    %ecx,%edi
  807efd:	09 c7                	or     %eax,%edi
    break;
  807eff:	eb 48                	jmp    807f49 <inet_aton+0x1ad>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff)
      return (0);
  807f01:	b8 00 00 00 00       	mov    $0x0,%eax
      return (0);
    val |= parts[0] << 24;
    break;

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff)
  807f06:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
  807f0c:	77 6f                	ja     807f7d <inet_aton+0x1e1>
      return (0);
    val |= (parts[0] << 24) | (parts[1] << 16);
  807f0e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  807f11:	c1 e2 10             	shl    $0x10,%edx
  807f14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  807f17:	c1 e0 18             	shl    $0x18,%eax
  807f1a:	09 d0                	or     %edx,%eax
  807f1c:	09 c8                	or     %ecx,%eax
  807f1e:	89 c7                	mov    %eax,%edi
    break;
  807f20:	eb 27                	jmp    807f49 <inet_aton+0x1ad>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff)
      return (0);
  807f22:	b8 00 00 00 00       	mov    $0x0,%eax
      return (0);
    val |= (parts[0] << 24) | (parts[1] << 16);
    break;

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff)
  807f27:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
  807f2d:	77 4e                	ja     807f7d <inet_aton+0x1e1>
      return (0);
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  807f2f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  807f32:	c1 e2 10             	shl    $0x10,%edx
  807f35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  807f38:	c1 e0 18             	shl    $0x18,%eax
  807f3b:	09 c2                	or     %eax,%edx
  807f3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  807f40:	c1 e0 08             	shl    $0x8,%eax
  807f43:	09 d0                	or     %edx,%eax
  807f45:	09 c8                	or     %ecx,%eax
  807f47:	89 c7                	mov    %eax,%edi
    break;
  }
  if (addr)
  807f49:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  807f4d:	74 29                	je     807f78 <inet_aton+0x1dc>
    addr->s_addr = htonl(val);
  807f4f:	89 3c 24             	mov    %edi,(%esp)
  807f52:	e8 19 fe ff ff       	call   807d70 <htonl>
  807f57:	8b 75 0c             	mov    0xc(%ebp),%esi
  807f5a:	89 06                	mov    %eax,(%esi)
  return (1);
  807f5c:	b8 01 00 00 00       	mov    $0x1,%eax
  807f61:	eb 1a                	jmp    807f7d <inet_aton+0x1e1>
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
      return (0);
  807f63:	b8 00 00 00 00       	mov    $0x0,%eax
  807f68:	eb 13                	jmp    807f7d <inet_aton+0x1e1>
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3)
        return (0);
  807f6a:	b8 00 00 00 00       	mov    $0x0,%eax
  807f6f:	eb 0c                	jmp    807f7d <inet_aton+0x1e1>
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && (!isprint(c) || !isspace(c)))
    return (0);
  807f71:	b8 00 00 00 00       	mov    $0x0,%eax
  807f76:	eb 05                	jmp    807f7d <inet_aton+0x1e1>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
    break;
  }
  if (addr)
    addr->s_addr = htonl(val);
  return (1);
  807f78:	b8 01 00 00 00       	mov    $0x1,%eax
}
  807f7d:	83 c4 20             	add    $0x20,%esp
  807f80:	5b                   	pop    %ebx
  807f81:	5e                   	pop    %esi
  807f82:	5f                   	pop    %edi
  807f83:	5d                   	pop    %ebp
  807f84:	c3                   	ret    

00807f85 <inet_addr>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
inet_addr(const char *cp)
{
  807f85:	55                   	push   %ebp
  807f86:	89 e5                	mov    %esp,%ebp
  807f88:	83 ec 18             	sub    $0x18,%esp
  struct in_addr val;

  if (inet_aton(cp, &val)) {
  807f8b:	8d 45 fc             	lea    -0x4(%ebp),%eax
  807f8e:	89 44 24 04          	mov    %eax,0x4(%esp)
  807f92:	8b 45 08             	mov    0x8(%ebp),%eax
  807f95:	89 04 24             	mov    %eax,(%esp)
  807f98:	e8 ff fd ff ff       	call   807d9c <inet_aton>
  807f9d:	85 c0                	test   %eax,%eax
    return (val.s_addr);
  807f9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  807fa4:	0f 45 45 fc          	cmovne -0x4(%ebp),%eax
  }
  return (INADDR_NONE);
}
  807fa8:	c9                   	leave  
  807fa9:	c3                   	ret    

00807faa <ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
ntohl(u32_t n)
{
  807faa:	55                   	push   %ebp
  807fab:	89 e5                	mov    %esp,%ebp
  807fad:	83 ec 04             	sub    $0x4,%esp
  return htonl(n);
  807fb0:	8b 45 08             	mov    0x8(%ebp),%eax
  807fb3:	89 04 24             	mov    %eax,(%esp)
  807fb6:	e8 b5 fd ff ff       	call   807d70 <htonl>
}
  807fbb:	c9                   	leave  
  807fbc:	c3                   	ret    
  807fbd:	66 90                	xchg   %ax,%ax
  807fbf:	90                   	nop

00807fc0 <tcp_enqueue>:
 */
err_t
tcp_enqueue(struct tcp_pcb *pcb, void *arg, u16_t len,
  u8_t flags, u8_t apiflags,
  u8_t *optdata, u8_t optlen)
{
  807fc0:	55                   	push   %ebp
  807fc1:	89 e5                	mov    %esp,%ebp
  807fc3:	57                   	push   %edi
  807fc4:	56                   	push   %esi
  807fc5:	53                   	push   %ebx
  807fc6:	83 ec 4c             	sub    $0x4c,%esp
  807fc9:	8b 7d 08             	mov    0x8(%ebp),%edi
  807fcc:	8b 45 10             	mov    0x10(%ebp),%eax
  807fcf:	89 c6                	mov    %eax,%esi
  807fd1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  807fd4:	8b 45 14             	mov    0x14(%ebp),%eax
  807fd7:	89 c1                	mov    %eax,%ecx
  807fd9:	89 45 bc             	mov    %eax,-0x44(%ebp)
  807fdc:	8b 45 18             	mov    0x18(%ebp),%eax
  807fdf:	89 c2                	mov    %eax,%edx
  807fe1:	89 45 b8             	mov    %eax,-0x48(%ebp)
  807fe4:	8b 45 20             	mov    0x20(%ebp),%eax
  807fe7:	66 89 75 c2          	mov    %si,-0x3e(%ebp)
  807feb:	88 4d ce             	mov    %cl,-0x32(%ebp)
  807fee:	88 45 cb             	mov    %al,-0x35(%ebp)
  void *ptr;
  u16_t queuelen;

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_enqueue(pcb=%p, arg=%p, len=%"U16_F", flags=%"X16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)flags, (u16_t)apiflags));
  LWIP_ERROR("tcp_enqueue: len == 0 || optlen == 0 (programmer violates API)",
  807ff1:	66 85 f6             	test   %si,%si
  807ff4:	74 20                	je     808016 <tcp_enqueue+0x56>
  807ff6:	84 c0                	test   %al,%al
  807ff8:	74 1c                	je     808016 <tcp_enqueue+0x56>
  807ffa:	c7 44 24 08 3c 30 81 	movl   $0x81303c,0x8(%esp)
  808001:	00 
  808002:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
  808009:	00 
  80800a:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808011:	e8 78 70 00 00       	call   80f08e <_panic>
      ((len == 0) || (optlen == 0)), return ERR_ARG;);
  LWIP_ERROR("tcp_enqueue: arg == NULL || optdata == NULL (programmer violates API)",
  808016:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80801a:	0f 95 c1             	setne  %cl
  80801d:	88 4d c9             	mov    %cl,-0x37(%ebp)
  808020:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  808024:	0f 95 45 cf          	setne  -0x31(%ebp)
  808028:	84 c9                	test   %cl,%cl
  80802a:	74 22                	je     80804e <tcp_enqueue+0x8e>
  80802c:	80 7d cf 00          	cmpb   $0x0,-0x31(%ebp)
  808030:	74 1c                	je     80804e <tcp_enqueue+0x8e>
  808032:	c7 44 24 08 7c 30 81 	movl   $0x81307c,0x8(%esp)
  808039:	00 
  80803a:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
  808041:	00 
  808042:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808049:	e8 40 70 00 00       	call   80f08e <_panic>
      ((arg == NULL) || (optdata == NULL)), return ERR_ARG;);
  /* fail on too much data */
  if (len > pcb->snd_buf) {
  80804e:	0f b7 4d c4          	movzwl -0x3c(%ebp),%ecx
  808052:	66 3b 4f 6e          	cmp    0x6e(%edi),%cx
  808056:	76 0e                	jbe    808066 <tcp_enqueue+0xa6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n", len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  808058:	80 4f 20 80          	orb    $0x80,0x20(%edi)
    return ERR_MEM;
  80805c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  808061:	e9 24 06 00 00       	jmp    80868a <tcp_enqueue+0x6ca>
  left = len;
  ptr = arg;

  /* seqno will be the sequence number of the first segment enqueued
   * by the call to this function. */
  seqno = pcb->snd_lbb;
  808066:	8b 4f 68             	mov    0x68(%edi),%ecx
  808069:	89 4d d8             	mov    %ecx,-0x28(%ebp)

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  queuelen = pcb->snd_queuelen;
  80806c:	0f b7 4f 70          	movzwl 0x70(%edi),%ecx
  808070:	66 89 4d e4          	mov    %cx,-0x1c(%ebp)
  /* check for configured max queuelen and possible overflow */
  if ((queuelen >= TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  808074:	66 83 f9 1f          	cmp    $0x1f,%cx
  808078:	76 0e                	jbe    808088 <tcp_enqueue+0xc8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue: too long queue %"U16_F" (max %"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  80807a:	80 4f 20 80          	orb    $0x80,0x20(%edi)
    return ERR_MEM;
  80807e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  808083:	e9 02 06 00 00       	jmp    80868a <tcp_enqueue+0x6ca>
  }
  if (queuelen != 0) {
  808088:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  80808d:	74 30                	je     8080bf <tcp_enqueue+0xff>
    LWIP_ASSERT("tcp_enqueue: pbufs on queue => at least one queue non-empty",
  80808f:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  808093:	0f 85 b9 05 00 00    	jne    808652 <tcp_enqueue+0x692>
  808099:	83 7f 74 00          	cmpl   $0x0,0x74(%edi)
  80809d:	0f 85 af 05 00 00    	jne    808652 <tcp_enqueue+0x692>
  8080a3:	c7 44 24 08 c4 30 81 	movl   $0x8130c4,0x8(%esp)
  8080aa:	00 
  8080ab:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
  8080b2:	00 
  8080b3:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  8080ba:	e8 cf 6f 00 00       	call   80f08e <_panic>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_enqueue: no pbufs on queue => both queues empty",
  8080bf:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  8080c3:	75 0a                	jne    8080cf <tcp_enqueue+0x10f>
  8080c5:	83 7f 74 00          	cmpl   $0x0,0x74(%edi)
  8080c9:	0f 84 83 05 00 00    	je     808652 <tcp_enqueue+0x692>
  8080cf:	c7 44 24 08 00 31 81 	movl   $0x813100,0x8(%esp)
  8080d6:	00 
  8080d7:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
  8080de:	00 
  8080df:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  8080e6:	e8 a3 6f 00 00       	call   80f08e <_panic>
    /* The segment length should be the MSS if the data to be enqueued
     * is larger than the MSS. */
    seglen = left > pcb->mss? pcb->mss: left;

    /* Allocate memory for tcp_seg, and fill in fields. */
    seg = memp_malloc(MEMP_TCP_SEG);
  8080eb:	89 de                	mov    %ebx,%esi
  seglen = 0;
  while (queue == NULL || left > 0) {

    /* The segment length should be the MSS if the data to be enqueued
     * is larger than the MSS. */
    seglen = left > pcb->mss? pcb->mss: left;
  8080ed:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  8080f1:	0f b7 4d e0          	movzwl -0x20(%ebp),%ecx
  8080f5:	66 39 c1             	cmp    %ax,%cx
  8080f8:	0f 46 c1             	cmovbe %ecx,%eax
  8080fb:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)

    /* Allocate memory for tcp_seg, and fill in fields. */
    seg = memp_malloc(MEMP_TCP_SEG);
  8080ff:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  808106:	e8 b7 c8 ff ff       	call   8049c2 <memp_malloc>
  80810b:	89 c3                	mov    %eax,%ebx
    if (seg == NULL) {
  80810d:	85 c0                	test   %eax,%eax
  80810f:	0f 84 c3 04 00 00    	je     8085d8 <tcp_enqueue+0x618>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: could not allocate memory for tcp_seg\n"));
      goto memerr;
    }
    seg->next = NULL;
  808115:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    seg->p = NULL;
  80811b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  808122:	80 7d dc 00          	cmpb   $0x0,-0x24(%ebp)
  808126:	75 24                	jne    80814c <tcp_enqueue+0x18c>
      queue = seg;
    }
    /* subsequent segments of to-be-queued data */
    else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("useg != NULL", useg != NULL);
  808128:	85 f6                	test   %esi,%esi
  80812a:	75 1c                	jne    808148 <tcp_enqueue+0x188>
  80812c:	c7 44 24 08 f6 31 81 	movl   $0x8131f6,0x8(%esp)
  808133:	00 
  808134:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
  80813b:	00 
  80813c:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808143:	e8 46 6f 00 00       	call   80f08e <_panic>
      useg->next = seg;
  808148:	89 06                	mov    %eax,(%esi)
  80814a:	eb 03                	jmp    80814f <tcp_enqueue+0x18f>
    /* The segment length should be the MSS if the data to be enqueued
     * is larger than the MSS. */
    seglen = left > pcb->mss? pcb->mss: left;

    /* Allocate memory for tcp_seg, and fill in fields. */
    seg = memp_malloc(MEMP_TCP_SEG);
  80814c:	89 45 d0             	mov    %eax,-0x30(%ebp)
     * and data copied into pbuf, otherwise data comes from
     * ROM or other static memory, and need not be copied. If
     * optdata is != NULL, we have options instead of data. */
     
    /* options? */
    if (optdata != NULL) {
  80814f:	80 7d cf 00          	cmpb   $0x0,-0x31(%ebp)
  808153:	74 69                	je     8081be <tcp_enqueue+0x1fe>
      if ((seg->p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  808155:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80815c:	00 
  80815d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  808160:	89 44 24 04          	mov    %eax,0x4(%esp)
  808164:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80816b:	e8 45 cd ff ff       	call   804eb5 <pbuf_alloc>
  808170:	89 43 04             	mov    %eax,0x4(%ebx)
  808173:	85 c0                	test   %eax,%eax
  808175:	0f 84 5d 04 00 00    	je     8085d8 <tcp_enqueue+0x618>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold optlen",
  80817b:	0f b6 55 cb          	movzbl -0x35(%ebp),%edx
  80817f:	66 39 50 0a          	cmp    %dx,0xa(%eax)
  808183:	73 1c                	jae    8081a1 <tcp_enqueue+0x1e1>
  808185:	c7 44 24 08 34 31 81 	movl   $0x813134,0x8(%esp)
  80818c:	00 
  80818d:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
  808194:	00 
  808195:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  80819c:	e8 ed 6e 00 00       	call   80f08e <_panic>
                  (seg->p->len >= optlen));
      queuelen += pbuf_clen(seg->p);
  8081a1:	89 04 24             	mov    %eax,(%esp)
  8081a4:	e8 c1 d0 ff ff       	call   80526a <pbuf_clen>
  8081a9:	0f b6 c0             	movzbl %al,%eax
  8081ac:	66 01 45 e4          	add    %ax,-0x1c(%ebp)
      seg->dataptr = seg->p->payload;
  8081b0:	8b 43 04             	mov    0x4(%ebx),%eax
  8081b3:	8b 40 04             	mov    0x4(%eax),%eax
  8081b6:	89 43 08             	mov    %eax,0x8(%ebx)
  8081b9:	e9 22 01 00 00       	jmp    8082e0 <tcp_enqueue+0x320>
    }
    /* copy from volatile memory? */
    else if (apiflags & TCP_WRITE_FLAG_COPY) {
  8081be:	80 7d ca 00          	cmpb   $0x0,-0x36(%ebp)
  8081c2:	0f 84 8c 00 00 00    	je     808254 <tcp_enqueue+0x294>
      if ((seg->p = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_RAM)) == NULL) {
  8081c8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8081cf:	00 
  8081d0:	0f b7 75 e6          	movzwl -0x1a(%ebp),%esi
  8081d4:	0f b7 c6             	movzwl %si,%eax
  8081d7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8081db:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8081e2:	e8 ce cc ff ff       	call   804eb5 <pbuf_alloc>
  8081e7:	89 43 04             	mov    %eax,0x4(%ebx)
  8081ea:	85 c0                	test   %eax,%eax
  8081ec:	0f 84 e6 03 00 00    	je     8085d8 <tcp_enqueue+0x618>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold the complete seglen",
  8081f2:	66 3b 70 0a          	cmp    0xa(%eax),%si
  8081f6:	76 1c                	jbe    808214 <tcp_enqueue+0x254>
  8081f8:	c7 44 24 08 5c 31 81 	movl   $0x81315c,0x8(%esp)
  8081ff:	00 
  808200:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
  808207:	00 
  808208:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  80820f:	e8 7a 6e 00 00       	call   80f08e <_panic>
                  (seg->p->len >= seglen));
      queuelen += pbuf_clen(seg->p);
  808214:	89 04 24             	mov    %eax,(%esp)
  808217:	e8 4e d0 ff ff       	call   80526a <pbuf_clen>
  80821c:	0f b6 c0             	movzbl %al,%eax
  80821f:	66 01 45 e4          	add    %ax,-0x1c(%ebp)
      if (arg != NULL) {
  808223:	80 7d c9 00          	cmpb   $0x0,-0x37(%ebp)
  808227:	74 1d                	je     808246 <tcp_enqueue+0x286>
        MEMCPY(seg->p->payload, ptr, seglen);
  808229:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  80822d:	89 44 24 08          	mov    %eax,0x8(%esp)
  808231:	8b 45 0c             	mov    0xc(%ebp),%eax
  808234:	89 44 24 04          	mov    %eax,0x4(%esp)
  808238:	8b 43 04             	mov    0x4(%ebx),%eax
  80823b:	8b 40 04             	mov    0x4(%eax),%eax
  80823e:	89 04 24             	mov    %eax,(%esp)
  808241:	e8 76 77 00 00       	call   80f9bc <memcpy>
      }
      seg->dataptr = seg->p->payload;
  808246:	8b 43 04             	mov    0x4(%ebx),%eax
  808249:	8b 40 04             	mov    0x4(%eax),%eax
  80824c:	89 43 08             	mov    %eax,0x8(%ebx)
  80824f:	e9 8c 00 00 00       	jmp    8082e0 <tcp_enqueue+0x320>
      /* First, allocate a pbuf for holding the data.
       * since the referenced data is available at least until it is sent out on the
       * link (as it has to be ACKed by the remote party) we can safely use PBUF_ROM
       * instead of PBUF_REF here.
       */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  808254:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  80825b:	00 
  80825c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  808260:	89 44 24 04          	mov    %eax,0x4(%esp)
  808264:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80826b:	e8 45 cc ff ff       	call   804eb5 <pbuf_alloc>
  808270:	89 c6                	mov    %eax,%esi
  808272:	85 c0                	test   %eax,%eax
  808274:	0f 84 5e 03 00 00    	je     8085d8 <tcp_enqueue+0x618>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
      }
      ++queuelen;
  80827a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  80827e:	83 c0 01             	add    $0x1,%eax
  808281:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
      /* reference the non-volatile payload data */
      p->payload = ptr;
  808285:	8b 45 0c             	mov    0xc(%ebp),%eax
  808288:	89 46 04             	mov    %eax,0x4(%esi)
      seg->dataptr = ptr;
  80828b:	89 43 08             	mov    %eax,0x8(%ebx)

      /* Second, allocate a pbuf for the headers. */
      if ((seg->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_RAM)) == NULL) {
  80828e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  808295:	00 
  808296:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80829d:	00 
  80829e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8082a5:	e8 0b cc ff ff       	call   804eb5 <pbuf_alloc>
  8082aa:	89 43 04             	mov    %eax,0x4(%ebx)
  8082ad:	85 c0                	test   %eax,%eax
  8082af:	75 0d                	jne    8082be <tcp_enqueue+0x2fe>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p);
  8082b1:	89 34 24             	mov    %esi,(%esp)
  8082b4:	e8 1b cb ff ff       	call   804dd4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: could not allocate memory for header pbuf\n"));
        goto memerr;
  8082b9:	e9 1a 03 00 00       	jmp    8085d8 <tcp_enqueue+0x618>
      }
      queuelen += pbuf_clen(seg->p);
  8082be:	89 04 24             	mov    %eax,(%esp)
  8082c1:	e8 a4 cf ff ff       	call   80526a <pbuf_clen>
  8082c6:	0f b6 c0             	movzbl %al,%eax
  8082c9:	66 03 45 e4          	add    -0x1c(%ebp),%ax
  8082cd:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)

      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(seg->p/*header*/, p/*data*/);
  8082d1:	89 74 24 04          	mov    %esi,0x4(%esp)
  8082d5:	8b 43 04             	mov    0x4(%ebx),%eax
  8082d8:	89 04 24             	mov    %eax,(%esp)
  8082db:	e8 b3 cf ff ff       	call   805293 <pbuf_cat>
      p = NULL;
    }

    /* Now that there are more segments queued, we check again if the
    length of the queue exceeds the configured maximum or overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  8082e0:	66 83 7d e4 20       	cmpw   $0x20,-0x1c(%ebp)
  8082e5:	0f 87 ed 02 00 00    	ja     8085d8 <tcp_enqueue+0x618>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      goto memerr;
    }

    seg->len = seglen;
  8082eb:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  8082ef:	66 89 43 0c          	mov    %ax,0xc(%ebx)

    /* build TCP header */
    if (pbuf_header(seg->p, TCP_HLEN)) {
  8082f3:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  8082fa:	00 
  8082fb:	8b 43 04             	mov    0x4(%ebx),%eax
  8082fe:	89 04 24             	mov    %eax,(%esp)
  808301:	e8 ea c9 ff ff       	call   804cf0 <pbuf_header>
  808306:	84 c0                	test   %al,%al
  808308:	0f 85 ca 02 00 00    	jne    8085d8 <tcp_enqueue+0x618>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: no room for TCP header in pbuf.\n"));
      TCP_STATS_INC(tcp.err);
      goto memerr;
    }
    seg->tcphdr = seg->p->payload;
  80830e:	8b 43 04             	mov    0x4(%ebx),%eax
  808311:	8b 70 04             	mov    0x4(%eax),%esi
  808314:	89 73 10             	mov    %esi,0x10(%ebx)
    seg->tcphdr->src = htons(pcb->local_port);
  808317:	0f b7 47 1c          	movzwl 0x1c(%edi),%eax
  80831b:	89 04 24             	mov    %eax,(%esp)
  80831e:	e8 33 fa ff ff       	call   807d56 <htons>
  808323:	66 89 06             	mov    %ax,(%esi)
    seg->tcphdr->dest = htons(pcb->remote_port);
  808326:	8b 73 10             	mov    0x10(%ebx),%esi
  808329:	0f b7 47 1e          	movzwl 0x1e(%edi),%eax
  80832d:	89 04 24             	mov    %eax,(%esp)
  808330:	e8 21 fa ff ff       	call   807d56 <htons>
  808335:	66 89 46 02          	mov    %ax,0x2(%esi)
    seg->tcphdr->seqno = htonl(seqno);
  808339:	8b 73 10             	mov    0x10(%ebx),%esi
  80833c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  80833f:	89 04 24             	mov    %eax,(%esp)
  808342:	e8 29 fa ff ff       	call   807d70 <htonl>
  808347:	89 46 04             	mov    %eax,0x4(%esi)
    seg->tcphdr->urgp = 0;
  80834a:	8b 43 10             	mov    0x10(%ebx),%eax
  80834d:	66 c7 40 12 00 00    	movw   $0x0,0x12(%eax)
    TCPH_FLAGS_SET(seg->tcphdr, flags);
  808353:	8b 73 10             	mov    0x10(%ebx),%esi
  808356:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  80835a:	89 04 24             	mov    %eax,(%esp)
  80835d:	e8 01 fa ff ff       	call   807d63 <ntohs>
  808362:	83 e0 c0             	and    $0xffffffc0,%eax
  808365:	0f b6 55 ce          	movzbl -0x32(%ebp),%edx
  808369:	09 d0                	or     %edx,%eax
  80836b:	0f b7 c0             	movzwl %ax,%eax
  80836e:	89 04 24             	mov    %eax,(%esp)
  808371:	e8 e0 f9 ff ff       	call   807d56 <htons>
  808376:	66 89 46 0c          	mov    %ax,0xc(%esi)
    /* don't fill in tcphdr->ackno and tcphdr->wnd until later */

    /* Copy the options into the header, if they are present. */
    if (optdata == NULL) {
  80837a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  80837e:	75 23                	jne    8083a3 <tcp_enqueue+0x3e3>
      TCPH_HDRLEN_SET(seg->tcphdr, 5);
  808380:	8b 73 10             	mov    0x10(%ebx),%esi
  808383:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  808387:	89 04 24             	mov    %eax,(%esp)
  80838a:	e8 d4 f9 ff ff       	call   807d63 <ntohs>
  80838f:	83 e0 3f             	and    $0x3f,%eax
  808392:	80 cc 50             	or     $0x50,%ah
  808395:	89 04 24             	mov    %eax,(%esp)
  808398:	e8 b9 f9 ff ff       	call   807d56 <htons>
  80839d:	66 89 46 0c          	mov    %ax,0xc(%esi)
  8083a1:	eb 3e                	jmp    8083e1 <tcp_enqueue+0x421>
    }
    else {
      TCPH_HDRLEN_SET(seg->tcphdr, (5 + optlen / 4));
  8083a3:	8b 73 10             	mov    0x10(%ebx),%esi
  8083a6:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  8083aa:	89 04 24             	mov    %eax,(%esp)
  8083ad:	e8 b1 f9 ff ff       	call   807d63 <ntohs>
  8083b2:	83 e0 3f             	and    $0x3f,%eax
  8083b5:	66 0b 45 cc          	or     -0x34(%ebp),%ax
  8083b9:	0f b7 c0             	movzwl %ax,%eax
  8083bc:	89 04 24             	mov    %eax,(%esp)
  8083bf:	e8 92 f9 ff ff       	call   807d56 <htons>
  8083c4:	66 89 46 0c          	mov    %ax,0xc(%esi)
      /* Copy options into data portion of segment.
       Options can thus only be sent in non data carrying
       segments such as SYN|ACK. */
      SMEMCPY(seg->dataptr, optdata, optlen);
  8083c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  8083cb:	89 44 24 08          	mov    %eax,0x8(%esp)
  8083cf:	8b 45 1c             	mov    0x1c(%ebp),%eax
  8083d2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8083d6:	8b 43 08             	mov    0x8(%ebx),%eax
  8083d9:	89 04 24             	mov    %eax,(%esp)
  8083dc:	e8 db 75 00 00       	call   80f9bc <memcpy>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_enqueue: queueing %"U32_F":%"U32_F" (0x%"X16_F")\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
      (u16_t)flags));

    left -= seglen;
  8083e1:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  8083e5:	66 29 45 e0          	sub    %ax,-0x20(%ebp)
    seqno += seglen;
  8083e9:	0f b7 c0             	movzwl %ax,%eax
  8083ec:	01 45 d8             	add    %eax,-0x28(%ebp)
    ptr = (void *)((u8_t *)ptr + seglen);
  8083ef:	01 45 0c             	add    %eax,0xc(%ebp)

  /* First, break up the data into segments and tuck them together in
   * the local "queue" variable. */
  useg = queue = seg = NULL;
  seglen = 0;
  while (queue == NULL || left > 0) {
  8083f2:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  8083f6:	0f 94 45 dc          	sete   -0x24(%ebp)
  8083fa:	0f 84 eb fc ff ff    	je     8080eb <tcp_enqueue+0x12b>
  808400:	66 83 7d e0 00       	cmpw   $0x0,-0x20(%ebp)
  808405:	0f 85 e0 fc ff ff    	jne    8080eb <tcp_enqueue+0x12b>
    /* The segment length should be the MSS if the data to be enqueued
     * is larger than the MSS. */
    seglen = left > pcb->mss? pcb->mss: left;

    /* Allocate memory for tcp_seg, and fill in fields. */
    seg = memp_malloc(MEMP_TCP_SEG);
  80840b:	89 5d dc             	mov    %ebx,-0x24(%ebp)
  }

  /* Now that the data to be enqueued has been broken up into TCP
  segments in the queue variable, we add them to the end of the
  pcb->unsent queue. */
  if (pcb->unsent == NULL) {
  80840e:	8b 77 74             	mov    0x74(%edi),%esi
  808411:	85 f6                	test   %esi,%esi
  808413:	0f 84 24 02 00 00    	je     80863d <tcp_enqueue+0x67d>
    useg = NULL;
  }
  else {
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  808419:	8b 06                	mov    (%esi),%eax
  80841b:	85 c0                	test   %eax,%eax
  80841d:	74 04                	je     808423 <tcp_enqueue+0x463>
  80841f:	89 c6                	mov    %eax,%esi
  808421:	eb f6                	jmp    808419 <tcp_enqueue+0x459>
  }
  /* { useg is last segment on the unsent queue, NULL if list is empty } */

  /* If there is room in the last pbuf on the unsent queue,
  chain the first pbuf on the queue together with that. */
  if (useg != NULL &&
  808423:	85 f6                	test   %esi,%esi
  808425:	0f 84 12 02 00 00    	je     80863d <tcp_enqueue+0x67d>
    TCP_TCPLEN(useg) != 0 &&
  80842b:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  80842f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  808432:	8b 46 10             	mov    0x10(%esi),%eax
  808435:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808439:	89 04 24             	mov    %eax,(%esp)
  80843c:	e8 22 f9 ff ff       	call   807d63 <ntohs>
  808441:	ba 01 00 00 00       	mov    $0x1,%edx
  808446:	a8 01                	test   $0x1,%al
  808448:	75 17                	jne    808461 <tcp_enqueue+0x4a1>
  80844a:	8b 46 10             	mov    0x10(%esi),%eax
  80844d:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808451:	89 04 24             	mov    %eax,(%esp)
  808454:	e8 0a f9 ff ff       	call   807d63 <ntohs>
  808459:	66 d1 e8             	shr    %ax
  80845c:	89 c2                	mov    %eax,%edx
  80845e:	83 e2 01             	and    $0x1,%edx
  808461:	03 55 e0             	add    -0x20(%ebp),%edx
  }
  /* { useg is last segment on the unsent queue, NULL if list is empty } */

  /* If there is room in the last pbuf on the unsent queue,
  chain the first pbuf on the queue together with that. */
  if (useg != NULL &&
  808464:	85 d2                	test   %edx,%edx
  808466:	0f 84 dc 01 00 00    	je     808648 <tcp_enqueue+0x688>
    TCP_TCPLEN(useg) != 0 &&
    !(TCPH_FLAGS(useg->tcphdr) & (TCP_SYN | TCP_FIN)) &&
  80846c:	8b 46 10             	mov    0x10(%esi),%eax
  80846f:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808473:	89 04 24             	mov    %eax,(%esp)
  808476:	e8 e8 f8 ff ff       	call   807d63 <ntohs>
  /* { useg is last segment on the unsent queue, NULL if list is empty } */

  /* If there is room in the last pbuf on the unsent queue,
  chain the first pbuf on the queue together with that. */
  if (useg != NULL &&
    TCP_TCPLEN(useg) != 0 &&
  80847b:	a8 03                	test   $0x3,%al
  80847d:	0f 85 c5 01 00 00    	jne    808648 <tcp_enqueue+0x688>
    !(TCPH_FLAGS(useg->tcphdr) & (TCP_SYN | TCP_FIN)) &&
  808483:	f6 45 bc 03          	testb  $0x3,-0x44(%ebp)
  808487:	0f 85 bb 01 00 00    	jne    808648 <tcp_enqueue+0x688>
    !(flags & (TCP_SYN | TCP_FIN)) &&
    /* fit within max seg size */
    useg->len + queue->len <= pcb->mss) {
  80848d:	0f b7 56 0c          	movzwl 0xc(%esi),%edx
  808491:	8b 45 d0             	mov    -0x30(%ebp),%eax
  808494:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808498:	01 c2                	add    %eax,%edx
  80849a:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  /* If there is room in the last pbuf on the unsent queue,
  chain the first pbuf on the queue together with that. */
  if (useg != NULL &&
    TCP_TCPLEN(useg) != 0 &&
    !(TCPH_FLAGS(useg->tcphdr) & (TCP_SYN | TCP_FIN)) &&
    !(flags & (TCP_SYN | TCP_FIN)) &&
  80849e:	39 c2                	cmp    %eax,%edx
  8084a0:	0f 8f a2 01 00 00    	jg     808648 <tcp_enqueue+0x688>
    /* fit within max seg size */
    useg->len + queue->len <= pcb->mss) {
    /* Remove TCP header from first segment of our to-be-queued list */
    if(pbuf_header(queue->p, -TCP_HLEN)) {
  8084a6:	c7 44 24 04 ec ff ff 	movl   $0xffffffec,0x4(%esp)
  8084ad:	ff 
  8084ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
  8084b1:	8b 40 04             	mov    0x4(%eax),%eax
  8084b4:	89 04 24             	mov    %eax,(%esp)
  8084b7:	e8 34 c8 ff ff       	call   804cf0 <pbuf_header>
  8084bc:	84 c0                	test   %al,%al
  8084be:	74 1c                	je     8084dc <tcp_enqueue+0x51c>
      /* Can we cope with this failing?  Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  8084c0:	c7 44 24 08 03 32 81 	movl   $0x813203,0x8(%esp)
  8084c7:	00 
  8084c8:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
  8084cf:	00 
  8084d0:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  8084d7:	e8 b2 6b 00 00       	call   80f08e <_panic>
      TCP_STATS_INC(tcp.err);
      goto memerr;
    }
    pbuf_cat(useg->p, queue->p);
  8084dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
  8084df:	8b 40 04             	mov    0x4(%eax),%eax
  8084e2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8084e6:	8b 46 04             	mov    0x4(%esi),%eax
  8084e9:	89 04 24             	mov    %eax,(%esp)
  8084ec:	e8 a2 cd ff ff       	call   805293 <pbuf_cat>
    useg->len += queue->len;
  8084f1:	8b 55 d0             	mov    -0x30(%ebp),%edx
  8084f4:	0f b7 42 0c          	movzwl 0xc(%edx),%eax
  8084f8:	66 01 46 0c          	add    %ax,0xc(%esi)
    useg->next = queue->next;
  8084fc:	8b 02                	mov    (%edx),%eax
  8084fe:	89 06                	mov    %eax,(%esi)

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("tcp_enqueue: chaining segments, new len %"U16_F"\n", useg->len));
    if (seg == queue) {
      seg = NULL;
  808500:	3b 55 dc             	cmp    -0x24(%ebp),%edx
  808503:	b8 00 00 00 00       	mov    $0x0,%eax
  808508:	0f 44 d8             	cmove  %eax,%ebx
    }
    memp_free(MEMP_TCP_SEG, queue);
  80850b:	89 54 24 04          	mov    %edx,0x4(%esp)
  80850f:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  808516:	e8 07 c5 ff ff       	call   804a22 <memp_free>
  80851b:	eb 19                	jmp    808536 <tcp_enqueue+0x576>
    /* enqueue segment */
    else {
      useg->next = queue;
    }
  }
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  80851d:	0f b6 55 bc          	movzbl -0x44(%ebp),%edx
  808521:	83 e2 03             	and    $0x3,%edx
    ++len;
  808524:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
  808528:	83 c0 01             	add    $0x1,%eax
  80852b:	84 d2                	test   %dl,%dl
  80852d:	66 0f 44 45 c2       	cmove  -0x3e(%ebp),%ax
  808532:	66 89 45 c2          	mov    %ax,-0x3e(%ebp)
  }
  if (flags & TCP_FIN) {
  808536:	f6 45 bc 01          	testb  $0x1,-0x44(%ebp)
  80853a:	74 04                	je     808540 <tcp_enqueue+0x580>
    pcb->flags |= TF_FIN;
  80853c:	80 4f 20 20          	orb    $0x20,0x20(%edi)
  }
  pcb->snd_lbb += len;
  808540:	0f b7 55 c2          	movzwl -0x3e(%ebp),%edx
  808544:	0f b7 c2             	movzwl %dx,%eax
  808547:	01 47 68             	add    %eax,0x68(%edi)

  pcb->snd_buf -= len;
  80854a:	66 29 57 6e          	sub    %dx,0x6e(%edi)

  /* update number of segments on the queues */
  pcb->snd_queuelen = queuelen;
  80854e:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  808552:	66 89 47 70          	mov    %ax,0x70(%edi)
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  808556:	66 85 c0             	test   %ax,%ax
  808559:	74 28                	je     808583 <tcp_enqueue+0x5c3>
    LWIP_ASSERT("tcp_enqueue: valid queue length",
  80855b:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80855f:	75 22                	jne    808583 <tcp_enqueue+0x5c3>
  808561:	83 7f 74 00          	cmpl   $0x0,0x74(%edi)
  808565:	75 1c                	jne    808583 <tcp_enqueue+0x5c3>
  808567:	c7 44 24 08 90 31 81 	movl   $0x813190,0x8(%esp)
  80856e:	00 
  80856f:	c7 44 24 04 7a 01 00 	movl   $0x17a,0x4(%esp)
  808576:	00 
  808577:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  80857e:	e8 0b 6b 00 00       	call   80f08e <_panic>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued, but only
  if the segment has data (indicated by seglen > 0). */
  if (seg != NULL && seglen > 0 && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  808583:	85 db                	test   %ebx,%ebx
  808585:	0f 84 8f 00 00 00    	je     80861a <tcp_enqueue+0x65a>
  80858b:	66 83 7d e6 00       	cmpw   $0x0,-0x1a(%ebp)
  808590:	0f 84 84 00 00 00    	je     80861a <tcp_enqueue+0x65a>
  808596:	8b 5b 10             	mov    0x10(%ebx),%ebx
  808599:	85 db                	test   %ebx,%ebx
  80859b:	0f 84 80 00 00 00    	je     808621 <tcp_enqueue+0x661>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
  8085a1:	b8 00 00 00 00       	mov    $0x0,%eax
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued, but only
  if the segment has data (indicated by seglen > 0). */
  if (seg != NULL && seglen > 0 && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  8085a6:	f6 45 b8 02          	testb  $0x2,-0x48(%ebp)
  8085aa:	0f 85 da 00 00 00    	jne    80868a <tcp_enqueue+0x6ca>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  8085b0:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  8085b4:	89 04 24             	mov    %eax,(%esp)
  8085b7:	e8 a7 f7 ff ff       	call   807d63 <ntohs>
  8085bc:	83 c8 08             	or     $0x8,%eax
  8085bf:	0f b7 c0             	movzwl %ax,%eax
  8085c2:	89 04 24             	mov    %eax,(%esp)
  8085c5:	e8 8c f7 ff ff       	call   807d56 <htons>
  8085ca:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  }

  return ERR_OK;
  8085ce:	b8 00 00 00 00       	mov    $0x0,%eax
  8085d3:	e9 b2 00 00 00       	jmp    80868a <tcp_enqueue+0x6ca>
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  8085d8:	80 4f 20 80          	orb    $0x80,0x20(%edi)
  TCP_STATS_INC(tcp.memerr);

  if (queue != NULL) {
  8085dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
  8085df:	85 c0                	test   %eax,%eax
  8085e1:	74 08                	je     8085eb <tcp_enqueue+0x62b>
    tcp_segs_free(queue);
  8085e3:	89 04 24             	mov    %eax,(%esp)
  8085e6:	e8 03 d8 ff ff       	call   805dee <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  8085eb:	66 83 7f 70 00       	cmpw   $0x0,0x70(%edi)
  8085f0:	74 36                	je     808628 <tcp_enqueue+0x668>
    LWIP_ASSERT("tcp_enqueue: valid queue length", pcb->unacked != NULL ||
  8085f2:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  8085f6:	75 37                	jne    80862f <tcp_enqueue+0x66f>
  8085f8:	83 7f 74 00          	cmpl   $0x0,0x74(%edi)
  8085fc:	75 38                	jne    808636 <tcp_enqueue+0x676>
  8085fe:	c7 44 24 08 90 31 81 	movl   $0x813190,0x8(%esp)
  808605:	00 
  808606:	c7 44 24 04 8d 01 00 	movl   $0x18d,0x4(%esp)
  80860d:	00 
  80860e:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808615:	e8 74 6a 00 00       	call   80f08e <_panic>
  if the segment has data (indicated by seglen > 0). */
  if (seg != NULL && seglen > 0 && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
  80861a:	b8 00 00 00 00       	mov    $0x0,%eax
  80861f:	eb 69                	jmp    80868a <tcp_enqueue+0x6ca>
  808621:	b8 00 00 00 00       	mov    $0x0,%eax
  808626:	eb 62                	jmp    80868a <tcp_enqueue+0x6ca>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_enqueue: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  808628:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80862d:	eb 5b                	jmp    80868a <tcp_enqueue+0x6ca>
  80862f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  808634:	eb 54                	jmp    80868a <tcp_enqueue+0x6ca>
  808636:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80863b:	eb 4d                	jmp    80868a <tcp_enqueue+0x6ca>
  }
  else {
    /* empty list */
    if (useg == NULL) {
      /* initialize list with this segment */
      pcb->unsent = queue;
  80863d:	8b 45 d0             	mov    -0x30(%ebp),%eax
  808640:	89 47 74             	mov    %eax,0x74(%edi)
  808643:	e9 d5 fe ff ff       	jmp    80851d <tcp_enqueue+0x55d>
    }
    /* enqueue segment */
    else {
      useg->next = queue;
  808648:	8b 45 d0             	mov    -0x30(%ebp),%eax
  80864b:	89 06                	mov    %eax,(%esi)
  80864d:	e9 cb fe ff ff       	jmp    80851d <tcp_enqueue+0x55d>
    /* Copy the options into the header, if they are present. */
    if (optdata == NULL) {
      TCPH_HDRLEN_SET(seg->tcphdr, 5);
    }
    else {
      TCPH_HDRLEN_SET(seg->tcphdr, (5 + optlen / 4));
  808652:	c0 e8 02             	shr    $0x2,%al
  808655:	c1 e0 0c             	shl    $0xc,%eax
  808658:	66 05 00 50          	add    $0x5000,%ax
  80865c:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
  808660:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
  808664:	66 89 45 e0          	mov    %ax,-0x20(%ebp)

  /* First, break up the data into segments and tuck them together in
   * the local "queue" variable. */
  useg = queue = seg = NULL;
  seglen = 0;
  while (queue == NULL || left > 0) {
  808668:	c6 45 dc 01          	movb   $0x1,-0x24(%ebp)
    /* Copy the options into the header, if they are present. */
    if (optdata == NULL) {
      TCPH_HDRLEN_SET(seg->tcphdr, 5);
    }
    else {
      TCPH_HDRLEN_SET(seg->tcphdr, (5 + optlen / 4));
  80866c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  808673:	be 00 00 00 00       	mov    $0x0,%esi
                  (seg->p->len >= optlen));
      queuelen += pbuf_clen(seg->p);
      seg->dataptr = seg->p->payload;
    }
    /* copy from volatile memory? */
    else if (apiflags & TCP_WRITE_FLAG_COPY) {
  808678:	83 e2 01             	and    $0x1,%edx
  80867b:	88 55 ca             	mov    %dl,-0x36(%ebp)
     * ROM or other static memory, and need not be copied. If
     * optdata is != NULL, we have options instead of data. */
     
    /* options? */
    if (optdata != NULL) {
      if ((seg->p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  80867e:	0f b6 45 cb          	movzbl -0x35(%ebp),%eax
  808682:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  808685:	e9 63 fa ff ff       	jmp    8080ed <tcp_enqueue+0x12d>
    LWIP_ASSERT("tcp_enqueue: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_enqueue: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
  80868a:	83 c4 4c             	add    $0x4c,%esp
  80868d:	5b                   	pop    %ebx
  80868e:	5e                   	pop    %esi
  80868f:	5f                   	pop    %edi
  808690:	5d                   	pop    %ebp
  808691:	c3                   	ret    

00808692 <tcp_send_ctrl>:
 * @param flags the flags to set in the segment header
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_ctrl(struct tcp_pcb *pcb, u8_t flags)
{
  808692:	55                   	push   %ebp
  808693:	89 e5                	mov    %esp,%ebp
  808695:	83 ec 28             	sub    $0x28,%esp
  /* no data, no length, flags, copy=1, no optdata, no optdatalen */
  return tcp_enqueue(pcb, NULL, 0, flags, TCP_WRITE_FLAG_COPY, NULL, 0);
  808698:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
  80869f:	00 
  8086a0:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  8086a7:	00 
  8086a8:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
  8086af:	00 
  8086b0:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
  8086b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8086b8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8086bf:	00 
  8086c0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8086c7:	00 
  8086c8:	8b 45 08             	mov    0x8(%ebp),%eax
  8086cb:	89 04 24             	mov    %eax,(%esp)
  8086ce:	e8 ed f8 ff ff       	call   807fc0 <tcp_enqueue>
}
  8086d3:	c9                   	leave  
  8086d4:	c3                   	ret    

008086d5 <tcp_write>:
 * 
 * @see tcp_write()
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *data, u16_t len, u8_t apiflags)
{
  8086d5:	55                   	push   %ebp
  8086d6:	89 e5                	mov    %esp,%ebp
  8086d8:	56                   	push   %esi
  8086d9:	53                   	push   %ebx
  8086da:	83 ec 20             	sub    $0x20,%esp
  8086dd:	8b 55 08             	mov    0x8(%ebp),%edx
  8086e0:	8b 4d 10             	mov    0x10(%ebp),%ecx
  8086e3:	8b 5d 14             	mov    0x14(%ebp),%ebx
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n", (void *)pcb,
    data, len, (u16_t)apiflags));
  /* connection is in valid state for data transmission? */
  if (pcb->state == ESTABLISHED ||
  8086e6:	8b 42 10             	mov    0x10(%edx),%eax
  8086e9:	83 f8 07             	cmp    $0x7,%eax
  8086ec:	74 0d                	je     8086fb <tcp_write+0x26>
     pcb->state == CLOSE_WAIT ||
  8086ee:	8d 70 fe             	lea    -0x2(%eax),%esi
      return tcp_enqueue(pcb, (void *)data, len, 0, apiflags, NULL, 0);
    }
    return ERR_OK;
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | 3, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  8086f1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
{
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n", (void *)pcb,
    data, len, (u16_t)apiflags));
  /* connection is in valid state for data transmission? */
  if (pcb->state == ESTABLISHED ||
     pcb->state == CLOSE_WAIT ||
  8086f6:	83 fe 02             	cmp    $0x2,%esi
  8086f9:	77 3f                	ja     80873a <tcp_write+0x65>
     pcb->state == SYN_SENT ||
     pcb->state == SYN_RCVD) {
    if (len > 0) {
      return tcp_enqueue(pcb, (void *)data, len, 0, apiflags, NULL, 0);
    }
    return ERR_OK;
  8086fb:	b8 00 00 00 00       	mov    $0x0,%eax
  /* connection is in valid state for data transmission? */
  if (pcb->state == ESTABLISHED ||
     pcb->state == CLOSE_WAIT ||
     pcb->state == SYN_SENT ||
     pcb->state == SYN_RCVD) {
    if (len > 0) {
  808700:	66 85 c9             	test   %cx,%cx
  808703:	74 35                	je     80873a <tcp_write+0x65>
      return tcp_enqueue(pcb, (void *)data, len, 0, apiflags, NULL, 0);
  808705:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
  80870c:	00 
  80870d:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  808714:	00 
  808715:	0f b6 db             	movzbl %bl,%ebx
  808718:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  80871c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  808723:	00 
  808724:	0f b7 c9             	movzwl %cx,%ecx
  808727:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80872b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80872e:	89 44 24 04          	mov    %eax,0x4(%esp)
  808732:	89 14 24             	mov    %edx,(%esp)
  808735:	e8 86 f8 ff ff       	call   807fc0 <tcp_enqueue>
    return ERR_OK;
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | 3, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  }
}
  80873a:	83 c4 20             	add    $0x20,%esp
  80873d:	5b                   	pop    %ebx
  80873e:	5e                   	pop    %esi
  80873f:	5d                   	pop    %ebp
  808740:	c3                   	ret    

00808741 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  808741:	55                   	push   %ebp
  808742:	89 e5                	mov    %esp,%ebp
  808744:	57                   	push   %edi
  808745:	56                   	push   %esi
  808746:	53                   	push   %ebx
  808747:	83 ec 3c             	sub    $0x3c,%esp
  80874a:	8b 7d 08             	mov    0x8(%ebp),%edi

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  80874d:	39 3d 78 c2 b3 00    	cmp    %edi,0xb3c278
  808753:	0f 84 53 04 00 00    	je     808bac <tcp_output+0x46b>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  808759:	0f b7 47 4e          	movzwl 0x4e(%edi),%eax
  80875d:	66 39 47 5c          	cmp    %ax,0x5c(%edi)
  808761:	66 0f 46 47 5c       	cmovbe 0x5c(%edi),%ax
  808766:	0f b7 c0             	movzwl %ax,%eax
  808769:	89 45 d8             	mov    %eax,-0x28(%ebp)

  seg = pcb->unsent;
  80876c:	8b 5f 74             	mov    0x74(%edi),%ebx

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  80876f:	8b 47 78             	mov    0x78(%edi),%eax
  808772:	89 45 dc             	mov    %eax,-0x24(%ebp)
  if (useg != NULL) {
  808775:	85 c0                	test   %eax,%eax
  808777:	74 0f                	je     808788 <tcp_output+0x47>
  808779:	89 c2                	mov    %eax,%edx
    for (; useg->next != NULL; useg = useg->next);
  80877b:	8b 02                	mov    (%edx),%eax
  80877d:	85 c0                	test   %eax,%eax
  80877f:	74 04                	je     808785 <tcp_output+0x44>
  808781:	89 c2                	mov    %eax,%edx
  808783:	eb f6                	jmp    80877b <tcp_output+0x3a>
  808785:	89 55 dc             	mov    %edx,-0x24(%ebp)
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  808788:	f6 47 20 02          	testb  $0x2,0x20(%edi)
  80878c:	74 20                	je     8087ae <tcp_output+0x6d>
  80878e:	85 db                	test   %ebx,%ebx
  808790:	74 27                	je     8087b9 <tcp_output+0x78>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  808792:	8b 43 10             	mov    0x10(%ebx),%eax
  808795:	8b 40 04             	mov    0x4(%eax),%eax
  808798:	89 04 24             	mov    %eax,(%esp)
  80879b:	e8 0a f8 ff ff       	call   807faa <ntohl>
  8087a0:	0f b7 53 0c          	movzwl 0xc(%ebx),%edx
  8087a4:	2b 57 48             	sub    0x48(%edi),%edx
  8087a7:	01 d0                	add    %edx,%eax
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
  8087a9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  8087ac:	72 0b                	jb     8087b9 <tcp_output+0x78>

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
#if CHECKSUM_GEN_TCP
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p,
  8087ae:	8d 47 04             	lea    0x4(%edi),%eax
  8087b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  8087b4:	e9 92 03 00 00       	jmp    808b4b <tcp_output+0x40a>
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
    p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  8087b9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8087c0:	00 
  8087c1:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  8087c8:	00 
  8087c9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  8087d0:	e8 e0 c6 ff ff       	call   804eb5 <pbuf_alloc>
  8087d5:	89 c6                	mov    %eax,%esi
    if (p == NULL) {
  8087d7:	85 c0                	test   %eax,%eax
  8087d9:	0f 84 d4 03 00 00    	je     808bb3 <tcp_output+0x472>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
      return ERR_BUF;
    }
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
    /* remove ACK flags from the PCB, as we send an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  8087df:	80 67 20 fc          	andb   $0xfc,0x20(%edi)

    tcphdr = p->payload;
  8087e3:	8b 58 04             	mov    0x4(%eax),%ebx
    tcphdr->src = htons(pcb->local_port);
  8087e6:	0f b7 47 1c          	movzwl 0x1c(%edi),%eax
  8087ea:	89 04 24             	mov    %eax,(%esp)
  8087ed:	e8 64 f5 ff ff       	call   807d56 <htons>
  8087f2:	66 89 03             	mov    %ax,(%ebx)
    tcphdr->dest = htons(pcb->remote_port);
  8087f5:	0f b7 47 1e          	movzwl 0x1e(%edi),%eax
  8087f9:	89 04 24             	mov    %eax,(%esp)
  8087fc:	e8 55 f5 ff ff       	call   807d56 <htons>
  808801:	66 89 43 02          	mov    %ax,0x2(%ebx)
    tcphdr->seqno = htonl(pcb->snd_nxt);
  808805:	8b 47 54             	mov    0x54(%edi),%eax
  808808:	89 04 24             	mov    %eax,(%esp)
  80880b:	e8 60 f5 ff ff       	call   807d70 <htonl>
  808810:	89 43 04             	mov    %eax,0x4(%ebx)
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  808813:	8b 47 24             	mov    0x24(%edi),%eax
  808816:	89 04 24             	mov    %eax,(%esp)
  808819:	e8 52 f5 ff ff       	call   807d70 <htonl>
  80881e:	89 43 08             	mov    %eax,0x8(%ebx)
    TCPH_FLAGS_SET(tcphdr, TCP_ACK);
  808821:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  808825:	89 04 24             	mov    %eax,(%esp)
  808828:	e8 36 f5 ff ff       	call   807d63 <ntohs>
  80882d:	25 c0 ff 00 00       	and    $0xffc0,%eax
  808832:	83 c8 10             	or     $0x10,%eax
  808835:	89 04 24             	mov    %eax,(%esp)
  808838:	e8 19 f5 ff ff       	call   807d56 <htons>
  80883d:	66 89 43 0c          	mov    %ax,0xc(%ebx)
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  808841:	0f b7 47 2a          	movzwl 0x2a(%edi),%eax
  808845:	89 04 24             	mov    %eax,(%esp)
  808848:	e8 09 f5 ff ff       	call   807d56 <htons>
  80884d:	66 89 43 0e          	mov    %ax,0xe(%ebx)
    tcphdr->urgp = 0;
  808851:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
    TCPH_HDRLEN_SET(tcphdr, 5);
  808857:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80885b:	89 04 24             	mov    %eax,(%esp)
  80885e:	e8 00 f5 ff ff       	call   807d63 <ntohs>
  808863:	83 e0 3f             	and    $0x3f,%eax
  808866:	80 cc 50             	or     $0x50,%ah
  808869:	89 04 24             	mov    %eax,(%esp)
  80886c:	e8 e5 f4 ff ff       	call   807d56 <htons>
  808871:	66 89 43 0c          	mov    %ax,0xc(%ebx)

    tcphdr->chksum = 0;
  808875:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
#if CHECKSUM_GEN_TCP
    tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  80887b:	8d 47 04             	lea    0x4(%edi),%eax
  80887e:	89 c1                	mov    %eax,%ecx
  808880:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  808884:	89 44 24 10          	mov    %eax,0x10(%esp)
  808888:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80888f:	00 
  808890:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  808893:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  808897:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80889b:	89 34 24             	mov    %esi,(%esp)
  80889e:	e8 6b f1 ff ff       	call   807a0e <inet_chksum_pseudo>
  8088a3:	66 89 43 10          	mov    %ax,0x10(%ebx)
                     pcb->tos, IP_PROTO_TCP, netif);
        netif->addr_hint = NULL;
      }
    }
#else /* LWIP_NETIF_HWADDRHINT*/
    ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  8088a7:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  8088ae:	00 
  8088af:	0f b6 47 0a          	movzbl 0xa(%edi),%eax
  8088b3:	89 44 24 10          	mov    %eax,0x10(%esp)
  8088b7:	0f b6 47 0b          	movzbl 0xb(%edi),%eax
  8088bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8088bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8088c2:	89 44 24 08          	mov    %eax,0x8(%esp)
  8088c6:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8088ca:	89 34 24             	mov    %esi,(%esp)
  8088cd:	e8 be e6 ff ff       	call   806f90 <ip_output>
        IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
    pbuf_free(p);
  8088d2:	89 34 24             	mov    %esi,(%esp)
  8088d5:	e8 fa c4 ff ff       	call   804dd4 <pbuf_free>

    return ERR_OK;
  8088da:	b8 00 00 00 00       	mov    $0x0,%eax
  8088df:	e9 e9 02 00 00       	jmp    808bcd <tcp_output+0x48c>
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
  8088e4:	8b 43 10             	mov    0x10(%ebx),%eax
  8088e7:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8088eb:	89 04 24             	mov    %eax,(%esp)
  8088ee:	e8 70 f4 ff ff       	call   807d63 <ntohs>
  8088f3:	a8 04                	test   $0x4,%al
  8088f5:	74 1c                	je     808913 <tcp_output+0x1d2>
  8088f7:	c7 44 24 08 17 32 81 	movl   $0x813217,0x8(%esp)
  8088fe:	00 
  8088ff:	c7 44 24 04 05 02 00 	movl   $0x205,0x4(%esp)
  808906:	00 
  808907:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  80890e:	e8 7b 67 00 00       	call   80f08e <_panic>
     * - if tcp_enqueue had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_enqueue/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  808913:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  808917:	74 1c                	je     808935 <tcp_output+0x1f4>
  808919:	0f b6 47 20          	movzbl 0x20(%edi),%eax
  80891d:	a8 40                	test   $0x40,%al
  80891f:	75 14                	jne    808935 <tcp_output+0x1f4>
  808921:	8b 57 74             	mov    0x74(%edi),%edx
  808924:	85 d2                	test   %edx,%edx
  808926:	0f 84 8e 02 00 00    	je     808bba <tcp_output+0x479>
  80892c:	83 3a 00             	cmpl   $0x0,(%edx)
  80892f:	0f 84 85 02 00 00    	je     808bba <tcp_output+0x479>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
  808935:	8b 03                	mov    (%ebx),%eax
  808937:	89 47 74             	mov    %eax,0x74(%edi)

    if (pcb->state != SYN_SENT) {
  80893a:	83 7f 10 02          	cmpl   $0x2,0x10(%edi)
  80893e:	74 25                	je     808965 <tcp_output+0x224>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  808940:	8b 73 10             	mov    0x10(%ebx),%esi
  808943:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  808947:	89 04 24             	mov    %eax,(%esp)
  80894a:	e8 14 f4 ff ff       	call   807d63 <ntohs>
  80894f:	83 c8 10             	or     $0x10,%eax
  808952:	0f b7 c0             	movzwl %ax,%eax
  808955:	89 04 24             	mov    %eax,(%esp)
  808958:	e8 f9 f3 ff ff       	call   807d56 <htons>
  80895d:	66 89 46 0c          	mov    %ax,0xc(%esi)
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  808961:	80 67 20 fc          	andb   $0xfc,0x20(%edi)
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  808965:	8b 73 10             	mov    0x10(%ebx),%esi
  808968:	8b 47 24             	mov    0x24(%edi),%eax
  80896b:	89 04 24             	mov    %eax,(%esp)
  80896e:	e8 fd f3 ff ff       	call   807d70 <htonl>
  808973:	89 46 08             	mov    %eax,0x8(%esi)

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  808976:	8b 73 10             	mov    0x10(%ebx),%esi
  808979:	0f b7 47 2a          	movzwl 0x2a(%edi),%eax
  80897d:	89 04 24             	mov    %eax,(%esp)
  808980:	e8 d1 f3 ff ff       	call   807d56 <htons>
  808985:	66 89 46 0e          	mov    %ax,0xe(%esi)

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  808989:	85 ff                	test   %edi,%edi
  80898b:	74 05                	je     808992 <tcp_output+0x251>
  80898d:	83 3f 00             	cmpl   $0x0,(%edi)
  808990:	75 27                	jne    8089b9 <tcp_output+0x278>
    netif = ip_route(&(pcb->remote_ip));
  808992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  808995:	89 04 24             	mov    %eax,(%esp)
  808998:	e8 23 e1 ff ff       	call   806ac0 <ip_route>
    if (netif == NULL) {
  80899d:	85 c0                	test   %eax,%eax
  80899f:	0f 84 c1 00 00 00    	je     808a66 <tcp_output+0x325>
      return;
    }
    ip_addr_set(&(pcb->local_ip), &(netif->ip_addr));
  8089a5:	83 f8 fc             	cmp    $0xfffffffc,%eax
  8089a8:	74 08                	je     8089b2 <tcp_output+0x271>
  8089aa:	8b 40 04             	mov    0x4(%eax),%eax
  8089ad:	8d 76 00             	lea    0x0(%esi),%esi
  8089b0:	eb 05                	jmp    8089b7 <tcp_output+0x276>
  8089b2:	b8 00 00 00 00       	mov    $0x0,%eax
  8089b7:	89 07                	mov    %eax,(%edi)
  }

  /* Set retransmission timer running if it is not currently enabled */
  if(pcb->rtime == -1)
  8089b9:	66 83 7f 32 ff       	cmpw   $0xffff,0x32(%edi)
  8089be:	75 06                	jne    8089c6 <tcp_output+0x285>
    pcb->rtime = 0;
  8089c0:	66 c7 47 32 00 00    	movw   $0x0,0x32(%edi)

  if (pcb->rttest == 0) {
  8089c6:	83 7f 38 00          	cmpl   $0x0,0x38(%edi)
  8089ca:	75 19                	jne    8089e5 <tcp_output+0x2a4>
    pcb->rttest = tcp_ticks;
  8089cc:	a1 60 c2 b3 00       	mov    0xb3c260,%eax
  8089d1:	89 47 38             	mov    %eax,0x38(%edi)
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  8089d4:	8b 43 10             	mov    0x10(%ebx),%eax
  8089d7:	8b 40 04             	mov    0x4(%eax),%eax
  8089da:	89 04 24             	mov    %eax,(%esp)
  8089dd:	e8 c8 f5 ff ff       	call   807faa <ntohl>
  8089e2:	89 47 3c             	mov    %eax,0x3c(%edi)
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  8089e5:	8b 43 04             	mov    0x4(%ebx),%eax
  8089e8:	8b 53 10             	mov    0x10(%ebx),%edx
  8089eb:	2b 50 04             	sub    0x4(%eax),%edx

  seg->p->len -= len;
  8089ee:	66 29 50 0a          	sub    %dx,0xa(%eax)
  seg->p->tot_len -= len;
  8089f2:	8b 43 04             	mov    0x4(%ebx),%eax
  8089f5:	66 29 50 08          	sub    %dx,0x8(%eax)

  seg->p->payload = seg->tcphdr;
  8089f9:	8b 43 04             	mov    0x4(%ebx),%eax
  8089fc:	8b 53 10             	mov    0x10(%ebx),%edx
  8089ff:	89 50 04             	mov    %edx,0x4(%eax)

  seg->tcphdr->chksum = 0;
  808a02:	8b 43 10             	mov    0x10(%ebx),%eax
  808a05:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
#if CHECKSUM_GEN_TCP
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p,
  808a0b:	8b 73 10             	mov    0x10(%ebx),%esi
             &(pcb->local_ip),
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len);
  808a0e:	8b 43 04             	mov    0x4(%ebx),%eax

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
#if CHECKSUM_GEN_TCP
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p,
  808a11:	0f b7 50 08          	movzwl 0x8(%eax),%edx
  808a15:	89 54 24 10          	mov    %edx,0x10(%esp)
  808a19:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  808a20:	00 
  808a21:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  808a24:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  808a28:	89 7c 24 04          	mov    %edi,0x4(%esp)
  808a2c:	89 04 24             	mov    %eax,(%esp)
  808a2f:	e8 da ef ff ff       	call   807a0e <inet_chksum_pseudo>
  808a34:	66 89 46 10          	mov    %ax,0x10(%esi)
                   pcb->tos, IP_PROTO_TCP, netif);
      netif->addr_hint = NULL;
    }
  }
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  808a38:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  808a3f:	00 
  808a40:	0f b6 47 0a          	movzbl 0xa(%edi),%eax
  808a44:	89 44 24 10          	mov    %eax,0x10(%esp)
  808a48:	0f b6 47 0b          	movzbl 0xb(%edi),%eax
  808a4c:	89 44 24 0c          	mov    %eax,0xc(%esp)
  808a50:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  808a53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  808a57:	89 7c 24 04          	mov    %edi,0x4(%esp)
  808a5b:	8b 43 04             	mov    0x4(%ebx),%eax
  808a5e:	89 04 24             	mov    %eax,(%esp)
  808a61:	e8 2a e5 ff ff       	call   806f90 <ip_output>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    tcp_output_segment(seg, pcb);
    pcb->snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  808a66:	8b 43 10             	mov    0x10(%ebx),%eax
  808a69:	8b 40 04             	mov    0x4(%eax),%eax
  808a6c:	89 04 24             	mov    %eax,(%esp)
  808a6f:	e8 36 f5 ff ff       	call   807faa <ntohl>
  808a74:	89 45 e0             	mov    %eax,-0x20(%ebp)
  808a77:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  808a7b:	8b 43 10             	mov    0x10(%ebx),%eax
  808a7e:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808a82:	89 04 24             	mov    %eax,(%esp)
  808a85:	e8 d9 f2 ff ff       	call   807d63 <ntohs>
  808a8a:	ba 01 00 00 00       	mov    $0x1,%edx
  808a8f:	a8 01                	test   $0x1,%al
  808a91:	75 17                	jne    808aaa <tcp_output+0x369>
  808a93:	8b 43 10             	mov    0x10(%ebx),%eax
  808a96:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808a9a:	89 04 24             	mov    %eax,(%esp)
  808a9d:	e8 c1 f2 ff ff       	call   807d63 <ntohs>
  808aa2:	66 d1 e8             	shr    %ax
  808aa5:	89 c2                	mov    %eax,%edx
  808aa7:	83 e2 01             	and    $0x1,%edx
  808aaa:	01 d6                	add    %edx,%esi
  808aac:	03 75 e0             	add    -0x20(%ebp),%esi
  808aaf:	89 77 54             	mov    %esi,0x54(%edi)
    if (TCP_SEQ_LT(pcb->snd_max, pcb->snd_nxt)) {
  808ab2:	39 77 58             	cmp    %esi,0x58(%edi)
  808ab5:	79 03                	jns    808aba <tcp_output+0x379>
      pcb->snd_max = pcb->snd_nxt;
  808ab7:	89 77 58             	mov    %esi,0x58(%edi)
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  808aba:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  808abe:	8b 43 10             	mov    0x10(%ebx),%eax
  808ac1:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808ac5:	89 04 24             	mov    %eax,(%esp)
  808ac8:	e8 96 f2 ff ff       	call   807d63 <ntohs>
  808acd:	ba 01 00 00 00       	mov    $0x1,%edx
  808ad2:	a8 01                	test   $0x1,%al
  808ad4:	75 17                	jne    808aed <tcp_output+0x3ac>
  808ad6:	8b 43 10             	mov    0x10(%ebx),%eax
  808ad9:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  808add:	89 04 24             	mov    %eax,(%esp)
  808ae0:	e8 7e f2 ff ff       	call   807d63 <ntohs>
  808ae5:	66 d1 e8             	shr    %ax
  808ae8:	89 c2                	mov    %eax,%edx
  808aea:	83 e2 01             	and    $0x1,%edx
  808aed:	01 d6                	add    %edx,%esi
  808aef:	85 f6                	test   %esi,%esi
  808af1:	7e 4d                	jle    808b40 <tcp_output+0x3ff>
      seg->next = NULL;
  808af3:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  808af9:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  808afd:	75 08                	jne    808b07 <tcp_output+0x3c6>
        pcb->unacked = seg;
  808aff:	89 5f 78             	mov    %ebx,0x78(%edi)
  808b02:	89 5d dc             	mov    %ebx,-0x24(%ebp)
  808b05:	eb 41                	jmp    808b48 <tcp_output+0x407>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather at the head. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))){
  808b07:	8b 43 10             	mov    0x10(%ebx),%eax
  808b0a:	8b 40 04             	mov    0x4(%eax),%eax
  808b0d:	89 04 24             	mov    %eax,(%esp)
  808b10:	e8 95 f4 ff ff       	call   807faa <ntohl>
  808b15:	89 c6                	mov    %eax,%esi
  808b17:	8b 45 dc             	mov    -0x24(%ebp),%eax
  808b1a:	8b 40 10             	mov    0x10(%eax),%eax
  808b1d:	8b 40 04             	mov    0x4(%eax),%eax
  808b20:	89 04 24             	mov    %eax,(%esp)
  808b23:	e8 82 f4 ff ff       	call   807faa <ntohl>
  808b28:	39 c6                	cmp    %eax,%esi
  808b2a:	79 0a                	jns    808b36 <tcp_output+0x3f5>
          /* add segment to head of unacked list */
          seg->next = pcb->unacked;
  808b2c:	8b 47 78             	mov    0x78(%edi),%eax
  808b2f:	89 03                	mov    %eax,(%ebx)
          pcb->unacked = seg;
  808b31:	89 5f 78             	mov    %ebx,0x78(%edi)
  808b34:	eb 12                	jmp    808b48 <tcp_output+0x407>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  808b36:	8b 45 dc             	mov    -0x24(%ebp),%eax
  808b39:	89 18                	mov    %ebx,(%eax)
  808b3b:	89 5d dc             	mov    %ebx,-0x24(%ebp)
  808b3e:	eb 08                	jmp    808b48 <tcp_output+0x407>
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  808b40:	89 1c 24             	mov    %ebx,(%esp)
  808b43:	e8 61 d2 ff ff       	call   805da9 <tcp_seg_free>
    }
    seg = pcb->unsent;
  808b48:	8b 5f 74             	mov    0x74(%edi),%ebx
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  808b4b:	85 db                	test   %ebx,%ebx
  808b4d:	74 52                	je     808ba1 <tcp_output+0x460>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  808b4f:	8b 43 10             	mov    0x10(%ebx),%eax
  808b52:	8b 40 04             	mov    0x4(%eax),%eax
  808b55:	89 04 24             	mov    %eax,(%esp)
  808b58:	e8 4d f4 ff ff       	call   807faa <ntohl>
  808b5d:	0f b7 53 0c          	movzwl 0xc(%ebx),%edx
  808b61:	2b 57 48             	sub    0x48(%edi),%edx
  808b64:	01 d0                	add    %edx,%eax
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  808b66:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  808b69:	0f 83 75 fd ff ff    	jae    8088e4 <tcp_output+0x1a3>
  808b6f:	eb 51                	jmp    808bc2 <tcp_output+0x481>
    }
    seg = pcb->unsent;
  }

  if (seg != NULL && pcb->persist_backoff == 0 && 
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
  808b71:	8b 43 10             	mov    0x10(%ebx),%eax
  808b74:	8b 40 04             	mov    0x4(%eax),%eax
  808b77:	89 04 24             	mov    %eax,(%esp)
  808b7a:	e8 2b f4 ff ff       	call   807faa <ntohl>
  808b7f:	0f b7 53 0c          	movzwl 0xc(%ebx),%edx
  808b83:	2b 57 48             	sub    0x48(%edi),%edx
  808b86:	01 c2                	add    %eax,%edx
  808b88:	0f b7 47 5c          	movzwl 0x5c(%edi),%eax
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }

  if (seg != NULL && pcb->persist_backoff == 0 && 
  808b8c:	39 c2                	cmp    %eax,%edx
  808b8e:	76 11                	jbe    808ba1 <tcp_output+0x460>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
    /* prepare for persist timer */
    pcb->persist_cnt = 0;
  808b90:	c7 87 a0 00 00 00 00 	movl   $0x0,0xa0(%edi)
  808b97:	00 00 00 
    pcb->persist_backoff = 1;
  808b9a:	c6 87 a4 00 00 00 01 	movb   $0x1,0xa4(%edi)
  }

  pcb->flags &= ~TF_NAGLEMEMERR;
  808ba1:	80 67 20 7f          	andb   $0x7f,0x20(%edi)
  return ERR_OK;
  808ba5:	b8 00 00 00 00       	mov    $0x0,%eax
  808baa:	eb 21                	jmp    808bcd <tcp_output+0x48c>
  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  808bac:	b8 00 00 00 00       	mov    $0x0,%eax
  808bb1:	eb 1a                	jmp    808bcd <tcp_output+0x48c>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
    p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
    if (p == NULL) {
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
      return ERR_BUF;
  808bb3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  808bb8:	eb 13                	jmp    808bcd <tcp_output+0x48c>
     * - if tcp_enqueue had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_enqueue/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  808bba:	a8 a0                	test   $0xa0,%al
  808bbc:	0f 85 73 fd ff ff    	jne    808935 <tcp_output+0x1f4>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }

  if (seg != NULL && pcb->persist_backoff == 0 && 
  808bc2:	80 bf a4 00 00 00 00 	cmpb   $0x0,0xa4(%edi)
  808bc9:	75 d6                	jne    808ba1 <tcp_output+0x460>
  808bcb:	eb a4                	jmp    808b71 <tcp_output+0x430>
    pcb->persist_backoff = 1;
  }

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
  808bcd:	83 c4 3c             	add    $0x3c,%esp
  808bd0:	5b                   	pop    %ebx
  808bd1:	5e                   	pop    %esi
  808bd2:	5f                   	pop    %edi
  808bd3:	5d                   	pop    %ebp
  808bd4:	c3                   	ret    

00808bd5 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  struct ip_addr *local_ip, struct ip_addr *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  808bd5:	55                   	push   %ebp
  808bd6:	89 e5                	mov    %esp,%ebp
  808bd8:	57                   	push   %edi
  808bd9:	56                   	push   %esi
  808bda:	53                   	push   %ebx
  808bdb:	83 ec 2c             	sub    $0x2c,%esp
  808bde:	8b 7d 18             	mov    0x18(%ebp),%edi
  808be1:	8b 45 1c             	mov    0x1c(%ebp),%eax
  808be4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  808be7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  808bee:	00 
  808bef:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  808bf6:	00 
  808bf7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  808bfe:	e8 b2 c2 ff ff       	call   804eb5 <pbuf_alloc>
  808c03:	89 c6                	mov    %eax,%esi
  if (p == NULL) {
  808c05:	85 c0                	test   %eax,%eax
  808c07:	0f 84 1a 01 00 00    	je     808d27 <tcp_rst+0x152>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  808c0d:	66 83 78 0a 13       	cmpw   $0x13,0xa(%eax)
  808c12:	77 1c                	ja     808c30 <tcp_rst+0x5b>
  808c14:	c7 44 24 08 b0 31 81 	movl   $0x8131b0,0x8(%esp)
  808c1b:	00 
  808c1c:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
  808c23:	00 
  808c24:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808c2b:	e8 5e 64 00 00       	call   80f08e <_panic>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = p->payload;
  808c30:	8b 58 04             	mov    0x4(%eax),%ebx
  tcphdr->src = htons(local_port);
  808c33:	0f b7 ff             	movzwl %di,%edi
  808c36:	89 3c 24             	mov    %edi,(%esp)
  808c39:	e8 18 f1 ff ff       	call   807d56 <htons>
  808c3e:	66 89 03             	mov    %ax,(%ebx)
  tcphdr->dest = htons(remote_port);
  808c41:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  808c45:	89 04 24             	mov    %eax,(%esp)
  808c48:	e8 09 f1 ff ff       	call   807d56 <htons>
  808c4d:	66 89 43 02          	mov    %ax,0x2(%ebx)
  tcphdr->seqno = htonl(seqno);
  808c51:	8b 45 08             	mov    0x8(%ebp),%eax
  808c54:	89 04 24             	mov    %eax,(%esp)
  808c57:	e8 14 f1 ff ff       	call   807d70 <htonl>
  808c5c:	89 43 04             	mov    %eax,0x4(%ebx)
  tcphdr->ackno = htonl(ackno);
  808c5f:	8b 45 0c             	mov    0xc(%ebp),%eax
  808c62:	89 04 24             	mov    %eax,(%esp)
  808c65:	e8 06 f1 ff ff       	call   807d70 <htonl>
  808c6a:	89 43 08             	mov    %eax,0x8(%ebx)
  TCPH_FLAGS_SET(tcphdr, TCP_RST | TCP_ACK);
  808c6d:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  808c71:	89 04 24             	mov    %eax,(%esp)
  808c74:	e8 ea f0 ff ff       	call   807d63 <ntohs>
  808c79:	25 c0 ff 00 00       	and    $0xffc0,%eax
  808c7e:	83 c8 14             	or     $0x14,%eax
  808c81:	89 04 24             	mov    %eax,(%esp)
  808c84:	e8 cd f0 ff ff       	call   807d56 <htons>
  808c89:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  tcphdr->wnd = htons(TCP_WND);
  808c8d:	c7 04 24 c0 5d 00 00 	movl   $0x5dc0,(%esp)
  808c94:	e8 bd f0 ff ff       	call   807d56 <htons>
  808c99:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  tcphdr->urgp = 0;
  808c9d:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  TCPH_HDRLEN_SET(tcphdr, 5);
  808ca3:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  808ca7:	89 04 24             	mov    %eax,(%esp)
  808caa:	e8 b4 f0 ff ff       	call   807d63 <ntohs>
  808caf:	83 e0 3f             	and    $0x3f,%eax
  808cb2:	80 cc 50             	or     $0x50,%ah
  808cb5:	89 04 24             	mov    %eax,(%esp)
  808cb8:	e8 99 f0 ff ff       	call   807d56 <htons>
  808cbd:	66 89 43 0c          	mov    %ax,0xc(%ebx)

  tcphdr->chksum = 0;
  808cc1:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  808cc7:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  808ccb:	89 44 24 10          	mov    %eax,0x10(%esp)
  808ccf:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  808cd6:	00 
  808cd7:	8b 45 14             	mov    0x14(%ebp),%eax
  808cda:	89 44 24 08          	mov    %eax,0x8(%esp)
  808cde:	8b 45 10             	mov    0x10(%ebp),%eax
  808ce1:	89 44 24 04          	mov    %eax,0x4(%esp)
  808ce5:	89 34 24             	mov    %esi,(%esp)
  808ce8:	e8 21 ed ff ff       	call   807a0e <inet_chksum_pseudo>
  808ced:	66 89 43 10          	mov    %ax,0x10(%ebx)
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  808cf1:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  808cf8:	00 
  808cf9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  808d00:	00 
  808d01:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  808d08:	00 
  808d09:	8b 45 14             	mov    0x14(%ebp),%eax
  808d0c:	89 44 24 08          	mov    %eax,0x8(%esp)
  808d10:	8b 45 10             	mov    0x10(%ebp),%eax
  808d13:	89 44 24 04          	mov    %eax,0x4(%esp)
  808d17:	89 34 24             	mov    %esi,(%esp)
  808d1a:	e8 71 e2 ff ff       	call   806f90 <ip_output>
  pbuf_free(p);
  808d1f:	89 34 24             	mov    %esi,(%esp)
  808d22:	e8 ad c0 ff ff       	call   804dd4 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  808d27:	83 c4 2c             	add    $0x2c,%esp
  808d2a:	5b                   	pop    %ebx
  808d2b:	5e                   	pop    %esi
  808d2c:	5f                   	pop    %edi
  808d2d:	5d                   	pop    %ebp
  808d2e:	c3                   	ret    

00808d2f <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  808d2f:	55                   	push   %ebp
  808d30:	89 e5                	mov    %esp,%ebp
  808d32:	53                   	push   %ebx
  808d33:	83 ec 14             	sub    $0x14,%esp
  808d36:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  808d39:	8b 53 78             	mov    0x78(%ebx),%edx
  808d3c:	85 d2                	test   %edx,%edx
  808d3e:	74 40                	je     808d80 <tcp_rexmit_rto+0x51>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  808d40:	8b 02                	mov    (%edx),%eax
  808d42:	85 c0                	test   %eax,%eax
  808d44:	74 04                	je     808d4a <tcp_rexmit_rto+0x1b>
  808d46:	89 c2                	mov    %eax,%edx
  808d48:	eb f6                	jmp    808d40 <tcp_rexmit_rto+0x11>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  808d4a:	8b 43 74             	mov    0x74(%ebx),%eax
  808d4d:	89 02                	mov    %eax,(%edx)
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  808d4f:	8b 43 78             	mov    0x78(%ebx),%eax
  808d52:	89 43 74             	mov    %eax,0x74(%ebx)
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  808d55:	c7 43 78 00 00 00 00 	movl   $0x0,0x78(%ebx)

  pcb->snd_nxt = ntohl(pcb->unsent->tcphdr->seqno);
  808d5c:	8b 40 10             	mov    0x10(%eax),%eax
  808d5f:	8b 40 04             	mov    0x4(%eax),%eax
  808d62:	89 04 24             	mov    %eax,(%esp)
  808d65:	e8 40 f2 ff ff       	call   807faa <ntohl>
  808d6a:	89 43 54             	mov    %eax,0x54(%ebx)
  /* increment number of retransmissions */
  ++pcb->nrtx;
  808d6d:	80 43 46 01          	addb   $0x1,0x46(%ebx)

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  808d71:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%ebx)

  /* Do the actual retransmission */
  tcp_output(pcb);
  808d78:	89 1c 24             	mov    %ebx,(%esp)
  808d7b:	e8 c1 f9 ff ff       	call   808741 <tcp_output>
}
  808d80:	83 c4 14             	add    $0x14,%esp
  808d83:	5b                   	pop    %ebx
  808d84:	5d                   	pop    %ebp
  808d85:	c3                   	ret    

00808d86 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  808d86:	55                   	push   %ebp
  808d87:	89 e5                	mov    %esp,%ebp
  808d89:	53                   	push   %ebx
  808d8a:	83 ec 14             	sub    $0x14,%esp
  808d8d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  808d90:	8b 43 78             	mov    0x78(%ebx),%eax
  808d93:	85 c0                	test   %eax,%eax
  808d95:	74 34                	je     808dcb <tcp_rexmit+0x45>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  seg = pcb->unacked->next;
  808d97:	8b 10                	mov    (%eax),%edx
  pcb->unacked->next = pcb->unsent;
  808d99:	8b 4b 74             	mov    0x74(%ebx),%ecx
  808d9c:	89 08                	mov    %ecx,(%eax)
  pcb->unsent = pcb->unacked;
  808d9e:	8b 43 78             	mov    0x78(%ebx),%eax
  808da1:	89 43 74             	mov    %eax,0x74(%ebx)
  pcb->unacked = seg;
  808da4:	89 53 78             	mov    %edx,0x78(%ebx)

  pcb->snd_nxt = ntohl(pcb->unsent->tcphdr->seqno);
  808da7:	8b 40 10             	mov    0x10(%eax),%eax
  808daa:	8b 40 04             	mov    0x4(%eax),%eax
  808dad:	89 04 24             	mov    %eax,(%esp)
  808db0:	e8 f5 f1 ff ff       	call   807faa <ntohl>
  808db5:	89 43 54             	mov    %eax,0x54(%ebx)

  ++pcb->nrtx;
  808db8:	80 43 46 01          	addb   $0x1,0x46(%ebx)

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  808dbc:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%ebx)

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  tcp_output(pcb);
  808dc3:	89 1c 24             	mov    %ebx,(%esp)
  808dc6:	e8 76 f9 ff ff       	call   808741 <tcp_output>
}
  808dcb:	83 c4 14             	add    $0x14,%esp
  808dce:	5b                   	pop    %ebx
  808dcf:	5d                   	pop    %ebp
  808dd0:	c3                   	ret    

00808dd1 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  808dd1:	55                   	push   %ebp
  808dd2:	89 e5                	mov    %esp,%ebp
  808dd4:	57                   	push   %edi
  808dd5:	56                   	push   %esi
  808dd6:	53                   	push   %ebx
  808dd7:	83 ec 2c             	sub    $0x2c,%esp
  808dda:	8b 75 08             	mov    0x8(%ebp),%esi
                          ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  808ddd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  808de4:	00 
  808de5:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  808dec:	00 
  808ded:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  808df4:	e8 bc c0 ff ff       	call   804eb5 <pbuf_alloc>
  808df9:	89 c7                	mov    %eax,%edi
   
  if(p == NULL) {
  808dfb:	85 c0                	test   %eax,%eax
  808dfd:	0f 84 1a 01 00 00    	je     808f1d <tcp_keepalive+0x14c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  808e03:	66 83 78 0a 13       	cmpw   $0x13,0xa(%eax)
  808e08:	77 1c                	ja     808e26 <tcp_keepalive+0x55>
  808e0a:	c7 44 24 08 b0 31 81 	movl   $0x8131b0,0x8(%esp)
  808e11:	00 
  808e12:	c7 44 24 04 3a 03 00 	movl   $0x33a,0x4(%esp)
  808e19:	00 
  808e1a:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808e21:	e8 68 62 00 00       	call   80f08e <_panic>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = p->payload;
  808e26:	8b 58 04             	mov    0x4(%eax),%ebx
  tcphdr->src = htons(pcb->local_port);
  808e29:	0f b7 46 1c          	movzwl 0x1c(%esi),%eax
  808e2d:	89 04 24             	mov    %eax,(%esp)
  808e30:	e8 21 ef ff ff       	call   807d56 <htons>
  808e35:	66 89 03             	mov    %ax,(%ebx)
  tcphdr->dest = htons(pcb->remote_port);
  808e38:	0f b7 46 1e          	movzwl 0x1e(%esi),%eax
  808e3c:	89 04 24             	mov    %eax,(%esp)
  808e3f:	e8 12 ef ff ff       	call   807d56 <htons>
  808e44:	66 89 43 02          	mov    %ax,0x2(%ebx)
  tcphdr->seqno = htonl(pcb->snd_nxt - 1);
  808e48:	8b 46 54             	mov    0x54(%esi),%eax
  808e4b:	83 e8 01             	sub    $0x1,%eax
  808e4e:	89 04 24             	mov    %eax,(%esp)
  808e51:	e8 1a ef ff ff       	call   807d70 <htonl>
  808e56:	89 43 04             	mov    %eax,0x4(%ebx)
  tcphdr->ackno = htonl(pcb->rcv_nxt);
  808e59:	8b 46 24             	mov    0x24(%esi),%eax
  808e5c:	89 04 24             	mov    %eax,(%esp)
  808e5f:	e8 0c ef ff ff       	call   807d70 <htonl>
  808e64:	89 43 08             	mov    %eax,0x8(%ebx)
  TCPH_FLAGS_SET(tcphdr, 0);
  808e67:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  808e6b:	89 04 24             	mov    %eax,(%esp)
  808e6e:	e8 f0 ee ff ff       	call   807d63 <ntohs>
  808e73:	25 c0 ff 00 00       	and    $0xffc0,%eax
  808e78:	89 04 24             	mov    %eax,(%esp)
  808e7b:	e8 d6 ee ff ff       	call   807d56 <htons>
  808e80:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  808e84:	0f b7 46 2a          	movzwl 0x2a(%esi),%eax
  808e88:	89 04 24             	mov    %eax,(%esp)
  808e8b:	e8 c6 ee ff ff       	call   807d56 <htons>
  808e90:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  tcphdr->urgp = 0;
  808e94:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  TCPH_HDRLEN_SET(tcphdr, 5);
  808e9a:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  808e9e:	89 04 24             	mov    %eax,(%esp)
  808ea1:	e8 bd ee ff ff       	call   807d63 <ntohs>
  808ea6:	83 e0 3f             	and    $0x3f,%eax
  808ea9:	80 cc 50             	or     $0x50,%ah
  808eac:	89 04 24             	mov    %eax,(%esp)
  808eaf:	e8 a2 ee ff ff       	call   807d56 <htons>
  808eb4:	66 89 43 0c          	mov    %ax,0xc(%ebx)

  tcphdr->chksum = 0;
  808eb8:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  808ebe:	8d 46 04             	lea    0x4(%esi),%eax
  808ec1:	89 c2                	mov    %eax,%edx
  808ec3:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  808ec7:	89 44 24 10          	mov    %eax,0x10(%esp)
  808ecb:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  808ed2:	00 
  808ed3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  808ed6:	89 54 24 08          	mov    %edx,0x8(%esp)
  808eda:	89 74 24 04          	mov    %esi,0x4(%esp)
  808ede:	89 3c 24             	mov    %edi,(%esp)
  808ee1:	e8 28 eb ff ff       	call   807a0e <inet_chksum_pseudo>
  808ee6:	66 89 43 10          	mov    %ax,0x10(%ebx)
                   0, IP_PROTO_TCP, netif);
      netif->addr_hint = NULL;
    }
  }
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  808eea:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  808ef1:	00 
  808ef2:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  808ef9:	00 
  808efa:	0f b6 46 0b          	movzbl 0xb(%esi),%eax
  808efe:	89 44 24 0c          	mov    %eax,0xc(%esp)
  808f02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  808f05:	89 44 24 08          	mov    %eax,0x8(%esp)
  808f09:	89 74 24 04          	mov    %esi,0x4(%esp)
  808f0d:	89 3c 24             	mov    %edi,(%esp)
  808f10:	e8 7b e0 ff ff       	call   806f90 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  808f15:	89 3c 24             	mov    %edi,(%esp)
  808f18:	e8 b7 be ff ff       	call   804dd4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  808f1d:	83 c4 2c             	add    $0x2c,%esp
  808f20:	5b                   	pop    %ebx
  808f21:	5e                   	pop    %esi
  808f22:	5f                   	pop    %edi
  808f23:	5d                   	pop    %ebp
  808f24:	c3                   	ret    

00808f25 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  808f25:	55                   	push   %ebp
  808f26:	89 e5                	mov    %esp,%ebp
  808f28:	57                   	push   %edi
  808f29:	56                   	push   %esi
  808f2a:	53                   	push   %ebx
  808f2b:	83 ec 2c             	sub    $0x2c,%esp
  808f2e:	8b 75 08             	mov    0x8(%ebp),%esi
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  808f31:	8b 46 78             	mov    0x78(%esi),%eax
  808f34:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  if(seg == NULL)
  808f37:	85 c0                	test   %eax,%eax
  808f39:	75 0e                	jne    808f49 <tcp_zero_window_probe+0x24>
    seg = pcb->unsent;
  808f3b:	8b 46 74             	mov    0x74(%esi),%eax
  808f3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  if(seg == NULL)
  808f41:	85 c0                	test   %eax,%eax
  808f43:	0f 84 4a 01 00 00    	je     809093 <tcp_zero_window_probe+0x16e>
    return;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + 1, PBUF_RAM);
  808f49:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  808f50:	00 
  808f51:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
  808f58:	00 
  808f59:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  808f60:	e8 50 bf ff ff       	call   804eb5 <pbuf_alloc>
  808f65:	89 c7                	mov    %eax,%edi
   
  if(p == NULL) {
  808f67:	85 c0                	test   %eax,%eax
  808f69:	0f 84 24 01 00 00    	je     809093 <tcp_zero_window_probe+0x16e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  808f6f:	66 83 78 0a 13       	cmpw   $0x13,0xa(%eax)
  808f74:	77 1c                	ja     808f92 <tcp_zero_window_probe+0x6d>
  808f76:	c7 44 24 08 b0 31 81 	movl   $0x8131b0,0x8(%esp)
  808f7d:	00 
  808f7e:	c7 44 24 04 8d 03 00 	movl   $0x38d,0x4(%esp)
  808f85:	00 
  808f86:	c7 04 24 de 31 81 00 	movl   $0x8131de,(%esp)
  808f8d:	e8 fc 60 00 00       	call   80f08e <_panic>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = p->payload;
  808f92:	8b 58 04             	mov    0x4(%eax),%ebx
  tcphdr->src = htons(pcb->local_port);
  808f95:	0f b7 46 1c          	movzwl 0x1c(%esi),%eax
  808f99:	89 04 24             	mov    %eax,(%esp)
  808f9c:	e8 b5 ed ff ff       	call   807d56 <htons>
  808fa1:	66 89 03             	mov    %ax,(%ebx)
  tcphdr->dest = htons(pcb->remote_port);
  808fa4:	0f b7 46 1e          	movzwl 0x1e(%esi),%eax
  808fa8:	89 04 24             	mov    %eax,(%esp)
  808fab:	e8 a6 ed ff ff       	call   807d56 <htons>
  808fb0:	66 89 43 02          	mov    %ax,0x2(%ebx)
  tcphdr->seqno = seg->tcphdr->seqno;
  808fb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  808fb7:	8b 40 10             	mov    0x10(%eax),%eax
  808fba:	8b 40 04             	mov    0x4(%eax),%eax
  808fbd:	89 43 04             	mov    %eax,0x4(%ebx)
  tcphdr->ackno = htonl(pcb->rcv_nxt);
  808fc0:	8b 46 24             	mov    0x24(%esi),%eax
  808fc3:	89 04 24             	mov    %eax,(%esp)
  808fc6:	e8 a5 ed ff ff       	call   807d70 <htonl>
  808fcb:	89 43 08             	mov    %eax,0x8(%ebx)
  TCPH_FLAGS_SET(tcphdr, 0);
  808fce:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  808fd2:	89 04 24             	mov    %eax,(%esp)
  808fd5:	e8 89 ed ff ff       	call   807d63 <ntohs>
  808fda:	25 c0 ff 00 00       	and    $0xffc0,%eax
  808fdf:	89 04 24             	mov    %eax,(%esp)
  808fe2:	e8 6f ed ff ff       	call   807d56 <htons>
  808fe7:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  808feb:	0f b7 46 2a          	movzwl 0x2a(%esi),%eax
  808fef:	89 04 24             	mov    %eax,(%esp)
  808ff2:	e8 5f ed ff ff       	call   807d56 <htons>
  808ff7:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  tcphdr->urgp = 0;
  808ffb:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  TCPH_HDRLEN_SET(tcphdr, 5);
  809001:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  809005:	89 04 24             	mov    %eax,(%esp)
  809008:	e8 56 ed ff ff       	call   807d63 <ntohs>
  80900d:	83 e0 3f             	and    $0x3f,%eax
  809010:	80 cc 50             	or     $0x50,%ah
  809013:	89 04 24             	mov    %eax,(%esp)
  809016:	e8 3b ed ff ff       	call   807d56 <htons>
  80901b:	66 89 43 0c          	mov    %ax,0xc(%ebx)

  /* Copy in one byte from the head of the unacked queue */
  *((char *)p->payload + sizeof(struct tcp_hdr)) = *(char *)seg->dataptr;
  80901f:	8b 47 04             	mov    0x4(%edi),%eax
  809022:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  809025:	8b 51 08             	mov    0x8(%ecx),%edx
  809028:	0f b6 12             	movzbl (%edx),%edx
  80902b:	88 50 14             	mov    %dl,0x14(%eax)

  tcphdr->chksum = 0;
  80902e:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  809034:	8d 46 04             	lea    0x4(%esi),%eax
  809037:	89 c1                	mov    %eax,%ecx
  809039:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80903d:	89 44 24 10          	mov    %eax,0x10(%esp)
  809041:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  809048:	00 
  809049:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  80904c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  809050:	89 74 24 04          	mov    %esi,0x4(%esp)
  809054:	89 3c 24             	mov    %edi,(%esp)
  809057:	e8 b2 e9 ff ff       	call   807a0e <inet_chksum_pseudo>
  80905c:	66 89 43 10          	mov    %ax,0x10(%ebx)
                   0, IP_PROTO_TCP, netif);
      netif->addr_hint = NULL;
    }
  }
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  809060:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  809067:	00 
  809068:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80906f:	00 
  809070:	0f b6 46 0b          	movzbl 0xb(%esi),%eax
  809074:	89 44 24 0c          	mov    %eax,0xc(%esp)
  809078:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80907b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80907f:	89 74 24 04          	mov    %esi,0x4(%esp)
  809083:	89 3c 24             	mov    %edi,(%esp)
  809086:	e8 05 df ff ff       	call   806f90 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  80908b:	89 3c 24             	mov    %edi,(%esp)
  80908e:	e8 41 bd ff ff       	call   804dd4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  809093:	83 c4 2c             	add    $0x2c,%esp
  809096:	5b                   	pop    %ebx
  809097:	5e                   	pop    %esi
  809098:	5f                   	pop    %edi
  809099:	5d                   	pop    %ebp
  80909a:	c3                   	ret    
  80909b:	66 90                	xchg   %ax,%ax
  80909d:	66 90                	xchg   %ax,%ax
  80909f:	90                   	nop

008090a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  8090a0:	55                   	push   %ebp
  8090a1:	89 e5                	mov    %esp,%ebp
  8090a3:	57                   	push   %edi
  8090a4:	56                   	push   %esi
  8090a5:	53                   	push   %ebx
  8090a6:	83 ec 3c             	sub    $0x3c,%esp

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = p->payload;
  8090a9:	8b 45 08             	mov    0x8(%ebp),%eax
  8090ac:	8b 40 04             	mov    0x4(%eax),%eax
  8090af:	89 c7                	mov    %eax,%edi
  8090b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  8090b4:	8b 4d 08             	mov    0x8(%ebp),%ecx
  8090b7:	0f b7 59 08          	movzwl 0x8(%ecx),%ebx
  8090bb:	0f b7 00             	movzwl (%eax),%eax
  8090be:	89 04 24             	mov    %eax,(%esp)
  8090c1:	e8 9d ec ff ff       	call   807d63 <ntohs>
  8090c6:	66 c1 e8 08          	shr    $0x8,%ax
  8090ca:	83 e0 0f             	and    $0xf,%eax
  8090cd:	8d 04 85 08 00 00 00 	lea    0x8(,%eax,4),%eax
  8090d4:	39 c3                	cmp    %eax,%ebx
  8090d6:	7c 28                	jl     809100 <udp_input+0x60>
  8090d8:	0f b7 07             	movzwl (%edi),%eax
  8090db:	89 04 24             	mov    %eax,(%esp)
  8090de:	e8 80 ec ff ff       	call   807d63 <ntohs>
  8090e3:	66 c1 e8 06          	shr    $0x6,%ax
  8090e7:	83 e0 3c             	and    $0x3c,%eax
  8090ea:	f7 d8                	neg    %eax
  8090ec:	98                   	cwtl   
  8090ed:	89 44 24 04          	mov    %eax,0x4(%esp)
  8090f1:	8b 45 08             	mov    0x8(%ebp),%eax
  8090f4:	89 04 24             	mov    %eax,(%esp)
  8090f7:	e8 f4 bb ff ff       	call   804cf0 <pbuf_header>
  8090fc:	84 c0                	test   %al,%al
  8090fe:	74 10                	je     809110 <udp_input+0x70>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  809100:	8b 45 08             	mov    0x8(%ebp),%eax
  809103:	89 04 24             	mov    %eax,(%esp)
  809106:	e8 c9 bc ff ff       	call   804dd4 <pbuf_free>
    goto end;
  80910b:	e9 09 03 00 00       	jmp    809419 <udp_input+0x379>
  }

  udphdr = (struct udp_hdr *)p->payload;
  809110:	8b 45 08             	mov    0x8(%ebp),%eax
  809113:	8b 40 04             	mov    0x4(%eax),%eax
  809116:	89 c6                	mov    %eax,%esi
  809118:	89 45 d4             	mov    %eax,-0x2c(%ebp)

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  80911b:	0f b7 00             	movzwl (%eax),%eax
  80911e:	89 04 24             	mov    %eax,(%esp)
  809121:	e8 3d ec ff ff       	call   807d63 <ntohs>
  809126:	66 89 45 de          	mov    %ax,-0x22(%ebp)
  dest = ntohs(udphdr->dest);
  80912a:	0f b7 46 02          	movzwl 0x2(%esi),%eax
  80912e:	89 04 24             	mov    %eax,(%esp)
  809131:	e8 2d ec ff ff       	call   807d63 <ntohs>
  809136:	89 c6                	mov    %eax,%esi

#if LWIP_DHCP
  pcb = NULL;
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
  809138:	66 83 f8 44          	cmp    $0x44,%ax
  80913c:	75 5a                	jne    809198 <udp_input+0xf8>
  80913e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
  809145:	66 83 7d de 43       	cmpw   $0x43,-0x22(%ebp)
  80914a:	0f 85 14 01 00 00    	jne    809264 <udp_input+0x1c4>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
  809150:	8b 45 0c             	mov    0xc(%ebp),%eax
  809153:	8b 40 20             	mov    0x20(%eax),%eax
  809156:	85 c0                	test   %eax,%eax
  809158:	0f 84 ff 00 00 00    	je     80925d <udp_input+0x1bd>
  80915e:	8b 40 08             	mov    0x8(%eax),%eax
  809161:	89 45 e0             	mov    %eax,-0x20(%ebp)
  809164:	85 c0                	test   %eax,%eax
  809166:	0f 84 f8 00 00 00    	je     809264 <udp_input+0x1c4>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  80916c:	83 f8 fc             	cmp    $0xfffffffc,%eax
  80916f:	0f 84 01 01 00 00    	je     809276 <udp_input+0x1d6>
  809175:	8b 40 04             	mov    0x4(%eax),%eax
  809178:	85 c0                	test   %eax,%eax
  80917a:	0f 84 f6 00 00 00    	je     809276 <udp_input+0x1d6>
  809180:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  809183:	3b 41 0c             	cmp    0xc(%ecx),%eax
  809186:	0f 84 ea 00 00 00    	je     809276 <udp_input+0x1d6>
  80918c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  809193:	e9 cc 00 00 00       	jmp    809264 <udp_input+0x1c4>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  809198:	8b 1d 74 c2 b3 00    	mov    0xb3c274,%ebx
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
    local_match = 0;
    uncon_pcb = NULL;
  80919e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
  8091a5:	bf 00 00 00 00       	mov    $0x0,%edi
          (ip_addr_isany(&pcb->local_ip) ||
           ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest)) || 
#if LWIP_IGMP
           ip_addr_ismulticast(&(iphdr->dest)) ||
#endif /* LWIP_IGMP */
           ip_addr_isbroadcast(&(iphdr->dest), inp))) {
  8091aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8091ad:	83 c0 10             	add    $0x10,%eax
  8091b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  8091b3:	e9 95 00 00 00       	jmp    80924d <udp_input+0x1ad>
                   ip4_addr3(&pcb->local_ip), ip4_addr4(&pcb->local_ip), pcb->local_port,
                   ip4_addr1(&pcb->remote_ip), ip4_addr2(&pcb->remote_ip),
                   ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
  8091b8:	66 39 73 12          	cmp    %si,0x12(%ebx)
  8091bc:	0f 85 86 00 00 00    	jne    809248 <udp_input+0x1a8>
  8091c2:	85 db                	test   %ebx,%ebx
  8091c4:	74 24                	je     8091ea <udp_input+0x14a>
          (ip_addr_isany(&pcb->local_ip) ||
  8091c6:	8b 03                	mov    (%ebx),%eax
  8091c8:	85 c0                	test   %eax,%eax
  8091ca:	74 1e                	je     8091ea <udp_input+0x14a>
  8091cc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8091cf:	3b 41 10             	cmp    0x10(%ecx),%eax
  8091d2:	74 16                	je     8091ea <udp_input+0x14a>
           ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest)) || 
#if LWIP_IGMP
           ip_addr_ismulticast(&(iphdr->dest)) ||
#endif /* LWIP_IGMP */
           ip_addr_isbroadcast(&(iphdr->dest), inp))) {
  8091d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  8091d7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8091db:	8b 45 d8             	mov    -0x28(%ebp),%eax
  8091de:	89 04 24             	mov    %eax,(%esp)
  8091e1:	e8 8b d8 ff ff       	call   806a71 <ip_addr_isbroadcast>
                   ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          (ip_addr_isany(&pcb->local_ip) ||
           ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest)) || 
  8091e6:	84 c0                	test   %al,%al
  8091e8:	74 5e                	je     809248 <udp_input+0x1a8>
#if LWIP_IGMP
           ip_addr_ismulticast(&(iphdr->dest)) ||
#endif /* LWIP_IGMP */
           ip_addr_isbroadcast(&(iphdr->dest), inp))) {
        local_match = 1;
        if ((uncon_pcb == NULL) && 
  8091ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  8091ee:	0f 85 0a 02 00 00    	jne    8093fe <udp_input+0x35e>
  8091f4:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
  8091f8:	83 e0 04             	and    $0x4,%eax
  8091fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
  8091fe:	0f 44 c3             	cmove  %ebx,%eax
  809201:	89 45 e0             	mov    %eax,-0x20(%ebp)
  809204:	e9 f5 01 00 00       	jmp    8093fe <udp_input+0x35e>
          uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
  809209:	83 fb fc             	cmp    $0xfffffffc,%ebx
  80920c:	74 13                	je     809221 <udp_input+0x181>
          (ip_addr_isany(&pcb->remote_ip) ||
  80920e:	8b 43 04             	mov    0x4(%ebx),%eax
  809211:	85 c0                	test   %eax,%eax
  809213:	74 10                	je     809225 <udp_input+0x185>
  809215:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  809218:	3b 42 0c             	cmp    0xc(%edx),%eax
  80921b:	75 2b                	jne    809248 <udp_input+0x1a8>
  80921d:	89 d8                	mov    %ebx,%eax
  80921f:	eb 06                	jmp    809227 <udp_input+0x187>
  809221:	89 d8                	mov    %ebx,%eax
  809223:	eb 02                	jmp    809227 <udp_input+0x187>
  809225:	89 d8                	mov    %ebx,%eax
           ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
  809227:	85 ff                	test   %edi,%edi
  809229:	0f 84 e2 01 00 00    	je     809411 <udp_input+0x371>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  80922f:	8b 50 0c             	mov    0xc(%eax),%edx
  809232:	89 57 0c             	mov    %edx,0xc(%edi)
          pcb->next = udp_pcbs;
  809235:	8b 15 74 c2 b3 00    	mov    0xb3c274,%edx
  80923b:	89 50 0c             	mov    %edx,0xc(%eax)
          udp_pcbs = pcb;
  80923e:	a3 74 c2 b3 00       	mov    %eax,0xb3c274
  809243:	e9 c9 01 00 00       	jmp    809411 <udp_input+0x371>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  809248:	89 df                	mov    %ebx,%edi
  80924a:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  80924d:	85 db                	test   %ebx,%ebx
  80924f:	0f 85 63 ff ff ff    	jne    8091b8 <udp_input+0x118>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &iphdr->dest)) {
  809255:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  809259:	75 1b                	jne    809276 <udp_input+0x1d6>
  80925b:	eb 07                	jmp    809264 <udp_input+0x1c4>
  80925d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  809264:	8b 45 0c             	mov    0xc(%ebp),%eax
  809267:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  80926a:	8b 49 10             	mov    0x10(%ecx),%ecx
  80926d:	39 48 04             	cmp    %ecx,0x4(%eax)
  809270:	0f 85 7b 01 00 00    	jne    8093f1 <udp_input+0x351>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
  809276:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  809279:	66 83 78 06 00       	cmpw   $0x0,0x6(%eax)
  80927e:	74 48                	je     8092c8 <udp_input+0x228>
        if (inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src),
  809280:	8b 45 08             	mov    0x8(%ebp),%eax
  809283:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  809287:	89 44 24 10          	mov    %eax,0x10(%esp)
  80928b:	c7 44 24 0c 11 00 00 	movl   $0x11,0xc(%esp)
  809292:	00 
  809293:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  809296:	89 d0                	mov    %edx,%eax
  809298:	83 c0 10             	add    $0x10,%eax
  80929b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80929f:	89 d0                	mov    %edx,%eax
  8092a1:	83 c0 0c             	add    $0xc,%eax
  8092a4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8092a8:	8b 45 08             	mov    0x8(%ebp),%eax
  8092ab:	89 04 24             	mov    %eax,(%esp)
  8092ae:	e8 5b e7 ff ff       	call   807a0e <inet_chksum_pseudo>
  8092b3:	66 85 c0             	test   %ax,%ax
  8092b6:	74 10                	je     8092c8 <udp_input+0x228>
          LWIP_DEBUGF(UDP_DEBUG | 2,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
          UDP_STATS_INC(udp.drop);
          snmp_inc_udpinerrors();
          pbuf_free(p);
  8092b8:	8b 45 08             	mov    0x8(%ebp),%eax
  8092bb:	89 04 24             	mov    %eax,(%esp)
  8092be:	e8 11 bb ff ff       	call   804dd4 <pbuf_free>
          goto end;
  8092c3:	e9 51 01 00 00       	jmp    809419 <udp_input+0x379>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
  8092c8:	c7 44 24 04 f8 ff ff 	movl   $0xfffffff8,0x4(%esp)
  8092cf:	ff 
  8092d0:	8b 45 08             	mov    0x8(%ebp),%eax
  8092d3:	89 04 24             	mov    %eax,(%esp)
  8092d6:	e8 15 ba ff ff       	call   804cf0 <pbuf_header>
  8092db:	84 c0                	test   %al,%al
  8092dd:	74 1c                	je     8092fb <udp_input+0x25b>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  8092df:	c7 44 24 08 03 32 81 	movl   $0x813203,0x8(%esp)
  8092e6:	00 
  8092e7:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
  8092ee:	00 
  8092ef:	c7 04 24 2e 32 81 00 	movl   $0x81322e,(%esp)
  8092f6:	e8 93 5d 00 00       	call   80f08e <_panic>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
  8092fb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  8092fe:	85 c9                	test   %ecx,%ecx
  809300:	74 43                	je     809345 <udp_input+0x2a5>
      snmp_inc_udpindatagrams();
      /* callback */
      if (pcb->recv != NULL) {
  809302:	8b 41 18             	mov    0x18(%ecx),%eax
  809305:	85 c0                	test   %eax,%eax
  809307:	74 2a                	je     809333 <udp_input+0x293>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, &(iphdr->src), src);
  809309:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
  80930d:	89 54 24 10          	mov    %edx,0x10(%esp)
  809311:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  809314:	83 c2 0c             	add    $0xc,%edx
  809317:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80931b:	8b 55 08             	mov    0x8(%ebp),%edx
  80931e:	89 54 24 08          	mov    %edx,0x8(%esp)
  809322:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  809326:	8b 51 1c             	mov    0x1c(%ecx),%edx
  809329:	89 14 24             	mov    %edx,(%esp)
  80932c:	ff d0                	call   *%eax
  80932e:	e9 e6 00 00 00       	jmp    809419 <udp_input+0x379>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
  809333:	8b 45 08             	mov    0x8(%ebp),%eax
  809336:	89 04 24             	mov    %eax,(%esp)
  809339:	e8 96 ba ff ff       	call   804dd4 <pbuf_free>
        goto end;
  80933e:	66 90                	xchg   %ax,%ax
  809340:	e9 d4 00 00 00       	jmp    809419 <udp_input+0x379>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!ip_addr_isbroadcast(&iphdr->dest, inp) &&
  809345:	8b 45 0c             	mov    0xc(%ebp),%eax
  809348:	89 44 24 04          	mov    %eax,0x4(%esp)
  80934c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  80934f:	89 f0                	mov    %esi,%eax
  809351:	83 c0 10             	add    $0x10,%eax
  809354:	89 04 24             	mov    %eax,(%esp)
  809357:	e8 15 d7 ff ff       	call   806a71 <ip_addr_isbroadcast>
  80935c:	84 c0                	test   %al,%al
  80935e:	0f 85 80 00 00 00    	jne    8093e4 <udp_input+0x344>
          !ip_addr_ismulticast(&iphdr->dest)) {
  809364:	8b 5e 10             	mov    0x10(%esi),%ebx
  809367:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80936e:	e8 37 ec ff ff       	call   807faa <ntohl>
  809373:	21 c3                	and    %eax,%ebx
  809375:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80937c:	e8 29 ec ff ff       	call   807faa <ntohl>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!ip_addr_isbroadcast(&iphdr->dest, inp) &&
  809381:	39 c3                	cmp    %eax,%ebx
  809383:	74 5f                	je     8093e4 <udp_input+0x344>
          !ip_addr_ismulticast(&iphdr->dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  809385:	0f b7 06             	movzwl (%esi),%eax
  809388:	89 04 24             	mov    %eax,(%esp)
  80938b:	e8 d3 e9 ff ff       	call   807d63 <ntohs>
  809390:	66 c1 e8 08          	shr    $0x8,%ax
  809394:	83 e0 0f             	and    $0xf,%eax
  809397:	8d 04 85 08 00 00 00 	lea    0x8(,%eax,4),%eax
  80939e:	89 44 24 04          	mov    %eax,0x4(%esp)
  8093a2:	8b 45 08             	mov    0x8(%ebp),%eax
  8093a5:	89 04 24             	mov    %eax,(%esp)
  8093a8:	e8 43 b9 ff ff       	call   804cf0 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
  8093ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
  8093b0:	39 71 04             	cmp    %esi,0x4(%ecx)
  8093b3:	74 1c                	je     8093d1 <udp_input+0x331>
  8093b5:	c7 44 24 08 42 32 81 	movl   $0x813242,0x8(%esp)
  8093bc:	00 
  8093bd:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
  8093c4:	00 
  8093c5:	c7 04 24 2e 32 81 00 	movl   $0x81322e,(%esp)
  8093cc:	e8 bd 5c 00 00       	call   80f08e <_panic>
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  8093d1:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  8093d8:	00 
  8093d9:	8b 45 08             	mov    0x8(%ebp),%eax
  8093dc:	89 04 24             	mov    %eax,(%esp)
  8093df:	e8 21 5a 00 00       	call   80ee05 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
  8093e4:	8b 45 08             	mov    0x8(%ebp),%eax
  8093e7:	89 04 24             	mov    %eax,(%esp)
  8093ea:	e8 e5 b9 ff ff       	call   804dd4 <pbuf_free>
  8093ef:	eb 28                	jmp    809419 <udp_input+0x379>
    }
  } else {
    pbuf_free(p);
  8093f1:	8b 45 08             	mov    0x8(%ebp),%eax
  8093f4:	89 04 24             	mov    %eax,(%esp)
  8093f7:	e8 d8 b9 ff ff       	call   804dd4 <pbuf_free>
  8093fc:	eb 1b                	jmp    809419 <udp_input+0x379>
          /* the first unconnected matching PCB */     
          uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  8093fe:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
  809402:	66 39 43 14          	cmp    %ax,0x14(%ebx)
  809406:	0f 85 3c fe ff ff    	jne    809248 <udp_input+0x1a8>
  80940c:	e9 f8 fd ff ff       	jmp    809209 <udp_input+0x169>
  809411:	89 5d e0             	mov    %ebx,-0x20(%ebp)
  809414:	e9 5d fe ff ff       	jmp    809276 <udp_input+0x1d6>
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
  809419:	83 c4 3c             	add    $0x3c,%esp
  80941c:	5b                   	pop    %ebx
  80941d:	5e                   	pop    %esi
  80941e:	5f                   	pop    %edi
  80941f:	5d                   	pop    %ebp
  809420:	c3                   	ret    

00809421 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
{
  809421:	55                   	push   %ebp
  809422:	89 e5                	mov    %esp,%ebp
  809424:	57                   	push   %edi
  809425:	56                   	push   %esi
  809426:	53                   	push   %ebx
  809427:	83 ec 1c             	sub    $0x1c,%esp
  80942a:	8b 55 08             	mov    0x8(%ebp),%edx
  80942d:	8b 7d 0c             	mov    0xc(%ebp),%edi
  809430:	8b 45 10             	mov    0x10(%ebp),%eax
  809433:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  809436:	89 c1                	mov    %eax,%ecx
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 3, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  809438:	a1 74 c2 b3 00       	mov    0xb3c274,%eax

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 3, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 3, (", port = %"U16_F")\n", port));

  rebind = 0;
  80943d:	be 00 00 00 00       	mov    $0x0,%esi
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  809442:	eb 2e                	jmp    809472 <udp_bind+0x51>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  809444:	39 c2                	cmp    %eax,%edx
  809446:	75 27                	jne    80946f <udp_bind+0x4e>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
  809448:	89 f3                	mov    %esi,%ebx
  80944a:	84 db                	test   %bl,%bl
  80944c:	74 1c                	je     80946a <udp_bind+0x49>
  80944e:	c7 44 24 08 56 32 81 	movl   $0x813256,0x8(%esp)
  809455:	00 
  809456:	c7 44 24 04 41 02 00 	movl   $0x241,0x4(%esp)
  80945d:	00 
  80945e:	c7 04 24 2e 32 81 00 	movl   $0x81322e,(%esp)
  809465:	e8 24 5c 00 00       	call   80f08e <_panic>
      /* pcb already in list, just rebind */
      rebind = 1;
  80946a:	be 01 00 00 00       	mov    $0x1,%esi
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 3, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  80946f:	8b 40 0c             	mov    0xc(%eax),%eax
  809472:	85 c0                	test   %eax,%eax
  809474:	75 ce                	jne    809444 <udp_bind+0x23>
        return ERR_USE;
      }
#endif
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
  809476:	85 ff                	test   %edi,%edi
  809478:	74 04                	je     80947e <udp_bind+0x5d>
  80947a:	8b 07                	mov    (%edi),%eax
  80947c:	eb 05                	jmp    809483 <udp_bind+0x62>
  80947e:	b8 00 00 00 00       	mov    $0x0,%eax
  809483:	89 02                	mov    %eax,(%edx)

  /* no port specified? */
  if (port == 0) {
  809485:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  80948a:	75 36                	jne    8094c2 <udp_bind+0xa1>
#ifndef UDP_LOCAL_PORT_RANGE_START
#define UDP_LOCAL_PORT_RANGE_START 4096
#define UDP_LOCAL_PORT_RANGE_END   0x7fff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
    ipcb = udp_pcbs;
  80948c:	8b 3d 74 c2 b3 00    	mov    0xb3c274,%edi
  809492:	89 f8                	mov    %edi,%eax
  if (port == 0) {
#ifndef UDP_LOCAL_PORT_RANGE_START
#define UDP_LOCAL_PORT_RANGE_START 4096
#define UDP_LOCAL_PORT_RANGE_END   0x7fff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
  809494:	b9 00 10 00 00       	mov    $0x1000,%ecx
    ipcb = udp_pcbs;
    while ((ipcb != NULL) && (port != UDP_LOCAL_PORT_RANGE_END)) {
  809499:	eb 13                	jmp    8094ae <udp_bind+0x8d>
      if (ipcb->local_port == port) {
  80949b:	0f b7 58 12          	movzwl 0x12(%eax),%ebx
  80949f:	66 39 cb             	cmp    %cx,%bx
  8094a2:	75 07                	jne    8094ab <udp_bind+0x8a>
        /* port is already used by another udp_pcb */
        port++;
  8094a4:	8d 4b 01             	lea    0x1(%ebx),%ecx
        /* restart scanning all udp pcbs */
        ipcb = udp_pcbs;
  8094a7:	89 f8                	mov    %edi,%eax
  8094a9:	eb 03                	jmp    8094ae <udp_bind+0x8d>
      } else
        /* go on with next udp pcb */
        ipcb = ipcb->next;
  8094ab:	8b 40 0c             	mov    0xc(%eax),%eax
#define UDP_LOCAL_PORT_RANGE_START 4096
#define UDP_LOCAL_PORT_RANGE_END   0x7fff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
    ipcb = udp_pcbs;
    while ((ipcb != NULL) && (port != UDP_LOCAL_PORT_RANGE_END)) {
  8094ae:	85 c0                	test   %eax,%eax
  8094b0:	0f 95 c3             	setne  %bl
  8094b3:	66 81 f9 ff 7f       	cmp    $0x7fff,%cx
  8094b8:	74 04                	je     8094be <udp_bind+0x9d>
  8094ba:	84 db                	test   %bl,%bl
  8094bc:	75 dd                	jne    80949b <udp_bind+0x7a>
        ipcb = udp_pcbs;
      } else
        /* go on with next udp pcb */
        ipcb = ipcb->next;
    }
    if (ipcb != NULL) {
  8094be:	84 db                	test   %bl,%bl
  8094c0:	75 24                	jne    8094e6 <udp_bind+0xc5>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  }
  pcb->local_port = port;
  8094c2:	66 89 4a 12          	mov    %cx,0x12(%edx)
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               (u16_t)(ntohl(pcb->local_ip.addr) >> 24 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) >> 16 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) >> 8 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) & 0xff), pcb->local_port));
  return ERR_OK;
  8094c6:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  }
  pcb->local_port = port;
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  8094cb:	89 f1                	mov    %esi,%ecx
  8094cd:	84 c9                	test   %cl,%cl
  8094cf:	75 1a                	jne    8094eb <udp_bind+0xca>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  8094d1:	a1 74 c2 b3 00       	mov    0xb3c274,%eax
  8094d6:	89 42 0c             	mov    %eax,0xc(%edx)
    udp_pcbs = pcb;
  8094d9:	89 15 74 c2 b3 00    	mov    %edx,0xb3c274
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               (u16_t)(ntohl(pcb->local_ip.addr) >> 24 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) >> 16 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) >> 8 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) & 0xff), pcb->local_port));
  return ERR_OK;
  8094df:	b8 00 00 00 00       	mov    $0x0,%eax
  8094e4:	eb 05                	jmp    8094eb <udp_bind+0xca>
        ipcb = ipcb->next;
    }
    if (ipcb != NULL) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  8094e6:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
               (u16_t)(ntohl(pcb->local_ip.addr) >> 24 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) >> 16 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) >> 8 & 0xff),
               (u16_t)(ntohl(pcb->local_ip.addr) & 0xff), pcb->local_port));
  return ERR_OK;
}
  8094eb:	83 c4 1c             	add    $0x1c,%esp
  8094ee:	5b                   	pop    %ebx
  8094ef:	5e                   	pop    %esi
  8094f0:	5f                   	pop    %edi
  8094f1:	5d                   	pop    %ebp
  8094f2:	c3                   	ret    

008094f3 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  struct ip_addr *dst_ip, u16_t dst_port, struct netif *netif)
{
  8094f3:	55                   	push   %ebp
  8094f4:	89 e5                	mov    %esp,%ebp
  8094f6:	57                   	push   %edi
  8094f7:	56                   	push   %esi
  8094f8:	53                   	push   %ebx
  8094f9:	83 ec 2c             	sub    $0x2c,%esp
  8094fc:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8094ff:	8b 7d 14             	mov    0x14(%ebp),%edi
  struct ip_addr *src_ip;
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  809502:	66 83 7b 12 00       	cmpw   $0x0,0x12(%ebx)
  809507:	75 1c                	jne    809525 <udp_sendto_if+0x32>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 2, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  809509:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  809510:	00 
  809511:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809515:	89 1c 24             	mov    %ebx,(%esp)
  809518:	e8 04 ff ff ff       	call   809421 <udp_bind>
    if (err != ERR_OK) {
  80951d:	84 c0                	test   %al,%al
  80951f:	0f 85 76 01 00 00    	jne    80969b <udp_sendto_if+0x1a8>
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  809525:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  80952c:	00 
  80952d:	8b 45 0c             	mov    0xc(%ebp),%eax
  809530:	89 04 24             	mov    %eax,(%esp)
  809533:	e8 b8 b7 ff ff       	call   804cf0 <pbuf_header>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  809538:	8b 75 0c             	mov    0xc(%ebp),%esi
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  80953b:	84 c0                	test   %al,%al
  80953d:	74 35                	je     809574 <udp_sendto_if+0x81>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  80953f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  809546:	00 
  809547:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  80954e:	00 
  80954f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  809556:	e8 5a b9 ff ff       	call   804eb5 <pbuf_alloc>
  80955b:	89 c6                	mov    %eax,%esi
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  80955d:	85 c0                	test   %eax,%eax
  80955f:	0f 84 31 01 00 00    	je     809696 <udp_sendto_if+0x1a3>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 2, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
    }
    /* chain header q in front of given pbuf p */
    pbuf_chain(q, p);
  809565:	8b 45 0c             	mov    0xc(%ebp),%eax
  809568:	89 44 24 04          	mov    %eax,0x4(%esp)
  80956c:	89 34 24             	mov    %esi,(%esp)
  80956f:	e8 96 bd ff ff       	call   80530a <pbuf_chain>
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  809574:	66 83 7e 0a 07       	cmpw   $0x7,0xa(%esi)
  809579:	77 1c                	ja     809597 <udp_sendto_if+0xa4>
  80957b:	c7 44 24 08 64 32 81 	movl   $0x813264,0x8(%esp)
  809582:	00 
  809583:	c7 44 24 04 b2 01 00 	movl   $0x1b2,0x4(%esp)
  80958a:	00 
  80958b:	c7 04 24 2e 32 81 00 	movl   $0x81322e,(%esp)
  809592:	e8 f7 5a 00 00       	call   80f08e <_panic>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = q->payload;
  809597:	8b 46 04             	mov    0x4(%esi),%eax
  80959a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  udphdr->src = htons(pcb->local_port);
  80959d:	0f b7 43 12          	movzwl 0x12(%ebx),%eax
  8095a1:	89 04 24             	mov    %eax,(%esp)
  8095a4:	e8 ad e7 ff ff       	call   807d56 <htons>
  8095a9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8095ac:	66 89 01             	mov    %ax,(%ecx)
  udphdr->dest = htons(dst_port);
  8095af:	0f b7 ff             	movzwl %di,%edi
  8095b2:	89 3c 24             	mov    %edi,(%esp)
  8095b5:	e8 9c e7 ff ff       	call   807d56 <htons>
  8095ba:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  8095bd:	66 89 41 02          	mov    %ax,0x2(%ecx)
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
  8095c1:	66 c7 41 06 00 00    	movw   $0x0,0x6(%ecx)

  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
  8095c7:	89 df                	mov    %ebx,%edi
  8095c9:	85 db                	test   %ebx,%ebx
  8095cb:	74 06                	je     8095d3 <udp_sendto_if+0xe0>
  8095cd:	8b 03                	mov    (%ebx),%eax
  8095cf:	85 c0                	test   %eax,%eax
  8095d1:	75 08                	jne    8095db <udp_sendto_if+0xe8>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  8095d3:	8b 45 18             	mov    0x18(%ebp),%eax
  8095d6:	8d 78 04             	lea    0x4(%eax),%edi
  8095d9:	eb 28                	jmp    809603 <udp_sendto_if+0x110>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  8095db:	8b 55 18             	mov    0x18(%ebp),%edx
  8095de:	3b 42 04             	cmp    0x4(%edx),%eax
  8095e1:	74 20                	je     809603 <udp_sendto_if+0x110>
        /* free the header pbuf */
        pbuf_free(q);
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  8095e3:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
  8095e8:	3b 75 0c             	cmp    0xc(%ebp),%esi
  8095eb:	0f 84 aa 00 00 00    	je     80969b <udp_sendto_if+0x1a8>
        /* free the header pbuf */
        pbuf_free(q);
  8095f1:	89 34 24             	mov    %esi,(%esp)
  8095f4:	e8 db b7 ff ff       	call   804dd4 <pbuf_free>
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  8095f9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  8095fe:	e9 98 00 00 00       	jmp    80969b <udp_sendto_if+0x1a8>
#endif /* LWIP_NETIF_HWADDRHINT*/
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
  809603:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  809607:	89 04 24             	mov    %eax,(%esp)
  80960a:	e8 47 e7 ff ff       	call   807d56 <htons>
  80960f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  809612:	66 89 42 04          	mov    %ax,0x4(%edx)
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  809616:	f6 43 10 01          	testb  $0x1,0x10(%ebx)
  80961a:	75 35                	jne    809651 <udp_sendto_if+0x15e>
      udphdr->chksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
  80961c:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  809620:	89 44 24 10          	mov    %eax,0x10(%esp)
  809624:	c7 44 24 0c 11 00 00 	movl   $0x11,0xc(%esp)
  80962b:	00 
  80962c:	8b 45 10             	mov    0x10(%ebp),%eax
  80962f:	89 44 24 08          	mov    %eax,0x8(%esp)
  809633:	89 7c 24 04          	mov    %edi,0x4(%esp)
  809637:	89 34 24             	mov    %esi,(%esp)
  80963a:	e8 cf e3 ff ff       	call   807a0e <inet_chksum_pseudo>
  80963f:	66 85 c0             	test   %ax,%ax
  809642:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  809647:	0f 44 c2             	cmove  %edx,%eax
  80964a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  80964d:	66 89 42 06          	mov    %ax,0x6(%edx)
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
#if LWIP_NETIF_HWADDRHINT
    netif->addr_hint = &(pcb->addr_hint);
#endif /* LWIP_NETIF_HWADDRHINT*/
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);    
  809651:	8b 45 18             	mov    0x18(%ebp),%eax
  809654:	89 44 24 18          	mov    %eax,0x18(%esp)
  809658:	c7 44 24 14 11 00 00 	movl   $0x11,0x14(%esp)
  80965f:	00 
  809660:	0f b6 43 0a          	movzbl 0xa(%ebx),%eax
  809664:	89 44 24 10          	mov    %eax,0x10(%esp)
  809668:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
  80966c:	89 44 24 0c          	mov    %eax,0xc(%esp)
  809670:	8b 45 10             	mov    0x10(%ebp),%eax
  809673:	89 44 24 08          	mov    %eax,0x8(%esp)
  809677:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80967b:	89 34 24             	mov    %esi,(%esp)
  80967e:	e8 7b d7 ff ff       	call   806dfe <ip_output_if>
  809683:	89 c3                	mov    %eax,%ebx
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  809685:	3b 75 0c             	cmp    0xc(%ebp),%esi
  809688:	74 11                	je     80969b <udp_sendto_if+0x1a8>
    /* free the header pbuf */
    pbuf_free(q);
  80968a:	89 34 24             	mov    %esi,(%esp)
  80968d:	e8 42 b7 ff ff       	call   804dd4 <pbuf_free>
    q = NULL;
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
  809692:	89 d8                	mov    %ebx,%eax
  809694:	eb 05                	jmp    80969b <udp_sendto_if+0x1a8>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | 2, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  809696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
}
  80969b:	83 c4 2c             	add    $0x2c,%esp
  80969e:	5b                   	pop    %ebx
  80969f:	5e                   	pop    %esi
  8096a0:	5f                   	pop    %edi
  8096a1:	5d                   	pop    %ebp
  8096a2:	c3                   	ret    

008096a3 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  struct ip_addr *dst_ip, u16_t dst_port)
{
  8096a3:	55                   	push   %ebp
  8096a4:	89 e5                	mov    %esp,%ebp
  8096a6:	56                   	push   %esi
  8096a7:	53                   	push   %ebx
  8096a8:	83 ec 20             	sub    $0x20,%esp
  8096ab:	8b 5d 10             	mov    0x10(%ebp),%ebx
  8096ae:	8b 75 14             	mov    0x14(%ebp),%esi

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(dst_ip);
  8096b1:	89 1c 24             	mov    %ebx,(%esp)
  8096b4:	e8 07 d4 ff ff       	call   806ac0 <ip_route>
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  8096b9:	85 c0                	test   %eax,%eax
  8096bb:	74 23                	je     8096e0 <udp_sendto+0x3d>
    LWIP_DEBUGF(UDP_DEBUG | 1, ("udp_send: No route to 0x%"X32_F"\n", dst_ip->addr));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
  }
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  8096bd:	89 44 24 10          	mov    %eax,0x10(%esp)
  8096c1:	0f b7 f6             	movzwl %si,%esi
  8096c4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  8096c8:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  8096cc:	8b 45 0c             	mov    0xc(%ebp),%eax
  8096cf:	89 44 24 04          	mov    %eax,0x4(%esp)
  8096d3:	8b 45 08             	mov    0x8(%ebp),%eax
  8096d6:	89 04 24             	mov    %eax,(%esp)
  8096d9:	e8 15 fe ff ff       	call   8094f3 <udp_sendto_if>
  8096de:	eb 05                	jmp    8096e5 <udp_sendto+0x42>

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
    LWIP_DEBUGF(UDP_DEBUG | 1, ("udp_send: No route to 0x%"X32_F"\n", dst_ip->addr));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
  8096e0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  }
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
}
  8096e5:	83 c4 20             	add    $0x20,%esp
  8096e8:	5b                   	pop    %ebx
  8096e9:	5e                   	pop    %esi
  8096ea:	5d                   	pop    %ebp
  8096eb:	c3                   	ret    

008096ec <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  8096ec:	55                   	push   %ebp
  8096ed:	89 e5                	mov    %esp,%ebp
  8096ef:	83 ec 18             	sub    $0x18,%esp
  8096f2:	8b 45 08             	mov    0x8(%ebp),%eax
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  8096f5:	0f b7 50 14          	movzwl 0x14(%eax),%edx
  8096f9:	89 54 24 0c          	mov    %edx,0xc(%esp)
  8096fd:	8d 50 04             	lea    0x4(%eax),%edx
  809700:	89 54 24 08          	mov    %edx,0x8(%esp)
  809704:	8b 55 0c             	mov    0xc(%ebp),%edx
  809707:	89 54 24 04          	mov    %edx,0x4(%esp)
  80970b:	89 04 24             	mov    %eax,(%esp)
  80970e:	e8 90 ff ff ff       	call   8096a3 <udp_sendto>
}
  809713:	c9                   	leave  
  809714:	c3                   	ret    

00809715 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
{
  809715:	55                   	push   %ebp
  809716:	89 e5                	mov    %esp,%ebp
  809718:	57                   	push   %edi
  809719:	56                   	push   %esi
  80971a:	53                   	push   %ebx
  80971b:	83 ec 1c             	sub    $0x1c,%esp
  80971e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  809721:	8b 75 0c             	mov    0xc(%ebp),%esi
  809724:	8b 7d 10             	mov    0x10(%ebp),%edi
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
  809727:	66 83 7b 12 00       	cmpw   $0x0,0x12(%ebx)
  80972c:	75 1a                	jne    809748 <udp_connect+0x33>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  80972e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  809735:	00 
  809736:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80973a:	89 1c 24             	mov    %ebx,(%esp)
  80973d:	e8 df fc ff ff       	call   809421 <udp_bind>
  809742:	89 c2                	mov    %eax,%edx
    if (err != ERR_OK)
  809744:	84 d2                	test   %dl,%dl
  809746:	75 3f                	jne    809787 <udp_connect+0x72>
      return err;
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
  809748:	85 f6                	test   %esi,%esi
  80974a:	74 06                	je     809752 <udp_connect+0x3d>
  80974c:	8b 06                	mov    (%esi),%eax
  80974e:	66 90                	xchg   %ax,%ax
  809750:	eb 05                	jmp    809757 <udp_connect+0x42>
  809752:	b8 00 00 00 00       	mov    $0x0,%eax
  809757:	89 43 04             	mov    %eax,0x4(%ebx)
  pcb->remote_port = port;
  80975a:	66 89 7b 14          	mov    %di,0x14(%ebx)
  pcb->flags |= UDP_FLAGS_CONNECTED;
  80975e:	80 4b 10 04          	orb    $0x4,0x10(%ebx)
               (u16_t)(ntohl(pcb->remote_ip.addr) >> 16 & 0xff),
               (u16_t)(ntohl(pcb->remote_ip.addr) >> 8 & 0xff),
               (u16_t)(ntohl(pcb->remote_ip.addr) & 0xff), pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  809762:	8b 15 74 c2 b3 00    	mov    0xb3c274,%edx
  809768:	89 d0                	mov    %edx,%eax
  80976a:	eb 07                	jmp    809773 <udp_connect+0x5e>
    if (pcb == ipcb) {
  80976c:	39 c3                	cmp    %eax,%ebx
  80976e:	74 12                	je     809782 <udp_connect+0x6d>
               (u16_t)(ntohl(pcb->remote_ip.addr) >> 16 & 0xff),
               (u16_t)(ntohl(pcb->remote_ip.addr) >> 8 & 0xff),
               (u16_t)(ntohl(pcb->remote_ip.addr) & 0xff), pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  809770:	8b 40 0c             	mov    0xc(%eax),%eax
  809773:	85 c0                	test   %eax,%eax
  809775:	75 f5                	jne    80976c <udp_connect+0x57>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  809777:	89 53 0c             	mov    %edx,0xc(%ebx)
  udp_pcbs = pcb;
  80977a:	89 1d 74 c2 b3 00    	mov    %ebx,0xb3c274
  return ERR_OK;
  809780:	eb 05                	jmp    809787 <udp_connect+0x72>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    if (pcb == ipcb) {
      /* already on the list, just return */
      return ERR_OK;
  809782:	b8 00 00 00 00       	mov    $0x0,%eax
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
  809787:	83 c4 1c             	add    $0x1c,%esp
  80978a:	5b                   	pop    %ebx
  80978b:	5e                   	pop    %esi
  80978c:	5f                   	pop    %edi
  80978d:	5d                   	pop    %ebp
  80978e:	c3                   	ret    

0080978f <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  80978f:	55                   	push   %ebp
  809790:	89 e5                	mov    %esp,%ebp
  809792:	8b 45 08             	mov    0x8(%ebp),%eax
  /* reset remote address association */
  ip_addr_set(&pcb->remote_ip, IP_ADDR_ANY);
  809795:	8b 15 a0 2e 81 00    	mov    0x812ea0,%edx
  80979b:	89 50 04             	mov    %edx,0x4(%eax)
  pcb->remote_port = 0;
  80979e:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  8097a4:	80 60 10 fb          	andb   $0xfb,0x10(%eax)
}
  8097a8:	5d                   	pop    %ebp
  8097a9:	c3                   	ret    

008097aa <udp_recv>:
void
udp_recv(struct udp_pcb *pcb,
         void (* recv)(void *arg, struct udp_pcb *upcb, struct pbuf *p,
                       struct ip_addr *addr, u16_t port),
         void *recv_arg)
{
  8097aa:	55                   	push   %ebp
  8097ab:	89 e5                	mov    %esp,%ebp
  8097ad:	8b 45 08             	mov    0x8(%ebp),%eax
  /* remember recv() callback and user data */
  pcb->recv = recv;
  8097b0:	8b 55 0c             	mov    0xc(%ebp),%edx
  8097b3:	89 50 18             	mov    %edx,0x18(%eax)
  pcb->recv_arg = recv_arg;
  8097b6:	8b 55 10             	mov    0x10(%ebp),%edx
  8097b9:	89 50 1c             	mov    %edx,0x1c(%eax)
}
  8097bc:	5d                   	pop    %ebp
  8097bd:	c3                   	ret    

008097be <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  8097be:	55                   	push   %ebp
  8097bf:	89 e5                	mov    %esp,%ebp
  8097c1:	83 ec 18             	sub    $0x18,%esp
  8097c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  8097c7:	a1 74 c2 b3 00       	mov    0xb3c274,%eax
  8097cc:	39 c8                	cmp    %ecx,%eax
  8097ce:	75 1e                	jne    8097ee <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  8097d0:	8b 40 0c             	mov    0xc(%eax),%eax
  8097d3:	a3 74 c2 b3 00       	mov    %eax,0xb3c274
  8097d8:	eb 18                	jmp    8097f2 <udp_remove+0x34>
    /* pcb not 1st in list */
  } else
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  8097da:	8b 50 0c             	mov    0xc(%eax),%edx
  8097dd:	85 d2                	test   %edx,%edx
  8097df:	74 0a                	je     8097eb <udp_remove+0x2d>
  8097e1:	39 d1                	cmp    %edx,%ecx
  8097e3:	75 06                	jne    8097eb <udp_remove+0x2d>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  8097e5:	8b 51 0c             	mov    0xc(%ecx),%edx
  8097e8:	89 50 0c             	mov    %edx,0xc(%eax)
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  8097eb:	8b 40 0c             	mov    0xc(%eax),%eax
  8097ee:	85 c0                	test   %eax,%eax
  8097f0:	75 e8                	jne    8097da <udp_remove+0x1c>
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  memp_free(MEMP_UDP_PCB, pcb);
  8097f2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  8097f6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  8097fd:	e8 20 b2 ff ff       	call   804a22 <memp_free>
}
  809802:	c9                   	leave  
  809803:	c3                   	ret    

00809804 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  809804:	55                   	push   %ebp
  809805:	89 e5                	mov    %esp,%ebp
  809807:	53                   	push   %ebx
  809808:	83 ec 14             	sub    $0x14,%esp
  struct udp_pcb *pcb;
  pcb = memp_malloc(MEMP_UDP_PCB);
  80980b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  809812:	e8 ab b1 ff ff       	call   8049c2 <memp_malloc>
  809817:	89 c3                	mov    %eax,%ebx
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  809819:	85 c0                	test   %eax,%eax
  80981b:	74 1c                	je     809839 <udp_new+0x35>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  80981d:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
  809824:	00 
  809825:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80982c:	00 
  80982d:	89 04 24             	mov    %eax,(%esp)
  809830:	e8 d2 60 00 00       	call   80f907 <memset>
    pcb->ttl = UDP_TTL;
  809835:	c6 43 0b ff          	movb   $0xff,0xb(%ebx)
  }
  return pcb;
}
  809839:	89 d8                	mov    %ebx,%eax
  80983b:	83 c4 14             	add    $0x14,%esp
  80983e:	5b                   	pop    %ebx
  80983f:	5d                   	pop    %ebp
  809840:	c3                   	ret    
  809841:	66 90                	xchg   %ax,%ax
  809843:	66 90                	xchg   %ax,%ax
  809845:	66 90                	xchg   %ax,%ax
  809847:	66 90                	xchg   %ax,%ax
  809849:	66 90                	xchg   %ax,%ax
  80984b:	66 90                	xchg   %ax,%ax
  80984d:	66 90                	xchg   %ax,%ax
  80984f:	90                   	nop

00809850 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  809850:	55                   	push   %ebp
  809851:	89 e5                	mov    %esp,%ebp
  809853:	56                   	push   %esi
  809854:	53                   	push   %ebx
  809855:	83 ec 10             	sub    $0x10,%esp
  809858:	89 c3                	mov    %eax,%ebx
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  80985a:	85 c0                	test   %eax,%eax
  80985c:	75 1c                	jne    80987a <free_etharp_q+0x2a>
  80985e:	c7 44 24 08 a8 29 81 	movl   $0x8129a8,0x8(%esp)
  809865:	00 
  809866:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
  80986d:	00 
  80986e:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809875:	e8 14 58 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  80987a:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
  80987e:	75 1c                	jne    80989c <free_etharp_q+0x4c>
  809880:	c7 44 24 08 aa 32 81 	movl   $0x8132aa,0x8(%esp)
  809887:	00 
  809888:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
  80988f:	00 
  809890:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809897:	e8 f2 57 00 00       	call   80f08e <_panic>
  while (q) {
    r = q;
    q = q->next;
  80989c:	8b 33                	mov    (%ebx),%esi
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  80989e:	8b 43 04             	mov    0x4(%ebx),%eax
  8098a1:	85 c0                	test   %eax,%eax
  8098a3:	75 1c                	jne    8098c1 <free_etharp_q+0x71>
  8098a5:	c7 44 24 08 b7 32 81 	movl   $0x8132b7,0x8(%esp)
  8098ac:	00 
  8098ad:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  8098b4:	00 
  8098b5:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  8098bc:	e8 cd 57 00 00       	call   80f08e <_panic>
    pbuf_free(r->p);
  8098c1:	89 04 24             	mov    %eax,(%esp)
  8098c4:	e8 0b b5 ff ff       	call   804dd4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  8098c9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8098cd:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  8098d4:	e8 49 b1 ff ff       	call   804a22 <memp_free>
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
  8098d9:	85 f6                	test   %esi,%esi
  8098db:	74 04                	je     8098e1 <free_etharp_q+0x91>
    r = q;
    q = q->next;
  8098dd:	89 f3                	mov    %esi,%ebx
  8098df:	eb bb                	jmp    80989c <free_etharp_q+0x4c>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
    memp_free(MEMP_ARP_QUEUE, r);
  }
}
  8098e1:	83 c4 10             	add    $0x10,%esp
  8098e4:	5b                   	pop    %ebx
  8098e5:	5e                   	pop    %esi
  8098e6:	5d                   	pop    %ebp
  8098e7:	c3                   	ret    

008098e8 <find_entry>:
#if LWIP_NETIF_HWADDRHINT
find_entry(struct ip_addr *ipaddr, u8_t flags, struct netif *netif)
#else /* LWIP_NETIF_HWADDRHINT */
find_entry(struct ip_addr *ipaddr, u8_t flags)
#endif /* LWIP_NETIF_HWADDRHINT */
{
  8098e8:	55                   	push   %ebp
  8098e9:	89 e5                	mov    %esp,%ebp
  8098eb:	57                   	push   %edi
  8098ec:	56                   	push   %esi
  8098ed:	53                   	push   %ebx
  8098ee:	83 ec 2c             	sub    $0x2c,%esp
  8098f1:	89 c3                	mov    %eax,%ebx
  8098f3:	89 55 dc             	mov    %edx,-0x24(%ebp)
  u8_t age_queue = 0;
#endif

  /* First, test if the last call to this function asked for the
   * same address. If so, we're really fast! */
  if (ipaddr) {
  8098f6:	85 c0                	test   %eax,%eax
  8098f8:	75 2f                	jne    809929 <find_entry+0x41>
  8098fa:	ba 54 5a b3 00       	mov    $0xb35a54,%edx
#endif
      /* pending without queued packets? */
      } else {
        if (arp_table[i].ctime >= age_pending) {
          old_pending = i;
          age_pending = arp_table[i].ctime;
  8098ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
  809903:	c6 45 e0 0a          	movb   $0xa,-0x20(%ebp)
  809907:	c6 45 e2 00          	movb   $0x0,-0x1e(%ebp)
  80990b:	c6 45 db 00          	movb   $0x0,-0x25(%ebp)
  80990f:	b9 00 00 00 00       	mov    $0x0,%ecx
  809914:	b8 0a 00 00 00       	mov    $0xa,%eax
  809919:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
  80991d:	c6 45 da 0a          	movb   $0xa,-0x26(%ebp)
  809921:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  809924:	e9 b8 00 00 00       	jmp    8099e1 <find_entry+0xf9>
          return per_pcb_cache;
        }
      }
    }
#else /* #if LWIP_NETIF_HWADDRHINT */
    if (arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) {
  809929:	0f b6 05 20 5a b3 00 	movzbl 0xb35a20,%eax
  809930:	0f b6 d0             	movzbl %al,%edx
  809933:	6b ca 1c             	imul   $0x1c,%edx,%ecx
  809936:	83 b9 50 5a b3 00 02 	cmpl   $0x2,0xb35a50(%ecx)
  80993d:	75 bb                	jne    8098fa <find_entry+0x12>
      /* the cached entry is stable */
      if (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr)) {
  80993f:	8b b9 44 5a b3 00    	mov    0xb35a44(%ecx),%edi
  809945:	39 3b                	cmp    %edi,(%ebx)
  809947:	75 b1                	jne    8098fa <find_entry+0x12>
        /* cached entry was the right one! */
        ETHARP_STATS_INC(etharp.cachehit);
        return etharp_cached_entry;
  809949:	e9 a7 01 00 00       	jmp    809af5 <find_entry+0x20d>
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (arp_table[i].state == ETHARP_STATE_EMPTY)) {
  80994e:	3c 0a                	cmp    $0xa,%al
  809950:	75 0a                	jne    80995c <find_entry+0x74>
  809952:	83 7a fc 00          	cmpl   $0x0,-0x4(%edx)
  809956:	75 04                	jne    80995c <find_entry+0x74>
      LWIP_DEBUGF(ETHARP_DEBUG, ("find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  809958:	89 c8                	mov    %ecx,%eax
  80995a:	eb 7f                	jmp    8099db <find_entry+0xf3>
  80995c:	89 d7                	mov    %edx,%edi
    }
    /* pending entry? */
    else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  80995e:	8b 72 fc             	mov    -0x4(%edx),%esi
  809961:	83 fe 01             	cmp    $0x1,%esi
  809964:	75 45                	jne    8099ab <find_entry+0xc3>
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  809966:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  809969:	85 f6                	test   %esi,%esi
  80996b:	74 14                	je     809981 <find_entry+0x99>
  80996d:	8b 5a f0             	mov    -0x10(%edx),%ebx
  809970:	39 1e                	cmp    %ebx,(%esi)
  809972:	75 0d                	jne    809981 <find_entry+0x99>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching pending entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
#if LWIP_NETIF_HWADDRHINT
        NETIF_SET_HINT(netif, i);
#else /* #if LWIP_NETIF_HWADDRHINT */
        etharp_cached_entry = i;
  809974:	88 0d 20 5a b3 00    	mov    %cl,0xb35a20
#endif /* #if LWIP_NETIF_HWADDRHINT */
        return i;
  80997a:	89 c8                	mov    %ecx,%eax
  80997c:	e9 74 01 00 00       	jmp    809af5 <find_entry+0x20d>
#if ARP_QUEUEING
      /* pending with queued packets? */
      } else if (arp_table[i].q != NULL) {
  809981:	83 7f ec 00          	cmpl   $0x0,-0x14(%edi)
  809985:	74 12                	je     809999 <find_entry+0xb1>
        if (arp_table[i].ctime >= age_queue) {
  809987:	0f b6 37             	movzbl (%edi),%esi
  80998a:	89 f3                	mov    %esi,%ebx
  80998c:	38 5d e3             	cmp    %bl,-0x1d(%ebp)
  80998f:	77 4a                	ja     8099db <find_entry+0xf3>
          old_queue = i;
  809991:	88 4d e0             	mov    %cl,-0x20(%ebp)
          age_queue = arp_table[i].ctime;
  809994:	88 5d e3             	mov    %bl,-0x1d(%ebp)
  809997:	eb 42                	jmp    8099db <find_entry+0xf3>
        }
#endif
      /* pending without queued packets? */
      } else {
        if (arp_table[i].ctime >= age_pending) {
  809999:	0f b6 37             	movzbl (%edi),%esi
  80999c:	89 f3                	mov    %esi,%ebx
  80999e:	38 5d db             	cmp    %bl,-0x25(%ebp)
  8099a1:	77 38                	ja     8099db <find_entry+0xf3>
          old_pending = i;
  8099a3:	88 4d da             	mov    %cl,-0x26(%ebp)
          age_pending = arp_table[i].ctime;
  8099a6:	88 5d db             	mov    %bl,-0x25(%ebp)
  8099a9:	eb 30                	jmp    8099db <find_entry+0xf3>
        }
      }        
    }
    /* stable entry? */
    else if (arp_table[i].state == ETHARP_STATE_STABLE) {
  8099ab:	83 fe 02             	cmp    $0x2,%esi
  8099ae:	75 2b                	jne    8099db <find_entry+0xf3>
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  8099b0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  8099b3:	85 f6                	test   %esi,%esi
  8099b5:	74 14                	je     8099cb <find_entry+0xe3>
  8099b7:	8b 5a f0             	mov    -0x10(%edx),%ebx
  8099ba:	39 1e                	cmp    %ebx,(%esi)
  8099bc:	75 0d                	jne    8099cb <find_entry+0xe3>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching stable entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
#if LWIP_NETIF_HWADDRHINT
        NETIF_SET_HINT(netif, i);
#else /* #if LWIP_NETIF_HWADDRHINT */
        etharp_cached_entry = i;
  8099be:	88 0d 20 5a b3 00    	mov    %cl,0xb35a20
#endif /* #if LWIP_NETIF_HWADDRHINT */
        return i;
  8099c4:	89 c8                	mov    %ecx,%eax
  8099c6:	e9 2a 01 00 00       	jmp    809af5 <find_entry+0x20d>
      /* remember entry with oldest stable entry in oldest, its age in maxtime */
      } else if (arp_table[i].ctime >= age_stable) {
  8099cb:	0f b6 37             	movzbl (%edi),%esi
  8099ce:	89 f3                	mov    %esi,%ebx
  8099d0:	38 5d e2             	cmp    %bl,-0x1e(%ebp)
  8099d3:	77 06                	ja     8099db <find_entry+0xf3>
        old_stable = i;
  8099d5:	88 4d e1             	mov    %cl,-0x1f(%ebp)
        age_stable = arp_table[i].ctime;
  8099d8:	88 5d e2             	mov    %bl,-0x1e(%ebp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  8099db:	83 c1 01             	add    $0x1,%ecx
  8099de:	83 c2 1c             	add    $0x1c,%edx
  8099e1:	80 f9 0a             	cmp    $0xa,%cl
  8099e4:	0f 85 64 ff ff ff    	jne    80994e <find_entry+0x66>
  8099ea:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* no empty entry found and not allowed to recycle? */
  if (((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_TRY_HARD) == 0))
  8099ed:	3c 0a                	cmp    $0xa,%al
  8099ef:	75 0f                	jne    809a00 <find_entry+0x118>
  8099f1:	f6 45 dc 01          	testb  $0x1,-0x24(%ebp)
  8099f5:	0f 85 ee 00 00 00    	jne    809ae9 <find_entry+0x201>
  8099fb:	e9 cd 00 00 00       	jmp    809acd <find_entry+0x1e5>
      /* or don't create new entry, only search? */
      || ((flags & ETHARP_FIND_ONLY) != 0)) {
  809a00:	f6 45 dc 02          	testb  $0x2,-0x24(%ebp)
  809a04:	0f 85 ca 00 00 00    	jne    809ad4 <find_entry+0x1ec>
   * { ETHARP_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
  809a0a:	89 c6                	mov    %eax,%esi
   * 
   * { ETHARP_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  809a0c:	3c 09                	cmp    $0x9,%al
  809a0e:	66 90                	xchg   %ax,%ax
  809a10:	7e 68                	jle    809a7a <find_entry+0x192>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  }
  /* 2) found recyclable stable entry? */
  else if (old_stable < ARP_TABLE_SIZE) {
  809a12:	80 7d e1 09          	cmpb   $0x9,-0x1f(%ebp)
  809a16:	7f 31                	jg     809a49 <find_entry+0x161>
    /* recycle oldest stable*/
    i = old_stable;
  809a18:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
  809a1c:	89 c6                	mov    %eax,%esi
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
#if ARP_QUEUEING
    /* no queued packets should exist on stable entries */
    LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  809a1e:	0f b6 c0             	movzbl %al,%eax
  809a21:	6b c0 1c             	imul   $0x1c,%eax,%eax
  809a24:	83 b8 40 5a b3 00 00 	cmpl   $0x0,0xb35a40(%eax)
  809a2b:	74 4d                	je     809a7a <find_entry+0x192>
  809a2d:	c7 44 24 08 c4 32 81 	movl   $0x8132c4,0x8(%esp)
  809a34:	00 
  809a35:	c7 44 24 04 75 01 00 	movl   $0x175,0x4(%esp)
  809a3c:	00 
  809a3d:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809a44:	e8 45 56 00 00       	call   80f08e <_panic>
#endif
  /* 3) found recyclable pending entry without queued packets? */
  } else if (old_pending < ARP_TABLE_SIZE) {
  809a49:	80 7d da 09          	cmpb   $0x9,-0x26(%ebp)
  809a4d:	7f 06                	jg     809a55 <find_entry+0x16d>
    /* recycle oldest pending */
    i = old_pending;
  809a4f:	0f b6 75 da          	movzbl -0x26(%ebp),%esi
  809a53:	eb 25                	jmp    809a7a <find_entry+0x192>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
#if ARP_QUEUEING
  /* 4) found recyclable pending entry with queued packets? */
  } else if (old_queue < ARP_TABLE_SIZE) {
  809a55:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
  809a59:	3c 09                	cmp    $0x9,%al
  809a5b:	7f 7e                	jg     809adb <find_entry+0x1f3>
    /* recycle oldest pending */
    i = old_queue;
  809a5d:	89 c6                	mov    %eax,%esi
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  809a5f:	0f b6 f8             	movzbl %al,%edi
  809a62:	6b ff 1c             	imul   $0x1c,%edi,%edi
  809a65:	8b 87 40 5a b3 00    	mov    0xb35a40(%edi),%eax
  809a6b:	e8 e0 fd ff ff       	call   809850 <free_etharp_q>
    arp_table[i].q = NULL;
  809a70:	c7 87 40 5a b3 00 00 	movl   $0x0,0xb35a40(%edi)
  809a77:	00 00 00 
  } else {
    return (s8_t)ERR_MEM;
  }

  /* { empty or recyclable entry found } */
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  809a7a:	89 f0                	mov    %esi,%eax
  809a7c:	3c 09                	cmp    $0x9,%al
  809a7e:	76 1c                	jbe    809a9c <find_entry+0x1b4>
  809a80:	c7 44 24 08 db 32 81 	movl   $0x8132db,0x8(%esp)
  809a87:	00 
  809a88:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
  809a8f:	00 
  809a90:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809a97:	e8 f2 55 00 00       	call   80f08e <_panic>
  if (arp_table[i].state != ETHARP_STATE_EMPTY)
  {
    snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  }
  /* recycle entry (no-op for an already empty entry) */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  809a9c:	89 f0                	mov    %esi,%eax
  809a9e:	0f b6 c0             	movzbl %al,%eax
  809aa1:	6b d0 1c             	imul   $0x1c,%eax,%edx
  809aa4:	c7 82 50 5a b3 00 00 	movl   $0x0,0xb35a50(%edx)
  809aab:	00 00 00 

  /* IP address given? */
  if (ipaddr != NULL) {
  809aae:	85 db                	test   %ebx,%ebx
  809ab0:	74 08                	je     809aba <find_entry+0x1d2>
    /* set IP address */
    ip_addr_set(&arp_table[i].ipaddr, ipaddr);
  809ab2:	8b 0b                	mov    (%ebx),%ecx
  809ab4:	89 8a 44 5a b3 00    	mov    %ecx,0xb35a44(%edx)
  }
  arp_table[i].ctime = 0;
  809aba:	6b c0 1c             	imul   $0x1c,%eax,%eax
  809abd:	c6 80 54 5a b3 00 00 	movb   $0x0,0xb35a54(%eax)
#if LWIP_NETIF_HWADDRHINT
  NETIF_SET_HINT(netif, i);
#else /* #if LWIP_NETIF_HWADDRHINT */
  etharp_cached_entry = i;
  809ac4:	89 f0                	mov    %esi,%eax
  809ac6:	a2 20 5a b3 00       	mov    %al,0xb35a20
#endif /* #if LWIP_NETIF_HWADDRHINT */
  return (err_t)i;
  809acb:	eb 28                	jmp    809af5 <find_entry+0x20d>
  /* no empty entry found and not allowed to recycle? */
  if (((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_TRY_HARD) == 0))
      /* or don't create new entry, only search? */
      || ((flags & ETHARP_FIND_ONLY) != 0)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  809acd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809ad2:	eb 21                	jmp    809af5 <find_entry+0x20d>
  809ad4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809ad9:	eb 1a                	jmp    809af5 <find_entry+0x20d>
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
#endif
    /* no empty or recyclable entries found */
  } else {
    return (s8_t)ERR_MEM;
  809adb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809ae0:	eb 13                	jmp    809af5 <find_entry+0x20d>
  /* no empty entry found and not allowed to recycle? */
  if (((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_TRY_HARD) == 0))
      /* or don't create new entry, only search? */
      || ((flags & ETHARP_FIND_ONLY) != 0)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  809ae2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809ae7:	eb 0c                	jmp    809af5 <find_entry+0x20d>
  /* { we have no match } => try to create a new entry */
   
  /* no empty entry found and not allowed to recycle? */
  if (((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_TRY_HARD) == 0))
      /* or don't create new entry, only search? */
      || ((flags & ETHARP_FIND_ONLY) != 0)) {
  809ae9:	f6 45 dc 02          	testb  $0x2,-0x24(%ebp)
  809aed:	0f 84 1f ff ff ff    	je     809a12 <find_entry+0x12a>
  809af3:	eb ed                	jmp    809ae2 <find_entry+0x1fa>
  NETIF_SET_HINT(netif, i);
#else /* #if LWIP_NETIF_HWADDRHINT */
  etharp_cached_entry = i;
#endif /* #if LWIP_NETIF_HWADDRHINT */
  return (err_t)i;
}
  809af5:	83 c4 2c             	add    $0x2c,%esp
  809af8:	5b                   	pop    %ebx
  809af9:	5e                   	pop    %esi
  809afa:	5f                   	pop    %edi
  809afb:	5d                   	pop    %ebp
  809afc:	c3                   	ret    

00809afd <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  809afd:	55                   	push   %ebp
  809afe:	89 e5                	mov    %esp,%ebp
  809b00:	57                   	push   %edi
  809b01:	56                   	push   %esi
  809b02:	53                   	push   %ebx
  809b03:	83 ec 2c             	sub    $0x2c,%esp
  809b06:	89 c6                	mov    %eax,%esi
  809b08:	89 55 e0             	mov    %edx,-0x20(%ebp)
  809b0b:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct eth_hdr *ethhdr = p->payload;
  809b0e:	8b 5a 04             	mov    0x4(%edx),%ebx
  u8_t k;

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
  809b11:	80 7e 24 06          	cmpb   $0x6,0x24(%esi)
  809b15:	74 1c                	je     809b33 <etharp_send_ip+0x36>
  809b17:	c7 44 24 08 08 33 81 	movl   $0x813308,0x8(%esp)
  809b1e:	00 
  809b1f:	c7 44 24 04 b3 01 00 	movl   $0x1b3,0x4(%esp)
  809b26:	00 
  809b27:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809b2e:	e8 5b 55 00 00       	call   80f08e <_panic>
  809b33:	b8 06 00 00 00       	mov    $0x6,%eax
  809b38:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  k = ETHARP_HWADDR_LEN;
  while(k > 0) {
    k--;
  809b3b:	83 e8 01             	sub    $0x1,%eax
    ethhdr->dest.addr[k] = dst->addr[k];
  809b3e:	0f b6 d0             	movzbl %al,%edx
  809b41:	0f b6 0c 17          	movzbl (%edi,%edx,1),%ecx
  809b45:	88 0c 13             	mov    %cl,(%ebx,%edx,1)
    ethhdr->src.addr[k]  = src->addr[k];
  809b48:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  809b4b:	0f b6 0c 11          	movzbl (%ecx,%edx,1),%ecx
  809b4f:	88 4c 13 06          	mov    %cl,0x6(%ebx,%edx,1)
  u8_t k;

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  k = ETHARP_HWADDR_LEN;
  while(k > 0) {
  809b53:	84 c0                	test   %al,%al
  809b55:	75 e4                	jne    809b3b <etharp_send_ip+0x3e>
    k--;
    ethhdr->dest.addr[k] = dst->addr[k];
    ethhdr->src.addr[k]  = src->addr[k];
  }
  ethhdr->type = htons(ETHTYPE_IP);
  809b57:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  809b5e:	e8 f3 e1 ff ff       	call   807d56 <htons>
  809b63:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  809b67:	8b 45 e0             	mov    -0x20(%ebp),%eax
  809b6a:	89 44 24 04          	mov    %eax,0x4(%esp)
  809b6e:	89 34 24             	mov    %esi,(%esp)
  809b71:	ff 56 18             	call   *0x18(%esi)
}
  809b74:	83 c4 2c             	add    $0x2c,%esp
  809b77:	5b                   	pop    %ebx
  809b78:	5e                   	pop    %esi
  809b79:	5f                   	pop    %edi
  809b7a:	5d                   	pop    %ebp
  809b7b:	c3                   	ret    

00809b7c <update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  809b7c:	55                   	push   %ebp
  809b7d:	89 e5                	mov    %esp,%ebp
  809b7f:	57                   	push   %edi
  809b80:	56                   	push   %esi
  809b81:	53                   	push   %ebx
  809b82:	83 ec 2c             	sub    $0x2c,%esp
  809b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  809b88:	89 cb                	mov    %ecx,%ebx
  809b8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  809b8d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  s8_t i;
  u8_t k;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 3, ("update_arp_entry()\n"));
  LWIP_ASSERT("netif->hwaddr_len == ETHARP_HWADDR_LEN", netif->hwaddr_len == ETHARP_HWADDR_LEN);
  809b90:	80 78 24 06          	cmpb   $0x6,0x24(%eax)
  809b94:	74 1c                	je     809bb2 <update_arp_entry+0x36>
  809b96:	c7 44 24 08 4c 33 81 	movl   $0x81334c,0x8(%esp)
  809b9d:	00 
  809b9e:	c7 44 24 04 d9 01 00 	movl   $0x1d9,0x4(%esp)
  809ba5:	00 
  809ba6:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809bad:	e8 dc 54 00 00       	call   80f08e <_panic>
  809bb2:	89 d6                	mov    %edx,%esi
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
                                        ip4_addr1(ipaddr), ip4_addr2(ipaddr), ip4_addr3(ipaddr), ip4_addr4(ipaddr), 
                                        ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
                                        ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  809bb4:	85 d2                	test   %edx,%edx
  809bb6:	0f 84 e2 00 00 00    	je     809c9e <update_arp_entry+0x122>
  809bbc:	83 3a 00             	cmpl   $0x0,(%edx)
  809bbf:	0f 84 e0 00 00 00    	je     809ca5 <update_arp_entry+0x129>
      ip_addr_isbroadcast(ipaddr, netif) ||
  809bc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  809bc8:	89 44 24 04          	mov    %eax,0x4(%esp)
  809bcc:	89 14 24             	mov    %edx,(%esp)
  809bcf:	e8 9d ce ff ff       	call   806a71 <ip_addr_isbroadcast>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
                                        ip4_addr1(ipaddr), ip4_addr2(ipaddr), ip4_addr3(ipaddr), ip4_addr4(ipaddr), 
                                        ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
                                        ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  809bd4:	84 c0                	test   %al,%al
  809bd6:	0f 85 d0 00 00 00    	jne    809cac <update_arp_entry+0x130>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
  809bdc:	8b 3e                	mov    (%esi),%edi
  809bde:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  809be5:	e8 c0 e3 ff ff       	call   807faa <ntohl>
  809bea:	21 c7                	and    %eax,%edi
  809bec:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  809bf3:	e8 b2 e3 ff ff       	call   807faa <ntohl>
                                        ip4_addr1(ipaddr), ip4_addr2(ipaddr), ip4_addr3(ipaddr), ip4_addr4(ipaddr), 
                                        ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
                                        ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
  809bf8:	39 c7                	cmp    %eax,%edi
  809bfa:	0f 84 b3 00 00 00    	je     809cb3 <update_arp_entry+0x137>
  }
  /* find or create ARP entry */
#if LWIP_NETIF_HWADDRHINT
  i = find_entry(ipaddr, flags, netif);
#else /* LWIP_NETIF_HWADDRHINT */
  i = find_entry(ipaddr, flags);
  809c00:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
  809c04:	89 f0                	mov    %esi,%eax
  809c06:	e8 dd fc ff ff       	call   8098e8 <find_entry>
#endif /* LWIP_NETIF_HWADDRHINT */
  /* bail out if no entry could be found */
  if (i < 0)
  809c0b:	84 c0                	test   %al,%al
  809c0d:	0f 88 a5 00 00 00    	js     809cb8 <update_arp_entry+0x13c>
    return (err_t)i;
  
  /* mark it stable */
  arp_table[i].state = ETHARP_STATE_STABLE;
  809c13:	0f be f8             	movsbl %al,%edi
  809c16:	6b c7 1c             	imul   $0x1c,%edi,%eax
  809c19:	c7 80 50 5a b3 00 02 	movl   $0x2,0xb35a50(%eax)
  809c20:	00 00 00 
  /* record network interface */
  arp_table[i].netif = netif;
  809c23:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  809c26:	89 88 58 5a b3 00    	mov    %ecx,0xb35a58(%eax)
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  k = ETHARP_HWADDR_LEN;
  809c2c:	ba 06 00 00 00       	mov    $0x6,%edx
  while (k > 0) {
    k--;
    arp_table[i].ethaddr.addr[k] = ethaddr->addr[k];
  809c31:	89 c6                	mov    %eax,%esi

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  k = ETHARP_HWADDR_LEN;
  while (k > 0) {
    k--;
  809c33:	83 ea 01             	sub    $0x1,%edx
    arp_table[i].ethaddr.addr[k] = ethaddr->addr[k];
  809c36:	0f b6 c2             	movzbl %dl,%eax
  809c39:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  809c3d:	88 8c 30 48 5a b3 00 	mov    %cl,0xb35a48(%eax,%esi,1)
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  k = ETHARP_HWADDR_LEN;
  while (k > 0) {
  809c44:	84 d2                	test   %dl,%dl
  809c46:	75 eb                	jne    809c33 <update_arp_entry+0xb7>
    k--;
    arp_table[i].ethaddr.addr[k] = ethaddr->addr[k];
  }
  /* reset time stamp */
  arp_table[i].ctime = 0;
  809c48:	6b c7 1c             	imul   $0x1c,%edi,%eax
  809c4b:	c6 80 54 5a b3 00 00 	movb   $0x0,0xb35a54(%eax)
#if ARP_QUEUEING
  /* this is where we will send out queued packets! */
  while (arp_table[i].q != NULL) {
  809c52:	89 c7                	mov    %eax,%edi
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  809c54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  809c57:	83 c0 25             	add    $0x25,%eax
  809c5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }
  /* reset time stamp */
  arp_table[i].ctime = 0;
#if ARP_QUEUEING
  /* this is where we will send out queued packets! */
  while (arp_table[i].q != NULL) {
  809c5d:	eb 33                	jmp    809c92 <update_arp_entry+0x116>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  809c5f:	8b 10                	mov    (%eax),%edx
  809c61:	89 97 40 5a b3 00    	mov    %edx,0xb35a40(%edi)
    /* get the packet pointer */
    p = q->p;
  809c67:	8b 70 04             	mov    0x4(%eax),%esi
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  809c6a:	89 44 24 04          	mov    %eax,0x4(%esp)
  809c6e:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  809c75:	e8 a8 ad ff ff       	call   804a22 <memp_free>
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  809c7a:	89 1c 24             	mov    %ebx,(%esp)
  809c7d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  809c80:	89 f2                	mov    %esi,%edx
  809c82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  809c85:	e8 73 fe ff ff       	call   809afd <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
  809c8a:	89 34 24             	mov    %esi,(%esp)
  809c8d:	e8 42 b1 ff ff       	call   804dd4 <pbuf_free>
  }
  /* reset time stamp */
  arp_table[i].ctime = 0;
#if ARP_QUEUEING
  /* this is where we will send out queued packets! */
  while (arp_table[i].q != NULL) {
  809c92:	8b 87 40 5a b3 00    	mov    0xb35a40(%edi),%eax
  809c98:	85 c0                	test   %eax,%eax
  809c9a:	75 c3                	jne    809c5f <update_arp_entry+0xe3>
  809c9c:	eb 1a                	jmp    809cb8 <update_arp_entry+0x13c>
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  809c9e:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  809ca3:	eb 13                	jmp    809cb8 <update_arp_entry+0x13c>
  809ca5:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  809caa:	eb 0c                	jmp    809cb8 <update_arp_entry+0x13c>
  809cac:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  809cb1:	eb 05                	jmp    809cb8 <update_arp_entry+0x13c>
  809cb3:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
    /* free the queued IP packet */
    pbuf_free(p);
  }
#endif
  return ERR_OK;
}
  809cb8:	83 c4 2c             	add    $0x2c,%esp
  809cbb:	5b                   	pop    %ebx
  809cbc:	5e                   	pop    %esi
  809cbd:	5f                   	pop    %edi
  809cbe:	5d                   	pop    %ebp
  809cbf:	c3                   	ret    

00809cc0 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL microseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  809cc0:	55                   	push   %ebp
  809cc1:	89 e5                	mov    %esp,%ebp
  809cc3:	57                   	push   %edi
  809cc4:	56                   	push   %esi
  809cc5:	53                   	push   %ebx
  809cc6:	83 ec 0c             	sub    $0xc,%esp
  809cc9:	bb 54 5a b3 00       	mov    $0xb35a54,%ebx
  809cce:	bf 6c 5b b3 00       	mov    $0xb35b6c,%edi
  809cd3:	89 de                	mov    %ebx,%esi
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    arp_table[i].ctime++;
  809cd5:	0f b6 03             	movzbl (%ebx),%eax
  809cd8:	8d 50 01             	lea    0x1(%eax),%edx
  809cdb:	88 13                	mov    %dl,(%ebx)
    if (((arp_table[i].state == ETHARP_STATE_STABLE) &&
  809cdd:	8b 43 fc             	mov    -0x4(%ebx),%eax
  809ce0:	83 f8 02             	cmp    $0x2,%eax
  809ce3:	75 07                	jne    809cec <etharp_tmr+0x2c>
  809ce5:	80 fa ef             	cmp    $0xef,%dl
  809ce8:	77 0d                	ja     809cf7 <etharp_tmr+0x37>
  809cea:	eb 25                	jmp    809d11 <etharp_tmr+0x51>
         (arp_table[i].ctime >= ARP_MAXAGE)) ||
  809cec:	83 f8 01             	cmp    $0x1,%eax
  809cef:	90                   	nop
  809cf0:	75 1f                	jne    809d11 <etharp_tmr+0x51>
        ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  809cf2:	80 fa 01             	cmp    $0x1,%dl
  809cf5:	76 1a                	jbe    809d11 <etharp_tmr+0x51>
      /* clean up entries that have just been expired */
      /* remove from SNMP ARP index tree */
      snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
#if ARP_QUEUEING
      /* and empty packet queue */
      if (arp_table[i].q != NULL) {
  809cf7:	8b 46 ec             	mov    -0x14(%esi),%eax
  809cfa:	85 c0                	test   %eax,%eax
  809cfc:	74 0c                	je     809d0a <etharp_tmr+0x4a>
        /* remove all queued packets */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
        free_etharp_q(arp_table[i].q);
  809cfe:	e8 4d fb ff ff       	call   809850 <free_etharp_q>
        arp_table[i].q = NULL;
  809d03:	c7 46 ec 00 00 00 00 	movl   $0x0,-0x14(%esi)
      }
#endif
      /* recycle entry for re-use */      
      arp_table[i].state = ETHARP_STATE_EMPTY;
  809d0a:	c7 46 fc 00 00 00 00 	movl   $0x0,-0x4(%esi)
  809d11:	83 c3 1c             	add    $0x1c,%ebx
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  809d14:	39 fb                	cmp    %edi,%ebx
  809d16:	75 bb                	jne    809cd3 <etharp_tmr+0x13>
    if (arp_table[i].state == ETHARP_STATE_PENDING) {
        /* resend an ARP query here? */
    }
#endif
  }
}
  809d18:	83 c4 0c             	add    $0xc,%esp
  809d1b:	5b                   	pop    %ebx
  809d1c:	5e                   	pop    %esi
  809d1d:	5f                   	pop    %edi
  809d1e:	5d                   	pop    %ebp
  809d1f:	c3                   	ret    

00809d20 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, struct ip_addr *ipaddr,
         struct eth_addr **eth_ret, struct ip_addr **ip_ret)
{
  809d20:	55                   	push   %ebp
  809d21:	89 e5                	mov    %esp,%ebp
  809d23:	53                   	push   %ebx
  809d24:	83 ec 04             	sub    $0x4,%esp
  LWIP_UNUSED_ARG(netif);

#if LWIP_NETIF_HWADDRHINT
  i = find_entry(ipaddr, ETHARP_FIND_ONLY, NULL);
#else /* LWIP_NETIF_HWADDRHINT */
  i = find_entry(ipaddr, ETHARP_FIND_ONLY);
  809d27:	ba 02 00 00 00       	mov    $0x2,%edx
  809d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
  809d2f:	e8 b4 fb ff ff       	call   8098e8 <find_entry>
#endif /* LWIP_NETIF_HWADDRHINT */
  if((i >= 0) && arp_table[i].state == ETHARP_STATE_STABLE) {
  809d34:	84 c0                	test   %al,%al
  809d36:	78 29                	js     809d61 <etharp_find_addr+0x41>
  809d38:	0f be d0             	movsbl %al,%edx
  809d3b:	6b ca 1c             	imul   $0x1c,%edx,%ecx
  809d3e:	83 b9 50 5a b3 00 02 	cmpl   $0x2,0xb35a50(%ecx)
  809d45:	75 21                	jne    809d68 <etharp_find_addr+0x48>
      *eth_ret = &arp_table[i].ethaddr;
  809d47:	89 ca                	mov    %ecx,%edx
  809d49:	8d 99 48 5a b3 00    	lea    0xb35a48(%ecx),%ebx
  809d4f:	8b 4d 10             	mov    0x10(%ebp),%ecx
  809d52:	89 19                	mov    %ebx,(%ecx)
      *ip_ret = &arp_table[i].ipaddr;
  809d54:	81 c2 44 5a b3 00    	add    $0xb35a44,%edx
  809d5a:	8b 4d 14             	mov    0x14(%ebp),%ecx
  809d5d:	89 11                	mov    %edx,(%ecx)
      return i;
  809d5f:	eb 0c                	jmp    809d6d <etharp_find_addr+0x4d>
  }
  return -1;
  809d61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809d66:	eb 05                	jmp    809d6d <etharp_find_addr+0x4d>
  809d68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  809d6d:	83 c4 04             	add    $0x4,%esp
  809d70:	5b                   	pop    %ebx
  809d71:	5d                   	pop    %ebp
  809d72:	c3                   	ret    

00809d73 <etharp_ip_input>:
 *
 * @see pbuf_free()
 */
void
etharp_ip_input(struct netif *netif, struct pbuf *p)
{
  809d73:	55                   	push   %ebp
  809d74:	89 e5                	mov    %esp,%ebp
  809d76:	83 ec 18             	sub    $0x18,%esp
  809d79:	8b 45 08             	mov    0x8(%ebp),%eax
  struct ethip_hdr *hdr;
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  809d7c:	85 c0                	test   %eax,%eax
  809d7e:	75 1c                	jne    809d9c <etharp_ip_input+0x29>
  809d80:	c7 44 24 08 02 26 81 	movl   $0x812602,0x8(%esp)
  809d87:	00 
  809d88:	c7 44 24 04 48 02 00 	movl   $0x248,0x4(%esp)
  809d8f:	00 
  809d90:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809d97:	e8 f2 52 00 00       	call   80f08e <_panic>
  /* Only insert an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  hdr = p->payload;
  809d9c:	8b 55 0c             	mov    0xc(%ebp),%edx
  809d9f:	8b 52 04             	mov    0x4(%edx),%edx
  /* source is not on the local network? */
  if (!ip_addr_netcmp(&(hdr->ip.src), &(netif->ip_addr), &(netif->netmask))) {
  809da2:	8b 48 04             	mov    0x4(%eax),%ecx
  809da5:	33 4a 1c             	xor    0x1c(%edx),%ecx
  809da8:	85 48 08             	test   %ecx,0x8(%eax)
  809dab:	75 12                	jne    809dbf <etharp_ip_input+0x4c>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update ARP table */
  /* @todo We could use ETHARP_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  update_arp_entry(netif, &(hdr->ip.src), &(hdr->eth.src), 0);
  809dad:	8d 4a 06             	lea    0x6(%edx),%ecx
  809db0:	83 c2 1c             	add    $0x1c,%edx
  809db3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  809dba:	e8 bd fd ff ff       	call   809b7c <update_arp_entry>
}
  809dbf:	c9                   	leave  
  809dc0:	c3                   	ret    

00809dc1 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
  809dc1:	55                   	push   %ebp
  809dc2:	89 e5                	mov    %esp,%ebp
  809dc4:	57                   	push   %edi
  809dc5:	56                   	push   %esi
  809dc6:	53                   	push   %ebx
  809dc7:	83 ec 2c             	sub    $0x2c,%esp
  809dca:	8b 5d 10             	mov    0x10(%ebp),%ebx
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  809dcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  809dd1:	75 1c                	jne    809def <etharp_arp_input+0x2e>
  809dd3:	c7 44 24 08 02 26 81 	movl   $0x812602,0x8(%esp)
  809dda:	00 
  809ddb:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
  809de2:	00 
  809de3:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809dea:	e8 9f 52 00 00       	call   80f08e <_panic>
  
  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < sizeof(struct etharp_hdr)) {
  809def:	66 83 7b 0a 29       	cmpw   $0x29,0xa(%ebx)
  809df4:	77 0d                	ja     809e03 <etharp_arp_input+0x42>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 1, ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len, (s16_t)sizeof(struct etharp_hdr)));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  809df6:	89 1c 24             	mov    %ebx,(%esp)
  809df9:	e8 d6 af ff ff       	call   804dd4 <pbuf_free>
    return;
  809dfe:	e9 a6 01 00 00       	jmp    809fa9 <etharp_arp_input+0x1e8>
  }

  hdr = p->payload;
  809e03:	8b 73 04             	mov    0x4(%ebx),%esi

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
  809e06:	0f b7 7e 0e          	movzwl 0xe(%esi),%edi
  809e0a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  809e11:	e8 40 df ff ff       	call   807d56 <htons>
  809e16:	66 39 c7             	cmp    %ax,%di
  809e19:	75 3f                	jne    809e5a <etharp_arp_input+0x99>
      (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
  809e1b:	0f b7 7e 12          	movzwl 0x12(%esi),%edi
  809e1f:	c7 04 24 04 06 00 00 	movl   $0x604,(%esp)
  809e26:	e8 2b df ff ff       	call   807d56 <htons>
  }

  hdr = p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
  809e2b:	66 39 c7             	cmp    %ax,%di
  809e2e:	75 2a                	jne    809e5a <etharp_arp_input+0x99>
      (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
      (hdr->proto != htons(ETHTYPE_IP)) ||
  809e30:	0f b7 7e 10          	movzwl 0x10(%esi),%edi
  809e34:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  809e3b:	e8 16 df ff ff       	call   807d56 <htons>

  hdr = p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
      (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
  809e40:	66 39 c7             	cmp    %ax,%di
  809e43:	75 15                	jne    809e5a <etharp_arp_input+0x99>
      (hdr->proto != htons(ETHTYPE_IP)) ||
      (hdr->ethhdr.type != htons(ETHTYPE_ARP)))  {
  809e45:	0f b7 7e 0c          	movzwl 0xc(%esi),%edi
  809e49:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
  809e50:	e8 01 df ff ff       	call   807d56 <htons>
  hdr = p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
      (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
      (hdr->proto != htons(ETHTYPE_IP)) ||
  809e55:	66 39 c7             	cmp    %ax,%di
  809e58:	74 0d                	je     809e67 <etharp_arp_input+0xa6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 1,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, ARPH_HWLEN(hdr), hdr->proto, ARPH_PROTOLEN(hdr), hdr->ethhdr.type));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  809e5a:	89 1c 24             	mov    %ebx,(%esp)
  809e5d:	e8 72 af ff ff       	call   804dd4 <pbuf_free>
    return;
  809e62:	e9 42 01 00 00       	jmp    809fa9 <etharp_arp_input+0x1e8>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  SMEMCPY(&sipaddr, &hdr->sipaddr, sizeof(sipaddr));
  809e67:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  809e6e:	00 
  809e6f:	8d 46 1c             	lea    0x1c(%esi),%eax
  809e72:	89 44 24 04          	mov    %eax,0x4(%esp)
  809e76:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  809e79:	89 04 24             	mov    %eax,(%esp)
  809e7c:	e8 3b 5b 00 00       	call   80f9bc <memcpy>
  SMEMCPY(&dipaddr, &hdr->dipaddr, sizeof(dipaddr));
  809e81:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  809e88:	00 
  809e89:	8d 46 26             	lea    0x26(%esi),%eax
  809e8c:	89 44 24 04          	mov    %eax,0x4(%esp)
  809e90:	8d 45 e0             	lea    -0x20(%ebp),%eax
  809e93:	89 04 24             	mov    %eax,(%esp)
  809e96:	e8 21 5b 00 00       	call   80f9bc <memcpy>

  /* this interface is not configured? */
  if (netif->ip_addr.addr == 0) {
  809e9b:	8b 45 08             	mov    0x8(%ebp),%eax
  809e9e:	8b 40 04             	mov    0x4(%eax),%eax
  809ea1:	85 c0                	test   %eax,%eax
  809ea3:	74 21                	je     809ec6 <etharp_arp_input+0x105>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  809ea5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  }

  /* ARP message directed to us? */
  if (for_us) {
  809ea8:	0f 94 c0             	sete   %al
  809eab:	89 c7                	mov    %eax,%edi
  809ead:	75 1c                	jne    809ecb <etharp_arp_input+0x10a>
    /* add IP address in ARP cache; assume requester wants to talk to us.
     * can result in directly sending the queued packets for this host. */
    update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), ETHARP_TRY_HARD);
  809eaf:	8d 4e 16             	lea    0x16(%esi),%ecx
  809eb2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  809eb9:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  809ebc:	8b 45 08             	mov    0x8(%ebp),%eax
  809ebf:	e8 b8 fc ff ff       	call   809b7c <update_arp_entry>
  809ec4:	eb 1a                	jmp    809ee0 <etharp_arp_input+0x11f>
  SMEMCPY(&sipaddr, &hdr->sipaddr, sizeof(sipaddr));
  SMEMCPY(&dipaddr, &hdr->dipaddr, sizeof(dipaddr));

  /* this interface is not configured? */
  if (netif->ip_addr.addr == 0) {
    for_us = 0;
  809ec6:	bf 00 00 00 00       	mov    $0x0,%edi
     * can result in directly sending the queued packets for this host. */
    update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), ETHARP_TRY_HARD);
  /* ARP message not directed to us? */
  } else {
    /* update the source IP address in the cache, if present */
    update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), 0);
  809ecb:	8d 4e 16             	lea    0x16(%esi),%ecx
  809ece:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  809ed5:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  809ed8:	8b 45 08             	mov    0x8(%ebp),%eax
  809edb:	e8 9c fc ff ff       	call   809b7c <update_arp_entry>
  }

  /* now act on the message itself */
  switch (htons(hdr->opcode)) {
  809ee0:	0f b7 46 14          	movzwl 0x14(%esi),%eax
  809ee4:	89 04 24             	mov    %eax,(%esp)
  809ee7:	e8 6a de ff ff       	call   807d56 <htons>
  809eec:	66 83 f8 01          	cmp    $0x1,%ax
  809ef0:	74 0f                	je     809f01 <etharp_arp_input+0x140>
  809ef2:	66 83 f8 02          	cmp    $0x2,%ax
  809ef6:	0f 84 93 00 00 00    	je     809f8f <etharp_arp_input+0x1ce>
  809efc:	e9 a0 00 00 00       	jmp    809fa1 <etharp_arp_input+0x1e0>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  809f01:	89 f8                	mov    %edi,%eax
  809f03:	84 c0                	test   %al,%al
  809f05:	0f 84 96 00 00 00    	je     809fa1 <etharp_arp_input+0x1e0>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
  809f0b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  809f12:	e8 3f de ff ff       	call   807d56 <htons>
  809f17:	66 89 46 14          	mov    %ax,0x14(%esi)

      hdr->dipaddr = hdr->sipaddr;
  809f1b:	8b 46 1c             	mov    0x1c(%esi),%eax
  809f1e:	89 46 26             	mov    %eax,0x26(%esi)
      hdr->sipaddr = *(struct ip_addr2 *)&netif->ip_addr;
  809f21:	8b 45 08             	mov    0x8(%ebp),%eax
  809f24:	8b 40 04             	mov    0x4(%eax),%eax
  809f27:	89 46 1c             	mov    %eax,0x1c(%esi)

      LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
  809f2a:	ba 06 00 00 00       	mov    $0x6,%edx
  809f2f:	8b 45 08             	mov    0x8(%ebp),%eax
  809f32:	80 78 24 06          	cmpb   $0x6,0x24(%eax)
  809f36:	74 1c                	je     809f54 <etharp_arp_input+0x193>
  809f38:	c7 44 24 08 08 33 81 	movl   $0x813308,0x8(%esp)
  809f3f:	00 
  809f40:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
  809f47:	00 
  809f48:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  809f4f:	e8 3a 51 00 00       	call   80f08e <_panic>
       * link layer. (See RFC3927 Section 2.5) */
      ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      while(i > 0) {
        i--;
  809f54:	83 ea 01             	sub    $0x1,%edx
        hdr->dhwaddr.addr[i] = hdr->shwaddr.addr[i];
  809f57:	0f b6 c2             	movzbl %dl,%eax
  809f5a:	0f b6 4c 06 16       	movzbl 0x16(%esi,%eax,1),%ecx
  809f5f:	88 4c 06 20          	mov    %cl,0x20(%esi,%eax,1)
#if LWIP_AUTOIP
        hdr->ethhdr.dest.addr[i] = ethdst_hwaddr[i];
#else  /* LWIP_AUTOIP */
        hdr->ethhdr.dest.addr[i] = hdr->shwaddr.addr[i];
  809f63:	88 0c 06             	mov    %cl,(%esi,%eax,1)
#endif /* LWIP_AUTOIP */
        hdr->shwaddr.addr[i] = ethaddr->addr[i];
  809f66:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  809f69:	0f b6 0c 01          	movzbl (%ecx,%eax,1),%ecx
  809f6d:	88 4c 06 16          	mov    %cl,0x16(%esi,%eax,1)
        hdr->ethhdr.src.addr[i] = ethaddr->addr[i];
  809f71:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  809f74:	0f b6 0c 01          	movzbl (%ecx,%eax,1),%ecx
  809f78:	88 4c 06 06          	mov    %cl,0x6(%esi,%eax,1)
      /* If we are using Link-Local, ARP packets must be broadcast on the
       * link layer. (See RFC3927 Section 2.5) */
      ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      while(i > 0) {
  809f7c:	84 d2                	test   %dl,%dl
  809f7e:	75 d4                	jne    809f54 <etharp_arp_input+0x193>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
  809f80:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809f84:	8b 45 08             	mov    0x8(%ebp),%eax
  809f87:	89 04 24             	mov    %eax,(%esp)
  809f8a:	ff 50 18             	call   *0x18(%eax)
  809f8d:	eb 12                	jmp    809fa1 <etharp_arp_input+0x1e0>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  809f8f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  809f92:	89 44 24 04          	mov    %eax,0x4(%esp)
  809f96:	8b 45 08             	mov    0x8(%ebp),%eax
  809f99:	89 04 24             	mov    %eax,(%esp)
  809f9c:	e8 1d 9e ff ff       	call   803dbe <dhcp_arp_reply>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
  809fa1:	89 1c 24             	mov    %ebx,(%esp)
  809fa4:	e8 2b ae ff ff       	call   804dd4 <pbuf_free>
}
  809fa9:	83 c4 2c             	add    $0x2c,%esp
  809fac:	5b                   	pop    %ebx
  809fad:	5e                   	pop    %esi
  809fae:	5f                   	pop    %edi
  809faf:	5d                   	pop    %ebp
  809fb0:	c3                   	ret    

00809fb1 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, struct ip_addr *ipaddr)
{
  809fb1:	55                   	push   %ebp
  809fb2:	89 e5                	mov    %esp,%ebp
  809fb4:	57                   	push   %edi
  809fb5:	56                   	push   %esi
  809fb6:	53                   	push   %ebx
  809fb7:	83 ec 1c             	sub    $0x1c,%esp
  809fba:	8b 75 08             	mov    0x8(%ebp),%esi
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, sizeof(struct etharp_hdr), PBUF_RAM);
  809fbd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  809fc4:	00 
  809fc5:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
  809fcc:	00 
  809fcd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  809fd4:	e8 dc ae ff ff       	call   804eb5 <pbuf_alloc>
  809fd9:	89 c7                	mov    %eax,%edi
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  809fdb:	85 c0                	test   %eax,%eax
  809fdd:	0f 84 f4 00 00 00    	je     80a0d7 <etharp_request+0x126>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 2, ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  809fe3:	66 83 78 0a 29       	cmpw   $0x29,0xa(%eax)
  809fe8:	77 1c                	ja     80a006 <etharp_request+0x55>
  809fea:	c7 44 24 08 74 33 81 	movl   $0x813374,0x8(%esp)
  809ff1:	00 
  809ff2:	c7 44 24 04 1c 04 00 	movl   $0x41c,0x4(%esp)
  809ff9:	00 
  809ffa:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  80a001:	e8 88 50 00 00       	call   80f08e <_panic>
              (p->len >= sizeof(struct etharp_hdr)));

  hdr = p->payload;
  80a006:	8b 58 04             	mov    0x4(%eax),%ebx
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
  80a009:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80a010:	e8 41 dd ff ff       	call   807d56 <htons>
  80a015:	66 89 43 14          	mov    %ax,0x14(%ebx)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
  80a019:	80 7e 24 06          	cmpb   $0x6,0x24(%esi)
  80a01d:	74 1c                	je     80a03b <etharp_request+0x8a>
  80a01f:	c7 44 24 08 08 33 81 	movl   $0x813308,0x8(%esp)
  80a026:	00 
  80a027:	c7 44 24 04 23 04 00 	movl   $0x423,0x4(%esp)
  80a02e:	00 
  80a02f:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  80a036:	e8 53 50 00 00       	call   80f08e <_panic>
  80a03b:	ba 06 00 00 00       	mov    $0x6,%edx
   * link layer. (See RFC3927 Section 2.5) */
  ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write MAC-Addresses (combined loop for both headers) */
  while(k > 0) {
    k--;
  80a040:	83 ea 01             	sub    $0x1,%edx
    /* Write the ARP MAC-Addresses */
    hdr->shwaddr.addr[k] = hwsrc_addr->addr[k];
  80a043:	0f b6 c2             	movzbl %dl,%eax
  80a046:	0f b6 4c 06 25       	movzbl 0x25(%esi,%eax,1),%ecx
  80a04b:	88 4c 03 16          	mov    %cl,0x16(%ebx,%eax,1)
    hdr->dhwaddr.addr[k] = hwdst_addr->addr[k];
  80a04f:	0f b6 88 f1 33 81 00 	movzbl 0x8133f1(%eax),%ecx
  80a056:	88 4c 03 20          	mov    %cl,0x20(%ebx,%eax,1)
    /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
    hdr->ethhdr.dest.addr[k] = ethdst_hwaddr[k];
#else  /* LWIP_AUTOIP */
    hdr->ethhdr.dest.addr[k] = ethdst_addr->addr[k];
  80a05a:	0f b6 88 f7 33 81 00 	movzbl 0x8133f7(%eax),%ecx
  80a061:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
#endif /* LWIP_AUTOIP */
    hdr->ethhdr.src.addr[k]  = ethsrc_addr->addr[k];
  80a064:	0f b6 4c 06 25       	movzbl 0x25(%esi,%eax,1),%ecx
  80a069:	88 4c 03 06          	mov    %cl,0x6(%ebx,%eax,1)
  /* If we are using Link-Local, ARP packets must be broadcast on the
   * link layer. (See RFC3927 Section 2.5) */
  ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write MAC-Addresses (combined loop for both headers) */
  while(k > 0) {
  80a06d:	84 d2                	test   %dl,%dl
  80a06f:	75 cf                	jne    80a040 <etharp_request+0x8f>
#else  /* LWIP_AUTOIP */
    hdr->ethhdr.dest.addr[k] = ethdst_addr->addr[k];
#endif /* LWIP_AUTOIP */
    hdr->ethhdr.src.addr[k]  = ethsrc_addr->addr[k];
  }
  hdr->sipaddr = *(struct ip_addr2 *)ipsrc_addr;
  80a071:	8b 46 04             	mov    0x4(%esi),%eax
  80a074:	89 43 1c             	mov    %eax,0x1c(%ebx)
  hdr->dipaddr = *(struct ip_addr2 *)ipdst_addr;
  80a077:	8b 45 0c             	mov    0xc(%ebp),%eax
  80a07a:	8b 00                	mov    (%eax),%eax
  80a07c:	89 43 26             	mov    %eax,0x26(%ebx)

  hdr->hwtype = htons(HWTYPE_ETHERNET);
  80a07f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80a086:	e8 cb dc ff ff       	call   807d56 <htons>
  80a08b:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  hdr->proto = htons(ETHTYPE_IP);
  80a08f:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  80a096:	e8 bb dc ff ff       	call   807d56 <htons>
  80a09b:	66 89 43 10          	mov    %ax,0x10(%ebx)
  /* set hwlen and protolen together */
  hdr->_hwlen_protolen = htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr));
  80a09f:	c7 04 24 04 06 00 00 	movl   $0x604,(%esp)
  80a0a6:	e8 ab dc ff ff       	call   807d56 <htons>
  80a0ab:	66 89 43 12          	mov    %ax,0x12(%ebx)

  hdr->ethhdr.type = htons(ETHTYPE_ARP);
  80a0af:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
  80a0b6:	e8 9b dc ff ff       	call   807d56 <htons>
  80a0bb:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  80a0bf:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80a0c3:	89 34 24             	mov    %esi,(%esp)
  80a0c6:	ff 56 18             	call   *0x18(%esi)
  80a0c9:	89 c3                	mov    %eax,%ebx
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  80a0cb:	89 3c 24             	mov    %edi,(%esp)
  80a0ce:	e8 01 ad ff ff       	call   804dd4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
  80a0d3:	89 d8                	mov    %ebx,%eax
  80a0d5:	eb 05                	jmp    80a0dc <etharp_request+0x12b>
  p = pbuf_alloc(PBUF_LINK, sizeof(struct etharp_hdr), PBUF_RAM);
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 2, ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  80a0d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  80a0dc:	83 c4 1c             	add    $0x1c,%esp
  80a0df:	5b                   	pop    %ebx
  80a0e0:	5e                   	pop    %esi
  80a0e1:	5f                   	pop    %edi
  80a0e2:	5d                   	pop    %ebp
  80a0e3:	c3                   	ret    

0080a0e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
{
  80a0e4:	55                   	push   %ebp
  80a0e5:	89 e5                	mov    %esp,%ebp
  80a0e7:	57                   	push   %edi
  80a0e8:	56                   	push   %esi
  80a0e9:	53                   	push   %ebx
  80a0ea:	83 ec 1c             	sub    $0x1c,%esp
  80a0ed:	8b 7d 08             	mov    0x8(%ebp),%edi
  80a0f0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  80a0f3:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80a0f7:	89 1c 24             	mov    %ebx,(%esp)
  80a0fa:	e8 72 c9 ff ff       	call   806a71 <ip_addr_isbroadcast>
  80a0ff:	84 c0                	test   %al,%al
  80a101:	0f 85 ad 01 00 00    	jne    80a2b4 <etharp_query+0x1d0>
      ip_addr_ismulticast(ipaddr) ||
  80a107:	8b 33                	mov    (%ebx),%esi
  80a109:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80a110:	e8 95 de ff ff       	call   807faa <ntohl>
  80a115:	21 c6                	and    %eax,%esi
  80a117:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80a11e:	e8 87 de ff ff       	call   807faa <ntohl>
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  80a123:	39 c6                	cmp    %eax,%esi
  80a125:	0f 84 93 01 00 00    	je     80a2be <etharp_query+0x1da>
      ip_addr_ismulticast(ipaddr) ||
  80a12b:	85 db                	test   %ebx,%ebx
  80a12d:	0f 84 95 01 00 00    	je     80a2c8 <etharp_query+0x1e4>
      ip_addr_isany(ipaddr)) {
  80a133:	83 3b 00             	cmpl   $0x0,(%ebx)
  80a136:	0f 84 93 01 00 00    	je     80a2cf <etharp_query+0x1eb>

  /* find entry in ARP cache, ask to create entry if queueing packet */
#if LWIP_NETIF_HWADDRHINT
  i = find_entry(ipaddr, ETHARP_TRY_HARD, netif);
#else /* LWIP_NETIF_HWADDRHINT */
  i = find_entry(ipaddr, ETHARP_TRY_HARD);
  80a13c:	ba 01 00 00 00       	mov    $0x1,%edx
  80a141:	89 d8                	mov    %ebx,%eax
  80a143:	e8 a0 f7 ff ff       	call   8098e8 <find_entry>
#endif /* LWIP_NETIF_HWADDRHINT */

  /* could not find or create entry? */
  if (i < 0) {
  80a148:	84 c0                	test   %al,%al
  80a14a:	0f 88 fb 01 00 00    	js     80a34b <etharp_query+0x267>
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  80a150:	0f be f0             	movsbl %al,%esi
  80a153:	6b c6 1c             	imul   $0x1c,%esi,%eax
  80a156:	8b 80 50 5a b3 00    	mov    0xb35a50(%eax),%eax
  80a15c:	85 c0                	test   %eax,%eax
  80a15e:	75 0f                	jne    80a16f <etharp_query+0x8b>
    arp_table[i].state = ETHARP_STATE_PENDING;
  80a160:	6b c6 1c             	imul   $0x1c,%esi,%eax
  80a163:	c7 80 50 5a b3 00 01 	movl   $0x1,0xb35a50(%eax)
  80a16a:	00 00 00 
  80a16d:	eb 38                	jmp    80a1a7 <etharp_query+0xc3>
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  80a16f:	8d 50 ff             	lea    -0x1(%eax),%edx
  80a172:	83 fa 01             	cmp    $0x1,%edx
  80a175:	76 1c                	jbe    80a193 <etharp_query+0xaf>
  80a177:	c7 44 24 08 a8 33 81 	movl   $0x8133a8,0x8(%esp)
  80a17e:	00 
  80a17f:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
  80a186:	00 
  80a187:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  80a18e:	e8 fb 4e 00 00       	call   80f08e <_panic>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  80a193:	83 f8 01             	cmp    $0x1,%eax
  80a196:	74 0f                	je     80a1a7 <etharp_query+0xc3>
  80a198:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  80a19c:	0f 85 94 01 00 00    	jne    80a336 <etharp_query+0x252>
  80a1a2:	e9 81 01 00 00       	jmp    80a328 <etharp_query+0x244>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  80a1a7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80a1ab:	89 3c 24             	mov    %edi,(%esp)
  80a1ae:	e8 fe fd ff ff       	call   809fb1 <etharp_request>
  80a1b3:	89 c3                	mov    %eax,%ebx
         etharp_query again could lead to sending the queued packets. */
    }
  }
  
  /* packet given? */
  if (q != NULL) {
  80a1b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  80a1b9:	0f 84 17 01 00 00    	je     80a2d6 <etharp_query+0x1f2>
    /* stable entry? */
    if (arp_table[i].state == ETHARP_STATE_STABLE) {
  80a1bf:	6b c6 1c             	imul   $0x1c,%esi,%eax
  80a1c2:	8b 90 50 5a b3 00    	mov    0xb35a50(%eax),%edx
  80a1c8:	83 fa 02             	cmp    $0x2,%edx
  80a1cb:	75 1e                	jne    80a1eb <etharp_query+0x107>
 *
 */
err_t
etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  80a1cd:	8d 4f 25             	lea    0x25(%edi),%ecx
  if (q != NULL) {
    /* stable entry? */
    if (arp_table[i].state == ETHARP_STATE_STABLE) {
      /* we have a valid IP->Ethernet address mapping */
      /* send the packet */
      result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  80a1d0:	6b f6 1c             	imul   $0x1c,%esi,%esi
  80a1d3:	81 c6 48 5a b3 00    	add    $0xb35a48,%esi
  80a1d9:	89 34 24             	mov    %esi,(%esp)
  80a1dc:	8b 55 10             	mov    0x10(%ebp),%edx
  80a1df:	89 f8                	mov    %edi,%eax
  80a1e1:	e8 17 f9 ff ff       	call   809afd <etharp_send_ip>
  80a1e6:	e9 60 01 00 00       	jmp    80a34b <etharp_query+0x267>
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  80a1eb:	89 d8                	mov    %ebx,%eax
    if (arp_table[i].state == ETHARP_STATE_STABLE) {
      /* we have a valid IP->Ethernet address mapping */
      /* send the packet */
      result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
    /* pending entry? (either just created or already pending */
    } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  80a1ed:	83 fa 01             	cmp    $0x1,%edx
  80a1f0:	0f 85 55 01 00 00    	jne    80a34b <etharp_query+0x267>
  80a1f6:	8b 45 10             	mov    0x10(%ebp),%eax
      /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
       * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
       * PBUF_ROMs can be left as they are, since ROM must not get changed. */
      p = q;
      while (p) {
        LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  80a1f9:	0f b7 48 08          	movzwl 0x8(%eax),%ecx
  80a1fd:	66 39 48 0a          	cmp    %cx,0xa(%eax)
  80a201:	75 21                	jne    80a224 <etharp_query+0x140>
  80a203:	83 38 00             	cmpl   $0x0,(%eax)
  80a206:	74 1c                	je     80a224 <etharp_query+0x140>
  80a208:	c7 44 24 08 ee 32 81 	movl   $0x8132ee,0x8(%esp)
  80a20f:	00 
  80a210:	c7 44 24 04 b1 03 00 	movl   $0x3b1,0x4(%esp)
  80a217:	00 
  80a218:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  80a21f:	e8 6a 4e 00 00       	call   80f08e <_panic>
        if(p->type != PBUF_ROM) {
  80a224:	80 78 0c 01          	cmpb   $0x1,0xc(%eax)
  80a228:	0f 85 b7 00 00 00    	jne    80a2e5 <etharp_query+0x201>
          copy_needed = 1;
          break;
        }
        p = p->next;
  80a22e:	8b 00                	mov    (%eax),%eax
      int copy_needed = 0;
      /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
       * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
       * PBUF_ROMs can be left as they are, since ROM must not get changed. */
      p = q;
      while (p) {
  80a230:	85 c0                	test   %eax,%eax
  80a232:	75 c5                	jne    80a1f9 <etharp_query+0x115>
  80a234:	e9 9f 00 00 00       	jmp    80a2d8 <etharp_query+0x1f4>
      }
      if(copy_needed) {
        /* copy the whole packet into new pbufs */
        p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
        if(p != NULL) {
          if (pbuf_copy(p, q) != ERR_OK) {
  80a239:	8b 45 10             	mov    0x10(%ebp),%eax
  80a23c:	89 44 24 04          	mov    %eax,0x4(%esp)
  80a240:	89 3c 24             	mov    %edi,(%esp)
  80a243:	e8 9c b1 ff ff       	call   8053e4 <pbuf_copy>
        }
        p = p->next;
      }
      if(copy_needed) {
        /* copy the whole packet into new pbufs */
        p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  80a248:	89 7d 10             	mov    %edi,0x10(%ebp)
        if(p != NULL) {
          if (pbuf_copy(p, q) != ERR_OK) {
  80a24b:	84 c0                	test   %al,%al
  80a24d:	0f 84 bc 00 00 00    	je     80a30f <etharp_query+0x22b>
            pbuf_free(p);
  80a253:	89 3c 24             	mov    %edi,(%esp)
  80a256:	e8 79 ab ff ff       	call   804dd4 <pbuf_free>
  80a25b:	e9 ab 00 00 00       	jmp    80a30b <etharp_query+0x227>
        /* queue packet ... */
        struct etharp_q_entry *new_entry;
        /* allocate a new arp queue entry */
        new_entry = memp_malloc(MEMP_ARP_QUEUE);
        if (new_entry != NULL) {
          new_entry->next = 0;
  80a260:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
          new_entry->p = p;
  80a266:	8b 7d 10             	mov    0x10(%ebp),%edi
  80a269:	89 78 04             	mov    %edi,0x4(%eax)
          if(arp_table[i].q != NULL) {
  80a26c:	6b d6 1c             	imul   $0x1c,%esi,%edx
  80a26f:	8b 8a 40 5a b3 00    	mov    0xb35a40(%edx),%ecx
  80a275:	85 c9                	test   %ecx,%ecx
  80a277:	74 16                	je     80a28f <etharp_query+0x1ab>
            /* queue was already existent, append the new entry to the end */
            struct etharp_q_entry *r;
            r = arp_table[i].q;
            while (r->next != NULL) {
  80a279:	8b 11                	mov    (%ecx),%edx
  80a27b:	85 d2                	test   %edx,%edx
  80a27d:	74 04                	je     80a283 <etharp_query+0x19f>
              r = r->next;
  80a27f:	89 d1                	mov    %edx,%ecx
  80a281:	eb f6                	jmp    80a279 <etharp_query+0x195>
            }
            r->next = new_entry;
  80a283:	89 01                	mov    %eax,(%ecx)
          } else {
            /* queue did not exist, first item in queue */
            arp_table[i].q = new_entry;
          }
          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
          result = ERR_OK;
  80a285:	b8 00 00 00 00       	mov    $0x0,%eax
  80a28a:	e9 bc 00 00 00       	jmp    80a34b <etharp_query+0x267>
              r = r->next;
            }
            r->next = new_entry;
          } else {
            /* queue did not exist, first item in queue */
            arp_table[i].q = new_entry;
  80a28f:	6b f6 1c             	imul   $0x1c,%esi,%esi
  80a292:	89 86 40 5a b3 00    	mov    %eax,0xb35a40(%esi)
          }
          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
          result = ERR_OK;
  80a298:	b8 00 00 00 00       	mov    $0x0,%eax
  80a29d:	e9 a9 00 00 00       	jmp    80a34b <etharp_query+0x267>
        } else {
          /* the pool MEMP_ARP_QUEUE is empty */
          pbuf_free(p);
  80a2a2:	8b 45 10             	mov    0x10(%ebp),%eax
  80a2a5:	89 04 24             	mov    %eax,(%esp)
  80a2a8:	e8 27 ab ff ff       	call   804dd4 <pbuf_free>
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  80a2ad:	89 d8                	mov    %ebx,%eax
  80a2af:	e9 97 00 00 00       	jmp    80a34b <etharp_query+0x267>
  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  80a2b4:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  80a2b9:	e9 8d 00 00 00       	jmp    80a34b <etharp_query+0x267>
  80a2be:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  80a2c3:	e9 83 00 00 00       	jmp    80a34b <etharp_query+0x267>
  80a2c8:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  80a2cd:	eb 7c                	jmp    80a34b <etharp_query+0x267>
  80a2cf:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  80a2d4:	eb 75                	jmp    80a34b <etharp_query+0x267>
  80a2d6:	eb 73                	jmp    80a34b <etharp_query+0x267>
          }
        }
      } else {
        /* referencing the old pbuf is enough */
        p = q;
        pbuf_ref(p);
  80a2d8:	8b 45 10             	mov    0x10(%ebp),%eax
  80a2db:	89 04 24             	mov    %eax,(%esp)
  80a2de:	e8 9f af ff ff       	call   805282 <pbuf_ref>
  80a2e3:	eb 2a                	jmp    80a30f <etharp_query+0x22b>
        }
        p = p->next;
      }
      if(copy_needed) {
        /* copy the whole packet into new pbufs */
        p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  80a2e5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80a2e9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80a2f0:	00 
  80a2f1:	89 44 24 04          	mov    %eax,0x4(%esp)
  80a2f5:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  80a2fc:	e8 b4 ab ff ff       	call   804eb5 <pbuf_alloc>
  80a301:	89 c7                	mov    %eax,%edi
        if(p != NULL) {
  80a303:	85 c0                	test   %eax,%eax
  80a305:	0f 85 2e ff ff ff    	jne    80a239 <etharp_query+0x155>
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  80a30b:	89 d8                	mov    %ebx,%eax
  80a30d:	eb 3c                	jmp    80a34b <etharp_query+0x267>
      /* packet could be taken over? */
      if (p != NULL) {
        /* queue packet ... */
        struct etharp_q_entry *new_entry;
        /* allocate a new arp queue entry */
        new_entry = memp_malloc(MEMP_ARP_QUEUE);
  80a30f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  80a316:	e8 a7 a6 ff ff       	call   8049c2 <memp_malloc>
        if (new_entry != NULL) {
  80a31b:	85 c0                	test   %eax,%eax
  80a31d:	0f 85 3d ff ff ff    	jne    80a260 <etharp_query+0x17c>
  80a323:	e9 7a ff ff ff       	jmp    80a2a2 <etharp_query+0x1be>
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  80a328:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80a32c:	89 3c 24             	mov    %edi,(%esp)
  80a32f:	e8 7d fc ff ff       	call   809fb1 <etharp_request>
  80a334:	eb 15                	jmp    80a34b <etharp_query+0x267>
  }
  
  /* packet given? */
  if (q != NULL) {
    /* stable entry? */
    if (arp_table[i].state == ETHARP_STATE_STABLE) {
  80a336:	6b c6 1c             	imul   $0x1c,%esi,%eax
  80a339:	83 b8 50 5a b3 00 02 	cmpl   $0x2,0xb35a50(%eax)
  80a340:	0f 84 87 fe ff ff    	je     80a1cd <etharp_query+0xe9>
 */
err_t
etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  80a346:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: Ethernet destination address unknown, queueing disabled, packet %p dropped\n", (void *)q));
#endif
    }
  }
  return result;
}
  80a34b:	83 c4 1c             	add    $0x1c,%esp
  80a34e:	5b                   	pop    %ebx
  80a34f:	5e                   	pop    %esi
  80a350:	5f                   	pop    %edi
  80a351:	5d                   	pop    %ebp
  80a352:	c3                   	ret    

0080a353 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, struct ip_addr *ipaddr)
{
  80a353:	55                   	push   %ebp
  80a354:	89 e5                	mov    %esp,%ebp
  80a356:	57                   	push   %edi
  80a357:	56                   	push   %esi
  80a358:	53                   	push   %ebx
  80a359:	83 ec 2c             	sub    $0x2c,%esp
  80a35c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80a35f:	8b 75 10             	mov    0x10(%ebp),%esi
  struct eth_addr *dest, mcastaddr;

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  80a362:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
  80a369:	00 
  80a36a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80a36d:	89 04 24             	mov    %eax,(%esp)
  80a370:	e8 7b a9 ff ff       	call   804cf0 <pbuf_header>
  80a375:	84 c0                	test   %al,%al
  80a377:	0f 85 b4 00 00 00    	jne    80a431 <etharp_output+0xde>
  dest = NULL;
  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  80a37d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80a381:	89 34 24             	mov    %esi,(%esp)
  80a384:	e8 e8 c6 ff ff       	call   806a71 <ip_addr_isbroadcast>
  80a389:	84 c0                	test   %al,%al
  80a38b:	0f 85 89 00 00 00    	jne    80a41a <etharp_output+0xc7>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
  80a391:	8b 3e                	mov    (%esi),%edi
  80a393:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80a39a:	e8 0b dc ff ff       	call   807faa <ntohl>
  80a39f:	21 c7                	and    %eax,%edi
  80a3a1:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80a3a8:	e8 fd db ff ff       	call   807faa <ntohl>
  80a3ad:	39 c7                	cmp    %eax,%edi
  80a3af:	75 41                	jne    80a3f2 <etharp_output+0x9f>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = 0x01;
  80a3b1:	c6 45 e2 01          	movb   $0x1,-0x1e(%ebp)
    mcastaddr.addr[1] = 0x00;
  80a3b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
    mcastaddr.addr[2] = 0x5e;
  80a3b9:	c6 45 e4 5e          	movb   $0x5e,-0x1c(%ebp)
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  80a3bd:	8b 06                	mov    (%esi),%eax
  80a3bf:	89 04 24             	mov    %eax,(%esp)
  80a3c2:	e8 e3 db ff ff       	call   807faa <ntohl>
  80a3c7:	c1 e8 10             	shr    $0x10,%eax
  80a3ca:	83 e0 7f             	and    $0x7f,%eax
  80a3cd:	88 45 e5             	mov    %al,-0x1b(%ebp)
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  80a3d0:	8b 06                	mov    (%esi),%eax
  80a3d2:	89 04 24             	mov    %eax,(%esp)
  80a3d5:	e8 d0 db ff ff       	call   807faa <ntohl>
  80a3da:	c1 e8 08             	shr    $0x8,%eax
  80a3dd:	88 45 e6             	mov    %al,-0x1a(%ebp)
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  80a3e0:	8b 06                	mov    (%esi),%eax
  80a3e2:	89 04 24             	mov    %eax,(%esp)
  80a3e5:	e8 c0 db ff ff       	call   807faa <ntohl>
  80a3ea:	88 45 e7             	mov    %al,-0x19(%ebp)
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  80a3ed:	8d 45 e2             	lea    -0x1e(%ebp),%eax
  80a3f0:	eb 2d                	jmp    80a41f <etharp_output+0xcc>
  /* unicast destination IP address? */
  } else {
    /* outside local network? */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask))) {
  80a3f2:	8b 43 04             	mov    0x4(%ebx),%eax
  80a3f5:	33 06                	xor    (%esi),%eax
  80a3f7:	85 43 08             	test   %eax,0x8(%ebx)
  80a3fa:	74 09                	je     80a405 <etharp_output+0xb2>
      /* interface has default gateway? */
      if (netif->gw.addr != 0) {
  80a3fc:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
  80a400:	74 36                	je     80a438 <etharp_output+0xe5>
        /* send to hardware address of default gateway IP address */
        ipaddr = &(netif->gw);
  80a402:	8d 73 0c             	lea    0xc(%ebx),%esi
        /* no route to destination error (default gateway missing) */
        return ERR_RTE;
      }
    }
    /* queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, ipaddr, q);
  80a405:	8b 45 0c             	mov    0xc(%ebp),%eax
  80a408:	89 44 24 08          	mov    %eax,0x8(%esp)
  80a40c:	89 74 24 04          	mov    %esi,0x4(%esp)
  80a410:	89 1c 24             	mov    %ebx,(%esp)
  80a413:	e8 cc fc ff ff       	call   80a0e4 <etharp_query>
  80a418:	eb 23                	jmp    80a43d <etharp_output+0xea>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  80a41a:	b8 f7 33 81 00       	mov    $0x8133f7,%eax
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  80a41f:	8d 4b 25             	lea    0x25(%ebx),%ecx
  80a422:	89 04 24             	mov    %eax,(%esp)
  80a425:	8b 55 0c             	mov    0xc(%ebp),%edx
  80a428:	89 d8                	mov    %ebx,%eax
  80a42a:	e8 ce f6 ff ff       	call   809afd <etharp_send_ip>
  80a42f:	eb 0c                	jmp    80a43d <etharp_output+0xea>
  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 2, ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  80a431:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  80a436:	eb 05                	jmp    80a43d <etharp_output+0xea>
        /* send to hardware address of default gateway IP address */
        ipaddr = &(netif->gw);
      /* no default gateway available */
      } else {
        /* no route to destination error (default gateway missing) */
        return ERR_RTE;
  80a438:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
  80a43d:	83 c4 2c             	add    $0x2c,%esp
  80a440:	5b                   	pop    %ebx
  80a441:	5e                   	pop    %esi
  80a442:	5f                   	pop    %edi
  80a443:	5d                   	pop    %ebp
  80a444:	c3                   	ret    

0080a445 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  80a445:	55                   	push   %ebp
  80a446:	89 e5                	mov    %esp,%ebp
  80a448:	56                   	push   %esi
  80a449:	53                   	push   %ebx
  80a44a:	83 ec 10             	sub    $0x10,%esp
  80a44d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80a450:	8b 75 0c             	mov    0xc(%ebp),%esi
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  switch (htons(ethhdr->type)) {
  80a453:	8b 43 04             	mov    0x4(%ebx),%eax
  80a456:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80a45a:	89 04 24             	mov    %eax,(%esp)
  80a45d:	e8 f4 d8 ff ff       	call   807d56 <htons>
  80a462:	66 3d 00 08          	cmp    $0x800,%ax
  80a466:	74 0a                	je     80a472 <ethernet_input+0x2d>
  80a468:	66 3d 06 08          	cmp    $0x806,%ax
  80a46c:	74 4e                	je     80a4bc <ethernet_input+0x77>
  80a46e:	66 90                	xchg   %ax,%ax
  80a470:	eb 5f                	jmp    80a4d1 <ethernet_input+0x8c>
    /* IP packet? */
    case ETHTYPE_IP:
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
  80a472:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80a476:	89 34 24             	mov    %esi,(%esp)
  80a479:	e8 f5 f8 ff ff       	call   809d73 <etharp_ip_input>
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -(s16_t)sizeof(struct eth_hdr))) {
  80a47e:	c7 44 24 04 f2 ff ff 	movl   $0xfffffff2,0x4(%esp)
  80a485:	ff 
  80a486:	89 1c 24             	mov    %ebx,(%esp)
  80a489:	e8 62 a8 ff ff       	call   804cf0 <pbuf_header>
  80a48e:	84 c0                	test   %al,%al
  80a490:	74 1c                	je     80a4ae <ethernet_input+0x69>
        LWIP_ASSERT("Can't move over header in packet", 0);
  80a492:	c7 44 24 08 d0 33 81 	movl   $0x8133d0,0x8(%esp)
  80a499:	00 
  80a49a:	c7 44 24 04 7e 04 00 	movl   $0x47e,0x4(%esp)
  80a4a1:	00 
  80a4a2:	c7 04 24 92 32 81 00 	movl   $0x813292,(%esp)
  80a4a9:	e8 e0 4b 00 00       	call   80f08e <_panic>
        pbuf_free(p);
        p = NULL;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
  80a4ae:	89 74 24 04          	mov    %esi,0x4(%esp)
  80a4b2:	89 1c 24             	mov    %ebx,(%esp)
  80a4b5:	e8 66 c6 ff ff       	call   806b20 <ip_input>
      }
      break;
  80a4ba:	eb 1d                	jmp    80a4d9 <ethernet_input+0x94>
      
    case ETHTYPE_ARP:
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  80a4bc:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80a4c0:	8d 46 25             	lea    0x25(%esi),%eax
  80a4c3:	89 44 24 04          	mov    %eax,0x4(%esp)
  80a4c7:	89 34 24             	mov    %esi,(%esp)
  80a4ca:	e8 f2 f8 ff ff       	call   809dc1 <etharp_arp_input>
      break;
  80a4cf:	eb 08                	jmp    80a4d9 <ethernet_input+0x94>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      pbuf_free(p);
  80a4d1:	89 1c 24             	mov    %ebx,(%esp)
  80a4d4:	e8 fb a8 ff ff       	call   804dd4 <pbuf_free>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
}
  80a4d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80a4de:	83 c4 10             	add    $0x10,%esp
  80a4e1:	5b                   	pop    %ebx
  80a4e2:	5e                   	pop    %esi
  80a4e3:	5d                   	pop    %ebp
  80a4e4:	c3                   	ret    
  80a4e5:	66 90                	xchg   %ax,%ax
  80a4e7:	66 90                	xchg   %ax,%ax
  80a4e9:	66 90                	xchg   %ax,%ax
  80a4eb:	66 90                	xchg   %ax,%ax
  80a4ed:	66 90                	xchg   %ax,%ax
  80a4ef:	90                   	nop

0080a4f0 <lwip_thread_entry>:
    void *arg;
};

static void
lwip_thread_entry(uint32_t arg)
{
  80a4f0:	55                   	push   %ebp
  80a4f1:	89 e5                	mov    %esp,%ebp
  80a4f3:	53                   	push   %ebx
  80a4f4:	83 ec 14             	sub    $0x14,%esp
  80a4f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct lwip_thread *lt = (struct lwip_thread *)arg;
    lwip_core_lock();
    lt->func(lt->arg);
  80a4fa:	8b 43 04             	mov    0x4(%ebx),%eax
  80a4fd:	89 04 24             	mov    %eax,(%esp)
  80a500:	ff 13                	call   *(%ebx)
    lwip_core_unlock();
    free(lt);
  80a502:	89 1c 24             	mov    %ebx,(%esp)
  80a505:	e8 86 6d 00 00       	call   811290 <free>
}
  80a50a:	83 c4 14             	add    $0x14,%esp
  80a50d:	5b                   	pop    %ebx
  80a50e:	5d                   	pop    %ebp
  80a50f:	c3                   	ret    

0080a510 <timeout_cleanup>:
    return tid;
}

static void
timeout_cleanup(thread_id_t tid)
{
  80a510:	55                   	push   %ebp
  80a511:	89 e5                	mov    %esp,%ebp
  80a513:	83 ec 18             	sub    $0x18,%esp
  80a516:	8b 4d 08             	mov    0x8(%ebp),%ecx
    lwip_core_lock();

    struct sys_thread *t;
    LIST_FOREACH(t, &threads[tid % thread_hash_size], link)
  80a519:	ba 01 ff 00 ff       	mov    $0xff00ff01,%edx
  80a51e:	89 c8                	mov    %ecx,%eax
  80a520:	f7 e2                	mul    %edx
  80a522:	c1 ea 08             	shr    $0x8,%edx
  80a525:	89 d0                	mov    %edx,%eax
  80a527:	c1 e0 08             	shl    $0x8,%eax
  80a52a:	01 c2                	add    %eax,%edx
  80a52c:	89 c8                	mov    %ecx,%eax
  80a52e:	29 d0                	sub    %edx,%eax
  80a530:	8b 14 85 60 5b b3 00 	mov    0xb35b60(,%eax,4),%edx
  80a537:	eb 26                	jmp    80a55f <timeout_cleanup+0x4f>
	if (t->tid == tid) {
  80a539:	39 0a                	cmp    %ecx,(%edx)
  80a53b:	75 1f                	jne    80a55c <timeout_cleanup+0x4c>
	    LIST_REMOVE(t, link);
  80a53d:	8b 42 08             	mov    0x8(%edx),%eax
  80a540:	85 c0                	test   %eax,%eax
  80a542:	74 06                	je     80a54a <timeout_cleanup+0x3a>
  80a544:	8b 4a 0c             	mov    0xc(%edx),%ecx
  80a547:	89 48 0c             	mov    %ecx,0xc(%eax)
  80a54a:	8b 42 0c             	mov    0xc(%edx),%eax
  80a54d:	8b 4a 08             	mov    0x8(%edx),%ecx
  80a550:	89 08                	mov    %ecx,(%eax)
	    free(t);
  80a552:	89 14 24             	mov    %edx,(%esp)
  80a555:	e8 36 6d 00 00       	call   811290 <free>
	    goto done;
  80a55a:	eb 07                	jmp    80a563 <timeout_cleanup+0x53>
timeout_cleanup(thread_id_t tid)
{
    lwip_core_lock();

    struct sys_thread *t;
    LIST_FOREACH(t, &threads[tid % thread_hash_size], link)
  80a55c:	8b 52 08             	mov    0x8(%edx),%edx
  80a55f:	85 d2                	test   %edx,%edx
  80a561:	75 d6                	jne    80a539 <timeout_cleanup+0x29>
	}

    if (debug) cprintf("timeout_cleanup: bogus tid %ld\n", tid);
 done:
    lwip_core_unlock();
}
  80a563:	c9                   	leave  
  80a564:	c3                   	ret    

0080a565 <sys_init>:
enum { thread_hash_size = 257 };
static LIST_HEAD(thread_list, sys_thread) threads[thread_hash_size];

void
sys_init(void)
{
  80a565:	55                   	push   %ebp
  80a566:	89 e5                	mov    %esp,%ebp
  80a568:	56                   	push   %esi
  80a569:	53                   	push   %ebx
  80a56a:	8b 15 80 ad b3 00    	mov    0xb3ad80,%edx
  80a570:	b8 a0 ad b3 00       	mov    $0xb3ada0,%eax
  80a575:	be a0 c1 b3 00       	mov    $0xb3c1a0,%esi
  80a57a:	89 c1                	mov    %eax,%ecx
    int i = 0;
    for (i = 0; i < NSEM; i++) {
	sems[i].freed = 1;
  80a57c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	LIST_INSERT_HEAD(&sem_free, &sems[i], link);
  80a582:	89 50 0c             	mov    %edx,0xc(%eax)
  80a585:	85 d2                	test   %edx,%edx
  80a587:	74 06                	je     80a58f <sys_init+0x2a>
  80a589:	8d 58 0c             	lea    0xc(%eax),%ebx
  80a58c:	89 5a 10             	mov    %ebx,0x10(%edx)
  80a58f:	c7 41 10 80 ad b3 00 	movl   $0xb3ad80,0x10(%ecx)
  80a596:	83 c0 14             	add    $0x14,%eax

void
sys_init(void)
{
    int i = 0;
    for (i = 0; i < NSEM; i++) {
  80a599:	39 f0                	cmp    %esi,%eax
  80a59b:	74 04                	je     80a5a1 <sys_init+0x3c>
	sems[i].freed = 1;
	LIST_INSERT_HEAD(&sem_free, &sems[i], link);
  80a59d:	89 ca                	mov    %ecx,%edx
  80a59f:	eb d9                	jmp    80a57a <sys_init+0x15>
  80a5a1:	c7 05 80 ad b3 00 8c 	movl   $0xb3c18c,0xb3ad80
  80a5a8:	c1 b3 00 
  80a5ab:	8b 15 64 5f b3 00    	mov    0xb35f64,%edx
  80a5b1:	b8 80 5f b3 00       	mov    $0xb35f80,%eax
  80a5b6:	be 80 ad b3 00       	mov    $0xb3ad80,%esi
  80a5bb:	89 c1                	mov    %eax,%ecx
    }

    for (i = 0; i < NMBOX; i++) {
	mboxes[i].freed = 1;
  80a5bd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	LIST_INSERT_HEAD(&mbox_free, &mboxes[i], link);
  80a5c3:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  80a5c9:	85 d2                	test   %edx,%edx
  80a5cb:	74 0c                	je     80a5d9 <sys_init+0x74>
  80a5cd:	8d 98 94 00 00 00    	lea    0x94(%eax),%ebx
  80a5d3:	89 9a 98 00 00 00    	mov    %ebx,0x98(%edx)
  80a5d9:	c7 81 98 00 00 00 64 	movl   $0xb35f64,0x98(%ecx)
  80a5e0:	5f b3 00 
  80a5e3:	05 9c 00 00 00       	add    $0x9c,%eax
    for (i = 0; i < NSEM; i++) {
	sems[i].freed = 1;
	LIST_INSERT_HEAD(&sem_free, &sems[i], link);
    }

    for (i = 0; i < NMBOX; i++) {
  80a5e8:	39 f0                	cmp    %esi,%eax
  80a5ea:	74 04                	je     80a5f0 <sys_init+0x8b>
	mboxes[i].freed = 1;
	LIST_INSERT_HEAD(&mbox_free, &mboxes[i], link);
  80a5ec:	89 ca                	mov    %ecx,%edx
  80a5ee:	eb cb                	jmp    80a5bb <sys_init+0x56>
  80a5f0:	c7 05 64 5f b3 00 e4 	movl   $0xb3ace4,0xb35f64
  80a5f7:	ac b3 00 
    }
}
  80a5fa:	5b                   	pop    %ebx
  80a5fb:	5e                   	pop    %esi
  80a5fc:	5d                   	pop    %ebp
  80a5fd:	c3                   	ret    

0080a5fe <sys_sem_new>:
    return ERR_OK;
}

sys_sem_t
sys_sem_new(u8_t count)
{
  80a5fe:	55                   	push   %ebp
  80a5ff:	89 e5                	mov    %esp,%ebp
  80a601:	53                   	push   %ebx
  80a602:	83 ec 14             	sub    $0x14,%esp
  80a605:	8b 4d 08             	mov    0x8(%ebp),%ecx
    struct sys_sem_entry *se = LIST_FIRST(&sem_free);
  80a608:	a1 80 ad b3 00       	mov    0xb3ad80,%eax
    if (!se) {
  80a60d:	85 c0                	test   %eax,%eax
  80a60f:	75 13                	jne    80a624 <sys_sem_new+0x26>
	cprintf("lwip: sys_sem_new: out of semaphores\n");
  80a611:	c7 04 24 00 34 81 00 	movl   $0x813400,(%esp)
  80a618:	e8 6a 4b 00 00       	call   80f187 <cprintf>
	return SYS_SEM_NULL;
  80a61d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80a622:	eb 5d                	jmp    80a681 <sys_sem_new+0x83>
    }
    LIST_REMOVE(se, link);
  80a624:	8b 50 0c             	mov    0xc(%eax),%edx
  80a627:	85 d2                	test   %edx,%edx
  80a629:	74 06                	je     80a631 <sys_sem_new+0x33>
  80a62b:	8b 58 10             	mov    0x10(%eax),%ebx
  80a62e:	89 5a 10             	mov    %ebx,0x10(%edx)
  80a631:	8b 50 10             	mov    0x10(%eax),%edx
  80a634:	8b 58 0c             	mov    0xc(%eax),%ebx
  80a637:	89 1a                	mov    %ebx,(%edx)
    assert(se->freed);
  80a639:	83 38 00             	cmpl   $0x0,(%eax)
  80a63c:	75 24                	jne    80a662 <sys_sem_new+0x64>
  80a63e:	c7 44 24 0c 75 35 81 	movl   $0x813575,0xc(%esp)
  80a645:	00 
  80a646:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a64d:	00 
  80a64e:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
  80a655:	00 
  80a656:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a65d:	e8 2c 4a 00 00       	call   80f08e <_panic>
    se->freed = 0;
  80a662:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    se->counter = count;
  80a668:	0f b6 c9             	movzbl %cl,%ecx
  80a66b:	66 89 48 08          	mov    %cx,0x8(%eax)
    se->gen++;
  80a66f:	83 40 04 01          	addl   $0x1,0x4(%eax)
    return se - &sems[0];
  80a673:	2d a0 ad b3 00       	sub    $0xb3ada0,%eax
  80a678:	c1 f8 02             	sar    $0x2,%eax
  80a67b:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
}
  80a681:	83 c4 14             	add    $0x14,%esp
  80a684:	5b                   	pop    %ebx
  80a685:	5d                   	pop    %ebp
  80a686:	c3                   	ret    

0080a687 <sys_sem_free>:

void
sys_sem_free(sys_sem_t sem)
{
  80a687:	55                   	push   %ebp
  80a688:	89 e5                	mov    %esp,%ebp
  80a68a:	83 ec 18             	sub    $0x18,%esp
  80a68d:	8b 45 08             	mov    0x8(%ebp),%eax
    assert(!sems[sem].freed);
  80a690:	8d 14 80             	lea    (%eax,%eax,4),%edx
  80a693:	83 3c 95 a0 ad b3 00 	cmpl   $0x0,0xb3ada0(,%edx,4)
  80a69a:	00 
  80a69b:	74 24                	je     80a6c1 <sys_sem_free+0x3a>
  80a69d:	c7 44 24 0c b1 35 81 	movl   $0x8135b1,0xc(%esp)
  80a6a4:	00 
  80a6a5:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a6ac:	00 
  80a6ad:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  80a6b4:	00 
  80a6b5:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a6bc:	e8 cd 49 00 00       	call   80f08e <_panic>
    sems[sem].freed = 1;
  80a6c1:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
  80a6c4:	c1 e1 02             	shl    $0x2,%ecx
  80a6c7:	8d 91 a0 ad b3 00    	lea    0xb3ada0(%ecx),%edx
  80a6cd:	c7 81 a0 ad b3 00 01 	movl   $0x1,0xb3ada0(%ecx)
  80a6d4:	00 00 00 
    sems[sem].gen++;
  80a6d7:	83 42 04 01          	addl   $0x1,0x4(%edx)
    LIST_INSERT_HEAD(&sem_free, &sems[sem], link);
  80a6db:	8b 0d 80 ad b3 00    	mov    0xb3ad80,%ecx
  80a6e1:	89 4a 0c             	mov    %ecx,0xc(%edx)
  80a6e4:	85 c9                	test   %ecx,%ecx
  80a6e6:	74 0d                	je     80a6f5 <sys_sem_free+0x6e>
  80a6e8:	8d 14 80             	lea    (%eax,%eax,4),%edx
  80a6eb:	8d 14 95 ac ad b3 00 	lea    0xb3adac(,%edx,4),%edx
  80a6f2:	89 51 10             	mov    %edx,0x10(%ecx)
  80a6f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  80a6fc:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  80a6ff:	8d 0c 8d a0 ad b3 00 	lea    0xb3ada0(,%ecx,4),%ecx
  80a706:	89 0d 80 ad b3 00    	mov    %ecx,0xb3ad80
  80a70c:	01 d0                	add    %edx,%eax
  80a70e:	c7 04 85 b0 ad b3 00 	movl   $0xb3ad80,0xb3adb0(,%eax,4)
  80a715:	80 ad b3 00 
}
  80a719:	c9                   	leave  
  80a71a:	c3                   	ret    

0080a71b <sys_mbox_free>:
    return i;
}

void
sys_mbox_free(sys_mbox_t mbox)
{
  80a71b:	55                   	push   %ebp
  80a71c:	89 e5                	mov    %esp,%ebp
  80a71e:	57                   	push   %edi
  80a71f:	56                   	push   %esi
  80a720:	53                   	push   %ebx
  80a721:	83 ec 1c             	sub    $0x1c,%esp
  80a724:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(!mboxes[mbox].freed);
  80a727:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  80a72d:	83 b8 80 5f b3 00 00 	cmpl   $0x0,0xb35f80(%eax)
  80a734:	74 24                	je     80a75a <sys_mbox_free+0x3f>
  80a736:	c7 44 24 0c c2 35 81 	movl   $0x8135c2,0xc(%esp)
  80a73d:	00 
  80a73e:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a745:	00 
  80a746:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
  80a74d:	00 
  80a74e:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a755:	e8 34 49 00 00       	call   80f08e <_panic>
    sys_sem_free(mboxes[mbox].queued_msg);
  80a75a:	69 f3 9c 00 00 00    	imul   $0x9c,%ebx,%esi
  80a760:	8b 86 0c 60 b3 00    	mov    0xb3600c(%esi),%eax
  80a766:	89 04 24             	mov    %eax,(%esp)
  80a769:	e8 19 ff ff ff       	call   80a687 <sys_sem_free>
    sys_sem_free(mboxes[mbox].free_msg);
  80a76e:	8b 86 10 60 b3 00    	mov    0xb36010(%esi),%eax
  80a774:	89 04 24             	mov    %eax,(%esp)
  80a777:	e8 0b ff ff ff       	call   80a687 <sys_sem_free>
    LIST_INSERT_HEAD(&mbox_free, &mboxes[mbox], link);
  80a77c:	a1 64 5f b3 00       	mov    0xb35f64,%eax
  80a781:	89 86 14 60 b3 00    	mov    %eax,0xb36014(%esi)
  80a787:	85 c0                	test   %eax,%eax
  80a789:	74 0e                	je     80a799 <sys_mbox_free+0x7e>
  80a78b:	89 f2                	mov    %esi,%edx
  80a78d:	81 c2 14 60 b3 00    	add    $0xb36014,%edx
  80a793:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
  80a799:	69 db 9c 00 00 00    	imul   $0x9c,%ebx,%ebx
  80a79f:	8d 83 80 5f b3 00    	lea    0xb35f80(%ebx),%eax
  80a7a5:	a3 64 5f b3 00       	mov    %eax,0xb35f64
  80a7aa:	c7 83 18 60 b3 00 64 	movl   $0xb35f64,0xb36018(%ebx)
  80a7b1:	5f b3 00 
    mboxes[mbox].freed = 1;
  80a7b4:	c7 83 80 5f b3 00 01 	movl   $0x1,0xb35f80(%ebx)
  80a7bb:	00 00 00 
}
  80a7be:	83 c4 1c             	add    $0x1c,%esp
  80a7c1:	5b                   	pop    %ebx
  80a7c2:	5e                   	pop    %esi
  80a7c3:	5f                   	pop    %edi
  80a7c4:	5d                   	pop    %ebp
  80a7c5:	c3                   	ret    

0080a7c6 <sys_mbox_new>:
    }
}

sys_mbox_t
sys_mbox_new(int size)
{
  80a7c6:	55                   	push   %ebp
  80a7c7:	89 e5                	mov    %esp,%ebp
  80a7c9:	56                   	push   %esi
  80a7ca:	53                   	push   %ebx
  80a7cb:	83 ec 10             	sub    $0x10,%esp
    assert(size < MBOXSLOTS);
  80a7ce:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  80a7d2:	7e 24                	jle    80a7f8 <sys_mbox_new+0x32>
  80a7d4:	c7 44 24 0c d6 35 81 	movl   $0x8135d6,0xc(%esp)
  80a7db:	00 
  80a7dc:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a7e3:	00 
  80a7e4:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
  80a7eb:	00 
  80a7ec:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a7f3:	e8 96 48 00 00       	call   80f08e <_panic>
    struct sys_mbox_entry *mbe = LIST_FIRST(&mbox_free);
  80a7f8:	8b 1d 64 5f b3 00    	mov    0xb35f64,%ebx
    if (!mbe) {
  80a7fe:	85 db                	test   %ebx,%ebx
  80a800:	75 16                	jne    80a818 <sys_mbox_new+0x52>
	cprintf("lwip: sys_mbox_new: out of mailboxes\n");
  80a802:	c7 04 24 28 34 81 00 	movl   $0x813428,(%esp)
  80a809:	e8 79 49 00 00       	call   80f187 <cprintf>
	return SYS_MBOX_NULL;
  80a80e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80a813:	e9 c1 00 00 00       	jmp    80a8d9 <sys_mbox_new+0x113>
    }
    LIST_REMOVE(mbe, link);
  80a818:	8b 83 94 00 00 00    	mov    0x94(%ebx),%eax
  80a81e:	85 c0                	test   %eax,%eax
  80a820:	74 0c                	je     80a82e <sys_mbox_new+0x68>
  80a822:	8b 93 98 00 00 00    	mov    0x98(%ebx),%edx
  80a828:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
  80a82e:	8b 83 98 00 00 00    	mov    0x98(%ebx),%eax
  80a834:	8b 93 94 00 00 00    	mov    0x94(%ebx),%edx
  80a83a:	89 10                	mov    %edx,(%eax)
    assert(mbe->freed);
  80a83c:	83 3b 00             	cmpl   $0x0,(%ebx)
  80a83f:	75 24                	jne    80a865 <sys_mbox_new+0x9f>
  80a841:	c7 44 24 0c e7 35 81 	movl   $0x8135e7,0xc(%esp)
  80a848:	00 
  80a849:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a850:	00 
  80a851:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
  80a858:	00 
  80a859:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a860:	e8 29 48 00 00       	call   80f08e <_panic>
    mbe->freed = 0;
  80a865:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)

    int i = mbe - &mboxes[0];
  80a86b:	89 de                	mov    %ebx,%esi
  80a86d:	81 ee 80 5f b3 00    	sub    $0xb35f80,%esi
  80a873:	c1 fe 02             	sar    $0x2,%esi
  80a876:	69 f6 97 6f f9 96    	imul   $0x96f96f97,%esi,%esi
    mbe->head = -1;
  80a87c:	c7 43 04 ff ff ff ff 	movl   $0xffffffff,0x4(%ebx)
    mbe->nextq = 0;
  80a883:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    mbe->queued_msg = sys_sem_new(0);
  80a88a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80a891:	e8 68 fd ff ff       	call   80a5fe <sys_sem_new>
  80a896:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
    mbe->free_msg = sys_sem_new(MBOXSLOTS);
  80a89c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  80a8a3:	e8 56 fd ff ff       	call   80a5fe <sys_sem_new>
  80a8a8:	89 83 90 00 00 00    	mov    %eax,0x90(%ebx)

    if (mbe->queued_msg == SYS_SEM_NULL ||
  80a8ae:	83 bb 8c 00 00 00 ff 	cmpl   $0xffffffff,0x8c(%ebx)
  80a8b5:	74 05                	je     80a8bc <sys_mbox_new+0xf6>
  80a8b7:	83 f8 ff             	cmp    $0xffffffff,%eax
  80a8ba:	75 1b                	jne    80a8d7 <sys_mbox_new+0x111>
	mbe->free_msg == SYS_SEM_NULL)
    {
	sys_mbox_free(i);
  80a8bc:	89 34 24             	mov    %esi,(%esp)
  80a8bf:	e8 57 fe ff ff       	call   80a71b <sys_mbox_free>
	cprintf("lwip: sys_mbox_new: can't get semaphore\n");
  80a8c4:	c7 04 24 50 34 81 00 	movl   $0x813450,(%esp)
  80a8cb:	e8 b7 48 00 00       	call   80f187 <cprintf>
	return SYS_MBOX_NULL;
  80a8d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80a8d5:	eb 02                	jmp    80a8d9 <sys_mbox_new+0x113>
    }
    return i;
  80a8d7:	89 f0                	mov    %esi,%eax
}
  80a8d9:	83 c4 10             	add    $0x10,%esp
  80a8dc:	5b                   	pop    %ebx
  80a8dd:	5e                   	pop    %esi
  80a8de:	5d                   	pop    %ebp
  80a8df:	c3                   	ret    

0080a8e0 <sys_sem_signal>:
    LIST_INSERT_HEAD(&sem_free, &sems[sem], link);
}

void
sys_sem_signal(sys_sem_t sem)
{
  80a8e0:	55                   	push   %ebp
  80a8e1:	89 e5                	mov    %esp,%ebp
  80a8e3:	83 ec 18             	sub    $0x18,%esp
  80a8e6:	8b 45 08             	mov    0x8(%ebp),%eax
    assert(!sems[sem].freed);
  80a8e9:	8d 14 80             	lea    (%eax,%eax,4),%edx
  80a8ec:	83 3c 95 a0 ad b3 00 	cmpl   $0x0,0xb3ada0(,%edx,4)
  80a8f3:	00 
  80a8f4:	74 24                	je     80a91a <sys_sem_signal+0x3a>
  80a8f6:	c7 44 24 0c b1 35 81 	movl   $0x8135b1,0xc(%esp)
  80a8fd:	00 
  80a8fe:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a905:	00 
  80a906:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
  80a90d:	00 
  80a90e:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a915:	e8 74 47 00 00       	call   80f08e <_panic>
    sems[sem].counter++;
  80a91a:	8d 14 80             	lea    (%eax,%eax,4),%edx
  80a91d:	8d 14 95 a0 ad b3 00 	lea    0xb3ada0(,%edx,4),%edx
  80a924:	66 83 42 08 01       	addw   $0x1,0x8(%edx)
    if (sems[sem].waiters) {
  80a929:	66 83 7a 0a 00       	cmpw   $0x0,0xa(%edx)
  80a92e:	74 23                	je     80a953 <sys_sem_signal+0x73>
	sems[sem].waiters = 0;
  80a930:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  80a937:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  80a93a:	66 c7 04 8d aa ad b3 	movw   $0x0,0xb3adaa(,%ecx,4)
  80a941:	00 00 00 
	thread_wakeup(&sems[sem].v);
  80a944:	8d 04 8d a8 ad b3 00 	lea    0xb3ada8(,%ecx,4),%eax
  80a94b:	89 04 24             	mov    %eax,(%esp)
  80a94e:	e8 3c 05 00 00       	call   80ae8f <thread_wakeup>
    }
}
  80a953:	c9                   	leave  
  80a954:	c3                   	ret    

0080a955 <sys_arch_sem_wait>:

u32_t
sys_arch_sem_wait(sys_sem_t sem, u32_t tm_msec)
{
  80a955:	55                   	push   %ebp
  80a956:	89 e5                	mov    %esp,%ebp
  80a958:	57                   	push   %edi
  80a959:	56                   	push   %esi
  80a95a:	53                   	push   %ebx
  80a95b:	83 ec 2c             	sub    $0x2c,%esp
  80a95e:	8b 75 0c             	mov    0xc(%ebp),%esi
    assert(!sems[sem].freed);
  80a961:	8b 45 08             	mov    0x8(%ebp),%eax
  80a964:	8d 04 80             	lea    (%eax,%eax,4),%eax
  80a967:	83 3c 85 a0 ad b3 00 	cmpl   $0x0,0xb3ada0(,%eax,4)
  80a96e:	00 
  80a96f:	74 24                	je     80a995 <sys_arch_sem_wait+0x40>
  80a971:	c7 44 24 0c b1 35 81 	movl   $0x8135b1,0xc(%esp)
  80a978:	00 
  80a979:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80a980:	00 
  80a981:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
  80a988:	00 
  80a989:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80a990:	e8 f9 46 00 00       	call   80f08e <_panic>
    u32_t waited = 0;

    int gen = sems[sem].gen;
  80a995:	8b 45 08             	mov    0x8(%ebp),%eax
  80a998:	8d 04 80             	lea    (%eax,%eax,4),%eax
  80a99b:	8b 04 85 a4 ad b3 00 	mov    0xb3ada4(,%eax,4),%eax
  80a9a2:	89 45 dc             	mov    %eax,-0x24(%ebp)

u32_t
sys_arch_sem_wait(sys_sem_t sem, u32_t tm_msec)
{
    assert(!sems[sem].freed);
    u32_t waited = 0;
  80a9a5:	bf 00 00 00 00       	mov    $0x0,%edi

    int gen = sems[sem].gen;

    while (tm_msec == 0 || waited < tm_msec) {
	if (sems[sem].counter > 0) {
  80a9aa:	8b 45 08             	mov    0x8(%ebp),%eax
  80a9ad:	8d 04 80             	lea    (%eax,%eax,4),%eax
  80a9b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(!sems[sem].freed);
    u32_t waited = 0;

    int gen = sems[sem].gen;

    while (tm_msec == 0 || waited < tm_msec) {
  80a9b3:	e9 90 00 00 00       	jmp    80aa48 <sys_arch_sem_wait+0xf3>
	if (sems[sem].counter > 0) {
  80a9b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80a9bb:	0f b7 04 85 a8 ad b3 	movzwl 0xb3ada8(,%eax,4),%eax
  80a9c2:	00 
  80a9c3:	66 85 c0             	test   %ax,%ax
  80a9c6:	74 18                	je     80a9e0 <sys_arch_sem_wait+0x8b>
	    sems[sem].counter--;
  80a9c8:	8b 55 08             	mov    0x8(%ebp),%edx
  80a9cb:	8d 14 92             	lea    (%edx,%edx,4),%edx
  80a9ce:	83 e8 01             	sub    $0x1,%eax
  80a9d1:	66 89 04 95 a8 ad b3 	mov    %ax,0xb3ada8(,%edx,4)
  80a9d8:	00 
	    return waited;
  80a9d9:	89 f8                	mov    %edi,%eax
  80a9db:	e9 84 00 00 00       	jmp    80aa64 <sys_arch_sem_wait+0x10f>
 	} else if (tm_msec == SYS_ARCH_NOWAIT) {
  80a9e0:	83 fe fe             	cmp    $0xfffffffe,%esi
  80a9e3:	74 7a                	je     80aa5f <sys_arch_sem_wait+0x10a>
	    return SYS_ARCH_TIMEOUT;
	} else {
	    uint32_t a = sys_time_msec();
  80a9e5:	e8 51 54 00 00       	call   80fe3b <sys_time_msec>
  80a9ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    uint32_t sleep_until = tm_msec ? a + (tm_msec - waited) : ~0;
  80a9ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80a9f2:	85 f6                	test   %esi,%esi
  80a9f4:	74 07                	je     80a9fd <sys_arch_sem_wait+0xa8>
  80a9f6:	89 f0                	mov    %esi,%eax
  80a9f8:	29 f8                	sub    %edi,%eax
  80a9fa:	03 45 e4             	add    -0x1c(%ebp),%eax
	    sems[sem].waiters = 1;
  80a9fd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  80aa00:	8d 1c 8d a0 ad b3 00 	lea    0xb3ada0(,%ecx,4),%ebx
  80aa07:	66 c7 43 0a 01 00    	movw   $0x1,0xa(%ebx)
	    uint32_t cur_v = sems[sem].v;
	    lwip_core_unlock();
	    thread_wait(&sems[sem].v, cur_v, sleep_until);
  80aa0d:	89 44 24 08          	mov    %eax,0x8(%esp)
  80aa11:	8b 43 08             	mov    0x8(%ebx),%eax
  80aa14:	89 44 24 04          	mov    %eax,0x4(%esp)
  80aa18:	8d 43 08             	lea    0x8(%ebx),%eax
  80aa1b:	89 04 24             	mov    %eax,(%esp)
  80aa1e:	e8 a6 06 00 00       	call   80b0c9 <thread_wait>
	    lwip_core_lock();
	    if (gen != sems[sem].gen) {
  80aa23:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80aa26:	39 43 04             	cmp    %eax,0x4(%ebx)
  80aa29:	74 13                	je     80aa3e <sys_arch_sem_wait+0xe9>
		cprintf("sys_arch_sem_wait: sem freed under waiter!\n");
  80aa2b:	c7 04 24 7c 34 81 00 	movl   $0x81347c,(%esp)
  80aa32:	e8 50 47 00 00       	call   80f187 <cprintf>
		return SYS_ARCH_TIMEOUT;
  80aa37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80aa3c:	eb 26                	jmp    80aa64 <sys_arch_sem_wait+0x10f>
	    }
	    uint32_t b = sys_time_msec();
  80aa3e:	e8 f8 53 00 00       	call   80fe3b <sys_time_msec>
	    waited += (b - a);
  80aa43:	2b 45 e4             	sub    -0x1c(%ebp),%eax
  80aa46:	01 c7                	add    %eax,%edi
    assert(!sems[sem].freed);
    u32_t waited = 0;

    int gen = sems[sem].gen;

    while (tm_msec == 0 || waited < tm_msec) {
  80aa48:	39 f7                	cmp    %esi,%edi
  80aa4a:	0f 82 68 ff ff ff    	jb     80a9b8 <sys_arch_sem_wait+0x63>
  80aa50:	85 f6                	test   %esi,%esi
  80aa52:	0f 84 60 ff ff ff    	je     80a9b8 <sys_arch_sem_wait+0x63>
	    uint32_t b = sys_time_msec();
	    waited += (b - a);
	}
    }

    return SYS_ARCH_TIMEOUT;
  80aa58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80aa5d:	eb 05                	jmp    80aa64 <sys_arch_sem_wait+0x10f>
    while (tm_msec == 0 || waited < tm_msec) {
	if (sems[sem].counter > 0) {
	    sems[sem].counter--;
	    return waited;
 	} else if (tm_msec == SYS_ARCH_NOWAIT) {
	    return SYS_ARCH_TIMEOUT;
  80aa5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	    waited += (b - a);
	}
    }

    return SYS_ARCH_TIMEOUT;
}
  80aa64:	83 c4 2c             	add    $0x2c,%esp
  80aa67:	5b                   	pop    %ebx
  80aa68:	5e                   	pop    %esi
  80aa69:	5f                   	pop    %edi
  80aa6a:	5d                   	pop    %ebp
  80aa6b:	c3                   	ret    

0080aa6c <sys_mbox_trypost>:
    assert(sys_mbox_trypost(mbox, msg) == ERR_OK);
}

err_t 
sys_mbox_trypost(sys_mbox_t mbox, void *msg)
{
  80aa6c:	55                   	push   %ebp
  80aa6d:	89 e5                	mov    %esp,%ebp
  80aa6f:	56                   	push   %esi
  80aa70:	53                   	push   %ebx
  80aa71:	83 ec 10             	sub    $0x10,%esp
  80aa74:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(!mboxes[mbox].freed);
  80aa77:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  80aa7d:	83 b8 80 5f b3 00 00 	cmpl   $0x0,0xb35f80(%eax)
  80aa84:	74 24                	je     80aaaa <sys_mbox_trypost+0x3e>
  80aa86:	c7 44 24 0c c2 35 81 	movl   $0x8135c2,0xc(%esp)
  80aa8d:	00 
  80aa8e:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80aa95:	00 
  80aa96:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
  80aa9d:	00 
  80aa9e:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80aaa5:	e8 e4 45 00 00       	call   80f08e <_panic>

    sys_arch_sem_wait(mboxes[mbox].free_msg, 0);
  80aaaa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80aab1:	00 
  80aab2:	69 f3 9c 00 00 00    	imul   $0x9c,%ebx,%esi
  80aab8:	8b 86 10 60 b3 00    	mov    0xb36010(%esi),%eax
  80aabe:	89 04 24             	mov    %eax,(%esp)
  80aac1:	e8 8f fe ff ff       	call   80a955 <sys_arch_sem_wait>
    if (mboxes[mbox].nextq == mboxes[mbox].head)
  80aac6:	8b 86 88 5f b3 00    	mov    0xb35f88(%esi),%eax
  80aacc:	81 c6 80 5f b3 00    	add    $0xb35f80,%esi
  80aad2:	3b 46 04             	cmp    0x4(%esi),%eax
  80aad5:	74 53                	je     80ab2a <sys_mbox_trypost+0xbe>
	return ERR_MEM;

    int slot = mboxes[mbox].nextq;
    mboxes[mbox].nextq = (slot + 1) % MBOXSLOTS;
  80aad7:	89 f2                	mov    %esi,%edx
  80aad9:	8d 70 01             	lea    0x1(%eax),%esi
  80aadc:	89 f1                	mov    %esi,%ecx
  80aade:	c1 f9 1f             	sar    $0x1f,%ecx
  80aae1:	c1 e9 1b             	shr    $0x1b,%ecx
  80aae4:	01 ce                	add    %ecx,%esi
  80aae6:	83 e6 1f             	and    $0x1f,%esi
  80aae9:	29 ce                	sub    %ecx,%esi
  80aaeb:	89 72 08             	mov    %esi,0x8(%edx)
    mboxes[mbox].msg[slot] = msg;
  80aaee:	6b cb 27             	imul   $0x27,%ebx,%ecx
  80aaf1:	01 c1                	add    %eax,%ecx
  80aaf3:	8b 75 0c             	mov    0xc(%ebp),%esi
  80aaf6:	89 34 8d 8c 5f b3 00 	mov    %esi,0xb35f8c(,%ecx,4)

    if (mboxes[mbox].head == -1)
  80aafd:	83 7a 04 ff          	cmpl   $0xffffffff,0x4(%edx)
  80ab01:	75 0c                	jne    80ab0f <sys_mbox_trypost+0xa3>
	mboxes[mbox].head = slot;
  80ab03:	69 d3 9c 00 00 00    	imul   $0x9c,%ebx,%edx
  80ab09:	89 82 84 5f b3 00    	mov    %eax,0xb35f84(%edx)

    sys_sem_signal(mboxes[mbox].queued_msg);
  80ab0f:	69 db 9c 00 00 00    	imul   $0x9c,%ebx,%ebx
  80ab15:	8b 83 0c 60 b3 00    	mov    0xb3600c(%ebx),%eax
  80ab1b:	89 04 24             	mov    %eax,(%esp)
  80ab1e:	e8 bd fd ff ff       	call   80a8e0 <sys_sem_signal>

    return ERR_OK;
  80ab23:	b8 00 00 00 00       	mov    $0x0,%eax
  80ab28:	eb 05                	jmp    80ab2f <sys_mbox_trypost+0xc3>
{
    assert(!mboxes[mbox].freed);

    sys_arch_sem_wait(mboxes[mbox].free_msg, 0);
    if (mboxes[mbox].nextq == mboxes[mbox].head)
	return ERR_MEM;
  80ab2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	mboxes[mbox].head = slot;

    sys_sem_signal(mboxes[mbox].queued_msg);

    return ERR_OK;
}
  80ab2f:	83 c4 10             	add    $0x10,%esp
  80ab32:	5b                   	pop    %ebx
  80ab33:	5e                   	pop    %esi
  80ab34:	5d                   	pop    %ebp
  80ab35:	c3                   	ret    

0080ab36 <sys_mbox_post>:
    mboxes[mbox].freed = 1;
}

void
sys_mbox_post(sys_mbox_t mbox, void *msg)
{
  80ab36:	55                   	push   %ebp
  80ab37:	89 e5                	mov    %esp,%ebp
  80ab39:	83 ec 18             	sub    $0x18,%esp
    assert(sys_mbox_trypost(mbox, msg) == ERR_OK);
  80ab3c:	8b 45 0c             	mov    0xc(%ebp),%eax
  80ab3f:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ab43:	8b 45 08             	mov    0x8(%ebp),%eax
  80ab46:	89 04 24             	mov    %eax,(%esp)
  80ab49:	e8 1e ff ff ff       	call   80aa6c <sys_mbox_trypost>
  80ab4e:	84 c0                	test   %al,%al
  80ab50:	74 24                	je     80ab76 <sys_mbox_post+0x40>
  80ab52:	c7 44 24 0c a8 34 81 	movl   $0x8134a8,0xc(%esp)
  80ab59:	00 
  80ab5a:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80ab61:	00 
  80ab62:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
  80ab69:	00 
  80ab6a:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80ab71:	e8 18 45 00 00       	call   80f08e <_panic>
}
  80ab76:	c9                   	leave  
  80ab77:	c3                   	ret    

0080ab78 <sys_arch_mbox_fetch>:
    return SYS_ARCH_TIMEOUT;
}

u32_t
sys_arch_mbox_fetch(sys_mbox_t mbox, void **msg, u32_t tm_msec)
{
  80ab78:	55                   	push   %ebp
  80ab79:	89 e5                	mov    %esp,%ebp
  80ab7b:	57                   	push   %edi
  80ab7c:	56                   	push   %esi
  80ab7d:	53                   	push   %ebx
  80ab7e:	83 ec 1c             	sub    $0x1c,%esp
  80ab81:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80ab84:	8b 7d 0c             	mov    0xc(%ebp),%edi
    assert(!mboxes[mbox].freed);
  80ab87:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  80ab8d:	83 b8 80 5f b3 00 00 	cmpl   $0x0,0xb35f80(%eax)
  80ab94:	74 24                	je     80abba <sys_arch_mbox_fetch+0x42>
  80ab96:	c7 44 24 0c c2 35 81 	movl   $0x8135c2,0xc(%esp)
  80ab9d:	00 
  80ab9e:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  80aba5:	00 
  80aba6:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
  80abad:	00 
  80abae:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80abb5:	e8 d4 44 00 00       	call   80f08e <_panic>

    u32_t waited = sys_arch_sem_wait(mboxes[mbox].queued_msg, tm_msec);
  80abba:	8b 45 10             	mov    0x10(%ebp),%eax
  80abbd:	89 44 24 04          	mov    %eax,0x4(%esp)
  80abc1:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  80abc7:	8b 80 0c 60 b3 00    	mov    0xb3600c(%eax),%eax
  80abcd:	89 04 24             	mov    %eax,(%esp)
  80abd0:	e8 80 fd ff ff       	call   80a955 <sys_arch_sem_wait>
  80abd5:	89 c6                	mov    %eax,%esi
    if (waited == SYS_ARCH_TIMEOUT)
  80abd7:	83 f8 ff             	cmp    $0xffffffff,%eax
  80abda:	0f 84 88 00 00 00    	je     80ac68 <sys_arch_mbox_fetch+0xf0>
	return waited;

    int slot = mboxes[mbox].head;
  80abe0:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  80abe6:	8b 80 84 5f b3 00    	mov    0xb35f84(%eax),%eax
    if (slot == -1)
  80abec:	83 f8 ff             	cmp    $0xffffffff,%eax
  80abef:	75 1c                	jne    80ac0d <sys_arch_mbox_fetch+0x95>
	panic("lwip: sys_arch_mbox_fetch: no message");
  80abf1:	c7 44 24 08 d0 34 81 	movl   $0x8134d0,0x8(%esp)
  80abf8:	00 
  80abf9:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
  80ac00:	00 
  80ac01:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80ac08:	e8 81 44 00 00       	call   80f08e <_panic>
    if (msg)
  80ac0d:	85 ff                	test   %edi,%edi
  80ac0f:	74 0e                	je     80ac1f <sys_arch_mbox_fetch+0xa7>
	*msg = mboxes[mbox].msg[slot];
  80ac11:	6b d3 27             	imul   $0x27,%ebx,%edx
  80ac14:	01 c2                	add    %eax,%edx
  80ac16:	8b 14 95 8c 5f b3 00 	mov    0xb35f8c(,%edx,4),%edx
  80ac1d:	89 17                	mov    %edx,(%edi)

    mboxes[mbox].head = (slot + 1) % MBOXSLOTS;
  80ac1f:	83 c0 01             	add    $0x1,%eax
  80ac22:	99                   	cltd   
  80ac23:	c1 ea 1b             	shr    $0x1b,%edx
  80ac26:	01 d0                	add    %edx,%eax
  80ac28:	83 e0 1f             	and    $0x1f,%eax
  80ac2b:	29 d0                	sub    %edx,%eax
  80ac2d:	69 d3 9c 00 00 00    	imul   $0x9c,%ebx,%edx
  80ac33:	89 82 84 5f b3 00    	mov    %eax,0xb35f84(%edx)
  80ac39:	81 c2 80 5f b3 00    	add    $0xb35f80,%edx
    if (mboxes[mbox].head == mboxes[mbox].nextq)
  80ac3f:	3b 42 08             	cmp    0x8(%edx),%eax
  80ac42:	75 10                	jne    80ac54 <sys_arch_mbox_fetch+0xdc>
	mboxes[mbox].head = -1;
  80ac44:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  80ac4a:	c7 80 84 5f b3 00 ff 	movl   $0xffffffff,0xb35f84(%eax)
  80ac51:	ff ff ff 

    sys_sem_signal(mboxes[mbox].free_msg);
  80ac54:	69 db 9c 00 00 00    	imul   $0x9c,%ebx,%ebx
  80ac5a:	8b 83 10 60 b3 00    	mov    0xb36010(%ebx),%eax
  80ac60:	89 04 24             	mov    %eax,(%esp)
  80ac63:	e8 78 fc ff ff       	call   80a8e0 <sys_sem_signal>
    return waited;
}
  80ac68:	89 f0                	mov    %esi,%eax
  80ac6a:	83 c4 1c             	add    $0x1c,%esp
  80ac6d:	5b                   	pop    %ebx
  80ac6e:	5e                   	pop    %esi
  80ac6f:	5f                   	pop    %edi
  80ac70:	5d                   	pop    %ebp
  80ac71:	c3                   	ret    

0080ac72 <sys_arch_mbox_tryfetch>:

u32_t 
sys_arch_mbox_tryfetch(sys_mbox_t mbox, void **msg)
{
  80ac72:	55                   	push   %ebp
  80ac73:	89 e5                	mov    %esp,%ebp
  80ac75:	83 ec 18             	sub    $0x18,%esp
    return sys_arch_mbox_fetch(mbox, msg, SYS_ARCH_NOWAIT);
  80ac78:	c7 44 24 08 fe ff ff 	movl   $0xfffffffe,0x8(%esp)
  80ac7f:	ff 
  80ac80:	8b 45 0c             	mov    0xc(%ebp),%eax
  80ac83:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ac87:	8b 45 08             	mov    0x8(%ebp),%eax
  80ac8a:	89 04 24             	mov    %eax,(%esp)
  80ac8d:	e8 e6 fe ff ff       	call   80ab78 <sys_arch_mbox_fetch>
}
  80ac92:	c9                   	leave  
  80ac93:	c3                   	ret    

0080ac94 <sys_thread_new>:
}

sys_thread_t
sys_thread_new(char *name, void (* thread)(void *arg), void *arg, 
	       int stacksize, int prio)
{
  80ac94:	55                   	push   %ebp
  80ac95:	89 e5                	mov    %esp,%ebp
  80ac97:	83 ec 28             	sub    $0x28,%esp
    struct lwip_thread *lt = malloc(sizeof(*lt));
  80ac9a:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  80aca1:	e8 bc 66 00 00       	call   811362 <malloc>
    if (lt == 0)
  80aca6:	85 c0                	test   %eax,%eax
  80aca8:	75 1c                	jne    80acc6 <sys_thread_new+0x32>
	panic("sys_thread_new: cannot allocate thread struct");
  80acaa:	c7 44 24 08 f8 34 81 	movl   $0x8134f8,0x8(%esp)
  80acb1:	00 
  80acb2:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
  80acb9:	00 
  80acba:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80acc1:	e8 c8 43 00 00       	call   80f08e <_panic>

    if (stacksize > PGSIZE)
  80acc6:	81 7d 14 00 10 00 00 	cmpl   $0x1000,0x14(%ebp)
  80accd:	7e 23                	jle    80acf2 <sys_thread_new+0x5e>
	panic("large stack %d", stacksize);
  80accf:	8b 45 14             	mov    0x14(%ebp),%eax
  80acd2:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80acd6:	c7 44 24 08 f2 35 81 	movl   $0x8135f2,0x8(%esp)
  80acdd:	00 
  80acde:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
  80ace5:	00 
  80ace6:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80aced:	e8 9c 43 00 00       	call   80f08e <_panic>

    lt->func = thread;
  80acf2:	8b 55 0c             	mov    0xc(%ebp),%edx
  80acf5:	89 10                	mov    %edx,(%eax)
    lt->arg = arg;
  80acf7:	8b 55 10             	mov    0x10(%ebp),%edx
  80acfa:	89 50 04             	mov    %edx,0x4(%eax)

    thread_id_t tid;
    int r = thread_create(&tid, name, lwip_thread_entry, (uint32_t)lt);
  80acfd:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80ad01:	c7 44 24 08 f0 a4 80 	movl   $0x80a4f0,0x8(%esp)
  80ad08:	00 
  80ad09:	8b 45 08             	mov    0x8(%ebp),%eax
  80ad0c:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ad10:	8d 45 f4             	lea    -0xc(%ebp),%eax
  80ad13:	89 04 24             	mov    %eax,(%esp)
  80ad16:	e8 e2 01 00 00       	call   80aefd <thread_create>

    if (r < 0)
  80ad1b:	85 c0                	test   %eax,%eax
  80ad1d:	79 28                	jns    80ad47 <sys_thread_new+0xb3>
	panic("lwip: sys_thread_new: cannot create: %s\n", e2s(r));
  80ad1f:	89 04 24             	mov    %eax,(%esp)
  80ad22:	e8 39 05 00 00       	call   80b260 <e2s>
  80ad27:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80ad2b:	c7 44 24 08 28 35 81 	movl   $0x813528,0x8(%esp)
  80ad32:	00 
  80ad33:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
  80ad3a:	00 
  80ad3b:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80ad42:	e8 47 43 00 00       	call   80f08e <_panic>

    return tid;
}
  80ad47:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80ad4a:	c9                   	leave  
  80ad4b:	c3                   	ret    

0080ad4c <sys_arch_timeouts>:
    lwip_core_unlock();
}

struct sys_timeouts *
sys_arch_timeouts(void)
{
  80ad4c:	55                   	push   %ebp
  80ad4d:	89 e5                	mov    %esp,%ebp
  80ad4f:	57                   	push   %edi
  80ad50:	56                   	push   %esi
  80ad51:	53                   	push   %ebx
  80ad52:	83 ec 1c             	sub    $0x1c,%esp
    thread_id_t tid = thread_id();
  80ad55:	e8 29 01 00 00       	call   80ae83 <thread_id>
  80ad5a:	89 c6                	mov    %eax,%esi

    struct sys_thread *t;
    LIST_FOREACH(t, &threads[tid % thread_hash_size], link)
  80ad5c:	bf 01 ff 00 ff       	mov    $0xff00ff01,%edi
  80ad61:	f7 e7                	mul    %edi
  80ad63:	c1 ea 08             	shr    $0x8,%edx
  80ad66:	89 d7                	mov    %edx,%edi
  80ad68:	89 d0                	mov    %edx,%eax
  80ad6a:	c1 e0 08             	shl    $0x8,%eax
  80ad6d:	01 c7                	add    %eax,%edi
  80ad6f:	89 f0                	mov    %esi,%eax
  80ad71:	29 f8                	sub    %edi,%eax
  80ad73:	89 c7                	mov    %eax,%edi
  80ad75:	8b 1c 85 60 5b b3 00 	mov    0xb35b60(,%eax,4),%ebx
  80ad7c:	eb 0b                	jmp    80ad89 <sys_arch_timeouts+0x3d>
	if (t->tid == tid)
  80ad7e:	39 33                	cmp    %esi,(%ebx)
  80ad80:	0f 84 b6 00 00 00    	je     80ae3c <sys_arch_timeouts+0xf0>
sys_arch_timeouts(void)
{
    thread_id_t tid = thread_id();

    struct sys_thread *t;
    LIST_FOREACH(t, &threads[tid % thread_hash_size], link)
  80ad86:	8b 5b 08             	mov    0x8(%ebx),%ebx
  80ad89:	85 db                	test   %ebx,%ebx
  80ad8b:	75 f1                	jne    80ad7e <sys_arch_timeouts+0x32>
	if (t->tid == tid)
	    goto out;

    t = malloc(sizeof(*t));
  80ad8d:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  80ad94:	e8 c9 65 00 00       	call   811362 <malloc>
  80ad99:	89 c3                	mov    %eax,%ebx
    if (t == 0)
  80ad9b:	85 c0                	test   %eax,%eax
  80ad9d:	75 1c                	jne    80adbb <sys_arch_timeouts+0x6f>
	panic("sys_arch_timeouts: cannot malloc");
  80ad9f:	c7 44 24 08 54 35 81 	movl   $0x813554,0x8(%esp)
  80ada6:	00 
  80ada7:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
  80adae:	00 
  80adaf:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80adb6:	e8 d3 42 00 00       	call   80f08e <_panic>

    int r = thread_onhalt(timeout_cleanup);
  80adbb:	c7 04 24 10 a5 80 00 	movl   $0x80a510,(%esp)
  80adc2:	e8 0a 01 00 00       	call   80aed1 <thread_onhalt>
    if (r < 0)
  80adc7:	85 c0                	test   %eax,%eax
  80adc9:	79 28                	jns    80adf3 <sys_arch_timeouts+0xa7>
	panic("thread_onhalt failed: %s", e2s(r));
  80adcb:	89 04 24             	mov    %eax,(%esp)
  80adce:	e8 8d 04 00 00       	call   80b260 <e2s>
  80add3:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80add7:	c7 44 24 08 01 36 81 	movl   $0x813601,0x8(%esp)
  80adde:	00 
  80addf:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
  80ade6:	00 
  80ade7:	c7 04 24 94 35 81 00 	movl   $0x813594,(%esp)
  80adee:	e8 9b 42 00 00       	call   80f08e <_panic>

    t->tid = tid;
  80adf3:	89 33                	mov    %esi,(%ebx)
    memset(&t->tmo, 0, sizeof(t->tmo));
  80adf5:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80adfc:	00 
  80adfd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ae04:	00 
  80ae05:	8d 43 04             	lea    0x4(%ebx),%eax
  80ae08:	89 04 24             	mov    %eax,(%esp)
  80ae0b:	e8 f7 4a 00 00       	call   80f907 <memset>
    LIST_INSERT_HEAD(&threads[tid % thread_hash_size], t, link);
  80ae10:	8b 04 bd 60 5b b3 00 	mov    0xb35b60(,%edi,4),%eax
  80ae17:	89 43 08             	mov    %eax,0x8(%ebx)
  80ae1a:	85 c0                	test   %eax,%eax
  80ae1c:	74 0d                	je     80ae2b <sys_arch_timeouts+0xdf>
  80ae1e:	8b 04 bd 60 5b b3 00 	mov    0xb35b60(,%edi,4),%eax
  80ae25:	8d 53 08             	lea    0x8(%ebx),%edx
  80ae28:	89 50 0c             	mov    %edx,0xc(%eax)
  80ae2b:	89 1c bd 60 5b b3 00 	mov    %ebx,0xb35b60(,%edi,4)
  80ae32:	8d 04 bd 60 5b b3 00 	lea    0xb35b60(,%edi,4),%eax
  80ae39:	89 43 0c             	mov    %eax,0xc(%ebx)

out:
    return &t->tmo;
  80ae3c:	8d 43 04             	lea    0x4(%ebx),%eax
}
  80ae3f:	83 c4 1c             	add    $0x1c,%esp
  80ae42:	5b                   	pop    %ebx
  80ae43:	5e                   	pop    %esi
  80ae44:	5f                   	pop    %edi
  80ae45:	5d                   	pop    %ebp
  80ae46:	c3                   	ret    

0080ae47 <lwip_core_lock>:

void
lwip_core_lock(void)
{
  80ae47:	55                   	push   %ebp
  80ae48:	89 e5                	mov    %esp,%ebp
}
  80ae4a:	5d                   	pop    %ebp
  80ae4b:	c3                   	ret    

0080ae4c <lwip_core_unlock>:

void
lwip_core_unlock(void)
{
  80ae4c:	55                   	push   %ebp
  80ae4d:	89 e5                	mov    %esp,%ebp
}
  80ae4f:	5d                   	pop    %ebp
  80ae50:	c3                   	ret    
  80ae51:	66 90                	xchg   %ax,%ax
  80ae53:	66 90                	xchg   %ax,%ax
  80ae55:	66 90                	xchg   %ax,%ax
  80ae57:	66 90                	xchg   %ax,%ax
  80ae59:	66 90                	xchg   %ax,%ax
  80ae5b:	66 90                	xchg   %ax,%ax
  80ae5d:	66 90                	xchg   %ax,%ax
  80ae5f:	90                   	nop

0080ae60 <thread_init>:

static struct thread_queue thread_queue;
static struct thread_queue kill_queue;

void
thread_init(void) {
  80ae60:	55                   	push   %ebp
  80ae61:	89 e5                	mov    %esp,%ebp
};

static inline void 
threadq_init(struct thread_queue *tq)
{
    tq->tq_first = 0;
  80ae63:	c7 05 a8 c1 b3 00 00 	movl   $0x0,0xb3c1a8
  80ae6a:	00 00 00 
    tq->tq_last = 0;
  80ae6d:	c7 05 ac c1 b3 00 00 	movl   $0x0,0xb3c1ac
  80ae74:	00 00 00 
    threadq_init(&thread_queue);
    max_tid = 0;
  80ae77:	c7 05 b4 c1 b3 00 00 	movl   $0x0,0xb3c1b4
  80ae7e:	00 00 00 
}
  80ae81:	5d                   	pop    %ebp
  80ae82:	c3                   	ret    

0080ae83 <thread_id>:

uint32_t
thread_id(void) {
  80ae83:	55                   	push   %ebp
  80ae84:	89 e5                	mov    %esp,%ebp
    return cur_tc->tc_tid;
  80ae86:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80ae8b:	8b 00                	mov    (%eax),%eax
}
  80ae8d:	5d                   	pop    %ebp
  80ae8e:	c3                   	ret    

0080ae8f <thread_wakeup>:

void
thread_wakeup(volatile uint32_t *addr) {
  80ae8f:	55                   	push   %ebp
  80ae90:	89 e5                	mov    %esp,%ebp
  80ae92:	8b 55 08             	mov    0x8(%ebp),%edx
    struct thread_context *tc = thread_queue.tq_first;
  80ae95:	a1 a8 c1 b3 00       	mov    0xb3c1a8,%eax
    while (tc) {
  80ae9a:	eb 0c                	jmp    80aea8 <thread_wakeup+0x19>
	if (tc->tc_wait_addr == addr)
  80ae9c:	39 50 48             	cmp    %edx,0x48(%eax)
  80ae9f:	75 04                	jne    80aea5 <thread_wakeup+0x16>
	    tc->tc_wakeup = 1;
  80aea1:	c6 40 4c 01          	movb   $0x1,0x4c(%eax)
	tc = tc->tc_queue_link;
  80aea5:	8b 40 64             	mov    0x64(%eax),%eax
}

void
thread_wakeup(volatile uint32_t *addr) {
    struct thread_context *tc = thread_queue.tq_first;
    while (tc) {
  80aea8:	85 c0                	test   %eax,%eax
  80aeaa:	75 f0                	jne    80ae9c <thread_wakeup+0xd>
	if (tc->tc_wait_addr == addr)
	    tc->tc_wakeup = 1;
	tc = tc->tc_queue_link;
    }
}
  80aeac:	5d                   	pop    %ebp
  80aead:	c3                   	ret    

0080aeae <thread_wakeups_pending>:
    cur_tc->tc_wakeup = 0;
}

int
thread_wakeups_pending(void)
{
  80aeae:	55                   	push   %ebp
  80aeaf:	89 e5                	mov    %esp,%ebp
    struct thread_context *tc = thread_queue.tq_first;
  80aeb1:	8b 15 a8 c1 b3 00    	mov    0xb3c1a8,%edx
    int n = 0;
  80aeb7:	b8 00 00 00 00       	mov    $0x0,%eax
    while (tc) {
  80aebc:	eb 0d                	jmp    80aecb <thread_wakeups_pending+0x1d>
	if (tc->tc_wakeup)
  80aebe:	0f b6 4a 4c          	movzbl 0x4c(%edx),%ecx
	    ++n;
  80aec2:	80 f9 01             	cmp    $0x1,%cl
  80aec5:	83 d8 ff             	sbb    $0xffffffff,%eax
	tc = tc->tc_queue_link;
  80aec8:	8b 52 64             	mov    0x64(%edx),%edx
int
thread_wakeups_pending(void)
{
    struct thread_context *tc = thread_queue.tq_first;
    int n = 0;
    while (tc) {
  80aecb:	85 d2                	test   %edx,%edx
  80aecd:	75 ef                	jne    80aebe <thread_wakeups_pending+0x10>
	if (tc->tc_wakeup)
	    ++n;
	tc = tc->tc_queue_link;
    }
    return n;
}
  80aecf:	5d                   	pop    %ebp
  80aed0:	c3                   	ret    

0080aed1 <thread_onhalt>:

int
thread_onhalt(void (*fun)(thread_id_t)) {
    if (cur_tc->tc_nonhalt >= THREAD_NUM_ONHALT)
  80aed1:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80aed6:	8b 50 60             	mov    0x60(%eax),%edx
  80aed9:	83 fa 03             	cmp    $0x3,%edx
  80aedc:	7f 17                	jg     80aef5 <thread_onhalt+0x24>
    }
    return n;
}

int
thread_onhalt(void (*fun)(thread_id_t)) {
  80aede:	55                   	push   %ebp
  80aedf:	89 e5                	mov    %esp,%ebp
    if (cur_tc->tc_nonhalt >= THREAD_NUM_ONHALT)
	return -E_NO_MEM;

    cur_tc->tc_onhalt[cur_tc->tc_nonhalt++] = fun;
  80aee1:	8d 4a 01             	lea    0x1(%edx),%ecx
  80aee4:	89 48 60             	mov    %ecx,0x60(%eax)
  80aee7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80aeea:	89 4c 90 50          	mov    %ecx,0x50(%eax,%edx,4)
    return 0;
  80aeee:	b8 00 00 00 00       	mov    $0x0,%eax
  80aef3:	eb 06                	jmp    80aefb <thread_onhalt+0x2a>
}

int
thread_onhalt(void (*fun)(thread_id_t)) {
    if (cur_tc->tc_nonhalt >= THREAD_NUM_ONHALT)
	return -E_NO_MEM;
  80aef5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80aefa:	c3                   	ret    

    cur_tc->tc_onhalt[cur_tc->tc_nonhalt++] = fun;
    return 0;
}
  80aefb:	5d                   	pop    %ebp
  80aefc:	c3                   	ret    

0080aefd <thread_create>:
    thread_halt();
}

int
thread_create(thread_id_t *tid, const char *name, 
		void (*entry)(uint32_t), uint32_t arg) {
  80aefd:	55                   	push   %ebp
  80aefe:	89 e5                	mov    %esp,%ebp
  80af00:	57                   	push   %edi
  80af01:	56                   	push   %esi
  80af02:	53                   	push   %ebx
  80af03:	83 ec 1c             	sub    $0x1c,%esp
  80af06:	8b 75 08             	mov    0x8(%ebp),%esi
    struct thread_context *tc = malloc(sizeof(struct thread_context));
  80af09:	c7 04 24 68 00 00 00 	movl   $0x68,(%esp)
  80af10:	e8 4d 64 00 00       	call   811362 <malloc>
  80af15:	89 c3                	mov    %eax,%ebx
    if (!tc)
  80af17:	85 c0                	test   %eax,%eax
  80af19:	0f 84 16 01 00 00    	je     80b035 <thread_create+0x138>
	return -E_NO_MEM;

    memset(tc, 0, sizeof(struct thread_context));
  80af1f:	c7 44 24 08 68 00 00 	movl   $0x68,0x8(%esp)
  80af26:	00 
  80af27:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80af2e:	00 
  80af2f:	89 04 24             	mov    %eax,(%esp)
  80af32:	e8 d0 49 00 00       	call   80f907 <memset>
}

static void
thread_set_name(struct thread_context *tc, const char *name)
{
    strncpy(tc->tc_name, name, name_size - 1);
  80af37:	c7 44 24 08 1f 00 00 	movl   $0x1f,0x8(%esp)
  80af3e:	00 
  80af3f:	8b 45 0c             	mov    0xc(%ebp),%eax
  80af42:	89 44 24 04          	mov    %eax,0x4(%esp)
  80af46:	8d 43 08             	lea    0x8(%ebx),%eax
  80af49:	89 04 24             	mov    %eax,(%esp)
  80af4c:	e8 b1 48 00 00       	call   80f802 <strncpy>
    tc->tc_name[name_size - 1] = 0;
  80af51:	c6 43 27 00          	movb   $0x0,0x27(%ebx)
    return 0;
}

static thread_id_t
alloc_tid(void) {
    int tid = max_tid++;
  80af55:	8b 15 b4 c1 b3 00    	mov    0xb3c1b4,%edx
  80af5b:	8d 42 01             	lea    0x1(%edx),%eax
  80af5e:	a3 b4 c1 b3 00       	mov    %eax,0xb3c1b4
    if (max_tid == (uint32_t)~0)
  80af63:	83 f8 ff             	cmp    $0xffffffff,%eax
  80af66:	75 1c                	jne    80af84 <thread_create+0x87>
	panic("alloc_tid: no more thread ids");
  80af68:	c7 44 24 08 1a 36 81 	movl   $0x81361a,0x8(%esp)
  80af6f:	00 
  80af70:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
  80af77:	00 
  80af78:	c7 04 24 38 36 81 00 	movl   $0x813638,(%esp)
  80af7f:	e8 0a 41 00 00       	call   80f08e <_panic>
	return -E_NO_MEM;

    memset(tc, 0, sizeof(struct thread_context));
    
    thread_set_name(tc, name);
    tc->tc_tid = alloc_tid();
  80af84:	89 13                	mov    %edx,(%ebx)

    tc->tc_stack_bottom = malloc(stack_size);
  80af86:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  80af8d:	e8 d0 63 00 00       	call   811362 <malloc>
  80af92:	89 43 04             	mov    %eax,0x4(%ebx)
    if (!tc->tc_stack_bottom) {
  80af95:	85 c0                	test   %eax,%eax
  80af97:	75 12                	jne    80afab <thread_create+0xae>
	free(tc);
  80af99:	89 1c 24             	mov    %ebx,(%esp)
  80af9c:	e8 ef 62 00 00       	call   811290 <free>
	return -E_NO_MEM;
  80afa1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80afa6:	e9 96 00 00 00       	jmp    80b041 <thread_create+0x144>
    }

    void *stacktop = tc->tc_stack_bottom + stack_size;
    // Terminate stack unwinding
    stacktop = stacktop - 4;
  80afab:	8d b8 fc 0f 00 00    	lea    0xffc(%eax),%edi
    memset(stacktop, 0, 4);
  80afb1:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80afb8:	00 
  80afb9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80afc0:	00 
  80afc1:	89 3c 24             	mov    %edi,(%esp)
  80afc4:	e8 3e 49 00 00       	call   80f907 <memset>
    
    memset(&tc->tc_jb, 0, sizeof(tc->tc_jb));
  80afc9:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
  80afd0:	00 
  80afd1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80afd8:	00 
  80afd9:	8d 43 30             	lea    0x30(%ebx),%eax
  80afdc:	89 04 24             	mov    %eax,(%esp)
  80afdf:	e8 23 49 00 00       	call   80f907 <memset>
    tc->tc_jb.jb_esp = (uint32_t)stacktop;
  80afe4:	89 7b 34             	mov    %edi,0x34(%ebx)
    tc->tc_jb.jb_eip = (uint32_t)&thread_entry;
  80afe7:	c7 43 30 c7 b1 80 00 	movl   $0x80b1c7,0x30(%ebx)
    tc->tc_entry = entry;
  80afee:	8b 45 10             	mov    0x10(%ebp),%eax
  80aff1:	89 43 28             	mov    %eax,0x28(%ebx)
    tc->tc_arg = arg;
  80aff4:	8b 45 14             	mov    0x14(%ebp),%eax
  80aff7:	89 43 2c             	mov    %eax,0x2c(%ebx)
}

static inline void
threadq_push(struct thread_queue *tq, struct thread_context *tc)
{
    tc->tc_queue_link = 0;
  80affa:	c7 43 64 00 00 00 00 	movl   $0x0,0x64(%ebx)
    if (!tq->tq_first) {
  80b001:	83 3d a8 c1 b3 00 00 	cmpl   $0x0,0xb3c1a8
  80b008:	75 0e                	jne    80b018 <thread_create+0x11b>
	tq->tq_first = tc;
  80b00a:	89 1d a8 c1 b3 00    	mov    %ebx,0xb3c1a8
	tq->tq_last = tc;
  80b010:	89 1d ac c1 b3 00    	mov    %ebx,0xb3c1ac
  80b016:	eb 0e                	jmp    80b026 <thread_create+0x129>
    } else {
	tq->tq_last->tc_queue_link = tc;
  80b018:	a1 ac c1 b3 00       	mov    0xb3c1ac,%eax
  80b01d:	89 58 64             	mov    %ebx,0x64(%eax)
	tq->tq_last = tc;
  80b020:	89 1d ac c1 b3 00    	mov    %ebx,0xb3c1ac

    threadq_push(&thread_queue, tc);

    if (tid)
  80b026:	85 f6                	test   %esi,%esi
  80b028:	74 12                	je     80b03c <thread_create+0x13f>
	*tid = tc->tc_tid;
  80b02a:	8b 03                	mov    (%ebx),%eax
  80b02c:	89 06                	mov    %eax,(%esi)
    return 0;
  80b02e:	b8 00 00 00 00       	mov    $0x0,%eax
  80b033:	eb 0c                	jmp    80b041 <thread_create+0x144>
int
thread_create(thread_id_t *tid, const char *name, 
		void (*entry)(uint32_t), uint32_t arg) {
    struct thread_context *tc = malloc(sizeof(struct thread_context));
    if (!tc)
	return -E_NO_MEM;
  80b035:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80b03a:	eb 05                	jmp    80b041 <thread_create+0x144>

    threadq_push(&thread_queue, tc);

    if (tid)
	*tid = tc->tc_tid;
    return 0;
  80b03c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80b041:	83 c4 1c             	add    $0x1c,%esp
  80b044:	5b                   	pop    %ebx
  80b045:	5e                   	pop    %esi
  80b046:	5f                   	pop    %edi
  80b047:	5d                   	pop    %ebp
  80b048:	c3                   	ret    

0080b049 <thread_yield>:
    // when yield has no thread to run, it will return here!
    exit();
}

void
thread_yield(void) {
  80b049:	55                   	push   %ebp
  80b04a:	89 e5                	mov    %esp,%ebp
  80b04c:	53                   	push   %ebx
  80b04d:	83 ec 14             	sub    $0x14,%esp
}

static inline struct thread_context *
threadq_pop(struct thread_queue *tq)
{
    if (!tq->tq_first)
  80b050:	8b 1d a8 c1 b3 00    	mov    0xb3c1a8,%ebx
  80b056:	85 db                	test   %ebx,%ebx
  80b058:	74 69                	je     80b0c3 <thread_yield+0x7a>
	return 0;

    struct thread_context *tc = tq->tq_first;
    tq->tq_first = tc->tc_queue_link;
  80b05a:	8b 43 64             	mov    0x64(%ebx),%eax
  80b05d:	a3 a8 c1 b3 00       	mov    %eax,0xb3c1a8
    tc->tc_queue_link = 0;
  80b062:	c7 43 64 00 00 00 00 	movl   $0x0,0x64(%ebx)
    struct thread_context *next_tc = threadq_pop(&thread_queue);

    if (!next_tc)
	return;

    if (cur_tc) {
  80b069:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80b06e:	85 c0                	test   %eax,%eax
  80b070:	74 3e                	je     80b0b0 <thread_yield+0x67>
	if (jos_setjmp(&cur_tc->tc_jb) != 0)
  80b072:	83 c0 30             	add    $0x30,%eax
  80b075:	89 04 24             	mov    %eax,(%esp)
  80b078:	e8 73 01 00 00       	call   80b1f0 <jos_setjmp>
  80b07d:	85 c0                	test   %eax,%eax
  80b07f:	75 42                	jne    80b0c3 <thread_yield+0x7a>
	    return;
	threadq_push(&thread_queue, cur_tc);
  80b081:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
}

static inline void
threadq_push(struct thread_queue *tq, struct thread_context *tc)
{
    tc->tc_queue_link = 0;
  80b086:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
    if (!tq->tq_first) {
  80b08d:	83 3d a8 c1 b3 00 00 	cmpl   $0x0,0xb3c1a8
  80b094:	75 0c                	jne    80b0a2 <thread_yield+0x59>
	tq->tq_first = tc;
  80b096:	a3 a8 c1 b3 00       	mov    %eax,0xb3c1a8
	tq->tq_last = tc;
  80b09b:	a3 ac c1 b3 00       	mov    %eax,0xb3c1ac
  80b0a0:	eb 0e                	jmp    80b0b0 <thread_yield+0x67>
    } else {
	tq->tq_last->tc_queue_link = tc;
  80b0a2:	8b 15 ac c1 b3 00    	mov    0xb3c1ac,%edx
  80b0a8:	89 42 64             	mov    %eax,0x64(%edx)
	tq->tq_last = tc;
  80b0ab:	a3 ac c1 b3 00       	mov    %eax,0xb3c1ac
    }

    cur_tc = next_tc;
  80b0b0:	89 1d b0 c1 b3 00    	mov    %ebx,0xb3c1b0
    jos_longjmp(&cur_tc->tc_jb, 1);
  80b0b6:	8d 43 30             	lea    0x30(%ebx),%eax
  80b0b9:	ba 01 00 00 00       	mov    $0x1,%edx
  80b0be:	e8 5d 01 00 00       	call   80b220 <jos_longjmp>
}
  80b0c3:	83 c4 14             	add    $0x14,%esp
  80b0c6:	5b                   	pop    %ebx
  80b0c7:	5d                   	pop    %ebp
  80b0c8:	c3                   	ret    

0080b0c9 <thread_wait>:
	tc = tc->tc_queue_link;
    }
}

void
thread_wait(volatile uint32_t *addr, uint32_t val, uint32_t msec) {
  80b0c9:	55                   	push   %ebp
  80b0ca:	89 e5                	mov    %esp,%ebp
  80b0cc:	57                   	push   %edi
  80b0cd:	56                   	push   %esi
  80b0ce:	53                   	push   %ebx
  80b0cf:	83 ec 0c             	sub    $0xc,%esp
  80b0d2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b0d5:	8b 7d 10             	mov    0x10(%ebp),%edi
    uint32_t s = sys_time_msec();
  80b0d8:	e8 5e 4d 00 00       	call   80fe3b <sys_time_msec>
  80b0dd:	89 c6                	mov    %eax,%esi
    uint32_t p = s;

    cur_tc->tc_wait_addr = addr;
  80b0df:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80b0e4:	89 58 48             	mov    %ebx,0x48(%eax)
    cur_tc->tc_wakeup = 0;
  80b0e7:	c6 40 4c 00          	movb   $0x0,0x4c(%eax)
}

void
thread_wait(volatile uint32_t *addr, uint32_t val, uint32_t msec) {
    uint32_t s = sys_time_msec();
    uint32_t p = s;
  80b0eb:	89 f0                	mov    %esi,%eax

    cur_tc->tc_wait_addr = addr;
    cur_tc->tc_wakeup = 0;

    while (p < msec) {
  80b0ed:	eb 26                	jmp    80b115 <thread_wait+0x4c>
	if (p < s)
  80b0ef:	39 f0                	cmp    %esi,%eax
  80b0f1:	72 26                	jb     80b119 <thread_wait+0x50>
	    break;
	if (addr && *addr != val)
  80b0f3:	85 db                	test   %ebx,%ebx
  80b0f5:	74 07                	je     80b0fe <thread_wait+0x35>
  80b0f7:	8b 03                	mov    (%ebx),%eax
  80b0f9:	3b 45 0c             	cmp    0xc(%ebp),%eax
  80b0fc:	75 1b                	jne    80b119 <thread_wait+0x50>
	    break;
	if (cur_tc->tc_wakeup)
  80b0fe:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80b103:	0f b6 40 4c          	movzbl 0x4c(%eax),%eax
  80b107:	84 c0                	test   %al,%al
  80b109:	75 0e                	jne    80b119 <thread_wait+0x50>
	    break;

	thread_yield();
  80b10b:	e8 39 ff ff ff       	call   80b049 <thread_yield>
	p = sys_time_msec();
  80b110:	e8 26 4d 00 00       	call   80fe3b <sys_time_msec>
    uint32_t p = s;

    cur_tc->tc_wait_addr = addr;
    cur_tc->tc_wakeup = 0;

    while (p < msec) {
  80b115:	39 f8                	cmp    %edi,%eax
  80b117:	72 d6                	jb     80b0ef <thread_wait+0x26>

	thread_yield();
	p = sys_time_msec();
    }

    cur_tc->tc_wait_addr = 0;
  80b119:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80b11e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
    cur_tc->tc_wakeup = 0;
  80b125:	c6 40 4c 00          	movb   $0x0,0x4c(%eax)
}
  80b129:	83 c4 0c             	add    $0xc,%esp
  80b12c:	5b                   	pop    %ebx
  80b12d:	5e                   	pop    %esi
  80b12e:	5f                   	pop    %edi
  80b12f:	5d                   	pop    %ebp
  80b130:	c3                   	ret    

0080b131 <thread_halt>:
    free(tc->tc_stack_bottom);
    free(tc);
}

void
thread_halt() {
  80b131:	55                   	push   %ebp
  80b132:	89 e5                	mov    %esp,%ebp
  80b134:	56                   	push   %esi
  80b135:	53                   	push   %ebx
  80b136:	83 ec 10             	sub    $0x10,%esp
}

static inline struct thread_context *
threadq_pop(struct thread_queue *tq)
{
    if (!tq->tq_first)
  80b139:	8b 1d a0 c1 b3 00    	mov    0xb3c1a0,%ebx
  80b13f:	85 db                	test   %ebx,%ebx
  80b141:	74 3a                	je     80b17d <thread_halt+0x4c>
	return 0;

    struct thread_context *tc = tq->tq_first;
    tq->tq_first = tc->tc_queue_link;
  80b143:	8b 43 64             	mov    0x64(%ebx),%eax
  80b146:	a3 a0 c1 b3 00       	mov    %eax,0xb3c1a0
    tc->tc_queue_link = 0;
  80b14b:	c7 43 64 00 00 00 00 	movl   $0x0,0x64(%ebx)
  80b152:	be 00 00 00 00       	mov    $0x0,%esi
  80b157:	eb 0c                	jmp    80b165 <thread_halt+0x34>
thread_clean(struct thread_context *tc) {
    if (!tc) return;

    int i;
    for (i = 0; i < tc->tc_nonhalt; i++)
	tc->tc_onhalt[i](tc->tc_tid);
  80b159:	8b 03                	mov    (%ebx),%eax
  80b15b:	89 04 24             	mov    %eax,(%esp)
  80b15e:	ff 54 b3 50          	call   *0x50(%ebx,%esi,4)
static void
thread_clean(struct thread_context *tc) {
    if (!tc) return;

    int i;
    for (i = 0; i < tc->tc_nonhalt; i++)
  80b162:	83 c6 01             	add    $0x1,%esi
  80b165:	3b 73 60             	cmp    0x60(%ebx),%esi
  80b168:	7c ef                	jl     80b159 <thread_halt+0x28>
	tc->tc_onhalt[i](tc->tc_tid);
    free(tc->tc_stack_bottom);
  80b16a:	8b 43 04             	mov    0x4(%ebx),%eax
  80b16d:	89 04 24             	mov    %eax,(%esp)
  80b170:	e8 1b 61 00 00       	call   811290 <free>
    free(tc);
  80b175:	89 1c 24             	mov    %ebx,(%esp)
  80b178:	e8 13 61 00 00       	call   811290 <free>
thread_halt() {
    // right now the kill_queue will never be more than one
    // clean up a thread if one is on the queue
    thread_clean(threadq_pop(&kill_queue));

    threadq_push(&kill_queue, cur_tc);
  80b17d:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
}

static inline void
threadq_push(struct thread_queue *tq, struct thread_context *tc)
{
    tc->tc_queue_link = 0;
  80b182:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
    if (!tq->tq_first) {
  80b189:	83 3d a0 c1 b3 00 00 	cmpl   $0x0,0xb3c1a0
  80b190:	75 0c                	jne    80b19e <thread_halt+0x6d>
	tq->tq_first = tc;
  80b192:	a3 a0 c1 b3 00       	mov    %eax,0xb3c1a0
	tq->tq_last = tc;
  80b197:	a3 a4 c1 b3 00       	mov    %eax,0xb3c1a4
  80b19c:	eb 0e                	jmp    80b1ac <thread_halt+0x7b>
    } else {
	tq->tq_last->tc_queue_link = tc;
  80b19e:	8b 15 a4 c1 b3 00    	mov    0xb3c1a4,%edx
  80b1a4:	89 42 64             	mov    %eax,0x64(%edx)
	tq->tq_last = tc;
  80b1a7:	a3 a4 c1 b3 00       	mov    %eax,0xb3c1a4
    cur_tc = NULL;
  80b1ac:	c7 05 b0 c1 b3 00 00 	movl   $0x0,0xb3c1b0
  80b1b3:	00 00 00 
    thread_yield();
  80b1b6:	e8 8e fe ff ff       	call   80b049 <thread_yield>
    // WHAT IF THERE ARE NO MORE THREADS? HOW DO WE STOP?
    // when yield has no thread to run, it will return here!
    exit();
  80b1bb:	e8 b5 3e 00 00       	call   80f075 <exit>
}
  80b1c0:	83 c4 10             	add    $0x10,%esp
  80b1c3:	5b                   	pop    %ebx
  80b1c4:	5e                   	pop    %esi
  80b1c5:	5d                   	pop    %ebp
  80b1c6:	c3                   	ret    

0080b1c7 <thread_entry>:
    strncpy(tc->tc_name, name, name_size - 1);
    tc->tc_name[name_size - 1] = 0;
}

static void
thread_entry(void) {
  80b1c7:	55                   	push   %ebp
  80b1c8:	89 e5                	mov    %esp,%ebp
  80b1ca:	83 ec 18             	sub    $0x18,%esp
    cur_tc->tc_entry(cur_tc->tc_arg);
  80b1cd:	a1 b0 c1 b3 00       	mov    0xb3c1b0,%eax
  80b1d2:	8b 50 2c             	mov    0x2c(%eax),%edx
  80b1d5:	89 14 24             	mov    %edx,(%esp)
  80b1d8:	ff 50 28             	call   *0x28(%eax)
    thread_halt();
  80b1db:	e8 51 ff ff ff       	call   80b131 <thread_halt>
}
  80b1e0:	c9                   	leave  
  80b1e1:	c3                   	ret    
  80b1e2:	66 90                	xchg   %ax,%ax
  80b1e4:	66 90                	xchg   %ax,%ax
  80b1e6:	66 90                	xchg   %ax,%ax
  80b1e8:	66 90                	xchg   %ax,%ax
  80b1ea:	66 90                	xchg   %ax,%ax
  80b1ec:	66 90                	xchg   %ax,%ax
  80b1ee:	66 90                	xchg   %ax,%ax

0080b1f0 <jos_setjmp>:
#define ENTRY(x) \
        .text; _ALIGN_TEXT; .globl x; .type x,@function; x:


ENTRY(jos_setjmp)
	movl	4(%esp), %ecx	// jos_jmp_buf
  80b1f0:	8b 4c 24 04          	mov    0x4(%esp),%ecx

	movl	0(%esp), %edx	// %eip as pushed by call
  80b1f4:	8b 14 24             	mov    (%esp),%edx
	movl	%edx,  0(%ecx)
  80b1f7:	89 11                	mov    %edx,(%ecx)

	leal	4(%esp), %edx	// where %esp will point when we return
  80b1f9:	8d 54 24 04          	lea    0x4(%esp),%edx
	movl	%edx,  4(%ecx)
  80b1fd:	89 51 04             	mov    %edx,0x4(%ecx)

	movl	%ebp,  8(%ecx)
  80b200:	89 69 08             	mov    %ebp,0x8(%ecx)
	movl	%ebx, 12(%ecx)
  80b203:	89 59 0c             	mov    %ebx,0xc(%ecx)
	movl	%esi, 16(%ecx)
  80b206:	89 71 10             	mov    %esi,0x10(%ecx)
	movl	%edi, 20(%ecx)
  80b209:	89 79 14             	mov    %edi,0x14(%ecx)

	movl	$0, %eax
  80b20c:	b8 00 00 00 00       	mov    $0x0,%eax
	ret
  80b211:	c3                   	ret    
  80b212:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  80b219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0080b220 <jos_longjmp>:

ENTRY(jos_longjmp)
	// %eax is the jos_jmp_buf*
	// %edx is the return value

	movl	 0(%eax), %ecx	// %eip
  80b220:	8b 08                	mov    (%eax),%ecx
	movl	 4(%eax), %esp
  80b222:	8b 60 04             	mov    0x4(%eax),%esp
	movl	 8(%eax), %ebp
  80b225:	8b 68 08             	mov    0x8(%eax),%ebp
	movl	12(%eax), %ebx
  80b228:	8b 58 0c             	mov    0xc(%eax),%ebx
	movl	16(%eax), %esi
  80b22b:	8b 70 10             	mov    0x10(%eax),%esi
	movl	20(%eax), %edi
  80b22e:	8b 78 14             	mov    0x14(%eax),%edi

	movl	%edx, %eax
  80b231:	89 d0                	mov    %edx,%eax
	jmp	*%ecx
  80b233:	ff e1                	jmp    *%ecx

0080b235 <perror>:
  [ENSRQUERYDOMAINTOOLONG] = "ENSRQUERYDOMAINTOOLONG",  /* Domain name is too long */
  [ENSRCNAMELOOP] = "ENSRCNAMELOOP" /* Domain name is too long */
};

void
perror(const char *s) {
  80b235:	55                   	push   %ebp
  80b236:	89 e5                	mov    %esp,%ebp
  80b238:	83 ec 18             	sub    $0x18,%esp
	cprintf("%s: %s\n", s, e2s(err));
}

const char *
e2s(int err) {
	return sys_errlist[err];
  80b23b:	a1 00 c2 b3 00       	mov    0xb3c200,%eax
};

void
perror(const char *s) {
	int err = errno;
	cprintf("%s: %s\n", s, e2s(err));
  80b240:	8b 04 85 20 50 81 00 	mov    0x815020(,%eax,4),%eax
  80b247:	89 44 24 08          	mov    %eax,0x8(%esp)
  80b24b:	8b 45 08             	mov    0x8(%ebp),%eax
  80b24e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b252:	c7 04 24 53 36 81 00 	movl   $0x813653,(%esp)
  80b259:	e8 29 3f 00 00       	call   80f187 <cprintf>
}
  80b25e:	c9                   	leave  
  80b25f:	c3                   	ret    

0080b260 <e2s>:

const char *
e2s(int err) {
  80b260:	55                   	push   %ebp
  80b261:	89 e5                	mov    %esp,%ebp
	return sys_errlist[err];
  80b263:	8b 45 08             	mov    0x8(%ebp),%eax
  80b266:	8b 04 85 20 50 81 00 	mov    0x815020(,%eax,4),%eax
}
  80b26d:	5d                   	pop    %ebp
  80b26e:	c3                   	ret    
  80b26f:	90                   	nop

0080b270 <low_level_output>:
 * might be chained.
 *
 */
static err_t
low_level_output(struct netif *netif, struct pbuf *p)
{
  80b270:	55                   	push   %ebp
  80b271:	89 e5                	mov    %esp,%ebp
  80b273:	57                   	push   %edi
  80b274:	56                   	push   %esi
  80b275:	53                   	push   %ebx
  80b276:	83 ec 2c             	sub    $0x2c,%esp
  80b279:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    int r = sys_page_alloc(0, (void *)PKTMAP, PTE_U|PTE_W|PTE_P);
  80b27c:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  80b283:	00 
  80b284:	c7 44 24 04 00 00 00 	movl   $0x10000000,0x4(%esp)
  80b28b:	10 
  80b28c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80b293:	e8 3b 49 00 00       	call   80fbd3 <sys_page_alloc>
    if (r < 0)
  80b298:	85 c0                	test   %eax,%eax
  80b29a:	79 1c                	jns    80b2b8 <low_level_output+0x48>
	panic("jif: could not allocate page of memory");
  80b29c:	c7 44 24 08 38 3b 81 	movl   $0x813b38,0x8(%esp)
  80b2a3:	00 
  80b2a4:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
  80b2ab:	00 
  80b2ac:	c7 04 24 89 3b 81 00 	movl   $0x813b89,(%esp)
  80b2b3:	e8 d6 3d 00 00       	call   80f08e <_panic>
    struct jif_pkt *pkt = (struct jif_pkt *)PKTMAP;

    struct jif *jif;
    jif = netif->state;
  80b2b8:	8b 45 08             	mov    0x8(%ebp),%eax
  80b2bb:	8b 40 1c             	mov    0x1c(%eax),%eax
  80b2be:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    char *txbuf = pkt->jp_data;
  80b2c1:	bf 04 00 00 10       	mov    $0x10000004,%edi
    int txsize = 0;
  80b2c6:	be 00 00 00 00       	mov    $0x0,%esi
    struct pbuf *q;
    for (q = p; q != NULL; q = q->next) {
  80b2cb:	eb 57                	jmp    80b324 <low_level_output+0xb4>
	/* Send the data from the pbuf to the interface, one pbuf at a
	   time. The size of the data in each pbuf is kept in the ->len
	   variable. */

	if (txsize + q->len > 2000)
  80b2cd:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80b2d1:	0f b7 d0             	movzwl %ax,%edx
  80b2d4:	8d 0c 32             	lea    (%edx,%esi,1),%ecx
  80b2d7:	81 f9 d0 07 00 00    	cmp    $0x7d0,%ecx
  80b2dd:	7e 24                	jle    80b303 <low_level_output+0x93>
	    panic("oversized packet, fragment %d txsize %d\n", q->len, txsize);
  80b2df:	89 74 24 10          	mov    %esi,0x10(%esp)
  80b2e3:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80b2e7:	c7 44 24 08 60 3b 81 	movl   $0x813b60,0x8(%esp)
  80b2ee:	00 
  80b2ef:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
  80b2f6:	00 
  80b2f7:	c7 04 24 89 3b 81 00 	movl   $0x813b89,(%esp)
  80b2fe:	e8 8b 3d 00 00       	call   80f08e <_panic>
	memcpy(&txbuf[txsize], q->payload, q->len);
  80b303:	0f b7 c0             	movzwl %ax,%eax
  80b306:	89 44 24 08          	mov    %eax,0x8(%esp)
  80b30a:	8b 43 04             	mov    0x4(%ebx),%eax
  80b30d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b311:	8d 04 37             	lea    (%edi,%esi,1),%eax
  80b314:	89 04 24             	mov    %eax,(%esp)
  80b317:	e8 a0 46 00 00       	call   80f9bc <memcpy>
	txsize += q->len;
  80b31c:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80b320:	01 c6                	add    %eax,%esi
    jif = netif->state;

    char *txbuf = pkt->jp_data;
    int txsize = 0;
    struct pbuf *q;
    for (q = p; q != NULL; q = q->next) {
  80b322:	8b 1b                	mov    (%ebx),%ebx
  80b324:	85 db                	test   %ebx,%ebx
  80b326:	75 a5                	jne    80b2cd <low_level_output+0x5d>
	    panic("oversized packet, fragment %d txsize %d\n", q->len, txsize);
	memcpy(&txbuf[txsize], q->payload, q->len);
	txsize += q->len;
    }

    pkt->jp_len = txsize;
  80b328:	89 35 00 00 00 10    	mov    %esi,0x10000000

    ipc_send(jif->envid, NSREQ_OUTPUT, (void *)pkt, PTE_P|PTE_W|PTE_U);
  80b32e:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  80b335:	00 
  80b336:	c7 44 24 08 00 00 00 	movl   $0x10000000,0x8(%esp)
  80b33d:	10 
  80b33e:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
  80b345:	00 
  80b346:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80b349:	8b 40 04             	mov    0x4(%eax),%eax
  80b34c:	89 04 24             	mov    %eax,(%esp)
  80b34f:	e8 00 51 00 00       	call   810454 <ipc_send>
    sys_page_unmap(0, (void *)pkt);
  80b354:	c7 44 24 04 00 00 00 	movl   $0x10000000,0x4(%esp)
  80b35b:	10 
  80b35c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80b363:	e8 12 49 00 00       	call   80fc7a <sys_page_unmap>

    return ERR_OK;
}
  80b368:	b8 00 00 00 00       	mov    $0x0,%eax
  80b36d:	83 c4 2c             	add    $0x2c,%esp
  80b370:	5b                   	pop    %ebx
  80b371:	5e                   	pop    %esi
  80b372:	5f                   	pop    %edi
  80b373:	5d                   	pop    %ebp
  80b374:	c3                   	ret    

0080b375 <jif_output>:
 */

static err_t
jif_output(struct netif *netif, struct pbuf *p,
      struct ip_addr *ipaddr)
{
  80b375:	55                   	push   %ebp
  80b376:	89 e5                	mov    %esp,%ebp
  80b378:	83 ec 18             	sub    $0x18,%esp
    /* resolve hardware address, then send (or queue) packet */
    return etharp_output(netif, p, ipaddr);
  80b37b:	8b 45 10             	mov    0x10(%ebp),%eax
  80b37e:	89 44 24 08          	mov    %eax,0x8(%esp)
  80b382:	8b 45 0c             	mov    0xc(%ebp),%eax
  80b385:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b389:	8b 45 08             	mov    0x8(%ebp),%eax
  80b38c:	89 04 24             	mov    %eax,(%esp)
  80b38f:	e8 bf ef ff ff       	call   80a353 <etharp_output>
}
  80b394:	c9                   	leave  
  80b395:	c3                   	ret    

0080b396 <jif_input>:
 *
 */

void
jif_input(struct netif *netif, void *va)
{
  80b396:	55                   	push   %ebp
  80b397:	89 e5                	mov    %esp,%ebp
  80b399:	57                   	push   %edi
  80b39a:	56                   	push   %esi
  80b39b:	53                   	push   %ebx
  80b39c:	83 ec 2c             	sub    $0x2c,%esp
  80b39f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    struct jif *jif;
    struct eth_hdr *ethhdr;
    struct pbuf *p;

    jif = netif->state;
  80b3a2:	8b 45 08             	mov    0x8(%ebp),%eax
  80b3a5:	8b 40 1c             	mov    0x1c(%eax),%eax
  80b3a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
 */
static struct pbuf *
low_level_input(void *va)
{
    struct jif_pkt *pkt = (struct jif_pkt *)va;
    s16_t len = pkt->jp_len;
  80b3ab:	8b 03                	mov    (%ebx),%eax
  80b3ad:	89 c7                	mov    %eax,%edi

    struct pbuf *p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  80b3af:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
  80b3b6:	00 
  80b3b7:	0f b7 c0             	movzwl %ax,%eax
  80b3ba:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b3be:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  80b3c5:	e8 eb 9a ff ff       	call   804eb5 <pbuf_alloc>
  80b3ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (p == 0)
  80b3cd:	85 c0                	test   %eax,%eax
  80b3cf:	0f 84 c1 00 00 00    	je     80b496 <jif_input+0x100>
	return 0;

    /* We iterate over the pbuf chain until we have read the entire
     * packet into the pbuf. */
    void *rxbuf = (void *) pkt->jp_data;
  80b3d5:	8d 53 04             	lea    0x4(%ebx),%edx
  80b3d8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    int copied = 0;
    struct pbuf *q;
    for (q = p; q != NULL; q = q->next) {
  80b3db:	89 c3                	mov    %eax,%ebx
	return 0;

    /* We iterate over the pbuf chain until we have read the entire
     * packet into the pbuf. */
    void *rxbuf = (void *) pkt->jp_data;
    int copied = 0;
  80b3dd:	be 00 00 00 00       	mov    $0x0,%esi
    for (q = p; q != NULL; q = q->next) {
	/* Read enough bytes to fill this pbuf in the chain. The
	 * available data in the pbuf is given by the q->len
	 * variable. */
	int bytes = q->len;
	if (bytes > (len - copied))
  80b3e2:	0f bf c7             	movswl %di,%eax
  80b3e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct pbuf *q;
    for (q = p; q != NULL; q = q->next) {
	/* Read enough bytes to fill this pbuf in the chain. The
	 * available data in the pbuf is given by the q->len
	 * variable. */
	int bytes = q->len;
  80b3e8:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
	if (bytes > (len - copied))
  80b3ec:	8b 7d e0             	mov    -0x20(%ebp),%edi
  80b3ef:	29 f7                	sub    %esi,%edi
  80b3f1:	39 c7                	cmp    %eax,%edi
  80b3f3:	0f 4f f8             	cmovg  %eax,%edi
	    bytes = len - copied;
	memcpy(q->payload, rxbuf + copied, bytes);
  80b3f6:	89 7c 24 08          	mov    %edi,0x8(%esp)
  80b3fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80b3fd:	01 f0                	add    %esi,%eax
  80b3ff:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b403:	8b 43 04             	mov    0x4(%ebx),%eax
  80b406:	89 04 24             	mov    %eax,(%esp)
  80b409:	e8 ae 45 00 00       	call   80f9bc <memcpy>
	copied += bytes;
  80b40e:	01 fe                	add    %edi,%esi
    /* We iterate over the pbuf chain until we have read the entire
     * packet into the pbuf. */
    void *rxbuf = (void *) pkt->jp_data;
    int copied = 0;
    struct pbuf *q;
    for (q = p; q != NULL; q = q->next) {
  80b410:	8b 1b                	mov    (%ebx),%ebx
  80b412:	85 db                	test   %ebx,%ebx
  80b414:	75 d2                	jne    80b3e8 <jif_input+0x52>
  80b416:	eb 5e                	jmp    80b476 <jif_input+0xe0>
    ethhdr = p->payload;

    switch (htons(ethhdr->type)) {
    case ETHTYPE_IP:
	/* update ARP table */
	etharp_ip_input(netif, p);
  80b418:	8b 75 dc             	mov    -0x24(%ebp),%esi
  80b41b:	89 74 24 04          	mov    %esi,0x4(%esp)
  80b41f:	8b 45 08             	mov    0x8(%ebp),%eax
  80b422:	89 04 24             	mov    %eax,(%esp)
  80b425:	e8 49 e9 ff ff       	call   809d73 <etharp_ip_input>
	/* skip Ethernet header */
	pbuf_header(p, -(int)sizeof(struct eth_hdr));
  80b42a:	c7 44 24 04 f2 ff ff 	movl   $0xfffffff2,0x4(%esp)
  80b431:	ff 
  80b432:	89 34 24             	mov    %esi,(%esp)
  80b435:	e8 b6 98 ff ff       	call   804cf0 <pbuf_header>
	/* pass to network layer */
	netif->input(p, netif);
  80b43a:	8b 45 08             	mov    0x8(%ebp),%eax
  80b43d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b441:	89 34 24             	mov    %esi,(%esp)
  80b444:	8b 45 08             	mov    0x8(%ebp),%eax
  80b447:	ff 50 10             	call   *0x10(%eax)
	break;
  80b44a:	eb 4a                	jmp    80b496 <jif_input+0x100>
      
    case ETHTYPE_ARP:
	/* pass p to ARP module  */
	etharp_arp_input(netif, jif->ethaddr, p);
  80b44c:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80b44f:	89 44 24 08          	mov    %eax,0x8(%esp)
  80b453:	8b 45 d8             	mov    -0x28(%ebp),%eax
  80b456:	8b 00                	mov    (%eax),%eax
  80b458:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b45c:	8b 45 08             	mov    0x8(%ebp),%eax
  80b45f:	89 04 24             	mov    %eax,(%esp)
  80b462:	e8 5a e9 ff ff       	call   809dc1 <etharp_arp_input>
	break;
  80b467:	eb 2d                	jmp    80b496 <jif_input+0x100>

    default:
	pbuf_free(p);
  80b469:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80b46c:	89 04 24             	mov    %eax,(%esp)
  80b46f:	e8 60 99 ff ff       	call   804dd4 <pbuf_free>
  80b474:	eb 20                	jmp    80b496 <jif_input+0x100>
    /* no packet could be read, silently ignore this */
    if (p == NULL) return;
    /* points to packet payload, which starts with an Ethernet header */
    ethhdr = p->payload;

    switch (htons(ethhdr->type)) {
  80b476:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80b479:	8b 40 04             	mov    0x4(%eax),%eax
  80b47c:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b480:	89 04 24             	mov    %eax,(%esp)
  80b483:	e8 ce c8 ff ff       	call   807d56 <htons>
  80b488:	66 3d 00 08          	cmp    $0x800,%ax
  80b48c:	74 8a                	je     80b418 <jif_input+0x82>
  80b48e:	66 3d 06 08          	cmp    $0x806,%ax
  80b492:	74 b8                	je     80b44c <jif_input+0xb6>
  80b494:	eb d3                	jmp    80b469 <jif_input+0xd3>
	break;

    default:
	pbuf_free(p);
    }
}
  80b496:	83 c4 2c             	add    $0x2c,%esp
  80b499:	5b                   	pop    %ebx
  80b49a:	5e                   	pop    %esi
  80b49b:	5f                   	pop    %edi
  80b49c:	5d                   	pop    %ebp
  80b49d:	c3                   	ret    

0080b49e <jif_init>:
 *
 */

err_t
jif_init(struct netif *netif)
{
  80b49e:	55                   	push   %ebp
  80b49f:	89 e5                	mov    %esp,%ebp
  80b4a1:	57                   	push   %edi
  80b4a2:	56                   	push   %esi
  80b4a3:	53                   	push   %ebx
  80b4a4:	83 ec 2c             	sub    $0x2c,%esp
  80b4a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct jif *jif;
    envid_t *output_envid; 

    jif = mem_malloc(sizeof(struct jif));
  80b4aa:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  80b4b1:	e8 e9 92 ff ff       	call   80479f <mem_malloc>
  80b4b6:	89 c6                	mov    %eax,%esi

    if (jif == NULL) {
  80b4b8:	85 c0                	test   %eax,%eax
  80b4ba:	0f 84 bc 00 00 00    	je     80b57c <jif_init+0xde>
	LWIP_DEBUGF(NETIF_DEBUG, ("jif_init: out of memory\n"));
	return ERR_MEM;
    }

    output_envid = (envid_t *)netif->state;
  80b4c0:	8b 7b 1c             	mov    0x1c(%ebx),%edi

    netif->state = jif;
  80b4c3:	89 43 1c             	mov    %eax,0x1c(%ebx)
    netif->output = jif_output;
  80b4c6:	c7 43 14 75 b3 80 00 	movl   $0x80b375,0x14(%ebx)
    netif->linkoutput = low_level_output;
  80b4cd:	c7 43 18 70 b2 80 00 	movl   $0x80b270,0x18(%ebx)
    memcpy(&netif->name[0], "en", 2);
  80b4d4:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  80b4db:	00 
  80b4dc:	c7 44 24 04 10 49 81 	movl   $0x814910,0x4(%esp)
  80b4e3:	00 
  80b4e4:	8d 43 2f             	lea    0x2f(%ebx),%eax
  80b4e7:	89 04 24             	mov    %eax,(%esp)
  80b4ea:	e8 cd 44 00 00       	call   80f9bc <memcpy>

    jif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
  80b4ef:	8d 43 25             	lea    0x25(%ebx),%eax
  80b4f2:	89 06                	mov    %eax,(%esi)
    jif->envid = *output_envid; 
  80b4f4:	8b 07                	mov    (%edi),%eax
  80b4f6:	89 46 04             	mov    %eax,0x4(%esi)
static void
low_level_init(struct netif *netif)
{
    int r;

    netif->hwaddr_len = 6;
  80b4f9:	c6 43 24 06          	movb   $0x6,0x24(%ebx)
    netif->mtu = 1500;
  80b4fd:	66 c7 43 2c dc 05    	movw   $0x5dc,0x2c(%ebx)
    netif->flags = NETIF_FLAG_BROADCAST;
  80b503:	c6 43 2e 02          	movb   $0x2,0x2e(%ebx)
    netif->hwaddr[3] = 0x12;
    netif->hwaddr[4] = 0x34;
    netif->hwaddr[5] = 0x56;*/


	uint32_t low_addr = 0, high_addr = 0;
  80b507:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  80b50e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	sys_get_mac_from_eeprom(&low_addr, &high_addr);
  80b515:	8d 45 e0             	lea    -0x20(%ebp),%eax
  80b518:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b51c:	8d 45 dc             	lea    -0x24(%ebp),%eax
  80b51f:	89 04 24             	mov    %eax,(%esp)
  80b522:	e8 7e 4a 00 00       	call   80ffa5 <sys_get_mac_from_eeprom>
	int i;
	for (i = 0; i < 4; i++)
		netif->hwaddr[i] = (uint8_t)((low_addr >> (8*i)) & 0xff);
  80b527:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80b52a:	88 43 25             	mov    %al,0x25(%ebx)
  80b52d:	89 c2                	mov    %eax,%edx
  80b52f:	c1 ea 08             	shr    $0x8,%edx
  80b532:	88 53 26             	mov    %dl,0x26(%ebx)
  80b535:	89 c2                	mov    %eax,%edx
  80b537:	c1 ea 10             	shr    $0x10,%edx
  80b53a:	88 53 27             	mov    %dl,0x27(%ebx)
  80b53d:	c1 e8 18             	shr    $0x18,%eax
  80b540:	88 43 28             	mov    %al,0x28(%ebx)
	
	for (i = 0; i < 2; i++)
		netif->hwaddr[i+4] = (uint8_t)((high_addr >> (8*i)) & 0xff);
  80b543:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80b546:	88 43 29             	mov    %al,0x29(%ebx)
  80b549:	c1 e8 08             	shr    $0x8,%eax
  80b54c:	88 43 2a             	mov    %al,0x2a(%ebx)
    etharp_init();

    // qemu user-net is dumb; if the host OS does not send and ARP request
    // first, the qemu will send packets destined for the host using the mac
    // addr 00:00:00:00:00; do a arp request for the user-net NAT at 10.0.2.2
    uint32_t ipaddr = inet_addr("10.0.2.2");
  80b54f:	c7 04 24 8b 1f 81 00 	movl   $0x811f8b,(%esp)
  80b556:	e8 2a ca ff ff       	call   807f85 <inet_addr>
  80b55b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    etharp_query(netif, (struct ip_addr *) &ipaddr, 0);
  80b55e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b565:	00 
  80b566:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b569:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b56d:	89 1c 24             	mov    %ebx,(%esp)
  80b570:	e8 6f eb ff ff       	call   80a0e4 <etharp_query>

    return ERR_OK;
  80b575:	b8 00 00 00 00       	mov    $0x0,%eax
  80b57a:	eb 05                	jmp    80b581 <jif_init+0xe3>

    jif = mem_malloc(sizeof(struct jif));

    if (jif == NULL) {
	LWIP_DEBUGF(NETIF_DEBUG, ("jif_init: out of memory\n"));
	return ERR_MEM;
  80b57c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    // addr 00:00:00:00:00; do a arp request for the user-net NAT at 10.0.2.2
    uint32_t ipaddr = inet_addr("10.0.2.2");
    etharp_query(netif, (struct ip_addr *) &ipaddr, 0);

    return ERR_OK;
}
  80b581:	83 c4 2c             	add    $0x2c,%esp
  80b584:	5b                   	pop    %ebx
  80b585:	5e                   	pop    %esi
  80b586:	5f                   	pop    %edi
  80b587:	5d                   	pop    %ebp
  80b588:	c3                   	ret    

0080b589 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  80b589:	55                   	push   %ebp
  80b58a:	89 e5                	mov    %esp,%ebp
  80b58c:	56                   	push   %esi
  80b58d:	53                   	push   %ebx
  80b58e:	83 ec 30             	sub    $0x30,%esp
  80b591:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct netconn *conn;
  struct api_msg msg;

  conn = netconn_alloc(t, callback);
  80b594:	8b 45 10             	mov    0x10(%ebp),%eax
  80b597:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b59b:	8b 45 08             	mov    0x8(%ebp),%eax
  80b59e:	89 04 24             	mov    %eax,(%esp)
  80b5a1:	e8 44 10 00 00       	call   80c5ea <netconn_alloc>
  80b5a6:	89 c3                	mov    %eax,%ebx
  
  if (conn != NULL ) {
  80b5a8:	85 c0                	test   %eax,%eax
  80b5aa:	0f 84 d8 00 00 00    	je     80b688 <netconn_new_with_proto_and_callback+0xff>
    msg.function = do_newconn;
  80b5b0:	c7 45 e4 e3 c4 80 00 	movl   $0x80c4e3,-0x1c(%ebp)
    msg.msg.msg.n.proto = proto;
  80b5b7:	89 f0                	mov    %esi,%eax
  80b5b9:	88 45 ec             	mov    %al,-0x14(%ebp)
    msg.msg.conn = conn;
  80b5bc:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    TCPIP_APIMSG(&msg);
  80b5bf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b5c2:	89 04 24             	mov    %eax,(%esp)
  80b5c5:	e8 41 71 ff ff       	call   80270b <tcpip_apimsg>

    if (conn->err != ERR_OK) {
  80b5ca:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
  80b5ce:	0f 84 b6 00 00 00    	je     80b68a <netconn_new_with_proto_and_callback+0x101>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  80b5d4:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80b5d8:	74 1c                	je     80b5f6 <netconn_new_with_proto_and_callback+0x6d>
  80b5da:	c7 44 24 08 a0 3b 81 	movl   $0x813ba0,0x8(%esp)
  80b5e1:	00 
  80b5e2:	c7 44 24 04 52 00 00 	movl   $0x52,0x4(%esp)
  80b5e9:	00 
  80b5ea:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b5f1:	e8 98 3a 00 00       	call   80f08e <_panic>
      LWIP_ASSERT("conn has no op_completed", conn->op_completed != SYS_SEM_NULL);
  80b5f6:	8b 43 10             	mov    0x10(%ebx),%eax
  80b5f9:	83 f8 ff             	cmp    $0xffffffff,%eax
  80b5fc:	75 1c                	jne    80b61a <netconn_new_with_proto_and_callback+0x91>
  80b5fe:	c7 44 24 08 69 3c 81 	movl   $0x813c69,0x8(%esp)
  80b605:	00 
  80b606:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
  80b60d:	00 
  80b60e:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b615:	e8 74 3a 00 00       	call   80f08e <_panic>
      LWIP_ASSERT("conn has no recvmbox", conn->recvmbox != SYS_MBOX_NULL);
  80b61a:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80b61e:	75 1c                	jne    80b63c <netconn_new_with_proto_and_callback+0xb3>
  80b620:	c7 44 24 08 82 3c 81 	movl   $0x813c82,0x8(%esp)
  80b627:	00 
  80b628:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
  80b62f:	00 
  80b630:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b637:	e8 52 3a 00 00       	call   80f08e <_panic>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", conn->acceptmbox == SYS_MBOX_NULL);
  80b63c:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80b640:	74 1c                	je     80b65e <netconn_new_with_proto_and_callback+0xd5>
  80b642:	c7 44 24 08 c4 3b 81 	movl   $0x813bc4,0x8(%esp)
  80b649:	00 
  80b64a:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
  80b651:	00 
  80b652:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b659:	e8 30 3a 00 00       	call   80f08e <_panic>
      sys_sem_free(conn->op_completed);
  80b65e:	89 04 24             	mov    %eax,(%esp)
  80b661:	e8 21 f0 ff ff       	call   80a687 <sys_sem_free>
      sys_mbox_free(conn->recvmbox);
  80b666:	8b 43 14             	mov    0x14(%ebx),%eax
  80b669:	89 04 24             	mov    %eax,(%esp)
  80b66c:	e8 aa f0 ff ff       	call   80a71b <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  80b671:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80b675:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80b67c:	e8 a1 93 ff ff       	call   804a22 <memp_free>
      return NULL;
  80b681:	b8 00 00 00 00       	mov    $0x0,%eax
  80b686:	eb 04                	jmp    80b68c <netconn_new_with_proto_and_callback+0x103>
  80b688:	eb 02                	jmp    80b68c <netconn_new_with_proto_and_callback+0x103>
    }
  }
  return conn;
  80b68a:	89 d8                	mov    %ebx,%eax
}
  80b68c:	83 c4 30             	add    $0x30,%esp
  80b68f:	5b                   	pop    %ebx
  80b690:	5e                   	pop    %esi
  80b691:	5d                   	pop    %ebp
  80b692:	c3                   	ret    

0080b693 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  80b693:	55                   	push   %ebp
  80b694:	89 e5                	mov    %esp,%ebp
  80b696:	53                   	push   %ebx
  80b697:	83 ec 34             	sub    $0x34,%esp
  80b69a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  80b69d:	85 db                	test   %ebx,%ebx
  80b69f:	74 24                	je     80b6c5 <netconn_delete+0x32>
    return ERR_OK;
  }

  msg.function = do_delconn;
  80b6a1:	c7 45 e4 3f c8 80 00 	movl   $0x80c83f,-0x1c(%ebp)
  msg.msg.conn = conn;
  80b6a8:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  tcpip_apimsg(&msg);
  80b6ab:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b6ae:	89 04 24             	mov    %eax,(%esp)
  80b6b1:	e8 55 70 ff ff       	call   80270b <tcpip_apimsg>

  conn->pcb.tcp = NULL;
  80b6b6:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  netconn_free(conn);
  80b6bd:	89 1c 24             	mov    %ebx,(%esp)
  80b6c0:	e8 e3 0f 00 00       	call   80c6a8 <netconn_free>

  return ERR_OK;
}
  80b6c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80b6ca:	83 c4 34             	add    $0x34,%esp
  80b6cd:	5b                   	pop    %ebx
  80b6ce:	5d                   	pop    %ebp
  80b6cf:	c3                   	ret    

0080b6d0 <netconn_type>:
 * @param conn the netconn of which to get the type
 * @return the netconn_type of conn
 */
enum netconn_type
netconn_type(struct netconn *conn)
{
  80b6d0:	55                   	push   %ebp
  80b6d1:	89 e5                	mov    %esp,%ebp
  80b6d3:	83 ec 18             	sub    $0x18,%esp
  80b6d6:	8b 45 08             	mov    0x8(%ebp),%eax
  LWIP_ERROR("netconn_type: invalid conn", (conn != NULL), return NETCONN_INVALID;);
  80b6d9:	85 c0                	test   %eax,%eax
  80b6db:	75 1c                	jne    80b6f9 <netconn_type+0x29>
  80b6dd:	c7 44 24 08 97 3c 81 	movl   $0x813c97,0x8(%esp)
  80b6e4:	00 
  80b6e5:	c7 44 24 04 84 00 00 	movl   $0x84,0x4(%esp)
  80b6ec:	00 
  80b6ed:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b6f4:	e8 95 39 00 00       	call   80f08e <_panic>
  80b6f9:	8b 00                	mov    (%eax),%eax
  return conn->type;
}
  80b6fb:	c9                   	leave  
  80b6fc:	c3                   	ret    

0080b6fd <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, struct ip_addr *addr, u16_t *port, u8_t local)
{
  80b6fd:	55                   	push   %ebp
  80b6fe:	89 e5                	mov    %esp,%ebp
  80b700:	53                   	push   %ebx
  80b701:	83 ec 34             	sub    $0x34,%esp
  80b704:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b707:	8b 55 0c             	mov    0xc(%ebp),%edx
  80b70a:	8b 45 10             	mov    0x10(%ebp),%eax
  80b70d:	8b 4d 14             	mov    0x14(%ebp),%ecx
  struct api_msg msg;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  80b710:	85 db                	test   %ebx,%ebx
  80b712:	75 1c                	jne    80b730 <netconn_getaddr+0x33>
  80b714:	c7 44 24 08 b2 3c 81 	movl   $0x813cb2,0x8(%esp)
  80b71b:	00 
  80b71c:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  80b723:	00 
  80b724:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b72b:	e8 5e 39 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  80b730:	85 d2                	test   %edx,%edx
  80b732:	75 1c                	jne    80b750 <netconn_getaddr+0x53>
  80b734:	c7 44 24 08 d0 3c 81 	movl   $0x813cd0,0x8(%esp)
  80b73b:	00 
  80b73c:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
  80b743:	00 
  80b744:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b74b:	e8 3e 39 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  80b750:	85 c0                	test   %eax,%eax
  80b752:	75 1c                	jne    80b770 <netconn_getaddr+0x73>
  80b754:	c7 44 24 08 ee 3c 81 	movl   $0x813cee,0x8(%esp)
  80b75b:	00 
  80b75c:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
  80b763:	00 
  80b764:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b76b:	e8 1e 39 00 00       	call   80f08e <_panic>

  msg.function = do_getaddr;
  80b770:	c7 45 e4 b0 cc 80 00 	movl   $0x80ccb0,-0x1c(%ebp)
  msg.msg.conn = conn;
  80b777:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  msg.msg.msg.ad.ipaddr = addr;
  80b77a:	89 55 ec             	mov    %edx,-0x14(%ebp)
  msg.msg.msg.ad.port = port;
  80b77d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  msg.msg.msg.ad.local = local;
  80b780:	88 4d f4             	mov    %cl,-0xc(%ebp)
  TCPIP_APIMSG(&msg);
  80b783:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b786:	89 04 24             	mov    %eax,(%esp)
  80b789:	e8 7d 6f ff ff       	call   80270b <tcpip_apimsg>

  return conn->err;
  80b78e:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80b792:	83 c4 34             	add    $0x34,%esp
  80b795:	5b                   	pop    %ebx
  80b796:	5d                   	pop    %ebp
  80b797:	c3                   	ret    

0080b798 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, struct ip_addr *addr, u16_t port)
{
  80b798:	55                   	push   %ebp
  80b799:	89 e5                	mov    %esp,%ebp
  80b79b:	53                   	push   %ebx
  80b79c:	83 ec 34             	sub    $0x34,%esp
  80b79f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b7a2:	8b 45 10             	mov    0x10(%ebp),%eax
  struct api_msg msg;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  80b7a5:	85 db                	test   %ebx,%ebx
  80b7a7:	75 1c                	jne    80b7c5 <netconn_bind+0x2d>
  80b7a9:	c7 44 24 08 0c 3d 81 	movl   $0x813d0c,0x8(%esp)
  80b7b0:	00 
  80b7b1:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
  80b7b8:	00 
  80b7b9:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b7c0:	e8 c9 38 00 00       	call   80f08e <_panic>

  msg.function = do_bind;
  80b7c5:	c7 45 e4 f1 c8 80 00 	movl   $0x80c8f1,-0x1c(%ebp)
  msg.msg.conn = conn;
  80b7cc:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  msg.msg.msg.bc.ipaddr = addr;
  80b7cf:	8b 55 0c             	mov    0xc(%ebp),%edx
  80b7d2:	89 55 ec             	mov    %edx,-0x14(%ebp)
  msg.msg.msg.bc.port = port;
  80b7d5:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
  TCPIP_APIMSG(&msg);
  80b7d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b7dc:	89 04 24             	mov    %eax,(%esp)
  80b7df:	e8 27 6f ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80b7e4:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80b7e8:	83 c4 34             	add    $0x34,%esp
  80b7eb:	5b                   	pop    %ebx
  80b7ec:	5d                   	pop    %ebp
  80b7ed:	c3                   	ret    

0080b7ee <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, struct ip_addr *addr, u16_t port)
{
  80b7ee:	55                   	push   %ebp
  80b7ef:	89 e5                	mov    %esp,%ebp
  80b7f1:	53                   	push   %ebx
  80b7f2:	83 ec 34             	sub    $0x34,%esp
  80b7f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b7f8:	8b 45 10             	mov    0x10(%ebp),%eax
  struct api_msg msg;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  80b7fb:	85 db                	test   %ebx,%ebx
  80b7fd:	75 1c                	jne    80b81b <netconn_connect+0x2d>
  80b7ff:	c7 44 24 08 27 3d 81 	movl   $0x813d27,0x8(%esp)
  80b806:	00 
  80b807:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
  80b80e:	00 
  80b80f:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b816:	e8 73 38 00 00       	call   80f08e <_panic>

  msg.function = do_connect;
  80b81b:	c7 45 e4 87 c9 80 00 	movl   $0x80c987,-0x1c(%ebp)
  msg.msg.conn = conn;
  80b822:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  msg.msg.msg.bc.ipaddr = addr;
  80b825:	8b 55 0c             	mov    0xc(%ebp),%edx
  80b828:	89 55 ec             	mov    %edx,-0x14(%ebp)
  msg.msg.msg.bc.port = port;
  80b82b:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
  /* This is the only function which need to not block tcpip_thread */
  tcpip_apimsg(&msg);
  80b82f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b832:	89 04 24             	mov    %eax,(%esp)
  80b835:	e8 d1 6e ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80b83a:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80b83e:	83 c4 34             	add    $0x34,%esp
  80b841:	5b                   	pop    %ebx
  80b842:	5d                   	pop    %ebp
  80b843:	c3                   	ret    

0080b844 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return TODO: return value is not set here...
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  80b844:	55                   	push   %ebp
  80b845:	89 e5                	mov    %esp,%ebp
  80b847:	53                   	push   %ebx
  80b848:	83 ec 34             	sub    $0x34,%esp
  80b84b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  80b84e:	85 db                	test   %ebx,%ebx
  80b850:	75 1c                	jne    80b86e <netconn_disconnect+0x2a>
  80b852:	c7 44 24 08 e8 3b 81 	movl   $0x813be8,0x8(%esp)
  80b859:	00 
  80b85a:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
  80b861:	00 
  80b862:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b869:	e8 20 38 00 00       	call   80f08e <_panic>

  msg.function = do_disconnect;
  80b86e:	c7 45 e4 4d ca 80 00 	movl   $0x80ca4d,-0x1c(%ebp)
  msg.msg.conn = conn;
  80b875:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  TCPIP_APIMSG(&msg);
  80b878:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b87b:	89 04 24             	mov    %eax,(%esp)
  80b87e:	e8 88 6e ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80b883:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80b887:	83 c4 34             	add    $0x34,%esp
  80b88a:	5b                   	pop    %ebx
  80b88b:	5d                   	pop    %ebp
  80b88c:	c3                   	ret    

0080b88d <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  80b88d:	55                   	push   %ebp
  80b88e:	89 e5                	mov    %esp,%ebp
  80b890:	53                   	push   %ebx
  80b891:	83 ec 34             	sub    $0x34,%esp
  80b894:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  80b897:	85 db                	test   %ebx,%ebx
  80b899:	75 1c                	jne    80b8b7 <netconn_listen_with_backlog+0x2a>
  80b89b:	c7 44 24 08 45 3d 81 	movl   $0x813d45,0x8(%esp)
  80b8a2:	00 
  80b8a3:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
  80b8aa:	00 
  80b8ab:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b8b2:	e8 d7 37 00 00       	call   80f08e <_panic>

  msg.function = do_listen;
  80b8b7:	c7 45 e4 84 ca 80 00 	movl   $0x80ca84,-0x1c(%ebp)
  msg.msg.conn = conn;
  80b8be:	89 5d e8             	mov    %ebx,-0x18(%ebp)
#if TCP_LISTEN_BACKLOG
  msg.msg.msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  TCPIP_APIMSG(&msg);
  80b8c1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80b8c4:	89 04 24             	mov    %eax,(%esp)
  80b8c7:	e8 3f 6e ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80b8cc:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80b8d0:	83 c4 34             	add    $0x34,%esp
  80b8d3:	5b                   	pop    %ebx
  80b8d4:	5d                   	pop    %ebp
  80b8d5:	c3                   	ret    

0080b8d6 <netconn_accept>:
 * @param conn the TCP listen netconn
 * @return the newly accepted netconn or NULL on timeout
 */
struct netconn *
netconn_accept(struct netconn *conn)
{
  80b8d6:	55                   	push   %ebp
  80b8d7:	89 e5                	mov    %esp,%ebp
  80b8d9:	53                   	push   %ebx
  80b8da:	83 ec 24             	sub    $0x24,%esp
  80b8dd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct netconn *newconn;

  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return NULL;);
  80b8e0:	85 db                	test   %ebx,%ebx
  80b8e2:	75 1c                	jne    80b900 <netconn_accept+0x2a>
  80b8e4:	c7 44 24 08 62 3d 81 	movl   $0x813d62,0x8(%esp)
  80b8eb:	00 
  80b8ec:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
  80b8f3:	00 
  80b8f4:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b8fb:	e8 8e 37 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", (conn->acceptmbox != SYS_MBOX_NULL), return NULL;);
  80b900:	8b 43 18             	mov    0x18(%ebx),%eax
  80b903:	83 f8 ff             	cmp    $0xffffffff,%eax
  80b906:	75 1c                	jne    80b924 <netconn_accept+0x4e>
  80b908:	c7 44 24 08 0c 3c 81 	movl   $0x813c0c,0x8(%esp)
  80b90f:	00 
  80b910:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
  80b917:	00 
  80b918:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b91f:	e8 6a 37 00 00       	call   80f08e <_panic>
#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(conn->acceptmbox, (void *)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    newconn = NULL;
  } else
#else
  sys_arch_mbox_fetch(conn->acceptmbox, (void *)&newconn, 0);
  80b924:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b92b:	00 
  80b92c:	8d 55 f4             	lea    -0xc(%ebp),%edx
  80b92f:	89 54 24 04          	mov    %edx,0x4(%esp)
  80b933:	89 04 24             	mov    %eax,(%esp)
  80b936:	e8 3d f2 ff ff       	call   80ab78 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  80b93b:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80b93e:	85 c0                	test   %eax,%eax
  80b940:	74 15                	je     80b957 <netconn_accept+0x81>
  80b942:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b949:	00 
  80b94a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80b951:	00 
  80b952:	89 1c 24             	mov    %ebx,(%esp)
  80b955:	ff d0                	call   *%eax
    }
#endif /* TCP_LISTEN_BACKLOG */
  }

  return newconn;
}
  80b957:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80b95a:	83 c4 24             	add    $0x24,%esp
  80b95d:	5b                   	pop    %ebx
  80b95e:	5d                   	pop    %ebp
  80b95f:	c3                   	ret    

0080b960 <netconn_recv>:
 * @param conn the netconn from which to receive data
 * @return a new netbuf containing received data or NULL on memory error or timeout
 */
struct netbuf *
netconn_recv(struct netconn *conn)
{
  80b960:	55                   	push   %ebp
  80b961:	89 e5                	mov    %esp,%ebp
  80b963:	53                   	push   %ebx
  80b964:	83 ec 34             	sub    $0x34,%esp
  80b967:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;
  struct netbuf *buf = NULL;
  80b96a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  struct pbuf *p;
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid conn",  (conn != NULL), return NULL;);
  80b971:	85 db                	test   %ebx,%ebx
  80b973:	75 1c                	jne    80b991 <netconn_recv+0x31>
  80b975:	c7 44 24 08 7f 3d 81 	movl   $0x813d7f,0x8(%esp)
  80b97c:	00 
  80b97d:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
  80b984:	00 
  80b985:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80b98c:	e8 fd 36 00 00       	call   80f08e <_panic>

  if (conn->recvmbox == SYS_MBOX_NULL) {
  80b991:	8b 43 14             	mov    0x14(%ebx),%eax
  80b994:	83 f8 ff             	cmp    $0xffffffff,%eax
  80b997:	75 0e                	jne    80b9a7 <netconn_recv+0x47>
    /* @todo: should calling netconn_recv on a TCP listen conn be fatal (ERR_CONN)?? */
    /* TCP listen conns don't have a recvmbox! */
    conn->err = ERR_CONN;
  80b999:	c6 43 0c f8          	movb   $0xf8,0xc(%ebx)
    return NULL;
  80b99d:	b8 00 00 00 00       	mov    $0x0,%eax
  80b9a2:	e9 58 01 00 00       	jmp    80baff <netconn_recv+0x19f>
  }

  if (ERR_IS_FATAL(conn->err)) {
  80b9a7:	80 7b 0c fc          	cmpb   $0xfc,0xc(%ebx)
  80b9ab:	0f 8c 49 01 00 00    	jl     80bafa <netconn_recv+0x19a>
    return NULL;
  }

  if (conn->type == NETCONN_TCP) {
  80b9b1:	83 3b 10             	cmpl   $0x10,(%ebx)
  80b9b4:	0f 85 f5 00 00 00    	jne    80baaf <netconn_recv+0x14f>
#if LWIP_TCP
    if (conn->state == NETCONN_LISTEN) {
  80b9ba:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  80b9be:	75 0e                	jne    80b9ce <netconn_recv+0x6e>
      /* @todo: should calling netconn_recv on a TCP listen conn be fatal?? */
      conn->err = ERR_CONN;
  80b9c0:	c6 43 0c f8          	movb   $0xf8,0xc(%ebx)
      return NULL;
  80b9c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80b9c9:	e9 31 01 00 00       	jmp    80baff <netconn_recv+0x19f>
    }

    buf = memp_malloc(MEMP_NETBUF);
  80b9ce:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80b9d5:	e8 e8 8f ff ff       	call   8049c2 <memp_malloc>
  80b9da:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (buf == NULL) {
  80b9dd:	85 c0                	test   %eax,%eax
  80b9df:	75 09                	jne    80b9ea <netconn_recv+0x8a>
      conn->err = ERR_MEM;
  80b9e1:	c6 43 0c ff          	movb   $0xff,0xc(%ebx)
      return NULL;
  80b9e5:	e9 15 01 00 00       	jmp    80baff <netconn_recv+0x19f>
    if (sys_arch_mbox_fetch(conn->recvmbox, (void *)&p, conn->recv_timeout)==SYS_ARCH_TIMEOUT) {
      conn->err = ERR_TIMEOUT;
      p = NULL;
    }
#else
    sys_arch_mbox_fetch(conn->recvmbox, (void *)&p, 0);
  80b9ea:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b9f1:	00 
  80b9f2:	8d 45 dc             	lea    -0x24(%ebp),%eax
  80b9f5:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b9f9:	8b 43 14             	mov    0x14(%ebx),%eax
  80b9fc:	89 04 24             	mov    %eax,(%esp)
  80b9ff:	e8 74 f1 ff ff       	call   80ab78 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

    if (p != NULL) {
  80ba04:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80ba07:	85 c0                	test   %eax,%eax
  80ba09:	74 0a                	je     80ba15 <netconn_recv+0xb5>
      len = p->tot_len;
  80ba0b:	0f b7 50 08          	movzwl 0x8(%eax),%edx
      SYS_ARCH_DEC(conn->recv_avail, len);
  80ba0f:	66 29 53 20          	sub    %dx,0x20(%ebx)
  80ba13:	eb 05                	jmp    80ba1a <netconn_recv+0xba>
    } else {
      len = 0;
  80ba15:	ba 00 00 00 00       	mov    $0x0,%edx
    }

    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  80ba1a:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80ba1d:	85 c0                	test   %eax,%eax
  80ba1f:	74 14                	je     80ba35 <netconn_recv+0xd5>
  80ba21:	0f b7 d2             	movzwl %dx,%edx
  80ba24:	89 54 24 08          	mov    %edx,0x8(%esp)
  80ba28:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80ba2f:	00 
  80ba30:	89 1c 24             	mov    %ebx,(%esp)
  80ba33:	ff d0                	call   *%eax

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (p == NULL) {
  80ba35:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80ba38:	85 c0                	test   %eax,%eax
  80ba3a:	75 2b                	jne    80ba67 <netconn_recv+0x107>
      memp_free(MEMP_NETBUF, buf);
  80ba3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80ba3f:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ba43:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80ba4a:	e8 d3 8f ff ff       	call   804a22 <memp_free>
      /* Avoid to lose any previous error code */
      if (conn->err == ERR_OK) {
        conn->err = ERR_CLSD;
      }
      return NULL;
  80ba4f:	b8 00 00 00 00       	mov    $0x0,%eax

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (p == NULL) {
      memp_free(MEMP_NETBUF, buf);
      /* Avoid to lose any previous error code */
      if (conn->err == ERR_OK) {
  80ba54:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
  80ba58:	0f 85 a1 00 00 00    	jne    80baff <netconn_recv+0x19f>
        conn->err = ERR_CLSD;
  80ba5e:	c6 43 0c f9          	movb   $0xf9,0xc(%ebx)
  80ba62:	e9 98 00 00 00       	jmp    80baff <netconn_recv+0x19f>
      }
      return NULL;
    }

    buf->p = p;
  80ba67:	8b 55 e0             	mov    -0x20(%ebp),%edx
  80ba6a:	89 02                	mov    %eax,(%edx)
    buf->ptr = p;
  80ba6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80ba6f:	8b 55 dc             	mov    -0x24(%ebp),%edx
  80ba72:	89 50 04             	mov    %edx,0x4(%eax)
    buf->port = 0;
  80ba75:	66 c7 40 0c 00 00    	movw   $0x0,0xc(%eax)
    buf->addr = NULL;
  80ba7b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    /* Let the stack know that we have taken the data. */
    msg.function = do_recv;
  80ba82:	c7 45 e4 22 cc 80 00 	movl   $0x80cc22,-0x1c(%ebp)
    msg.msg.conn = conn;
  80ba89:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    if (buf != NULL) {
  80ba8c:	85 c0                	test   %eax,%eax
  80ba8e:	74 0c                	je     80ba9c <netconn_recv+0x13c>
      msg.msg.msg.r.len = buf->p->tot_len;
  80ba90:	8b 00                	mov    (%eax),%eax
  80ba92:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80ba96:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  80ba9a:	eb 06                	jmp    80baa2 <netconn_recv+0x142>
    } else {
      msg.msg.msg.r.len = 1;
  80ba9c:	66 c7 45 ec 01 00    	movw   $0x1,-0x14(%ebp)
    }
    TCPIP_APIMSG(&msg);
  80baa2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80baa5:	89 04 24             	mov    %eax,(%esp)
  80baa8:	e8 5e 6c ff ff       	call   80270b <tcpip_apimsg>
  80baad:	eb 46                	jmp    80baf5 <netconn_recv+0x195>
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(conn->recvmbox, (void *)&buf, conn->recv_timeout)==SYS_ARCH_TIMEOUT) {
      buf = NULL;
    }
#else
    sys_arch_mbox_fetch(conn->recvmbox, (void *)&buf, 0);
  80baaf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80bab6:	00 
  80bab7:	8d 55 e0             	lea    -0x20(%ebp),%edx
  80baba:	89 54 24 04          	mov    %edx,0x4(%esp)
  80babe:	89 04 24             	mov    %eax,(%esp)
  80bac1:	e8 b2 f0 ff ff       	call   80ab78 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
    if (buf!=NULL) {
  80bac6:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80bac9:	85 c0                	test   %eax,%eax
  80bacb:	74 28                	je     80baf5 <netconn_recv+0x195>
      SYS_ARCH_DEC(conn->recv_avail, buf->p->tot_len);
  80bacd:	8b 10                	mov    (%eax),%edx
  80bacf:	0f b7 52 08          	movzwl 0x8(%edx),%edx
  80bad3:	66 29 53 20          	sub    %dx,0x20(%ebx)
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, buf->p->tot_len);
  80bad7:	8b 53 2c             	mov    0x2c(%ebx),%edx
  80bada:	85 d2                	test   %edx,%edx
  80badc:	74 17                	je     80baf5 <netconn_recv+0x195>
  80bade:	8b 00                	mov    (%eax),%eax
  80bae0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80bae4:	89 44 24 08          	mov    %eax,0x8(%esp)
  80bae8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80baef:	00 
  80baf0:	89 1c 24             	mov    %ebx,(%esp)
  80baf3:	ff d2                	call   *%edx
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv: received %p (err %d)\n", (void *)buf, conn->err));

  return buf;
  80baf5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80baf8:	eb 05                	jmp    80baff <netconn_recv+0x19f>
    conn->err = ERR_CONN;
    return NULL;
  }

  if (ERR_IS_FATAL(conn->err)) {
    return NULL;
  80bafa:	b8 00 00 00 00       	mov    $0x0,%eax
  }

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv: received %p (err %d)\n", (void *)buf, conn->err));

  return buf;
}
  80baff:	83 c4 34             	add    $0x34,%esp
  80bb02:	5b                   	pop    %ebx
  80bb03:	5d                   	pop    %ebp
  80bb04:	c3                   	ret    

0080bb05 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  80bb05:	55                   	push   %ebp
  80bb06:	89 e5                	mov    %esp,%ebp
  80bb08:	53                   	push   %ebx
  80bb09:	83 ec 34             	sub    $0x34,%esp
  80bb0c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  80bb0f:	85 db                	test   %ebx,%ebx
  80bb11:	75 1c                	jne    80bb2f <netconn_send+0x2a>
  80bb13:	c7 44 24 08 9a 3d 81 	movl   $0x813d9a,0x8(%esp)
  80bb1a:	00 
  80bb1b:	c7 44 24 04 b9 01 00 	movl   $0x1b9,0x4(%esp)
  80bb22:	00 
  80bb23:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80bb2a:	e8 5f 35 00 00       	call   80f08e <_panic>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %d bytes\n", buf->p->tot_len));
  msg.function = do_send;
  80bb2f:	c7 45 e4 6a cb 80 00 	movl   $0x80cb6a,-0x1c(%ebp)
  msg.msg.conn = conn;
  80bb36:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  msg.msg.msg.b = buf;
  80bb39:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bb3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  TCPIP_APIMSG(&msg);
  80bb3f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80bb42:	89 04 24             	mov    %eax,(%esp)
  80bb45:	e8 c1 6b ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80bb4a:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80bb4e:	83 c4 34             	add    $0x34,%esp
  80bb51:	5b                   	pop    %ebx
  80bb52:	5d                   	pop    %ebp
  80bb53:	c3                   	ret    

0080bb54 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, struct ip_addr *addr, u16_t port)
{
  80bb54:	55                   	push   %ebp
  80bb55:	89 e5                	mov    %esp,%ebp
  80bb57:	83 ec 18             	sub    $0x18,%esp
  80bb5a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bb5d:	8b 55 14             	mov    0x14(%ebp),%edx
  if (buf != NULL) {
  80bb60:	85 c0                	test   %eax,%eax
  80bb62:	74 1b                	je     80bb7f <netconn_sendto+0x2b>
    buf->addr = addr;
  80bb64:	8b 4d 10             	mov    0x10(%ebp),%ecx
  80bb67:	89 48 08             	mov    %ecx,0x8(%eax)
    buf->port = port;
  80bb6a:	66 89 50 0c          	mov    %dx,0xc(%eax)
    return netconn_send(conn, buf);
  80bb6e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80bb72:	8b 45 08             	mov    0x8(%ebp),%eax
  80bb75:	89 04 24             	mov    %eax,(%esp)
  80bb78:	e8 88 ff ff ff       	call   80bb05 <netconn_send>
  80bb7d:	eb 05                	jmp    80bb84 <netconn_sendto+0x30>
  }
  return ERR_VAL;
  80bb7f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
}
  80bb84:	c9                   	leave  
  80bb85:	c3                   	ret    

0080bb86 <netconn_write>:
 * - NETCONN_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write(struct netconn *conn, const void *dataptr, int size, u8_t apiflags)
{
  80bb86:	55                   	push   %ebp
  80bb87:	89 e5                	mov    %esp,%ebp
  80bb89:	53                   	push   %ebx
  80bb8a:	83 ec 34             	sub    $0x34,%esp
  80bb8d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80bb90:	8b 45 14             	mov    0x14(%ebp),%eax
  struct api_msg msg;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  80bb93:	85 db                	test   %ebx,%ebx
  80bb95:	75 1c                	jne    80bbb3 <netconn_write+0x2d>
  80bb97:	c7 44 24 08 b5 3d 81 	movl   $0x813db5,0x8(%esp)
  80bb9e:	00 
  80bb9f:	c7 44 24 04 d3 01 00 	movl   $0x1d3,0x4(%esp)
  80bba6:	00 
  80bba7:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80bbae:	e8 db 34 00 00       	call   80f08e <_panic>
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
  80bbb3:	83 3b 10             	cmpl   $0x10,(%ebx)
  80bbb6:	74 1c                	je     80bbd4 <netconn_write+0x4e>
  80bbb8:	c7 44 24 08 30 3c 81 	movl   $0x813c30,0x8(%esp)
  80bbbf:	00 
  80bbc0:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
  80bbc7:	00 
  80bbc8:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80bbcf:	e8 ba 34 00 00       	call   80f08e <_panic>

  msg.function = do_write;
  80bbd4:	c7 45 e4 63 cc 80 00 	movl   $0x80cc63,-0x1c(%ebp)
  msg.msg.conn = conn;
  80bbdb:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  msg.msg.msg.w.dataptr = dataptr;
  80bbde:	8b 55 0c             	mov    0xc(%ebp),%edx
  80bbe1:	89 55 ec             	mov    %edx,-0x14(%ebp)
  msg.msg.msg.w.apiflags = apiflags;
  80bbe4:	88 45 f4             	mov    %al,-0xc(%ebp)
  msg.msg.msg.w.len = size;
  80bbe7:	8b 45 10             	mov    0x10(%ebp),%eax
  80bbea:	89 45 f0             	mov    %eax,-0x10(%ebp)
  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&msg);
  80bbed:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80bbf0:	89 04 24             	mov    %eax,(%esp)
  80bbf3:	e8 13 6b ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80bbf8:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80bbfc:	83 c4 34             	add    $0x34,%esp
  80bbff:	5b                   	pop    %ebx
  80bc00:	5d                   	pop    %ebp
  80bc01:	c3                   	ret    

0080bc02 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  80bc02:	55                   	push   %ebp
  80bc03:	89 e5                	mov    %esp,%ebp
  80bc05:	53                   	push   %ebx
  80bc06:	83 ec 34             	sub    $0x34,%esp
  80bc09:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  80bc0c:	85 db                	test   %ebx,%ebx
  80bc0e:	75 1c                	jne    80bc2c <netconn_close+0x2a>
  80bc10:	c7 44 24 08 d1 3d 81 	movl   $0x813dd1,0x8(%esp)
  80bc17:	00 
  80bc18:	c7 44 24 04 ed 01 00 	movl   $0x1ed,0x4(%esp)
  80bc1f:	00 
  80bc20:	c7 04 24 52 3c 81 00 	movl   $0x813c52,(%esp)
  80bc27:	e8 62 34 00 00       	call   80f08e <_panic>

  msg.function = do_close;
  80bc2c:	c7 45 e4 71 cd 80 00 	movl   $0x80cd71,-0x1c(%ebp)
  msg.msg.conn = conn;
  80bc33:	89 5d e8             	mov    %ebx,-0x18(%ebp)
  tcpip_apimsg(&msg);
  80bc36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80bc39:	89 04 24             	mov    %eax,(%esp)
  80bc3c:	e8 ca 6a ff ff       	call   80270b <tcpip_apimsg>
  return conn->err;
  80bc41:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
}
  80bc45:	83 c4 34             	add    $0x34,%esp
  80bc48:	5b                   	pop    %ebx
  80bc49:	5d                   	pop    %ebp
  80bc4a:	c3                   	ret    
  80bc4b:	66 90                	xchg   %ax,%ax
  80bc4d:	66 90                	xchg   %ax,%ax
  80bc4f:	90                   	nop

0080bc50 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  80bc50:	55                   	push   %ebp
  80bc51:	89 e5                	mov    %esp,%ebp
  80bc53:	56                   	push   %esi
  80bc54:	53                   	push   %ebx
  80bc55:	83 ec 10             	sub    $0x10,%esp
  80bc58:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80bc5b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bc5e:	8b 75 10             	mov    0x10(%ebp),%esi
  80bc61:	8b 55 14             	mov    0x14(%ebp),%edx
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  80bc64:	85 c0                	test   %eax,%eax
  80bc66:	75 1c                	jne    80bc84 <recv_tcp+0x34>
  80bc68:	c7 44 24 08 f0 3d 81 	movl   $0x813df0,0x8(%esp)
  80bc6f:	00 
  80bc70:	c7 44 24 04 c1 00 00 	movl   $0xc1,0x4(%esp)
  80bc77:	00 
  80bc78:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bc7f:	e8 0a 34 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  80bc84:	85 db                	test   %ebx,%ebx
  80bc86:	75 1c                	jne    80bca4 <recv_tcp+0x54>
  80bc88:	c7 44 24 08 14 3e 81 	movl   $0x813e14,0x8(%esp)
  80bc8f:	00 
  80bc90:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
  80bc97:	00 
  80bc98:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bc9f:	e8 ea 33 00 00       	call   80f08e <_panic>
  conn = arg;
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  80bca4:	39 43 08             	cmp    %eax,0x8(%ebx)
  80bca7:	74 1c                	je     80bcc5 <recv_tcp+0x75>
  80bca9:	c7 44 24 08 51 3f 81 	movl   $0x813f51,0x8(%esp)
  80bcb0:	00 
  80bcb1:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
  80bcb8:	00 
  80bcb9:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bcc0:	e8 c9 33 00 00       	call   80f08e <_panic>

  if ((conn == NULL) || (conn->recvmbox == SYS_MBOX_NULL)) {
  80bcc5:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80bcc9:	74 49                	je     80bd14 <recv_tcp+0xc4>
    return ERR_VAL;
  }

  conn->err = err;
  80bccb:	88 53 0c             	mov    %dl,0xc(%ebx)
  if (p != NULL) {
  80bcce:	85 f6                	test   %esi,%esi
  80bcd0:	74 0a                	je     80bcdc <recv_tcp+0x8c>
    len = p->tot_len;
  80bcd2:	0f b7 56 08          	movzwl 0x8(%esi),%edx
    SYS_ARCH_INC(conn->recv_avail, len);
  80bcd6:	66 01 53 20          	add    %dx,0x20(%ebx)
  80bcda:	eb 05                	jmp    80bce1 <recv_tcp+0x91>
  } else {
    len = 0;
  80bcdc:	ba 00 00 00 00       	mov    $0x0,%edx
  }
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  80bce1:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80bce4:	85 c0                	test   %eax,%eax
  80bce6:	74 14                	je     80bcfc <recv_tcp+0xac>
  80bce8:	0f b7 d2             	movzwl %dx,%edx
  80bceb:	89 54 24 08          	mov    %edx,0x8(%esp)
  80bcef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80bcf6:	00 
  80bcf7:	89 1c 24             	mov    %ebx,(%esp)
  80bcfa:	ff d0                	call   *%eax
  if (sys_mbox_trypost(conn->recvmbox, p) != ERR_OK) {
  80bcfc:	89 74 24 04          	mov    %esi,0x4(%esp)
  80bd00:	8b 43 14             	mov    0x14(%ebx),%eax
  80bd03:	89 04 24             	mov    %eax,(%esp)
  80bd06:	e8 61 ed ff ff       	call   80aa6c <sys_mbox_trypost>
  80bd0b:	84 c0                	test   %al,%al
  80bd0d:	0f 95 c0             	setne  %al
    return ERR_MEM;
  80bd10:	f7 d8                	neg    %eax
  80bd12:	eb 05                	jmp    80bd19 <recv_tcp+0xc9>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = arg;
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if ((conn == NULL) || (conn->recvmbox == SYS_MBOX_NULL)) {
    return ERR_VAL;
  80bd14:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  if (sys_mbox_trypost(conn->recvmbox, p) != ERR_OK) {
    return ERR_MEM;
  }

  return ERR_OK;
}
  80bd19:	83 c4 10             	add    $0x10,%esp
  80bd1c:	5b                   	pop    %ebx
  80bd1d:	5e                   	pop    %esi
  80bd1e:	5d                   	pop    %ebp
  80bd1f:	c3                   	ret    

0080bd20 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   struct ip_addr *addr, u16_t port)
{
  80bd20:	55                   	push   %ebp
  80bd21:	89 e5                	mov    %esp,%ebp
  80bd23:	57                   	push   %edi
  80bd24:	56                   	push   %esi
  80bd25:	53                   	push   %ebx
  80bd26:	83 ec 1c             	sub    $0x1c,%esp
  80bd29:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80bd2c:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bd2f:	8b 7d 10             	mov    0x10(%ebp),%edi
  80bd32:	8b 4d 18             	mov    0x18(%ebp),%ecx
  80bd35:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  80bd38:	85 c0                	test   %eax,%eax
  80bd3a:	75 1c                	jne    80bd58 <recv_udp+0x38>
  80bd3c:	c7 44 24 08 34 3e 81 	movl   $0x813e34,0x8(%esp)
  80bd43:	00 
  80bd44:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  80bd4b:	00 
  80bd4c:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bd53:	e8 36 33 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  80bd58:	85 db                	test   %ebx,%ebx
  80bd5a:	75 1c                	jne    80bd78 <recv_udp+0x58>
  80bd5c:	c7 44 24 08 58 3e 81 	movl   $0x813e58,0x8(%esp)
  80bd63:	00 
  80bd64:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
  80bd6b:	00 
  80bd6c:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bd73:	e8 16 33 00 00       	call   80f08e <_panic>
  conn = arg;
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  80bd78:	39 43 08             	cmp    %eax,0x8(%ebx)
  80bd7b:	74 1c                	je     80bd99 <recv_udp+0x79>
  80bd7d:	c7 44 24 08 6f 3f 81 	movl   $0x813f6f,0x8(%esp)
  80bd84:	00 
  80bd85:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
  80bd8c:	00 
  80bd8d:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bd94:	e8 f5 32 00 00       	call   80f08e <_panic>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || (conn->recvmbox == SYS_MBOX_NULL) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || (conn->recvmbox == SYS_MBOX_NULL)) {
  80bd99:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80bd9d:	75 0a                	jne    80bda9 <recv_udp+0x89>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  80bd9f:	89 3c 24             	mov    %edi,(%esp)
  80bda2:	e8 2d 90 ff ff       	call   804dd4 <pbuf_free>
    return;
  80bda7:	eb 6e                	jmp    80be17 <recv_udp+0xf7>
  }

  buf = memp_malloc(MEMP_NETBUF);
  80bda9:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80bdb0:	e8 0d 8c ff ff       	call   8049c2 <memp_malloc>
  80bdb5:	89 c6                	mov    %eax,%esi
  if (buf == NULL) {
  80bdb7:	85 c0                	test   %eax,%eax
  80bdb9:	75 0a                	jne    80bdc5 <recv_udp+0xa5>
    pbuf_free(p);
  80bdbb:	89 3c 24             	mov    %edi,(%esp)
  80bdbe:	e8 11 90 ff ff       	call   804dd4 <pbuf_free>
    return;
  80bdc3:	eb 52                	jmp    80be17 <recv_udp+0xf7>
  } else {
    buf->p = p;
  80bdc5:	89 38                	mov    %edi,(%eax)
    buf->ptr = p;
  80bdc7:	89 78 04             	mov    %edi,0x4(%eax)
    buf->addr = addr;
  80bdca:	8b 45 14             	mov    0x14(%ebp),%eax
  80bdcd:	89 46 08             	mov    %eax,0x8(%esi)
    buf->port = port;
  80bdd0:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  80bdd4:	66 89 46 0c          	mov    %ax,0xc(%esi)
  }

  SYS_ARCH_INC(conn->recv_avail, p->tot_len);
  80bdd8:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80bddc:	66 01 43 20          	add    %ax,0x20(%ebx)
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, p->tot_len);
  80bde0:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80bde3:	85 c0                	test   %eax,%eax
  80bde5:	74 15                	je     80bdfc <recv_udp+0xdc>
  80bde7:	0f b7 57 08          	movzwl 0x8(%edi),%edx
  80bdeb:	89 54 24 08          	mov    %edx,0x8(%esp)
  80bdef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80bdf6:	00 
  80bdf7:	89 1c 24             	mov    %ebx,(%esp)
  80bdfa:	ff d0                	call   *%eax
  if (sys_mbox_trypost(conn->recvmbox, buf) != ERR_OK) {
  80bdfc:	89 74 24 04          	mov    %esi,0x4(%esp)
  80be00:	8b 43 14             	mov    0x14(%ebx),%eax
  80be03:	89 04 24             	mov    %eax,(%esp)
  80be06:	e8 61 ec ff ff       	call   80aa6c <sys_mbox_trypost>
  80be0b:	84 c0                	test   %al,%al
  80be0d:	74 08                	je     80be17 <recv_udp+0xf7>
    netbuf_delete(buf);
  80be0f:	89 34 24             	mov    %esi,(%esp)
  80be12:	e8 15 6a ff ff       	call   80282c <netbuf_delete>
    return;
  }
}
  80be17:	83 c4 1c             	add    $0x1c,%esp
  80be1a:	5b                   	pop    %ebx
  80be1b:	5e                   	pop    %esi
  80be1c:	5f                   	pop    %edi
  80be1d:	5d                   	pop    %ebp
  80be1e:	c3                   	ret    

0080be1f <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    struct ip_addr *addr)
{
  80be1f:	55                   	push   %ebp
  80be20:	89 e5                	mov    %esp,%ebp
  80be22:	57                   	push   %edi
  80be23:	56                   	push   %esi
  80be24:	53                   	push   %ebx
  80be25:	83 ec 1c             	sub    $0x1c,%esp
  80be28:	8b 5d 08             	mov    0x8(%ebp),%ebx
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn != NULL) && (conn->recvmbox != SYS_MBOX_NULL) &&
      ((recv_avail + (int)(p->tot_len)) <= conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn != NULL) && (conn->recvmbox != SYS_MBOX_NULL)) {
  80be2b:	85 db                	test   %ebx,%ebx
  80be2d:	0f 84 cd 00 00 00    	je     80bf00 <recv_raw+0xe1>
  80be33:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80be37:	0f 84 c3 00 00 00    	je     80bf00 <recv_raw+0xe1>
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  80be3d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80be44:	00 
  80be45:	8b 45 10             	mov    0x10(%ebp),%eax
  80be48:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80be4c:	89 44 24 04          	mov    %eax,0x4(%esp)
  80be50:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  80be57:	e8 59 90 ff ff       	call   804eb5 <pbuf_alloc>
  80be5c:	89 c6                	mov    %eax,%esi
    if(q != NULL) {
  80be5e:	85 c0                	test   %eax,%eax
  80be60:	0f 84 9a 00 00 00    	je     80bf00 <recv_raw+0xe1>
      if (pbuf_copy(q, p) != ERR_OK) {
  80be66:	8b 45 10             	mov    0x10(%ebp),%eax
  80be69:	89 44 24 04          	mov    %eax,0x4(%esp)
  80be6d:	89 34 24             	mov    %esi,(%esp)
  80be70:	e8 6f 95 ff ff       	call   8053e4 <pbuf_copy>
  80be75:	84 c0                	test   %al,%al
  80be77:	74 73                	je     80beec <recv_raw+0xcd>
        pbuf_free(q);
  80be79:	89 34 24             	mov    %esi,(%esp)
  80be7c:	e8 53 8f ff ff       	call   804dd4 <pbuf_free>
  80be81:	eb 7d                	jmp    80bf00 <recv_raw+0xe1>
    }

    if(q != NULL) {
      buf = memp_malloc(MEMP_NETBUF);
      if (buf == NULL) {
        pbuf_free(q);
  80be83:	89 34 24             	mov    %esi,(%esp)
  80be86:	e8 49 8f ff ff       	call   804dd4 <pbuf_free>
        return 0;
  80be8b:	90                   	nop
  80be8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  80be90:	eb 6e                	jmp    80bf00 <recv_raw+0xe1>
      }

      buf->p = q;
  80be92:	89 37                	mov    %esi,(%edi)
      buf->ptr = q;
  80be94:	89 77 04             	mov    %esi,0x4(%edi)
      buf->addr = &(((struct ip_hdr*)(q->payload))->src);
  80be97:	8b 46 04             	mov    0x4(%esi),%eax
  80be9a:	83 c0 0c             	add    $0xc,%eax
  80be9d:	89 47 08             	mov    %eax,0x8(%edi)
      buf->port = pcb->protocol;
  80bea0:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bea3:	0f b6 40 10          	movzbl 0x10(%eax),%eax
  80bea7:	66 89 47 0c          	mov    %ax,0xc(%edi)

      SYS_ARCH_INC(conn->recv_avail, q->tot_len);
  80beab:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80beaf:	66 01 43 20          	add    %ax,0x20(%ebx)
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, q->tot_len);
  80beb3:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80beb6:	85 c0                	test   %eax,%eax
  80beb8:	74 15                	je     80becf <recv_raw+0xb0>
  80beba:	0f b7 56 08          	movzwl 0x8(%esi),%edx
  80bebe:	89 54 24 08          	mov    %edx,0x8(%esp)
  80bec2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80bec9:	00 
  80beca:	89 1c 24             	mov    %ebx,(%esp)
  80becd:	ff d0                	call   *%eax
      if (sys_mbox_trypost(conn->recvmbox, buf) != ERR_OK) {
  80becf:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80bed3:	8b 43 14             	mov    0x14(%ebx),%eax
  80bed6:	89 04 24             	mov    %eax,(%esp)
  80bed9:	e8 8e eb ff ff       	call   80aa6c <sys_mbox_trypost>
  80bede:	84 c0                	test   %al,%al
  80bee0:	74 1e                	je     80bf00 <recv_raw+0xe1>
        netbuf_delete(buf);
  80bee2:	89 3c 24             	mov    %edi,(%esp)
  80bee5:	e8 42 69 ff ff       	call   80282c <netbuf_delete>
  80beea:	eb 14                	jmp    80bf00 <recv_raw+0xe1>
        q = NULL;
      }
    }

    if(q != NULL) {
      buf = memp_malloc(MEMP_NETBUF);
  80beec:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80bef3:	e8 ca 8a ff ff       	call   8049c2 <memp_malloc>
  80bef8:	89 c7                	mov    %eax,%edi
      if (buf == NULL) {
  80befa:	85 c0                	test   %eax,%eax
  80befc:	75 94                	jne    80be92 <recv_raw+0x73>
  80befe:	eb 83                	jmp    80be83 <recv_raw+0x64>
      }
    }
  }

  return 0; /* do not eat the packet */
}
  80bf00:	b8 00 00 00 00       	mov    $0x0,%eax
  80bf05:	83 c4 1c             	add    $0x1c,%esp
  80bf08:	5b                   	pop    %ebx
  80bf09:	5e                   	pop    %esi
  80bf0a:	5f                   	pop    %edi
  80bf0b:	5d                   	pop    %ebp
  80bf0c:	c3                   	ret    

0080bf0d <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  80bf0d:	55                   	push   %ebp
  80bf0e:	89 e5                	mov    %esp,%ebp
  80bf10:	53                   	push   %ebx
  80bf11:	83 ec 14             	sub    $0x14,%esp
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  80bf14:	8b 58 08             	mov    0x8(%eax),%ebx
  tcp_arg(pcb, conn);
  80bf17:	89 44 24 04          	mov    %eax,0x4(%esp)
  80bf1b:	89 1c 24             	mov    %ebx,(%esp)
  80bf1e:	e8 49 9f ff ff       	call   805e6c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  80bf23:	c7 44 24 04 50 bc 80 	movl   $0x80bc50,0x4(%esp)
  80bf2a:	00 
  80bf2b:	89 1c 24             	mov    %ebx,(%esp)
  80bf2e:	e8 47 9f ff ff       	call   805e7a <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  80bf33:	c7 44 24 04 3c c4 80 	movl   $0x80c43c,0x4(%esp)
  80bf3a:	00 
  80bf3b:	89 1c 24             	mov    %ebx,(%esp)
  80bf3e:	e8 48 9f ff ff       	call   805e8b <tcp_sent>
  tcp_poll(pcb, poll_tcp, 4);
  80bf43:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80bf4a:	00 
  80bf4b:	c7 44 24 04 ee c3 80 	movl   $0x80c3ee,0x4(%esp)
  80bf52:	00 
  80bf53:	89 1c 24             	mov    %ebx,(%esp)
  80bf56:	e8 60 9f ff ff       	call   805ebb <tcp_poll>
  tcp_err(pcb, err_tcp);
  80bf5b:	c7 44 24 04 b9 bf 80 	movl   $0x80bfb9,0x4(%esp)
  80bf62:	00 
  80bf63:	89 1c 24             	mov    %ebx,(%esp)
  80bf66:	e8 31 9f ff ff       	call   805e9c <tcp_err>
}
  80bf6b:	83 c4 14             	add    $0x14,%esp
  80bf6e:	5b                   	pop    %ebx
  80bf6f:	5d                   	pop    %ebp
  80bf70:	c3                   	ret    

0080bf71 <do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  80bf71:	55                   	push   %ebp
  80bf72:	89 e5                	mov    %esp,%ebp
  80bf74:	53                   	push   %ebx
  80bf75:	83 ec 14             	sub    $0x14,%esp
  80bf78:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80bf7b:	8b 45 10             	mov    0x10(%ebp),%eax

  LWIP_UNUSED_ARG(pcb);

  conn = arg;

  if (conn == NULL) {
  80bf7e:	85 db                	test   %ebx,%ebx
  80bf80:	74 2c                	je     80bfae <do_connected+0x3d>
    return ERR_VAL;
  }

  conn->err = err;
  80bf82:	88 43 0c             	mov    %al,0xc(%ebx)
  if ((conn->type == NETCONN_TCP) && (err == ERR_OK)) {
  80bf85:	83 3b 10             	cmpl   $0x10,(%ebx)
  80bf88:	75 0b                	jne    80bf95 <do_connected+0x24>
  80bf8a:	84 c0                	test   %al,%al
  80bf8c:	75 07                	jne    80bf95 <do_connected+0x24>
    setup_tcp(conn);
  80bf8e:	89 d8                	mov    %ebx,%eax
  80bf90:	e8 78 ff ff ff       	call   80bf0d <setup_tcp>
  }
  conn->state = NETCONN_NONE;
  80bf95:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  sys_sem_signal(conn->op_completed);
  80bf9c:	8b 43 10             	mov    0x10(%ebx),%eax
  80bf9f:	89 04 24             	mov    %eax,(%esp)
  80bfa2:	e8 39 e9 ff ff       	call   80a8e0 <sys_sem_signal>
  return ERR_OK;
  80bfa7:	b8 00 00 00 00       	mov    $0x0,%eax
  80bfac:	eb 05                	jmp    80bfb3 <do_connected+0x42>
  LWIP_UNUSED_ARG(pcb);

  conn = arg;

  if (conn == NULL) {
    return ERR_VAL;
  80bfae:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    setup_tcp(conn);
  }
  conn->state = NETCONN_NONE;
  sys_sem_signal(conn->op_completed);
  return ERR_OK;
}
  80bfb3:	83 c4 14             	add    $0x14,%esp
  80bfb6:	5b                   	pop    %ebx
  80bfb7:	5d                   	pop    %ebp
  80bfb8:	c3                   	ret    

0080bfb9 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  80bfb9:	55                   	push   %ebp
  80bfba:	89 e5                	mov    %esp,%ebp
  80bfbc:	53                   	push   %ebx
  80bfbd:	83 ec 14             	sub    $0x14,%esp
  80bfc0:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80bfc3:	8b 45 0c             	mov    0xc(%ebp),%eax
  struct netconn *conn;

  conn = arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  80bfc6:	85 db                	test   %ebx,%ebx
  80bfc8:	75 1c                	jne    80bfe6 <err_tcp+0x2d>
  80bfca:	c7 44 24 08 8d 3f 81 	movl   $0x813f8d,0x8(%esp)
  80bfd1:	00 
  80bfd2:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
  80bfd9:	00 
  80bfda:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80bfe1:	e8 a8 30 00 00       	call   80f08e <_panic>

  conn->pcb.tcp = NULL;
  80bfe6:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)

  conn->err = err;
  80bfed:	88 43 0c             	mov    %al,0xc(%ebx)
  if (conn->recvmbox != SYS_MBOX_NULL) {
  80bff0:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80bff4:	74 2f                	je     80c025 <err_tcp+0x6c>
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  80bff6:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80bff9:	85 c0                	test   %eax,%eax
  80bffb:	74 15                	je     80c012 <err_tcp+0x59>
  80bffd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c004:	00 
  80c005:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c00c:	00 
  80c00d:	89 1c 24             	mov    %ebx,(%esp)
  80c010:	ff d0                	call   *%eax
    sys_mbox_post(conn->recvmbox, NULL);
  80c012:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c019:	00 
  80c01a:	8b 43 14             	mov    0x14(%ebx),%eax
  80c01d:	89 04 24             	mov    %eax,(%esp)
  80c020:	e8 11 eb ff ff       	call   80ab36 <sys_mbox_post>
  }
  if (conn->op_completed != SYS_SEM_NULL && conn->state == NETCONN_CONNECT) {
  80c025:	8b 43 10             	mov    0x10(%ebx),%eax
  80c028:	83 f8 ff             	cmp    $0xffffffff,%eax
  80c02b:	74 15                	je     80c042 <err_tcp+0x89>
  80c02d:	83 7b 04 03          	cmpl   $0x3,0x4(%ebx)
  80c031:	75 0f                	jne    80c042 <err_tcp+0x89>
    conn->state = NETCONN_NONE;
  80c033:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    sys_sem_signal(conn->op_completed);
  80c03a:	89 04 24             	mov    %eax,(%esp)
  80c03d:	e8 9e e8 ff ff       	call   80a8e0 <sys_sem_signal>
  }
  if (conn->acceptmbox != SYS_MBOX_NULL) {
  80c042:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80c046:	74 2f                	je     80c077 <err_tcp+0xbe>
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  80c048:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c04b:	85 c0                	test   %eax,%eax
  80c04d:	74 15                	je     80c064 <err_tcp+0xab>
  80c04f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c056:	00 
  80c057:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c05e:	00 
  80c05f:	89 1c 24             	mov    %ebx,(%esp)
  80c062:	ff d0                	call   *%eax
    sys_mbox_post(conn->acceptmbox, NULL);
  80c064:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c06b:	00 
  80c06c:	8b 43 18             	mov    0x18(%ebx),%eax
  80c06f:	89 04 24             	mov    %eax,(%esp)
  80c072:	e8 bf ea ff ff       	call   80ab36 <sys_mbox_post>
  }
  if ((conn->state == NETCONN_WRITE) || (conn->state == NETCONN_CLOSE)) {
  80c077:	8b 43 04             	mov    0x4(%ebx),%eax
  80c07a:	83 f8 04             	cmp    $0x4,%eax
  80c07d:	74 05                	je     80c084 <err_tcp+0xcb>
  80c07f:	83 f8 01             	cmp    $0x1,%eax
  80c082:	75 12                	jne    80c096 <err_tcp+0xdd>
    /* calling do_writemore/do_close_internal is not necessary
       since the pcb has already been deleted! */
    conn->state = NETCONN_NONE;
  80c084:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    /* wake up the waiting task */
    sys_sem_signal(conn->op_completed);
  80c08b:	8b 43 10             	mov    0x10(%ebx),%eax
  80c08e:	89 04 24             	mov    %eax,(%esp)
  80c091:	e8 4a e8 ff ff       	call   80a8e0 <sys_sem_signal>
  }
}
  80c096:	83 c4 14             	add    $0x14,%esp
  80c099:	5b                   	pop    %ebx
  80c09a:	5d                   	pop    %ebp
  80c09b:	c3                   	ret    

0080c09c <do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
do_writemore(struct netconn *conn)
{
  80c09c:	55                   	push   %ebp
  80c09d:	89 e5                	mov    %esp,%ebp
  80c09f:	57                   	push   %edi
  80c0a0:	56                   	push   %esi
  80c0a1:	53                   	push   %ebx
  80c0a2:	83 ec 1c             	sub    $0x1c,%esp
  80c0a5:	89 c3                	mov    %eax,%ebx
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;

  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  80c0a7:	83 78 04 01          	cmpl   $0x1,0x4(%eax)
  80c0ab:	74 1c                	je     80c0c9 <do_writemore+0x2d>
  80c0ad:	c7 44 24 08 9a 3f 81 	movl   $0x813f9a,0x8(%esp)
  80c0b4:	00 
  80c0b5:	c7 44 24 04 b8 03 00 	movl   $0x3b8,0x4(%esp)
  80c0bc:	00 
  80c0bd:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c0c4:	e8 c5 2f 00 00       	call   80f08e <_panic>

  dataptr = (u8_t*)conn->write_msg->msg.w.dataptr + conn->write_offset;
  80c0c9:	8b 40 24             	mov    0x24(%eax),%eax
  80c0cc:	8b 53 28             	mov    0x28(%ebx),%edx
  80c0cf:	89 d1                	mov    %edx,%ecx
  80c0d1:	03 48 04             	add    0x4(%eax),%ecx
  if ((conn->write_msg->msg.w.len - conn->write_offset > 0xffff)) { /* max_u16_t */
  80c0d4:	8b 78 08             	mov    0x8(%eax),%edi
  80c0d7:	89 fe                	mov    %edi,%esi
  80c0d9:	29 d6                	sub    %edx,%esi
    len = 0xffff;
#if LWIP_TCPIP_CORE_LOCKING
    conn->write_delayed = 1;
#endif
  } else {
    len = conn->write_msg->msg.w.len - conn->write_offset;
  80c0db:	29 d7                	sub    %edx,%edi
  80c0dd:	81 fe ff ff 00 00    	cmp    $0xffff,%esi
  80c0e3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80c0e8:	0f 4f fa             	cmovg  %edx,%edi
  }
  available = tcp_sndbuf(conn->pcb.tcp);
  80c0eb:	8b 53 08             	mov    0x8(%ebx),%edx
  80c0ee:	0f b7 72 6e          	movzwl 0x6e(%edx),%esi
  80c0f2:	66 39 f7             	cmp    %si,%di
  80c0f5:	0f 46 f7             	cmovbe %edi,%esi
#if LWIP_TCPIP_CORE_LOCKING
    conn->write_delayed = 1;
#endif
  }

  err = tcp_write(conn->pcb.tcp, dataptr, len, conn->write_msg->msg.w.apiflags);
  80c0f8:	0f b7 f6             	movzwl %si,%esi
  80c0fb:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
  80c0ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80c103:	89 74 24 08          	mov    %esi,0x8(%esp)
  80c107:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80c10b:	89 14 24             	mov    %edx,(%esp)
  80c10e:	e8 c2 c5 ff ff       	call   8086d5 <tcp_write>
  LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->write_msg->msg.w.len));
  80c113:	89 f2                	mov    %esi,%edx
  80c115:	03 53 28             	add    0x28(%ebx),%edx
  80c118:	8b 4b 24             	mov    0x24(%ebx),%ecx
  80c11b:	3b 51 08             	cmp    0x8(%ecx),%edx
  80c11e:	7e 1c                	jle    80c13c <do_writemore+0xa0>
  80c120:	c7 44 24 08 b7 3f 81 	movl   $0x813fb7,0x8(%esp)
  80c127:	00 
  80c128:	c7 44 24 04 cd 03 00 	movl   $0x3cd,0x4(%esp)
  80c12f:	00 
  80c130:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c137:	e8 52 2f 00 00       	call   80f08e <_panic>
  if (err == ERR_OK) {
  80c13c:	84 c0                	test   %al,%al
  80c13e:	75 6f                	jne    80c1af <do_writemore+0x113>
    conn->write_offset += len;
  80c140:	89 53 28             	mov    %edx,0x28(%ebx)
do_writemore(struct netconn *conn)
{
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  80c143:	bf 00 00 00 00       	mov    $0x0,%edi

  err = tcp_write(conn->pcb.tcp, dataptr, len, conn->write_msg->msg.w.apiflags);
  LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->write_msg->msg.w.len));
  if (err == ERR_OK) {
    conn->write_offset += len;
    if (conn->write_offset == conn->write_msg->msg.w.len) {
  80c148:	3b 51 08             	cmp    0x8(%ecx),%edx
  80c14b:	75 13                	jne    80c160 <do_writemore+0xc4>
      /* everything was written */
      write_finished = 1;
      conn->write_msg = NULL;
  80c14d:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
      conn->write_offset = 0;
  80c154:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%ebx)
  LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->write_msg->msg.w.len));
  if (err == ERR_OK) {
    conn->write_offset += len;
    if (conn->write_offset == conn->write_msg->msg.w.len) {
      /* everything was written */
      write_finished = 1;
  80c15b:	bf 01 00 00 00       	mov    $0x1,%edi
      conn->write_msg = NULL;
      conn->write_offset = 0;
    }
    err = tcp_output_nagle(conn->pcb.tcp);
  80c160:	8b 43 08             	mov    0x8(%ebx),%eax
  80c163:	83 78 78 00          	cmpl   $0x0,0x78(%eax)
  80c167:	74 12                	je     80c17b <do_writemore+0xdf>
  80c169:	f6 40 20 40          	testb  $0x40,0x20(%eax)
  80c16d:	75 0c                	jne    80c17b <do_writemore+0xdf>
  80c16f:	8b 50 74             	mov    0x74(%eax),%edx
  80c172:	85 d2                	test   %edx,%edx
  80c174:	74 69                	je     80c1df <do_writemore+0x143>
  80c176:	83 3a 00             	cmpl   $0x0,(%edx)
  80c179:	74 64                	je     80c1df <do_writemore+0x143>
  80c17b:	89 04 24             	mov    %eax,(%esp)
  80c17e:	e8 be c5 ff ff       	call   808741 <tcp_output>
    conn->err = err;
  80c183:	88 43 0c             	mov    %al,0xc(%ebx)
    if ((err == ERR_OK) && (tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT)) {
  80c186:	84 c0                	test   %al,%al
  80c188:	75 3b                	jne    80c1c5 <do_writemore+0x129>
  80c18a:	8b 43 08             	mov    0x8(%ebx),%eax
  80c18d:	66 81 78 6e a0 2d    	cmpw   $0x2da0,0x6e(%eax)
  80c193:	77 30                	ja     80c1c5 <do_writemore+0x129>
      API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  80c195:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c198:	85 c0                	test   %eax,%eax
  80c19a:	74 29                	je     80c1c5 <do_writemore+0x129>
  80c19c:	89 74 24 08          	mov    %esi,0x8(%esp)
  80c1a0:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  80c1a7:	00 
  80c1a8:	89 1c 24             	mov    %ebx,(%esp)
  80c1ab:	ff d0                	call   *%eax
  80c1ad:	eb 16                	jmp    80c1c5 <do_writemore+0x129>
    }
  } else if (err == ERR_MEM) {
  80c1af:	3c ff                	cmp    $0xff,%al
  80c1b1:	75 0d                	jne    80c1c0 <do_writemore+0x124>
    /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
       we do NOT return to the application thread, since ERR_MEM is
       only a temporary error! */

    /* tcp_enqueue returned ERR_MEM, try tcp_output anyway */
    err = tcp_output(conn->pcb.tcp);
  80c1b3:	8b 43 08             	mov    0x8(%ebx),%eax
  80c1b6:	89 04 24             	mov    %eax,(%esp)
  80c1b9:	e8 83 c5 ff ff       	call   808741 <tcp_output>
  80c1be:	eb 25                	jmp    80c1e5 <do_writemore+0x149>
    conn->write_delayed = 1;
#endif
  } else {
    /* On errors != ERR_MEM, we don't try writing any more but return
       the error to the application thread. */
    conn->err = err;
  80c1c0:	88 43 0c             	mov    %al,0xc(%ebx)
  80c1c3:	eb 06                	jmp    80c1cb <do_writemore+0x12f>
    write_finished = 1;
  }

  if (write_finished) {
  80c1c5:	89 f8                	mov    %edi,%eax
  80c1c7:	84 c0                	test   %al,%al
  80c1c9:	74 1a                	je     80c1e5 <do_writemore+0x149>
    /* everything was written: set back connection state
       and back to application task */
    conn->state = NETCONN_NONE;
  80c1cb:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
#if LWIP_TCPIP_CORE_LOCKING
    if (conn->write_delayed != 0)
#endif
    {
      sys_sem_signal(conn->op_completed);
  80c1d2:	8b 43 10             	mov    0x10(%ebx),%eax
  80c1d5:	89 04 24             	mov    %eax,(%esp)
  80c1d8:	e8 03 e7 ff ff       	call   80a8e0 <sys_sem_signal>
  80c1dd:	eb 06                	jmp    80c1e5 <do_writemore+0x149>
      write_finished = 1;
      conn->write_msg = NULL;
      conn->write_offset = 0;
    }
    err = tcp_output_nagle(conn->pcb.tcp);
    conn->err = err;
  80c1df:	c6 43 0c 00          	movb   $0x0,0xc(%ebx)
  80c1e3:	eb a5                	jmp    80c18a <do_writemore+0xee>
#if LWIP_TCPIP_CORE_LOCKING
  else
    return ERR_MEM;
#endif
  return ERR_OK;
}
  80c1e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80c1ea:	83 c4 1c             	add    $0x1c,%esp
  80c1ed:	5b                   	pop    %ebx
  80c1ee:	5e                   	pop    %esi
  80c1ef:	5f                   	pop    %edi
  80c1f0:	5d                   	pop    %ebp
  80c1f1:	c3                   	ret    

0080c1f2 <do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static void
do_close_internal(struct netconn *conn)
{
  80c1f2:	55                   	push   %ebp
  80c1f3:	89 e5                	mov    %esp,%ebp
  80c1f5:	53                   	push   %ebx
  80c1f6:	83 ec 14             	sub    $0x14,%esp
  80c1f9:	89 c3                	mov    %eax,%ebx
  err_t err;

  LWIP_ASSERT("invalid conn", (conn != NULL));
  80c1fb:	85 c0                	test   %eax,%eax
  80c1fd:	75 1c                	jne    80c21b <do_close_internal+0x29>
  80c1ff:	c7 44 24 08 a8 3d 81 	movl   $0x813da8,0x8(%esp)
  80c206:	00 
  80c207:	c7 44 24 04 53 02 00 	movl   $0x253,0x4(%esp)
  80c20e:	00 
  80c20f:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c216:	e8 73 2e 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("this is for tcp netconns only", (conn->type == NETCONN_TCP));
  80c21b:	83 38 10             	cmpl   $0x10,(%eax)
  80c21e:	74 1c                	je     80c23c <do_close_internal+0x4a>
  80c220:	c7 44 24 08 d5 3f 81 	movl   $0x813fd5,0x8(%esp)
  80c227:	00 
  80c228:	c7 44 24 04 54 02 00 	movl   $0x254,0x4(%esp)
  80c22f:	00 
  80c230:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c237:	e8 52 2e 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  80c23c:	83 78 04 04          	cmpl   $0x4,0x4(%eax)
  80c240:	74 1c                	je     80c25e <do_close_internal+0x6c>
  80c242:	c7 44 24 08 78 3e 81 	movl   $0x813e78,0x8(%esp)
  80c249:	00 
  80c24a:	c7 44 24 04 55 02 00 	movl   $0x255,0x4(%esp)
  80c251:	00 
  80c252:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c259:	e8 30 2e 00 00       	call   80f08e <_panic>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  80c25e:	8b 40 08             	mov    0x8(%eax),%eax
  80c261:	85 c0                	test   %eax,%eax
  80c263:	75 1c                	jne    80c281 <do_close_internal+0x8f>
  80c265:	c7 44 24 08 f3 3f 81 	movl   $0x813ff3,0x8(%esp)
  80c26c:	00 
  80c26d:	c7 44 24 04 56 02 00 	movl   $0x256,0x4(%esp)
  80c274:	00 
  80c275:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c27c:	e8 0d 2e 00 00       	call   80f08e <_panic>

  /* Set back some callback pointers */
  tcp_arg(conn->pcb.tcp, NULL);
  80c281:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c288:	00 
  80c289:	89 04 24             	mov    %eax,(%esp)
  80c28c:	e8 db 9b ff ff       	call   805e6c <tcp_arg>
  if (conn->pcb.tcp->state == LISTEN) {
  80c291:	8b 43 08             	mov    0x8(%ebx),%eax
  80c294:	83 78 10 01          	cmpl   $0x1,0x10(%eax)
  80c298:	75 12                	jne    80c2ac <do_close_internal+0xba>
    tcp_accept(conn->pcb.tcp, NULL);
  80c29a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c2a1:	00 
  80c2a2:	89 04 24             	mov    %eax,(%esp)
  80c2a5:	e8 03 9c ff ff       	call   805ead <tcp_accept>
  80c2aa:	eb 64                	jmp    80c310 <do_close_internal+0x11e>
  } else {
    tcp_recv(conn->pcb.tcp, NULL);
  80c2ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c2b3:	00 
  80c2b4:	89 04 24             	mov    %eax,(%esp)
  80c2b7:	e8 be 9b ff ff       	call   805e7a <tcp_recv>
    tcp_accept(conn->pcb.tcp, NULL);
  80c2bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c2c3:	00 
  80c2c4:	8b 43 08             	mov    0x8(%ebx),%eax
  80c2c7:	89 04 24             	mov    %eax,(%esp)
  80c2ca:	e8 de 9b ff ff       	call   805ead <tcp_accept>
    /* some callbacks have to be reset if tcp_close is not successful */
    tcp_sent(conn->pcb.tcp, NULL);
  80c2cf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c2d6:	00 
  80c2d7:	8b 43 08             	mov    0x8(%ebx),%eax
  80c2da:	89 04 24             	mov    %eax,(%esp)
  80c2dd:	e8 a9 9b ff ff       	call   805e8b <tcp_sent>
    tcp_poll(conn->pcb.tcp, NULL, 4);
  80c2e2:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80c2e9:	00 
  80c2ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c2f1:	00 
  80c2f2:	8b 43 08             	mov    0x8(%ebx),%eax
  80c2f5:	89 04 24             	mov    %eax,(%esp)
  80c2f8:	e8 be 9b ff ff       	call   805ebb <tcp_poll>
    tcp_err(conn->pcb.tcp, NULL);
  80c2fd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c304:	00 
  80c305:	8b 43 08             	mov    0x8(%ebx),%eax
  80c308:	89 04 24             	mov    %eax,(%esp)
  80c30b:	e8 8c 9b ff ff       	call   805e9c <tcp_err>
  }
  /* Try to close the connection */
  err = tcp_close(conn->pcb.tcp);
  80c310:	8b 43 08             	mov    0x8(%ebx),%eax
  80c313:	89 04 24             	mov    %eax,(%esp)
  80c316:	e8 1e 9d ff ff       	call   806039 <tcp_close>
  if (err == ERR_OK) {
  80c31b:	84 c0                	test   %al,%al
  80c31d:	75 57                	jne    80c376 <do_close_internal+0x184>
    /* Closing succeeded */
    conn->state = NETCONN_NONE;
  80c31f:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    /* Set back some callback pointers as conn is going away */
    conn->pcb.tcp = NULL;
  80c326:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    conn->err = ERR_OK;
  80c32d:	c6 43 0c 00          	movb   $0x0,0xc(%ebx)
    /* Trigger select() in socket layer. This send should something else so the
       errorfd is set, not the read and write fd! */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  80c331:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c334:	85 c0                	test   %eax,%eax
  80c336:	74 31                	je     80c369 <do_close_internal+0x177>
  80c338:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c33f:	00 
  80c340:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c347:	00 
  80c348:	89 1c 24             	mov    %ebx,(%esp)
  80c34b:	ff d0                	call   *%eax
    API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  80c34d:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c350:	85 c0                	test   %eax,%eax
  80c352:	74 15                	je     80c369 <do_close_internal+0x177>
  80c354:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c35b:	00 
  80c35c:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  80c363:	00 
  80c364:	89 1c 24             	mov    %ebx,(%esp)
  80c367:	ff d0                	call   *%eax
    /* wake up the application task */
    sys_sem_signal(conn->op_completed);
  80c369:	8b 43 10             	mov    0x10(%ebx),%eax
  80c36c:	89 04 24             	mov    %eax,(%esp)
  80c36f:	e8 6c e5 ff ff       	call   80a8e0 <sys_sem_signal>
  80c374:	eb 72                	jmp    80c3e8 <do_close_internal+0x1f6>
  } else {
    /* Closing failed, restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (conn->pcb.tcp->state != LISTEN));
  80c376:	8b 43 08             	mov    0x8(%ebx),%eax
  80c379:	83 78 10 01          	cmpl   $0x1,0x10(%eax)
  80c37d:	75 1c                	jne    80c39b <do_close_internal+0x1a9>
  80c37f:	c7 44 24 08 9c 3e 81 	movl   $0x813e9c,0x8(%esp)
  80c386:	00 
  80c387:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
  80c38e:	00 
  80c38f:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c396:	e8 f3 2c 00 00       	call   80f08e <_panic>
    tcp_sent(conn->pcb.tcp, sent_tcp);
  80c39b:	c7 44 24 04 3c c4 80 	movl   $0x80c43c,0x4(%esp)
  80c3a2:	00 
  80c3a3:	89 04 24             	mov    %eax,(%esp)
  80c3a6:	e8 e0 9a ff ff       	call   805e8b <tcp_sent>
    tcp_poll(conn->pcb.tcp, poll_tcp, 4);
  80c3ab:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80c3b2:	00 
  80c3b3:	c7 44 24 04 ee c3 80 	movl   $0x80c3ee,0x4(%esp)
  80c3ba:	00 
  80c3bb:	8b 43 08             	mov    0x8(%ebx),%eax
  80c3be:	89 04 24             	mov    %eax,(%esp)
  80c3c1:	e8 f5 9a ff ff       	call   805ebb <tcp_poll>
    tcp_err(conn->pcb.tcp, err_tcp);
  80c3c6:	c7 44 24 04 b9 bf 80 	movl   $0x80bfb9,0x4(%esp)
  80c3cd:	00 
  80c3ce:	8b 43 08             	mov    0x8(%ebx),%eax
  80c3d1:	89 04 24             	mov    %eax,(%esp)
  80c3d4:	e8 c3 9a ff ff       	call   805e9c <tcp_err>
    tcp_arg(conn->pcb.tcp, conn);
  80c3d9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80c3dd:	8b 43 08             	mov    0x8(%ebx),%eax
  80c3e0:	89 04 24             	mov    %eax,(%esp)
  80c3e3:	e8 84 9a ff ff       	call   805e6c <tcp_arg>
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
  80c3e8:	83 c4 14             	add    $0x14,%esp
  80c3eb:	5b                   	pop    %ebx
  80c3ec:	5d                   	pop    %ebp
  80c3ed:	c3                   	ret    

0080c3ee <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  80c3ee:	55                   	push   %ebp
  80c3ef:	89 e5                	mov    %esp,%ebp
  80c3f1:	83 ec 18             	sub    $0x18,%esp
  80c3f4:	8b 45 08             	mov    0x8(%ebp),%eax
  struct netconn *conn = arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  80c3f7:	85 c0                	test   %eax,%eax
  80c3f9:	75 1c                	jne    80c417 <poll_tcp+0x29>
  80c3fb:	c7 44 24 08 8d 3f 81 	movl   $0x813f8d,0x8(%esp)
  80c402:	00 
  80c403:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
  80c40a:	00 
  80c40b:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c412:	e8 77 2c 00 00       	call   80f08e <_panic>

  if (conn->state == NETCONN_WRITE) {
  80c417:	8b 50 04             	mov    0x4(%eax),%edx
  80c41a:	83 fa 01             	cmp    $0x1,%edx
  80c41d:	75 07                	jne    80c426 <poll_tcp+0x38>
    do_writemore(conn);
  80c41f:	e8 78 fc ff ff       	call   80c09c <do_writemore>
  80c424:	eb 0f                	jmp    80c435 <poll_tcp+0x47>
  } else if (conn->state == NETCONN_CLOSE) {
  80c426:	83 fa 04             	cmp    $0x4,%edx
  80c429:	75 0a                	jne    80c435 <poll_tcp+0x47>
    do_close_internal(conn);
  80c42b:	90                   	nop
  80c42c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  80c430:	e8 bd fd ff ff       	call   80c1f2 <do_close_internal>
  }

  return ERR_OK;
}
  80c435:	b8 00 00 00 00       	mov    $0x0,%eax
  80c43a:	c9                   	leave  
  80c43b:	c3                   	ret    

0080c43c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  80c43c:	55                   	push   %ebp
  80c43d:	89 e5                	mov    %esp,%ebp
  80c43f:	56                   	push   %esi
  80c440:	53                   	push   %ebx
  80c441:	83 ec 10             	sub    $0x10,%esp
  80c444:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80c447:	8b 75 10             	mov    0x10(%ebp),%esi
  struct netconn *conn = arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  80c44a:	85 db                	test   %ebx,%ebx
  80c44c:	75 1c                	jne    80c46a <sent_tcp+0x2e>
  80c44e:	c7 44 24 08 8d 3f 81 	movl   $0x813f8d,0x8(%esp)
  80c455:	00 
  80c456:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
  80c45d:	00 
  80c45e:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c465:	e8 24 2c 00 00       	call   80f08e <_panic>

  if (conn->state == NETCONN_WRITE) {
  80c46a:	8b 43 04             	mov    0x4(%ebx),%eax
  80c46d:	83 f8 01             	cmp    $0x1,%eax
  80c470:	75 2b                	jne    80c49d <sent_tcp+0x61>
    LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  80c472:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80c476:	75 1c                	jne    80c494 <sent_tcp+0x58>
  80c478:	c7 44 24 08 06 40 81 	movl   $0x814006,0x8(%esp)
  80c47f:	00 
  80c480:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
  80c487:	00 
  80c488:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c48f:	e8 fa 2b 00 00       	call   80f08e <_panic>
    do_writemore(conn);
  80c494:	89 d8                	mov    %ebx,%eax
  80c496:	e8 01 fc ff ff       	call   80c09c <do_writemore>
  80c49b:	eb 33                	jmp    80c4d0 <sent_tcp+0x94>
  } else if (conn->state == NETCONN_CLOSE) {
  80c49d:	83 f8 04             	cmp    $0x4,%eax
  80c4a0:	75 2e                	jne    80c4d0 <sent_tcp+0x94>
    do_close_internal(conn);
  80c4a2:	89 d8                	mov    %ebx,%eax
  80c4a4:	e8 49 fd ff ff       	call   80c1f2 <do_close_internal>
  80c4a9:	eb 25                	jmp    80c4d0 <sent_tcp+0x94>
  }

  if (conn) {
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT)) {
  80c4ab:	66 81 78 6e a0 2d    	cmpw   $0x2da0,0x6e(%eax)
  80c4b1:	76 24                	jbe    80c4d7 <sent_tcp+0x9b>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  80c4b3:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c4b6:	85 c0                	test   %eax,%eax
  80c4b8:	74 1d                	je     80c4d7 <sent_tcp+0x9b>
  80c4ba:	0f b7 f6             	movzwl %si,%esi
  80c4bd:	89 74 24 08          	mov    %esi,0x8(%esp)
  80c4c1:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  80c4c8:	00 
  80c4c9:	89 1c 24             	mov    %ebx,(%esp)
  80c4cc:	ff d0                	call   *%eax
  80c4ce:	eb 07                	jmp    80c4d7 <sent_tcp+0x9b>
  } else if (conn->state == NETCONN_CLOSE) {
    do_close_internal(conn);
  }

  if (conn) {
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT)) {
  80c4d0:	8b 43 08             	mov    0x8(%ebx),%eax
  80c4d3:	85 c0                	test   %eax,%eax
  80c4d5:	75 d4                	jne    80c4ab <sent_tcp+0x6f>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
    }
  }
  
  return ERR_OK;
}
  80c4d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80c4dc:	83 c4 10             	add    $0x10,%esp
  80c4df:	5b                   	pop    %ebx
  80c4e0:	5e                   	pop    %esi
  80c4e1:	5d                   	pop    %ebp
  80c4e2:	c3                   	ret    

0080c4e3 <do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
do_newconn(struct api_msg_msg *msg)
{
  80c4e3:	55                   	push   %ebp
  80c4e4:	89 e5                	mov    %esp,%ebp
  80c4e6:	56                   	push   %esi
  80c4e7:	53                   	push   %ebx
  80c4e8:	83 ec 10             	sub    $0x10,%esp
  80c4eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(msg->conn->pcb.tcp == NULL) {
  80c4ee:	8b 03                	mov    (%ebx),%eax
  80c4f0:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80c4f4:	0f 85 dc 00 00 00    	jne    80c5d6 <do_newconn+0xf3>
 * @return msg->conn->err, but the return value is currently ignored
 */
static err_t
pcb_new(struct api_msg_msg *msg)
{
   msg->conn->err = ERR_OK;
  80c4fa:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

   LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  80c4fe:	8b 33                	mov    (%ebx),%esi
  80c500:	83 7e 08 00          	cmpl   $0x0,0x8(%esi)
  80c504:	74 1c                	je     80c522 <do_newconn+0x3f>
  80c506:	c7 44 24 08 c0 3e 81 	movl   $0x813ec0,0x8(%esp)
  80c50d:	00 
  80c50e:	c7 44 24 04 8a 01 00 	movl   $0x18a,0x4(%esp)
  80c515:	00 
  80c516:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c51d:	e8 6c 2b 00 00       	call   80f08e <_panic>

   /* Allocate a PCB for this connection */
   switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  80c522:	8b 06                	mov    (%esi),%eax
  80c524:	25 f0 00 00 00       	and    $0xf0,%eax
  80c529:	83 f8 20             	cmp    $0x20,%eax
  80c52c:	74 48                	je     80c576 <do_newconn+0x93>
  80c52e:	83 f8 40             	cmp    $0x40,%eax
  80c531:	74 0f                	je     80c542 <do_newconn+0x5f>
  80c533:	83 f8 10             	cmp    $0x10,%eax
  80c536:	0f 85 96 00 00 00    	jne    80c5d2 <do_newconn+0xef>
  80c53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  80c540:	eb 6f                	jmp    80c5b1 <do_newconn+0xce>
#if LWIP_RAW
   case NETCONN_RAW:
     msg->conn->pcb.raw = raw_new(msg->msg.n.proto);
  80c542:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
  80c546:	89 04 24             	mov    %eax,(%esp)
  80c549:	e8 12 25 00 00       	call   80ea60 <raw_new>
  80c54e:	89 46 08             	mov    %eax,0x8(%esi)
     if(msg->conn->pcb.raw == NULL) {
  80c551:	8b 03                	mov    (%ebx),%eax
  80c553:	8b 50 08             	mov    0x8(%eax),%edx
  80c556:	85 d2                	test   %edx,%edx
  80c558:	75 06                	jne    80c560 <do_newconn+0x7d>
       msg->conn->err = ERR_MEM;
  80c55a:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80c55e:	eb 76                	jmp    80c5d6 <do_newconn+0xf3>
       break;
     }
     raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  80c560:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c564:	c7 44 24 04 1f be 80 	movl   $0x80be1f,0x4(%esp)
  80c56b:	00 
  80c56c:	89 14 24             	mov    %edx,(%esp)
  80c56f:	e8 47 23 00 00       	call   80e8bb <raw_recv>
  80c574:	eb 60                	jmp    80c5d6 <do_newconn+0xf3>
     break;
#endif /* LWIP_RAW */
#if LWIP_UDP
   case NETCONN_UDP:
     msg->conn->pcb.udp = udp_new();
  80c576:	e8 89 d2 ff ff       	call   809804 <udp_new>
  80c57b:	89 46 08             	mov    %eax,0x8(%esi)
     if(msg->conn->pcb.udp == NULL) {
  80c57e:	8b 03                	mov    (%ebx),%eax
  80c580:	8b 50 08             	mov    0x8(%eax),%edx
  80c583:	85 d2                	test   %edx,%edx
  80c585:	75 06                	jne    80c58d <do_newconn+0xaa>
       msg->conn->err = ERR_MEM;
  80c587:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80c58b:	eb 49                	jmp    80c5d6 <do_newconn+0xf3>
#if LWIP_UDPLITE
     if (msg->conn->type==NETCONN_UDPLITE) {
       udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
     }
#endif /* LWIP_UDPLITE */
     if (msg->conn->type==NETCONN_UDPNOCHKSUM) {
  80c58d:	83 38 22             	cmpl   $0x22,(%eax)
  80c590:	75 04                	jne    80c596 <do_newconn+0xb3>
       udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  80c592:	c6 42 10 01          	movb   $0x1,0x10(%edx)
     }
     udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  80c596:	8b 03                	mov    (%ebx),%eax
  80c598:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c59c:	c7 44 24 04 20 bd 80 	movl   $0x80bd20,0x4(%esp)
  80c5a3:	00 
  80c5a4:	8b 40 08             	mov    0x8(%eax),%eax
  80c5a7:	89 04 24             	mov    %eax,(%esp)
  80c5aa:	e8 fb d1 ff ff       	call   8097aa <udp_recv>
  80c5af:	eb 25                	jmp    80c5d6 <do_newconn+0xf3>
     break;
#endif /* LWIP_UDP */
#if LWIP_TCP
   case NETCONN_TCP:
     msg->conn->pcb.tcp = tcp_new();
  80c5b1:	e8 ff a2 ff ff       	call   8068b5 <tcp_new>
  80c5b6:	89 46 08             	mov    %eax,0x8(%esi)
     if(msg->conn->pcb.tcp == NULL) {
  80c5b9:	8b 03                	mov    (%ebx),%eax
  80c5bb:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80c5bf:	75 06                	jne    80c5c7 <do_newconn+0xe4>
       msg->conn->err = ERR_MEM;
  80c5c1:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80c5c5:	eb 0f                	jmp    80c5d6 <do_newconn+0xf3>
       break;
     }
     setup_tcp(msg->conn);
  80c5c7:	e8 41 f9 ff ff       	call   80bf0d <setup_tcp>
  80c5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  80c5d0:	eb 04                	jmp    80c5d6 <do_newconn+0xf3>
     break;
#endif /* LWIP_TCP */
   default:
     /* Unsupported netconn type, e.g. protocol disabled */
     msg->conn->err = ERR_VAL;
  80c5d2:	c6 46 0c f7          	movb   $0xf7,0xc(%esi)
   }
   /* Else? This "new" connection already has a PCB allocated. */
   /* Is this an error condition? Should it be deleted? */
   /* We currently just are happy and return. */

   TCPIP_APIMSG_ACK(msg);
  80c5d6:	8b 03                	mov    (%ebx),%eax
  80c5d8:	8b 40 10             	mov    0x10(%eax),%eax
  80c5db:	89 04 24             	mov    %eax,(%esp)
  80c5de:	e8 fd e2 ff ff       	call   80a8e0 <sys_sem_signal>
}
  80c5e3:	83 c4 10             	add    $0x10,%esp
  80c5e6:	5b                   	pop    %ebx
  80c5e7:	5e                   	pop    %esi
  80c5e8:	5d                   	pop    %ebp
  80c5e9:	c3                   	ret    

0080c5ea <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  80c5ea:	55                   	push   %ebp
  80c5eb:	89 e5                	mov    %esp,%ebp
  80c5ed:	53                   	push   %ebx
  80c5ee:	83 ec 14             	sub    $0x14,%esp
  struct netconn *conn;
  int size;

  conn = memp_malloc(MEMP_NETCONN);
  80c5f1:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80c5f8:	e8 c5 83 ff ff       	call   8049c2 <memp_malloc>
  80c5fd:	89 c3                	mov    %eax,%ebx
  if (conn == NULL) {
  80c5ff:	85 c0                	test   %eax,%eax
  80c601:	0f 84 96 00 00 00    	je     80c69d <netconn_alloc+0xb3>
    return NULL;
  }

  conn->err = ERR_OK;
  80c607:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
  conn->type = t;
  80c60b:	8b 45 08             	mov    0x8(%ebp),%eax
  80c60e:	89 03                	mov    %eax,(%ebx)
  conn->pcb.tcp = NULL;
  80c610:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    break;
  }
#endif

  if ((conn->op_completed = sys_sem_new(0)) == SYS_SEM_NULL) {
  80c617:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80c61e:	e8 db df ff ff       	call   80a5fe <sys_sem_new>
  80c623:	89 43 10             	mov    %eax,0x10(%ebx)
  80c626:	83 f8 ff             	cmp    $0xffffffff,%eax
  80c629:	75 17                	jne    80c642 <netconn_alloc+0x58>
    memp_free(MEMP_NETCONN, conn);
  80c62b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80c62f:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80c636:	e8 e7 83 ff ff       	call   804a22 <memp_free>
    return NULL;
  80c63b:	b8 00 00 00 00       	mov    $0x0,%eax
  80c640:	eb 60                	jmp    80c6a2 <netconn_alloc+0xb8>
  }
  if ((conn->recvmbox = sys_mbox_new(size)) == SYS_MBOX_NULL) {
  80c642:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80c649:	e8 78 e1 ff ff       	call   80a7c6 <sys_mbox_new>
  80c64e:	89 43 14             	mov    %eax,0x14(%ebx)
  80c651:	83 f8 ff             	cmp    $0xffffffff,%eax
  80c654:	75 22                	jne    80c678 <netconn_alloc+0x8e>
    sys_sem_free(conn->op_completed);
  80c656:	8b 43 10             	mov    0x10(%ebx),%eax
  80c659:	89 04 24             	mov    %eax,(%esp)
  80c65c:	e8 26 e0 ff ff       	call   80a687 <sys_sem_free>
    memp_free(MEMP_NETCONN, conn);
  80c661:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80c665:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80c66c:	e8 b1 83 ff ff       	call   804a22 <memp_free>
    return NULL;
  80c671:	b8 00 00 00 00       	mov    $0x0,%eax
  80c676:	eb 2a                	jmp    80c6a2 <netconn_alloc+0xb8>
  }

  conn->acceptmbox   = SYS_MBOX_NULL;
  80c678:	c7 43 18 ff ff ff ff 	movl   $0xffffffff,0x18(%ebx)
  conn->state        = NETCONN_NONE;
  80c67f:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  80c686:	c7 43 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%ebx)
  conn->callback     = callback;
  80c68d:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c690:	89 43 2c             	mov    %eax,0x2c(%ebx)
  conn->recv_avail   = 0;
  80c693:	66 c7 43 20 00 00    	movw   $0x0,0x20(%ebx)
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = INT_MAX;
#endif /* LWIP_SO_RCVBUF */
  return conn;
  80c699:	89 d8                	mov    %ebx,%eax
  80c69b:	eb 05                	jmp    80c6a2 <netconn_alloc+0xb8>
  struct netconn *conn;
  int size;

  conn = memp_malloc(MEMP_NETCONN);
  if (conn == NULL) {
    return NULL;
  80c69d:	b8 00 00 00 00       	mov    $0x0,%eax
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = INT_MAX;
#endif /* LWIP_SO_RCVBUF */
  return conn;
}
  80c6a2:	83 c4 14             	add    $0x14,%esp
  80c6a5:	5b                   	pop    %ebx
  80c6a6:	5d                   	pop    %ebp
  80c6a7:	c3                   	ret    

0080c6a8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  80c6a8:	55                   	push   %ebp
  80c6a9:	89 e5                	mov    %esp,%ebp
  80c6ab:	56                   	push   %esi
  80c6ac:	53                   	push   %ebx
  80c6ad:	83 ec 20             	sub    $0x20,%esp
  80c6b0:	8b 5d 08             	mov    0x8(%ebp),%ebx
  void *mem;
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  80c6b3:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80c6b7:	74 1c                	je     80c6d5 <netconn_free+0x2d>
  80c6b9:	c7 44 24 08 e0 3e 81 	movl   $0x813ee0,0x8(%esp)
  80c6c0:	00 
  80c6c1:	c7 44 24 04 26 02 00 	movl   $0x226,0x4(%esp)
  80c6c8:	00 
  80c6c9:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c6d0:	e8 b9 29 00 00       	call   80f08e <_panic>

  /* Drain the recvmbox. */
  if (conn->recvmbox != SYS_MBOX_NULL) {
    while (sys_mbox_tryfetch(conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  80c6d5:	8d 75 f4             	lea    -0xc(%ebp),%esi
{
  void *mem;
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);

  /* Drain the recvmbox. */
  if (conn->recvmbox != SYS_MBOX_NULL) {
  80c6d8:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80c6dc:	75 23                	jne    80c701 <netconn_free+0x59>
  80c6de:	eb 47                	jmp    80c727 <netconn_free+0x7f>
    while (sys_mbox_tryfetch(conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
      if (conn->type == NETCONN_TCP) {
  80c6e0:	83 3b 10             	cmpl   $0x10,(%ebx)
  80c6e3:	75 11                	jne    80c6f6 <netconn_free+0x4e>
        if(mem != NULL) {
  80c6e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80c6e8:	85 c0                	test   %eax,%eax
  80c6ea:	74 15                	je     80c701 <netconn_free+0x59>
          pbuf_free((struct pbuf *)mem);
  80c6ec:	89 04 24             	mov    %eax,(%esp)
  80c6ef:	e8 e0 86 ff ff       	call   804dd4 <pbuf_free>
  80c6f4:	eb 0b                	jmp    80c701 <netconn_free+0x59>
        }
      } else {
        netbuf_delete((struct netbuf *)mem);
  80c6f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80c6f9:	89 04 24             	mov    %eax,(%esp)
  80c6fc:	e8 2b 61 ff ff       	call   80282c <netbuf_delete>
  void *mem;
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);

  /* Drain the recvmbox. */
  if (conn->recvmbox != SYS_MBOX_NULL) {
    while (sys_mbox_tryfetch(conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  80c701:	89 74 24 04          	mov    %esi,0x4(%esp)
  80c705:	8b 43 14             	mov    0x14(%ebx),%eax
  80c708:	89 04 24             	mov    %eax,(%esp)
  80c70b:	e8 62 e5 ff ff       	call   80ac72 <sys_arch_mbox_tryfetch>
  80c710:	83 f8 ff             	cmp    $0xffffffff,%eax
  80c713:	75 cb                	jne    80c6e0 <netconn_free+0x38>
        }
      } else {
        netbuf_delete((struct netbuf *)mem);
      }
    }
    sys_mbox_free(conn->recvmbox);
  80c715:	8b 43 14             	mov    0x14(%ebx),%eax
  80c718:	89 04 24             	mov    %eax,(%esp)
  80c71b:	e8 fb df ff ff       	call   80a71b <sys_mbox_free>
    conn->recvmbox = SYS_MBOX_NULL;
  80c720:	c7 43 14 ff ff ff ff 	movl   $0xffffffff,0x14(%ebx)
  }

  /* Drain the acceptmbox. */
  if (conn->acceptmbox != SYS_MBOX_NULL) {
  80c727:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80c72b:	74 36                	je     80c763 <netconn_free+0xbb>
    while (sys_mbox_tryfetch(conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  80c72d:	8d 75 f4             	lea    -0xc(%ebp),%esi
  80c730:	eb 0b                	jmp    80c73d <netconn_free+0x95>
      netconn_delete((struct netconn *)mem);
  80c732:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80c735:	89 04 24             	mov    %eax,(%esp)
  80c738:	e8 56 ef ff ff       	call   80b693 <netconn_delete>
    conn->recvmbox = SYS_MBOX_NULL;
  }

  /* Drain the acceptmbox. */
  if (conn->acceptmbox != SYS_MBOX_NULL) {
    while (sys_mbox_tryfetch(conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  80c73d:	89 74 24 04          	mov    %esi,0x4(%esp)
  80c741:	8b 43 18             	mov    0x18(%ebx),%eax
  80c744:	89 04 24             	mov    %eax,(%esp)
  80c747:	e8 26 e5 ff ff       	call   80ac72 <sys_arch_mbox_tryfetch>
  80c74c:	83 f8 ff             	cmp    $0xffffffff,%eax
  80c74f:	75 e1                	jne    80c732 <netconn_free+0x8a>
      netconn_delete((struct netconn *)mem);
    }
    sys_mbox_free(conn->acceptmbox);
  80c751:	8b 43 18             	mov    0x18(%ebx),%eax
  80c754:	89 04 24             	mov    %eax,(%esp)
  80c757:	e8 bf df ff ff       	call   80a71b <sys_mbox_free>
    conn->acceptmbox = SYS_MBOX_NULL;
  80c75c:	c7 43 18 ff ff ff ff 	movl   $0xffffffff,0x18(%ebx)
  }

  sys_sem_free(conn->op_completed);
  80c763:	8b 43 10             	mov    0x10(%ebx),%eax
  80c766:	89 04 24             	mov    %eax,(%esp)
  80c769:	e8 19 df ff ff       	call   80a687 <sys_sem_free>
  conn->op_completed = SYS_SEM_NULL;
  80c76e:	c7 43 10 ff ff ff ff 	movl   $0xffffffff,0x10(%ebx)

  memp_free(MEMP_NETCONN, conn);
  80c775:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80c779:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80c780:	e8 9d 82 ff ff       	call   804a22 <memp_free>
}
  80c785:	83 c4 20             	add    $0x20,%esp
  80c788:	5b                   	pop    %ebx
  80c789:	5e                   	pop    %esi
  80c78a:	5d                   	pop    %ebp
  80c78b:	c3                   	ret    

0080c78c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  80c78c:	55                   	push   %ebp
  80c78d:	89 e5                	mov    %esp,%ebp
  80c78f:	57                   	push   %edi
  80c790:	56                   	push   %esi
  80c791:	53                   	push   %ebx
  80c792:	83 ec 1c             	sub    $0x1c,%esp
  80c795:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80c798:	8b 7d 10             	mov    0x10(%ebp),%edi
  tcp_debug_print_state(newpcb->state);
#endif /* TCP_DEBUG */
#endif /* API_MSG_DEBUG */
  conn = (struct netconn *)arg;

  LWIP_ERROR("accept_function: invalid conn->acceptmbox",
  80c79b:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80c79f:	75 1c                	jne    80c7bd <accept_function+0x31>
  80c7a1:	c7 44 24 08 10 3f 81 	movl   $0x813f10,0x8(%esp)
  80c7a8:	00 
  80c7a9:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
  80c7b0:	00 
  80c7b1:	c7 04 24 3a 3f 81 00 	movl   $0x813f3a,(%esp)
  80c7b8:	e8 d1 28 00 00       	call   80f08e <_panic>
             conn->acceptmbox != SYS_MBOX_NULL, return ERR_VAL;);

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  80c7bd:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c7c0:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c7c4:	8b 03                	mov    (%ebx),%eax
  80c7c6:	89 04 24             	mov    %eax,(%esp)
  80c7c9:	e8 1c fe ff ff       	call   80c5ea <netconn_alloc>
  80c7ce:	89 c6                	mov    %eax,%esi
  if (newconn == NULL) {
  80c7d0:	85 c0                	test   %eax,%eax
  80c7d2:	74 57                	je     80c82b <accept_function+0x9f>
    return ERR_MEM;
  }
  newconn->pcb.tcp = newpcb;
  80c7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c7d7:	89 46 08             	mov    %eax,0x8(%esi)
  setup_tcp(newconn);
  80c7da:	89 f0                	mov    %esi,%eax
  80c7dc:	e8 2c f7 ff ff       	call   80bf0d <setup_tcp>
  newconn->err = err;
  80c7e1:	89 f8                	mov    %edi,%eax
  80c7e3:	88 46 0c             	mov    %al,0xc(%esi)
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  80c7e6:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80c7e9:	85 c0                	test   %eax,%eax
  80c7eb:	74 15                	je     80c802 <accept_function+0x76>
  80c7ed:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c7f4:	00 
  80c7f5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c7fc:	00 
  80c7fd:	89 1c 24             	mov    %ebx,(%esp)
  80c800:	ff d0                	call   *%eax

  if (sys_mbox_trypost(conn->acceptmbox, newconn) != ERR_OK) {
  80c802:	89 74 24 04          	mov    %esi,0x4(%esp)
  80c806:	8b 43 18             	mov    0x18(%ebx),%eax
  80c809:	89 04 24             	mov    %eax,(%esp)
  80c80c:	e8 5b e2 ff ff       	call   80aa6c <sys_mbox_trypost>
  80c811:	84 c0                	test   %al,%al
  80c813:	74 1d                	je     80c832 <accept_function+0xa6>
    /* When returning != ERR_OK, the connection is aborted in tcp_process(),
       so do nothing here! */
    newconn->pcb.tcp = NULL;
  80c815:	c7 46 08 00 00 00 00 	movl   $0x0,0x8(%esi)
    netconn_free(newconn);
  80c81c:	89 34 24             	mov    %esi,(%esp)
  80c81f:	e8 84 fe ff ff       	call   80c6a8 <netconn_free>
    return ERR_MEM;
  80c824:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80c829:	eb 0c                	jmp    80c837 <accept_function+0xab>

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  if (newconn == NULL) {
    return ERR_MEM;
  80c82b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80c830:	eb 05                	jmp    80c837 <accept_function+0xab>
       so do nothing here! */
    newconn->pcb.tcp = NULL;
    netconn_free(newconn);
    return ERR_MEM;
  }
  return ERR_OK;
  80c832:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80c837:	83 c4 1c             	add    $0x1c,%esp
  80c83a:	5b                   	pop    %ebx
  80c83b:	5e                   	pop    %esi
  80c83c:	5f                   	pop    %edi
  80c83d:	5d                   	pop    %ebp
  80c83e:	c3                   	ret    

0080c83f <do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_delconn(struct api_msg_msg *msg)
{
  80c83f:	55                   	push   %ebp
  80c840:	89 e5                	mov    %esp,%ebp
  80c842:	53                   	push   %ebx
  80c843:	83 ec 14             	sub    $0x14,%esp
  80c846:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (msg->conn->pcb.tcp != NULL) {
  80c849:	8b 03                	mov    (%ebx),%eax
  80c84b:	8b 48 08             	mov    0x8(%eax),%ecx
  80c84e:	85 c9                	test   %ecx,%ecx
  80c850:	74 4b                	je     80c89d <do_delconn+0x5e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  80c852:	8b 10                	mov    (%eax),%edx
  80c854:	81 e2 f0 00 00 00    	and    $0xf0,%edx
  80c85a:	83 fa 20             	cmp    $0x20,%edx
  80c85d:	74 18                	je     80c877 <do_delconn+0x38>
  80c85f:	83 fa 40             	cmp    $0x40,%edx
  80c862:	74 07                	je     80c86b <do_delconn+0x2c>
  80c864:	83 fa 10             	cmp    $0x10,%edx
  80c867:	75 34                	jne    80c89d <do_delconn+0x5e>
  80c869:	eb 22                	jmp    80c88d <do_delconn+0x4e>
#if LWIP_RAW
    case NETCONN_RAW:
      raw_remove(msg->conn->pcb.raw);
  80c86b:	89 0c 24             	mov    %ecx,(%esp)
  80c86e:	66 90                	xchg   %ax,%ax
  80c870:	e8 a5 21 00 00       	call   80ea1a <raw_remove>
      break;
  80c875:	eb 26                	jmp    80c89d <do_delconn+0x5e>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp->recv_arg = NULL;
  80c877:	c7 41 1c 00 00 00 00 	movl   $0x0,0x1c(%ecx)
      udp_remove(msg->conn->pcb.udp);
  80c87e:	8b 03                	mov    (%ebx),%eax
  80c880:	8b 40 08             	mov    0x8(%eax),%eax
  80c883:	89 04 24             	mov    %eax,(%esp)
  80c886:	e8 33 cf ff ff       	call   8097be <udp_remove>
      break;
  80c88b:	eb 10                	jmp    80c89d <do_delconn+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->state = NETCONN_CLOSE;
  80c88d:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%eax)
      do_close_internal(msg->conn);
  80c894:	8b 03                	mov    (%ebx),%eax
  80c896:	e8 57 f9 ff ff       	call   80c1f2 <do_close_internal>
      /* API_EVENT is called inside do_close_internal, before releasing
         the application thread, so we can return at this point! */
      return;
  80c89b:	eb 4e                	jmp    80c8eb <do_delconn+0xac>
  }
  /* tcp netconns don't come here! */

  /* Trigger select() in socket layer. This send should something else so the
     errorfd is set, not the read and write fd! */
  API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  80c89d:	8b 13                	mov    (%ebx),%edx
  80c89f:	8b 42 2c             	mov    0x2c(%edx),%eax
  80c8a2:	85 c0                	test   %eax,%eax
  80c8a4:	74 33                	je     80c8d9 <do_delconn+0x9a>
  80c8a6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c8ad:	00 
  80c8ae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80c8b5:	00 
  80c8b6:	89 14 24             	mov    %edx,(%esp)
  80c8b9:	ff d0                	call   *%eax
  API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  80c8bb:	8b 13                	mov    (%ebx),%edx
  80c8bd:	8b 42 2c             	mov    0x2c(%edx),%eax
  80c8c0:	85 c0                	test   %eax,%eax
  80c8c2:	74 15                	je     80c8d9 <do_delconn+0x9a>
  80c8c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c8cb:	00 
  80c8cc:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  80c8d3:	00 
  80c8d4:	89 14 24             	mov    %edx,(%esp)
  80c8d7:	ff d0                	call   *%eax

  if (msg->conn->op_completed != SYS_SEM_NULL) {
  80c8d9:	8b 03                	mov    (%ebx),%eax
  80c8db:	8b 40 10             	mov    0x10(%eax),%eax
  80c8de:	83 f8 ff             	cmp    $0xffffffff,%eax
  80c8e1:	74 08                	je     80c8eb <do_delconn+0xac>
    sys_sem_signal(msg->conn->op_completed);
  80c8e3:	89 04 24             	mov    %eax,(%esp)
  80c8e6:	e8 f5 df ff ff       	call   80a8e0 <sys_sem_signal>
  }
}
  80c8eb:	83 c4 14             	add    $0x14,%esp
  80c8ee:	5b                   	pop    %ebx
  80c8ef:	5d                   	pop    %ebp
  80c8f0:	c3                   	ret    

0080c8f1 <do_bind>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
do_bind(struct api_msg_msg *msg)
{
  80c8f1:	55                   	push   %ebp
  80c8f2:	89 e5                	mov    %esp,%ebp
  80c8f4:	56                   	push   %esi
  80c8f5:	53                   	push   %ebx
  80c8f6:	83 ec 10             	sub    $0x10,%esp
  80c8f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (!ERR_IS_FATAL(msg->conn->err)) {
  80c8fc:	8b 33                	mov    (%ebx),%esi
  80c8fe:	80 7e 0c fc          	cmpb   $0xfc,0xc(%esi)
  80c902:	7c 6f                	jl     80c973 <do_bind+0x82>
    if (msg->conn->pcb.tcp != NULL) {
  80c904:	8b 56 08             	mov    0x8(%esi),%edx
  80c907:	85 d2                	test   %edx,%edx
  80c909:	74 64                	je     80c96f <do_bind+0x7e>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  80c90b:	8b 06                	mov    (%esi),%eax
  80c90d:	25 f0 00 00 00       	and    $0xf0,%eax
  80c912:	83 f8 20             	cmp    $0x20,%eax
  80c915:	74 20                	je     80c937 <do_bind+0x46>
  80c917:	83 f8 40             	cmp    $0x40,%eax
  80c91a:	74 07                	je     80c923 <do_bind+0x32>
  80c91c:	83 f8 10             	cmp    $0x10,%eax
  80c91f:	75 52                	jne    80c973 <do_bind+0x82>
  80c921:	eb 30                	jmp    80c953 <do_bind+0x62>
#if LWIP_RAW
      case NETCONN_RAW:
        msg->conn->err = raw_bind(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
  80c923:	8b 43 04             	mov    0x4(%ebx),%eax
  80c926:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c92a:	89 14 24             	mov    %edx,(%esp)
  80c92d:	e8 4a 1f 00 00       	call   80e87c <raw_bind>
  80c932:	88 46 0c             	mov    %al,0xc(%esi)
        break;
  80c935:	eb 3c                	jmp    80c973 <do_bind+0x82>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
  80c937:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80c93b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c93f:	8b 43 04             	mov    0x4(%ebx),%eax
  80c942:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c946:	89 14 24             	mov    %edx,(%esp)
  80c949:	e8 d3 ca ff ff       	call   809421 <udp_bind>
  80c94e:	88 46 0c             	mov    %al,0xc(%esi)
        break;
  80c951:	eb 20                	jmp    80c973 <do_bind+0x82>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->conn->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
  80c953:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80c957:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c95b:	8b 43 04             	mov    0x4(%ebx),%eax
  80c95e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c962:	89 14 24             	mov    %edx,(%esp)
  80c965:	e8 79 90 ff ff       	call   8059e3 <tcp_bind>
  80c96a:	88 46 0c             	mov    %al,0xc(%esi)
        break;
  80c96d:	eb 04                	jmp    80c973 <do_bind+0x82>
      default:
        break;
      }
    } else {
      /* msg->conn->pcb is NULL */
      msg->conn->err = ERR_VAL;
  80c96f:	c6 46 0c f7          	movb   $0xf7,0xc(%esi)
    }
  }
  TCPIP_APIMSG_ACK(msg);
  80c973:	8b 03                	mov    (%ebx),%eax
  80c975:	8b 40 10             	mov    0x10(%eax),%eax
  80c978:	89 04 24             	mov    %eax,(%esp)
  80c97b:	e8 60 df ff ff       	call   80a8e0 <sys_sem_signal>
}
  80c980:	83 c4 10             	add    $0x10,%esp
  80c983:	5b                   	pop    %ebx
  80c984:	5e                   	pop    %esi
  80c985:	5d                   	pop    %ebp
  80c986:	c3                   	ret    

0080c987 <do_connect>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to connect to
 */
void
do_connect(struct api_msg_msg *msg)
{
  80c987:	55                   	push   %ebp
  80c988:	89 e5                	mov    %esp,%ebp
  80c98a:	56                   	push   %esi
  80c98b:	53                   	push   %ebx
  80c98c:	83 ec 10             	sub    $0x10,%esp
  80c98f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if (msg->conn->pcb.tcp == NULL) {
  80c992:	8b 33                	mov    (%ebx),%esi
  80c994:	8b 56 08             	mov    0x8(%esi),%edx
  80c997:	85 d2                	test   %edx,%edx
  80c999:	75 10                	jne    80c9ab <do_connect+0x24>
    sys_sem_signal(msg->conn->op_completed);
  80c99b:	8b 46 10             	mov    0x10(%esi),%eax
  80c99e:	89 04 24             	mov    %eax,(%esp)
  80c9a1:	e8 3a df ff ff       	call   80a8e0 <sys_sem_signal>
    return;
  80c9a6:	e9 9b 00 00 00       	jmp    80ca46 <do_connect+0xbf>
  }

  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  80c9ab:	8b 06                	mov    (%esi),%eax
  80c9ad:	25 f0 00 00 00       	and    $0xf0,%eax
  80c9b2:	83 f8 20             	cmp    $0x20,%eax
  80c9b5:	74 31                	je     80c9e8 <do_connect+0x61>
  80c9b7:	83 f8 40             	cmp    $0x40,%eax
  80c9ba:	74 0b                	je     80c9c7 <do_connect+0x40>
  80c9bc:	83 f8 10             	cmp    $0x10,%eax
  80c9bf:	0f 85 81 00 00 00    	jne    80ca46 <do_connect+0xbf>
  80c9c5:	eb 4a                	jmp    80ca11 <do_connect+0x8a>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->err = raw_connect(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
  80c9c7:	8b 43 04             	mov    0x4(%ebx),%eax
  80c9ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c9ce:	89 14 24             	mov    %edx,(%esp)
  80c9d1:	e8 c5 1e 00 00       	call   80e89b <raw_connect>
  80c9d6:	88 46 0c             	mov    %al,0xc(%esi)
    sys_sem_signal(msg->conn->op_completed);
  80c9d9:	8b 03                	mov    (%ebx),%eax
  80c9db:	8b 40 10             	mov    0x10(%eax),%eax
  80c9de:	89 04 24             	mov    %eax,(%esp)
  80c9e1:	e8 fa de ff ff       	call   80a8e0 <sys_sem_signal>
    break;
  80c9e6:	eb 5e                	jmp    80ca46 <do_connect+0xbf>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->err = udp_connect(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
  80c9e8:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80c9ec:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c9f0:	8b 43 04             	mov    0x4(%ebx),%eax
  80c9f3:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c9f7:	89 14 24             	mov    %edx,(%esp)
  80c9fa:	e8 16 cd ff ff       	call   809715 <udp_connect>
  80c9ff:	88 46 0c             	mov    %al,0xc(%esi)
    sys_sem_signal(msg->conn->op_completed);
  80ca02:	8b 03                	mov    (%ebx),%eax
  80ca04:	8b 40 10             	mov    0x10(%eax),%eax
  80ca07:	89 04 24             	mov    %eax,(%esp)
  80ca0a:	e8 d1 de ff ff       	call   80a8e0 <sys_sem_signal>
    break;
  80ca0f:	eb 35                	jmp    80ca46 <do_connect+0xbf>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->state = NETCONN_CONNECT;
  80ca11:	c7 46 04 03 00 00 00 	movl   $0x3,0x4(%esi)
    setup_tcp(msg->conn);
  80ca18:	8b 03                	mov    (%ebx),%eax
  80ca1a:	e8 ee f4 ff ff       	call   80bf0d <setup_tcp>
    msg->conn->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port,
  80ca1f:	8b 33                	mov    (%ebx),%esi
  80ca21:	c7 44 24 0c 71 bf 80 	movl   $0x80bf71,0xc(%esp)
  80ca28:	00 
  80ca29:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80ca2d:	89 44 24 08          	mov    %eax,0x8(%esp)
  80ca31:	8b 43 04             	mov    0x4(%ebx),%eax
  80ca34:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ca38:	8b 46 08             	mov    0x8(%esi),%eax
  80ca3b:	89 04 24             	mov    %eax,(%esp)
  80ca3e:	e8 bd 9e ff ff       	call   806900 <tcp_connect>
  80ca43:	88 46 0c             	mov    %al,0xc(%esi)
    break;
#endif /* LWIP_TCP */
  default:
    break;
  }
}
  80ca46:	83 c4 10             	add    $0x10,%esp
  80ca49:	5b                   	pop    %ebx
  80ca4a:	5e                   	pop    %esi
  80ca4b:	5d                   	pop    %ebp
  80ca4c:	c3                   	ret    

0080ca4d <do_disconnect>:
 *
 * @param msg the api_msg_msg pointing to the connection to disconnect
 */
void
do_disconnect(struct api_msg_msg *msg)
{
  80ca4d:	55                   	push   %ebp
  80ca4e:	89 e5                	mov    %esp,%ebp
  80ca50:	53                   	push   %ebx
  80ca51:	83 ec 14             	sub    $0x14,%esp
  80ca54:	8b 5d 08             	mov    0x8(%ebp),%ebx
#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  80ca57:	8b 03                	mov    (%ebx),%eax
  80ca59:	8b 10                	mov    (%eax),%edx
  80ca5b:	81 e2 f0 00 00 00    	and    $0xf0,%edx
  80ca61:	83 fa 20             	cmp    $0x20,%edx
  80ca64:	75 0b                	jne    80ca71 <do_disconnect+0x24>
    udp_disconnect(msg->conn->pcb.udp);
  80ca66:	8b 40 08             	mov    0x8(%eax),%eax
  80ca69:	89 04 24             	mov    %eax,(%esp)
  80ca6c:	e8 1e cd ff ff       	call   80978f <udp_disconnect>
  }
#endif /* LWIP_UDP */
  TCPIP_APIMSG_ACK(msg);
  80ca71:	8b 03                	mov    (%ebx),%eax
  80ca73:	8b 40 10             	mov    0x10(%eax),%eax
  80ca76:	89 04 24             	mov    %eax,(%esp)
  80ca79:	e8 62 de ff ff       	call   80a8e0 <sys_sem_signal>
}
  80ca7e:	83 c4 14             	add    $0x14,%esp
  80ca81:	5b                   	pop    %ebx
  80ca82:	5d                   	pop    %ebp
  80ca83:	c3                   	ret    

0080ca84 <do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_listen(struct api_msg_msg *msg)
{
  80ca84:	55                   	push   %ebp
  80ca85:	89 e5                	mov    %esp,%ebp
  80ca87:	57                   	push   %edi
  80ca88:	56                   	push   %esi
  80ca89:	53                   	push   %ebx
  80ca8a:	83 ec 1c             	sub    $0x1c,%esp
  80ca8d:	8b 5d 08             	mov    0x8(%ebp),%ebx
#if LWIP_TCP
  if (!ERR_IS_FATAL(msg->conn->err)) {
  80ca90:	8b 03                	mov    (%ebx),%eax
  80ca92:	80 78 0c fc          	cmpb   $0xfc,0xc(%eax)
  80ca96:	0f 8c b9 00 00 00    	jl     80cb55 <do_listen+0xd1>
    if (msg->conn->pcb.tcp != NULL) {
  80ca9c:	8b 50 08             	mov    0x8(%eax),%edx
  80ca9f:	85 d2                	test   %edx,%edx
  80caa1:	0f 84 ae 00 00 00    	je     80cb55 <do_listen+0xd1>
      if (msg->conn->type == NETCONN_TCP) {
  80caa7:	83 38 10             	cmpl   $0x10,(%eax)
  80caaa:	0f 85 a5 00 00 00    	jne    80cb55 <do_listen+0xd1>
        if (msg->conn->pcb.tcp->state == CLOSED) {
  80cab0:	83 7a 10 00          	cmpl   $0x0,0x10(%edx)
  80cab4:	0f 85 97 00 00 00    	jne    80cb51 <do_listen+0xcd>
#if TCP_LISTEN_BACKLOG
          struct tcp_pcb* lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
#else  /* TCP_LISTEN_BACKLOG */
          struct tcp_pcb* lpcb = tcp_listen(msg->conn->pcb.tcp);
  80caba:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
  80cac1:	00 
  80cac2:	89 14 24             	mov    %edx,(%esp)
  80cac5:	e8 dc 90 ff ff       	call   805ba6 <tcp_listen_with_backlog>
  80caca:	89 c6                	mov    %eax,%esi
#endif /* TCP_LISTEN_BACKLOG */
          if (lpcb == NULL) {
  80cacc:	85 c0                	test   %eax,%eax
  80cace:	75 08                	jne    80cad8 <do_listen+0x54>
            msg->conn->err = ERR_MEM;
  80cad0:	8b 03                	mov    (%ebx),%eax
  80cad2:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80cad6:	eb 7d                	jmp    80cb55 <do_listen+0xd1>
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (msg->conn->recvmbox != SYS_MBOX_NULL) {
  80cad8:	8b 03                	mov    (%ebx),%eax
  80cada:	8b 40 14             	mov    0x14(%eax),%eax
  80cadd:	83 f8 ff             	cmp    $0xffffffff,%eax
  80cae0:	74 11                	je     80caf3 <do_listen+0x6f>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(msg->conn->recvmbox);
  80cae2:	89 04 24             	mov    %eax,(%esp)
  80cae5:	e8 31 dc ff ff       	call   80a71b <sys_mbox_free>
              msg->conn->recvmbox = SYS_MBOX_NULL;
  80caea:	8b 03                	mov    (%ebx),%eax
  80caec:	c7 40 14 ff ff ff ff 	movl   $0xffffffff,0x14(%eax)
            }
            if (msg->conn->acceptmbox == SYS_MBOX_NULL) {
  80caf3:	8b 3b                	mov    (%ebx),%edi
  80caf5:	83 7f 18 ff          	cmpl   $0xffffffff,0x18(%edi)
  80caf9:	75 1a                	jne    80cb15 <do_listen+0x91>
              if ((msg->conn->acceptmbox = sys_mbox_new(DEFAULT_ACCEPTMBOX_SIZE)) == SYS_MBOX_NULL) {
  80cafb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80cb02:	e8 bf dc ff ff       	call   80a7c6 <sys_mbox_new>
  80cb07:	89 47 18             	mov    %eax,0x18(%edi)
  80cb0a:	83 f8 ff             	cmp    $0xffffffff,%eax
  80cb0d:	75 06                	jne    80cb15 <do_listen+0x91>
                msg->conn->err = ERR_MEM;
  80cb0f:	8b 03                	mov    (%ebx),%eax
  80cb11:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
              }
            }
            if (msg->conn->err == ERR_OK) {
  80cb15:	8b 03                	mov    (%ebx),%eax
  80cb17:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80cb1b:	75 38                	jne    80cb55 <do_listen+0xd1>
              msg->conn->state = NETCONN_LISTEN;
  80cb1d:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
              msg->conn->pcb.tcp = lpcb;
  80cb24:	8b 03                	mov    (%ebx),%eax
  80cb26:	89 70 08             	mov    %esi,0x8(%eax)
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
  80cb29:	8b 03                	mov    (%ebx),%eax
  80cb2b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80cb2f:	8b 40 08             	mov    0x8(%eax),%eax
  80cb32:	89 04 24             	mov    %eax,(%esp)
  80cb35:	e8 32 93 ff ff       	call   805e6c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
  80cb3a:	c7 44 24 04 8c c7 80 	movl   $0x80c78c,0x4(%esp)
  80cb41:	00 
  80cb42:	8b 03                	mov    (%ebx),%eax
  80cb44:	8b 40 08             	mov    0x8(%eax),%eax
  80cb47:	89 04 24             	mov    %eax,(%esp)
  80cb4a:	e8 5e 93 ff ff       	call   805ead <tcp_accept>
  80cb4f:	eb 04                	jmp    80cb55 <do_listen+0xd1>
            }
          }
        } else {
          msg->conn->err = ERR_CONN;
  80cb51:	c6 40 0c f8          	movb   $0xf8,0xc(%eax)
        }
      }
    }
  }
#endif /* LWIP_TCP */
  TCPIP_APIMSG_ACK(msg);
  80cb55:	8b 03                	mov    (%ebx),%eax
  80cb57:	8b 40 10             	mov    0x10(%eax),%eax
  80cb5a:	89 04 24             	mov    %eax,(%esp)
  80cb5d:	e8 7e dd ff ff       	call   80a8e0 <sys_sem_signal>
}
  80cb62:	83 c4 1c             	add    $0x1c,%esp
  80cb65:	5b                   	pop    %ebx
  80cb66:	5e                   	pop    %esi
  80cb67:	5f                   	pop    %edi
  80cb68:	5d                   	pop    %ebp
  80cb69:	c3                   	ret    

0080cb6a <do_send>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_send(struct api_msg_msg *msg)
{
  80cb6a:	55                   	push   %ebp
  80cb6b:	89 e5                	mov    %esp,%ebp
  80cb6d:	57                   	push   %edi
  80cb6e:	56                   	push   %esi
  80cb6f:	53                   	push   %ebx
  80cb70:	83 ec 1c             	sub    $0x1c,%esp
  80cb73:	8b 75 08             	mov    0x8(%ebp),%esi
  if (!ERR_IS_FATAL(msg->conn->err)) {
  80cb76:	8b 1e                	mov    (%esi),%ebx
  80cb78:	80 7b 0c fc          	cmpb   $0xfc,0xc(%ebx)
  80cb7c:	0f 8c 8b 00 00 00    	jl     80cc0d <do_send+0xa3>
    if (msg->conn->pcb.tcp != NULL) {
  80cb82:	8b 43 08             	mov    0x8(%ebx),%eax
  80cb85:	85 c0                	test   %eax,%eax
  80cb87:	0f 84 80 00 00 00    	je     80cc0d <do_send+0xa3>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  80cb8d:	8b 13                	mov    (%ebx),%edx
  80cb8f:	81 e2 f0 00 00 00    	and    $0xf0,%edx
  80cb95:	83 fa 20             	cmp    $0x20,%edx
  80cb98:	74 39                	je     80cbd3 <do_send+0x69>
  80cb9a:	83 fa 40             	cmp    $0x40,%edx
  80cb9d:	75 6e                	jne    80cc0d <do_send+0xa3>
#if LWIP_RAW
      case NETCONN_RAW:
        if (msg->msg.b->addr == NULL) {
  80cb9f:	8b 56 04             	mov    0x4(%esi),%edx
  80cba2:	8b 4a 08             	mov    0x8(%edx),%ecx
  80cba5:	85 c9                	test   %ecx,%ecx
  80cba7:	75 13                	jne    80cbbc <do_send+0x52>
          msg->conn->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  80cba9:	8b 12                	mov    (%edx),%edx
  80cbab:	89 54 24 04          	mov    %edx,0x4(%esp)
  80cbaf:	89 04 24             	mov    %eax,(%esp)
  80cbb2:	e8 42 1e 00 00       	call   80e9f9 <raw_send>
  80cbb7:	88 43 0c             	mov    %al,0xc(%ebx)
  80cbba:	eb 51                	jmp    80cc0d <do_send+0xa3>
        } else {
          msg->conn->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, msg->msg.b->addr);
  80cbbc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80cbc0:	8b 12                	mov    (%edx),%edx
  80cbc2:	89 54 24 04          	mov    %edx,0x4(%esp)
  80cbc6:	89 04 24             	mov    %eax,(%esp)
  80cbc9:	e8 01 1d 00 00       	call   80e8cf <raw_sendto>
  80cbce:	88 43 0c             	mov    %al,0xc(%ebx)
  80cbd1:	eb 3a                	jmp    80cc0d <do_send+0xa3>
        }
        break;
#endif
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.b->addr == NULL) {
  80cbd3:	8b 56 04             	mov    0x4(%esi),%edx
  80cbd6:	8b 4a 08             	mov    0x8(%edx),%ecx
  80cbd9:	85 c9                	test   %ecx,%ecx
  80cbdb:	75 13                	jne    80cbf0 <do_send+0x86>
          msg->conn->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  80cbdd:	8b 12                	mov    (%edx),%edx
  80cbdf:	89 54 24 04          	mov    %edx,0x4(%esp)
  80cbe3:	89 04 24             	mov    %eax,(%esp)
  80cbe6:	e8 01 cb ff ff       	call   8096ec <udp_send>
  80cbeb:	88 43 0c             	mov    %al,0xc(%ebx)
  80cbee:	eb 1d                	jmp    80cc0d <do_send+0xa3>
        } else {
          msg->conn->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, msg->msg.b->addr, msg->msg.b->port);
  80cbf0:	0f b7 7a 0c          	movzwl 0xc(%edx),%edi
  80cbf4:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  80cbf8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80cbfc:	8b 12                	mov    (%edx),%edx
  80cbfe:	89 54 24 04          	mov    %edx,0x4(%esp)
  80cc02:	89 04 24             	mov    %eax,(%esp)
  80cc05:	e8 99 ca ff ff       	call   8096a3 <udp_sendto>
  80cc0a:	88 43 0c             	mov    %al,0xc(%ebx)
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  80cc0d:	8b 06                	mov    (%esi),%eax
  80cc0f:	8b 40 10             	mov    0x10(%eax),%eax
  80cc12:	89 04 24             	mov    %eax,(%esp)
  80cc15:	e8 c6 dc ff ff       	call   80a8e0 <sys_sem_signal>
}
  80cc1a:	83 c4 1c             	add    $0x1c,%esp
  80cc1d:	5b                   	pop    %ebx
  80cc1e:	5e                   	pop    %esi
  80cc1f:	5f                   	pop    %edi
  80cc20:	5d                   	pop    %ebp
  80cc21:	c3                   	ret    

0080cc22 <do_recv>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_recv(struct api_msg_msg *msg)
{
  80cc22:	55                   	push   %ebp
  80cc23:	89 e5                	mov    %esp,%ebp
  80cc25:	53                   	push   %ebx
  80cc26:	83 ec 14             	sub    $0x14,%esp
  80cc29:	8b 5d 08             	mov    0x8(%ebp),%ebx
#if LWIP_TCP
  if (!ERR_IS_FATAL(msg->conn->err)) {
  80cc2c:	8b 03                	mov    (%ebx),%eax
  80cc2e:	80 78 0c fc          	cmpb   $0xfc,0xc(%eax)
  80cc32:	7c 1c                	jl     80cc50 <do_recv+0x2e>
    if (msg->conn->pcb.tcp != NULL) {
  80cc34:	8b 50 08             	mov    0x8(%eax),%edx
  80cc37:	85 d2                	test   %edx,%edx
  80cc39:	74 15                	je     80cc50 <do_recv+0x2e>
      if (msg->conn->type == NETCONN_TCP) {
  80cc3b:	83 38 10             	cmpl   $0x10,(%eax)
  80cc3e:	75 10                	jne    80cc50 <do_recv+0x2e>
        if (msg->conn->pcb.tcp->state == LISTEN) {
          tcp_accepted(msg->conn->pcb.tcp);
        } else
#endif /* TCP_LISTEN_BACKLOG */
        {
          tcp_recved(msg->conn->pcb.tcp, msg->msg.r.len);
  80cc40:	0f b7 43 04          	movzwl 0x4(%ebx),%eax
  80cc44:	89 44 24 04          	mov    %eax,0x4(%esp)
  80cc48:	89 14 24             	mov    %edx,(%esp)
  80cc4b:	e8 54 90 ff ff       	call   805ca4 <tcp_recved>
        }
      }
    }
  }
#endif /* LWIP_TCP */
  TCPIP_APIMSG_ACK(msg);
  80cc50:	8b 03                	mov    (%ebx),%eax
  80cc52:	8b 40 10             	mov    0x10(%eax),%eax
  80cc55:	89 04 24             	mov    %eax,(%esp)
  80cc58:	e8 83 dc ff ff       	call   80a8e0 <sys_sem_signal>
}
  80cc5d:	83 c4 14             	add    $0x14,%esp
  80cc60:	5b                   	pop    %ebx
  80cc61:	5d                   	pop    %ebp
  80cc62:	c3                   	ret    

0080cc63 <do_write>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_write(struct api_msg_msg *msg)
{
  80cc63:	55                   	push   %ebp
  80cc64:	89 e5                	mov    %esp,%ebp
  80cc66:	83 ec 18             	sub    $0x18,%esp
  80cc69:	8b 55 08             	mov    0x8(%ebp),%edx
  if (!ERR_IS_FATAL(msg->conn->err)) {
  80cc6c:	8b 02                	mov    (%edx),%eax
  80cc6e:	80 78 0c fc          	cmpb   $0xfc,0xc(%eax)
  80cc72:	7c 2d                	jl     80cca1 <do_write+0x3e>
    if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
  80cc74:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80cc78:	74 23                	je     80cc9d <do_write+0x3a>
  80cc7a:	83 38 10             	cmpl   $0x10,(%eax)
  80cc7d:	75 1e                	jne    80cc9d <do_write+0x3a>
#if LWIP_TCP
      msg->conn->state = NETCONN_WRITE;
  80cc7f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
      /* set all the variables used by do_writemore */
      msg->conn->write_msg = msg;
  80cc86:	8b 02                	mov    (%edx),%eax
  80cc88:	89 50 24             	mov    %edx,0x24(%eax)
      msg->conn->write_offset = 0;
  80cc8b:	8b 02                	mov    (%edx),%eax
  80cc8d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        sys_arch_sem_wait(msg->conn->op_completed, 0);
        LOCK_TCPIP_CORE();
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
      }
#else
      do_writemore(msg->conn);
  80cc94:	8b 02                	mov    (%edx),%eax
  80cc96:	e8 01 f4 ff ff       	call   80c09c <do_writemore>
#endif
      /* for both cases: if do_writemore was called, don't ACK the APIMSG! */
      return;
  80cc9b:	eb 11                	jmp    80ccae <do_write+0x4b>
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->conn->err = ERR_VAL;
  80cc9d:	c6 40 0c f7          	movb   $0xf7,0xc(%eax)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  80cca1:	8b 02                	mov    (%edx),%eax
  80cca3:	8b 40 10             	mov    0x10(%eax),%eax
  80cca6:	89 04 24             	mov    %eax,(%esp)
  80cca9:	e8 32 dc ff ff       	call   80a8e0 <sys_sem_signal>
}
  80ccae:	c9                   	leave  
  80ccaf:	c3                   	ret    

0080ccb0 <do_getaddr>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_getaddr(struct api_msg_msg *msg)
{
  80ccb0:	55                   	push   %ebp
  80ccb1:	89 e5                	mov    %esp,%ebp
  80ccb3:	83 ec 18             	sub    $0x18,%esp
  80ccb6:	8b 45 08             	mov    0x8(%ebp),%eax
  if (msg->conn->pcb.ip != NULL) {
  80ccb9:	8b 08                	mov    (%eax),%ecx
  80ccbb:	8b 51 08             	mov    0x8(%ecx),%edx
  80ccbe:	85 d2                	test   %edx,%edx
  80ccc0:	0f 84 98 00 00 00    	je     80cd5e <do_getaddr+0xae>
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local?msg->conn->pcb.ip->local_ip:msg->conn->pcb.ip->remote_ip);
  80ccc6:	8b 48 04             	mov    0x4(%eax),%ecx
  80ccc9:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80cccd:	74 06                	je     80ccd5 <do_getaddr+0x25>
  80cccf:	8b 12                	mov    (%edx),%edx
  80ccd1:	89 11                	mov    %edx,(%ecx)
  80ccd3:	eb 05                	jmp    80ccda <do_getaddr+0x2a>
  80ccd5:	8b 52 04             	mov    0x4(%edx),%edx
  80ccd8:	89 11                	mov    %edx,(%ecx)
    
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  80ccda:	8b 08                	mov    (%eax),%ecx
  80ccdc:	8b 11                	mov    (%ecx),%edx
  80ccde:	81 e2 f0 00 00 00    	and    $0xf0,%edx
  80cce4:	83 fa 20             	cmp    $0x20,%edx
  80cce7:	74 27                	je     80cd10 <do_getaddr+0x60>
  80cce9:	83 fa 40             	cmp    $0x40,%edx
  80ccec:	74 07                	je     80ccf5 <do_getaddr+0x45>
  80ccee:	83 fa 10             	cmp    $0x10,%edx
  80ccf1:	75 6f                	jne    80cd62 <do_getaddr+0xb2>
  80ccf3:	eb 4b                	jmp    80cd40 <do_getaddr+0x90>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  80ccf5:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80ccf9:	74 0f                	je     80cd0a <do_getaddr+0x5a>
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  80ccfb:	8b 50 08             	mov    0x8(%eax),%edx
  80ccfe:	8b 49 08             	mov    0x8(%ecx),%ecx
  80cd01:	0f b6 49 10          	movzbl 0x10(%ecx),%ecx
  80cd05:	66 89 0a             	mov    %cx,(%edx)
  80cd08:	eb 58                	jmp    80cd62 <do_getaddr+0xb2>
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->conn->err = ERR_CONN;
  80cd0a:	c6 41 0c f8          	movb   $0xf8,0xc(%ecx)
  80cd0e:	eb 52                	jmp    80cd62 <do_getaddr+0xb2>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  80cd10:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80cd14:	74 0f                	je     80cd25 <do_getaddr+0x75>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  80cd16:	8b 50 08             	mov    0x8(%eax),%edx
  80cd19:	8b 49 08             	mov    0x8(%ecx),%ecx
  80cd1c:	0f b7 49 12          	movzwl 0x12(%ecx),%ecx
  80cd20:	66 89 0a             	mov    %cx,(%edx)
  80cd23:	eb 3d                	jmp    80cd62 <do_getaddr+0xb2>
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  80cd25:	8b 51 08             	mov    0x8(%ecx),%edx
  80cd28:	f6 42 10 04          	testb  $0x4,0x10(%edx)
  80cd2c:	75 06                	jne    80cd34 <do_getaddr+0x84>
          msg->conn->err = ERR_CONN;
  80cd2e:	c6 41 0c f8          	movb   $0xf8,0xc(%ecx)
  80cd32:	eb 2e                	jmp    80cd62 <do_getaddr+0xb2>
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  80cd34:	8b 48 08             	mov    0x8(%eax),%ecx
  80cd37:	0f b7 52 14          	movzwl 0x14(%edx),%edx
  80cd3b:	66 89 11             	mov    %dx,(%ecx)
  80cd3e:	eb 22                	jmp    80cd62 <do_getaddr+0xb2>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
  80cd40:	8b 50 08             	mov    0x8(%eax),%edx
  80cd43:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80cd47:	74 09                	je     80cd52 <do_getaddr+0xa2>
  80cd49:	8b 49 08             	mov    0x8(%ecx),%ecx
  80cd4c:	0f b7 49 1c          	movzwl 0x1c(%ecx),%ecx
  80cd50:	eb 07                	jmp    80cd59 <do_getaddr+0xa9>
  80cd52:	8b 49 08             	mov    0x8(%ecx),%ecx
  80cd55:	0f b7 49 1e          	movzwl 0x1e(%ecx),%ecx
  80cd59:	66 89 0a             	mov    %cx,(%edx)
      break;
  80cd5c:	eb 04                	jmp    80cd62 <do_getaddr+0xb2>
#endif /* LWIP_TCP */
    }
  } else {
    msg->conn->err = ERR_CONN;
  80cd5e:	c6 41 0c f8          	movb   $0xf8,0xc(%ecx)
  }
  TCPIP_APIMSG_ACK(msg);
  80cd62:	8b 00                	mov    (%eax),%eax
  80cd64:	8b 40 10             	mov    0x10(%eax),%eax
  80cd67:	89 04 24             	mov    %eax,(%esp)
  80cd6a:	e8 71 db ff ff       	call   80a8e0 <sys_sem_signal>
}
  80cd6f:	c9                   	leave  
  80cd70:	c3                   	ret    

0080cd71 <do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_close(struct api_msg_msg *msg)
{
  80cd71:	55                   	push   %ebp
  80cd72:	89 e5                	mov    %esp,%ebp
  80cd74:	83 ec 18             	sub    $0x18,%esp
  80cd77:	8b 55 08             	mov    0x8(%ebp),%edx
#if LWIP_TCP
  if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
  80cd7a:	8b 02                	mov    (%edx),%eax
  80cd7c:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80cd80:	74 15                	je     80cd97 <do_close+0x26>
  80cd82:	83 38 10             	cmpl   $0x10,(%eax)
  80cd85:	75 10                	jne    80cd97 <do_close+0x26>
      msg->conn->state = NETCONN_CLOSE;
  80cd87:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%eax)
      do_close_internal(msg->conn);
  80cd8e:	8b 02                	mov    (%edx),%eax
  80cd90:	e8 5d f4 ff ff       	call   80c1f2 <do_close_internal>
  80cd95:	eb 11                	jmp    80cda8 <do_close+0x37>
      /* for tcp netconns, do_close_internal ACKs the message */
  } else
#endif /* LWIP_TCP */
  {
    msg->conn->err = ERR_VAL;
  80cd97:	c6 40 0c f7          	movb   $0xf7,0xc(%eax)
    TCPIP_APIMSG_ACK(msg);
  80cd9b:	8b 02                	mov    (%edx),%eax
  80cd9d:	8b 40 10             	mov    0x10(%eax),%eax
  80cda0:	89 04 24             	mov    %eax,(%esp)
  80cda3:	e8 38 db ff ff       	call   80a8e0 <sys_sem_signal>
  }
}
  80cda8:	c9                   	leave  
  80cda9:	c3                   	ret    
  80cdaa:	66 90                	xchg   %ax,%ax
  80cdac:	66 90                	xchg   %ax,%ax
  80cdae:	66 90                	xchg   %ax,%ax

0080cdb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  80cdb0:	55                   	push   %ebp
  80cdb1:	89 e5                	mov    %esp,%ebp
  80cdb3:	57                   	push   %edi
  80cdb4:	56                   	push   %esi
  80cdb5:	53                   	push   %ebx
  80cdb6:	83 ec 1c             	sub    $0x1c,%esp
  80cdb9:	89 c7                	mov    %eax,%edi
  u8_t c;
  u8_t *opts, opt;
  u16_t mss;

  opts = (u8_t *)tcphdr + TCP_HLEN;
  80cdbb:	8b 35 d0 c1 b3 00    	mov    0xb3c1d0,%esi

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  80cdc1:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  80cdc5:	89 04 24             	mov    %eax,(%esp)
  80cdc8:	e8 96 af ff ff       	call   807d63 <ntohs>
  80cdcd:	66 3d ff 5f          	cmp    $0x5fff,%ax
  80cdd1:	76 7f                	jbe    80ce52 <tcp_parseopt+0xa2>
{
  u8_t c;
  u8_t *opts, opt;
  u16_t mss;

  opts = (u8_t *)tcphdr + TCP_HLEN;
  80cdd3:	83 c6 14             	add    $0x14,%esi
  80cdd6:	bb 00 00 00 00       	mov    $0x0,%ebx
  80cddb:	eb 4f                	jmp    80ce2c <tcp_parseopt+0x7c>

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    for(c = 0; c < (TCPH_HDRLEN(tcphdr) - 5) << 2 ;) {
      opt = opts[c];
  80cddd:	0f b6 d3             	movzbl %bl,%edx
  80cde0:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
      if (opt == 0x00) {
  80cde4:	84 c0                	test   %al,%al
  80cde6:	74 6a                	je     80ce52 <tcp_parseopt+0xa2>
        /* End of options. */
        break;
      } else if (opt == 0x01) {
  80cde8:	3c 01                	cmp    $0x1,%al
  80cdea:	75 05                	jne    80cdf1 <tcp_parseopt+0x41>
        ++c;
  80cdec:	83 c3 01             	add    $0x1,%ebx
  80cdef:	eb 3b                	jmp    80ce2c <tcp_parseopt+0x7c>
        /* NOP option. */
      } else if (opt == 0x02 &&
  80cdf1:	3c 02                	cmp    $0x2,%al
  80cdf3:	75 2c                	jne    80ce21 <tcp_parseopt+0x71>
  80cdf5:	80 7c 16 01 04       	cmpb   $0x4,0x1(%esi,%edx,1)
  80cdfa:	75 25                	jne    80ce21 <tcp_parseopt+0x71>
        opts[c + 1] == 0x04) {
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  80cdfc:	0f b6 44 16 02       	movzbl 0x2(%esi,%edx,1),%eax
  80ce01:	c1 e0 08             	shl    $0x8,%eax
  80ce04:	0f b6 54 16 03       	movzbl 0x3(%esi,%edx,1),%edx
  80ce09:	09 d0                	or     %edx,%eax
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  80ce0b:	8d 50 ff             	lea    -0x1(%eax),%edx
  80ce0e:	66 81 fa b4 05       	cmp    $0x5b4,%dx
  80ce13:	ba b4 05 00 00       	mov    $0x5b4,%edx
  80ce18:	0f 43 c2             	cmovae %edx,%eax
  80ce1b:	66 89 47 34          	mov    %ax,0x34(%edi)

        /* And we are done processing options. */
        break;
  80ce1f:	eb 31                	jmp    80ce52 <tcp_parseopt+0xa2>
      } else {
        if (opts[c + 1] == 0) {
  80ce21:	0f b6 44 16 01       	movzbl 0x1(%esi,%edx,1),%eax
  80ce26:	84 c0                	test   %al,%al
  80ce28:	74 28                	je     80ce52 <tcp_parseopt+0xa2>
             and we don't process them further. */
          break;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  80ce2a:	01 c3                	add    %eax,%ebx

  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    for(c = 0; c < (TCPH_HDRLEN(tcphdr) - 5) << 2 ;) {
  80ce2c:	a1 d0 c1 b3 00       	mov    0xb3c1d0,%eax
  80ce31:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80ce35:	89 04 24             	mov    %eax,(%esp)
  80ce38:	e8 26 af ff ff       	call   807d63 <ntohs>
  80ce3d:	0f b6 d3             	movzbl %bl,%edx
  80ce40:	66 c1 e8 0c          	shr    $0xc,%ax
  80ce44:	0f b7 c0             	movzwl %ax,%eax
  80ce47:	8d 04 85 ec ff ff ff 	lea    -0x14(,%eax,4),%eax
  80ce4e:	39 c2                	cmp    %eax,%edx
  80ce50:	7c 8b                	jl     80cddd <tcp_parseopt+0x2d>
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
  80ce52:	83 c4 1c             	add    $0x1c,%esp
  80ce55:	5b                   	pop    %ebx
  80ce56:	5e                   	pop    %esi
  80ce57:	5f                   	pop    %edi
  80ce58:	5d                   	pop    %ebp
  80ce59:	c3                   	ret    

0080ce5a <tcp_receive>:
 *
 * @return 1 if the incoming segment is the next in sequence, 0 if not
 */
static u8_t
tcp_receive(struct tcp_pcb *pcb)
{
  80ce5a:	55                   	push   %ebp
  80ce5b:	89 e5                	mov    %esp,%ebp
  80ce5d:	57                   	push   %edi
  80ce5e:	56                   	push   %esi
  80ce5f:	53                   	push   %ebx
  80ce60:	83 ec 2c             	sub    $0x2c,%esp
  80ce63:	89 c7                	mov    %eax,%edi
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;

  if (flags & TCP_ACK) {
  80ce65:	f6 05 c0 c1 b3 00 10 	testb  $0x10,0xb3c1c0
  80ce6c:	0f 84 45 04 00 00    	je     80d2b7 <tcp_receive+0x45d>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl1;
  80ce72:	0f b7 58 5c          	movzwl 0x5c(%eax),%ebx
  80ce76:	8b 50 60             	mov    0x60(%eax),%edx

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  80ce79:	a1 c8 c1 b3 00       	mov    0xb3c1c8,%eax
  80ce7e:	39 c2                	cmp    %eax,%edx
  80ce80:	78 26                	js     80cea8 <tcp_receive+0x4e>
  80ce82:	39 c2                	cmp    %eax,%edx
  80ce84:	75 0b                	jne    80ce91 <tcp_receive+0x37>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  80ce86:	8b 0d c4 c1 b3 00    	mov    0xb3c1c4,%ecx
  80ce8c:	39 4f 64             	cmp    %ecx,0x64(%edi)
  80ce8f:	78 17                	js     80cea8 <tcp_receive+0x4e>
  80ce91:	8b 0d c4 c1 b3 00    	mov    0xb3c1c4,%ecx
  80ce97:	39 4f 64             	cmp    %ecx,0x64(%edi)
  80ce9a:	75 3a                	jne    80ced6 <tcp_receive+0x7c>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  80ce9c:	8b 0d d0 c1 b3 00    	mov    0xb3c1d0,%ecx
  80cea2:	66 3b 59 0e          	cmp    0xe(%ecx),%bx
  80cea6:	73 2e                	jae    80ced6 <tcp_receive+0x7c>
      pcb->snd_wnd = tcphdr->wnd;
  80cea8:	8b 0d d0 c1 b3 00    	mov    0xb3c1d0,%ecx
  80ceae:	0f b7 49 0e          	movzwl 0xe(%ecx),%ecx
  80ceb2:	66 89 4f 5c          	mov    %cx,0x5c(%edi)
      pcb->snd_wl1 = seqno;
  80ceb6:	89 47 60             	mov    %eax,0x60(%edi)
      pcb->snd_wl2 = ackno;
  80ceb9:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80cebe:	89 47 64             	mov    %eax,0x64(%edi)
      if (pcb->snd_wnd > 0 && pcb->persist_backoff > 0) {
  80cec1:	66 85 c9             	test   %cx,%cx
  80cec4:	74 10                	je     80ced6 <tcp_receive+0x7c>
  80cec6:	80 bf a4 00 00 00 00 	cmpb   $0x0,0xa4(%edi)
  80cecd:	74 07                	je     80ced6 <tcp_receive+0x7c>
          pcb->persist_backoff = 0;
  80cecf:	c6 87 a4 00 00 00 00 	movb   $0x0,0xa4(%edi)
                               pcb->lastack, pcb->snd_max, ackno, pcb->snd_wl1, seqno, pcb->snd_wl2));
      }
#endif /* TCP_WND_DEBUG */
    }

    if (pcb->lastack == ackno) {
  80ced6:	8b 4f 48             	mov    0x48(%edi),%ecx
  80ced9:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80cede:	39 c1                	cmp    %eax,%ecx
  80cee0:	0f 85 a9 00 00 00    	jne    80cf8f <tcp_receive+0x135>
      pcb->acked = 0;
  80cee6:	66 c7 47 6c 00 00    	movw   $0x0,0x6c(%edi)

      if (pcb->snd_wl1 + pcb->snd_wnd == right_wnd_edge){
  80ceec:	0f b7 47 5c          	movzwl 0x5c(%edi),%eax
  80cef0:	03 47 60             	add    0x60(%edi),%eax
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl1;
  80cef3:	0f b7 db             	movzwl %bx,%ebx
  80cef6:	01 da                	add    %ebx,%edx
    }

    if (pcb->lastack == ackno) {
      pcb->acked = 0;

      if (pcb->snd_wl1 + pcb->snd_wnd == right_wnd_edge){
  80cef8:	39 d0                	cmp    %edx,%eax
  80cefa:	0f 85 e9 02 00 00    	jne    80d1e9 <tcp_receive+0x38f>
        ++pcb->dupacks;
  80cf00:	0f b6 47 4c          	movzbl 0x4c(%edi),%eax
  80cf04:	83 c0 01             	add    $0x1,%eax
  80cf07:	88 47 4c             	mov    %al,0x4c(%edi)
        if (pcb->dupacks >= 3 && pcb->unacked != NULL) {
  80cf0a:	3c 02                	cmp    $0x2,%al
  80cf0c:	0f 86 d7 02 00 00    	jbe    80d1e9 <tcp_receive+0x38f>
  80cf12:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80cf16:	0f 84 cd 02 00 00    	je     80d1e9 <tcp_receive+0x38f>
          if (!(pcb->flags & TF_INFR)) {
  80cf1c:	f6 47 20 04          	testb  $0x4,0x20(%edi)
  80cf20:	75 51                	jne    80cf73 <tcp_receive+0x119>
            /* This is fast retransmit. Retransmit the first unacked segment. */
            LWIP_DEBUGF(TCP_FR_DEBUG, ("tcp_receive: dupacks %"U16_F" (%"U32_F"), fast retransmit %"U32_F"\n",
                                       (u16_t)pcb->dupacks, pcb->lastack,
                                       ntohl(pcb->unacked->tcphdr->seqno)));
            tcp_rexmit(pcb);
  80cf22:	89 3c 24             	mov    %edi,(%esp)
  80cf25:	e8 5c be ff ff       	call   808d86 <tcp_rexmit>
            /* Set ssthresh to max (FlightSize / 2, 2*SMSS) */
            /*pcb->ssthresh = LWIP_MAX((pcb->snd_max -
                                      pcb->lastack) / 2,
                                      2 * pcb->mss);*/
            /* Set ssthresh to half of the minimum of the current cwnd and the advertised window */
            if (pcb->cwnd > pcb->snd_wnd)
  80cf2a:	0f b7 47 4e          	movzwl 0x4e(%edi),%eax
  80cf2e:	0f b7 57 5c          	movzwl 0x5c(%edi),%edx
  80cf32:	66 39 d0             	cmp    %dx,%ax
  80cf35:	76 09                	jbe    80cf40 <tcp_receive+0xe6>
              pcb->ssthresh = pcb->snd_wnd / 2;
  80cf37:	66 d1 ea             	shr    %dx
  80cf3a:	66 89 57 50          	mov    %dx,0x50(%edi)
  80cf3e:	eb 07                	jmp    80cf47 <tcp_receive+0xed>
            else
              pcb->ssthresh = pcb->cwnd / 2;
  80cf40:	66 d1 e8             	shr    %ax
  80cf43:	66 89 47 50          	mov    %ax,0x50(%edi)

            /* The minimum value for ssthresh should be 2 MSS */
            if (pcb->ssthresh < 2*pcb->mss) {
  80cf47:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  80cf4b:	0f b7 4f 50          	movzwl 0x50(%edi),%ecx
  80cf4f:	0f b7 d0             	movzwl %ax,%edx
  80cf52:	01 d2                	add    %edx,%edx
  80cf54:	39 d1                	cmp    %edx,%ecx
  80cf56:	7d 07                	jge    80cf5f <tcp_receive+0x105>
              LWIP_DEBUGF(TCP_FR_DEBUG, ("tcp_receive: The minimum value for ssthresh %"U16_F" should be min 2 mss %"U16_F"...\n", pcb->ssthresh, 2*pcb->mss));
              pcb->ssthresh = 2*pcb->mss;
  80cf58:	8d 14 00             	lea    (%eax,%eax,1),%edx
  80cf5b:	66 89 57 50          	mov    %dx,0x50(%edi)
            }

            pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  80cf5f:	8d 04 40             	lea    (%eax,%eax,2),%eax
  80cf62:	66 03 47 50          	add    0x50(%edi),%ax
  80cf66:	66 89 47 4e          	mov    %ax,0x4e(%edi)
            pcb->flags |= TF_INFR;
  80cf6a:	80 4f 20 04          	orb    $0x4,0x20(%edi)
  80cf6e:	e9 76 02 00 00       	jmp    80d1e9 <tcp_receive+0x38f>
          } else {
            /* Inflate the congestion window, but not if it means that
               the value overflows. */
            if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  80cf73:	0f b7 57 4e          	movzwl 0x4e(%edi),%edx
  80cf77:	89 d0                	mov    %edx,%eax
  80cf79:	66 03 47 34          	add    0x34(%edi),%ax
  80cf7d:	66 39 c2             	cmp    %ax,%dx
  80cf80:	0f 83 63 02 00 00    	jae    80d1e9 <tcp_receive+0x38f>
              pcb->cwnd += pcb->mss;
  80cf86:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80cf8a:	e9 5a 02 00 00       	jmp    80d1e9 <tcp_receive+0x38f>
        }
      } else {
        LWIP_DEBUGF(TCP_FR_DEBUG, ("tcp_receive: dupack averted %"U32_F" %"U32_F"\n",
                                   pcb->snd_wl1 + pcb->snd_wnd, right_wnd_edge));
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_max)){
  80cf8f:	8d 50 ff             	lea    -0x1(%eax),%edx
  80cf92:	39 ca                	cmp    %ecx,%edx
  80cf94:	0f 88 a1 01 00 00    	js     80d13b <tcp_receive+0x2e1>
  80cf9a:	89 c2                	mov    %eax,%edx
  80cf9c:	2b 57 58             	sub    0x58(%edi),%edx
  80cf9f:	85 d2                	test   %edx,%edx
  80cfa1:	0f 8f 94 01 00 00    	jg     80d13b <tcp_receive+0x2e1>
      /* We come here when the ACK acknowledges new data. */
      
      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  80cfa7:	0f b6 57 20          	movzbl 0x20(%edi),%edx
  80cfab:	f6 c2 04             	test   $0x4,%dl
  80cfae:	74 0e                	je     80cfbe <tcp_receive+0x164>
        pcb->flags &= ~TF_INFR;
  80cfb0:	83 e2 fb             	and    $0xfffffffb,%edx
  80cfb3:	88 57 20             	mov    %dl,0x20(%edi)
        pcb->cwnd = pcb->ssthresh;
  80cfb6:	0f b7 57 50          	movzwl 0x50(%edi),%edx
  80cfba:	66 89 57 4e          	mov    %dx,0x4e(%edi)
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  80cfbe:	c6 47 46 00          	movb   $0x0,0x46(%edi)

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  80cfc2:	0f b7 57 40          	movzwl 0x40(%edi),%edx
  80cfc6:	66 c1 fa 03          	sar    $0x3,%dx
  80cfca:	66 03 57 42          	add    0x42(%edi),%dx
  80cfce:	66 89 57 44          	mov    %dx,0x44(%edi)

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  80cfd2:	89 c2                	mov    %eax,%edx
  80cfd4:	29 ca                	sub    %ecx,%edx
  80cfd6:	66 89 57 6c          	mov    %dx,0x6c(%edi)

      pcb->snd_buf += pcb->acked;
  80cfda:	66 01 57 6e          	add    %dx,0x6e(%edi)

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  80cfde:	c6 47 4c 00          	movb   $0x0,0x4c(%edi)
      pcb->lastack = ackno;
  80cfe2:	89 47 48             	mov    %eax,0x48(%edi)

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  80cfe5:	83 7f 10 03          	cmpl   $0x3,0x10(%edi)
  80cfe9:	0f 86 cd 00 00 00    	jbe    80d0bc <tcp_receive+0x262>
        if (pcb->cwnd < pcb->ssthresh) {
  80cfef:	0f b7 4f 4e          	movzwl 0x4e(%edi),%ecx
  80cff3:	66 3b 4f 50          	cmp    0x50(%edi),%cx
  80cff7:	73 18                	jae    80d011 <tcp_receive+0x1b7>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  80cff9:	89 c8                	mov    %ecx,%eax
  80cffb:	66 03 47 34          	add    0x34(%edi),%ax
  80cfff:	66 39 c1             	cmp    %ax,%cx
  80d002:	0f 83 b4 00 00 00    	jae    80d0bc <tcp_receive+0x262>
            pcb->cwnd += pcb->mss;
  80d008:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80d00c:	e9 ab 00 00 00       	jmp    80d0bc <tcp_receive+0x262>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  80d011:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  80d015:	0f af c0             	imul   %eax,%eax
  80d018:	0f b7 d9             	movzwl %cx,%ebx
  80d01b:	99                   	cltd   
  80d01c:	f7 fb                	idiv   %ebx
  80d01e:	01 c8                	add    %ecx,%eax
          if (new_cwnd > pcb->cwnd) {
  80d020:	66 39 c1             	cmp    %ax,%cx
  80d023:	0f 83 93 00 00 00    	jae    80d0bc <tcp_receive+0x262>
            pcb->cwnd = new_cwnd;
  80d029:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80d02d:	e9 8a 00 00 00       	jmp    80d0bc <tcp_receive+0x262>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  80d032:	8b 5f 78             	mov    0x78(%edi),%ebx
        pcb->unacked = pcb->unacked->next;
  80d035:	8b 03                	mov    (%ebx),%eax
  80d037:	89 47 78             	mov    %eax,0x78(%edi)

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  80d03a:	0f b7 77 70          	movzwl 0x70(%edi),%esi
  80d03e:	8b 43 04             	mov    0x4(%ebx),%eax
  80d041:	89 04 24             	mov    %eax,(%esp)
  80d044:	e8 21 82 ff ff       	call   80526a <pbuf_clen>
  80d049:	0f b6 c0             	movzbl %al,%eax
  80d04c:	66 39 c6             	cmp    %ax,%si
  80d04f:	73 1c                	jae    80d06d <tcp_receive+0x213>
  80d051:	c7 44 24 08 1c 40 81 	movl   $0x81401c,0x8(%esp)
  80d058:	00 
  80d059:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
  80d060:	00 
  80d061:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d068:	e8 21 20 00 00       	call   80f08e <_panic>
        pcb->snd_queuelen -= pbuf_clen(next->p);
  80d06d:	0f b7 77 70          	movzwl 0x70(%edi),%esi
  80d071:	8b 43 04             	mov    0x4(%ebx),%eax
  80d074:	89 04 24             	mov    %eax,(%esp)
  80d077:	e8 ee 81 ff ff       	call   80526a <pbuf_clen>
  80d07c:	0f b6 c0             	movzbl %al,%eax
  80d07f:	29 c6                	sub    %eax,%esi
  80d081:	66 89 77 70          	mov    %si,0x70(%edi)
        tcp_seg_free(next);
  80d085:	89 1c 24             	mov    %ebx,(%esp)
  80d088:	e8 1c 8d ff ff       	call   805da9 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  80d08d:	66 83 7f 70 00       	cmpw   $0x0,0x70(%edi)
  80d092:	74 28                	je     80d0bc <tcp_receive+0x262>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  80d094:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80d098:	75 22                	jne    80d0bc <tcp_receive+0x262>
  80d09a:	83 7f 74 00          	cmpl   $0x0,0x74(%edi)
  80d09e:	75 1c                	jne    80d0bc <tcp_receive+0x262>
  80d0a0:	c7 44 24 08 44 40 81 	movl   $0x814044,0x8(%esp)
  80d0a7:	00 
  80d0a8:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
  80d0af:	00 
  80d0b0:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d0b7:	e8 d2 1f 00 00       	call   80f08e <_panic>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  80d0bc:	8b 47 78             	mov    0x78(%edi),%eax
  80d0bf:	85 c0                	test   %eax,%eax
  80d0c1:	74 61                	je     80d124 <tcp_receive+0x2ca>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  80d0c3:	8b 40 10             	mov    0x10(%eax),%eax
  80d0c6:	8b 40 04             	mov    0x4(%eax),%eax
  80d0c9:	89 04 24             	mov    %eax,(%esp)
  80d0cc:	e8 d9 ae ff ff       	call   807faa <ntohl>
  80d0d1:	89 c6                	mov    %eax,%esi
  80d0d3:	8b 47 78             	mov    0x78(%edi),%eax
  80d0d6:	0f b7 58 0c          	movzwl 0xc(%eax),%ebx
  80d0da:	8b 40 10             	mov    0x10(%eax),%eax
  80d0dd:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d0e1:	89 04 24             	mov    %eax,(%esp)
  80d0e4:	e8 7a ac ff ff       	call   807d63 <ntohs>
  80d0e9:	ba 01 00 00 00       	mov    $0x1,%edx
  80d0ee:	a8 01                	test   $0x1,%al
  80d0f0:	75 1a                	jne    80d10c <tcp_receive+0x2b2>
  80d0f2:	8b 47 78             	mov    0x78(%edi),%eax
  80d0f5:	8b 40 10             	mov    0x10(%eax),%eax
  80d0f8:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d0fc:	89 04 24             	mov    %eax,(%esp)
  80d0ff:	e8 5f ac ff ff       	call   807d63 <ntohs>
  80d104:	66 d1 e8             	shr    %ax
  80d107:	89 c2                	mov    %eax,%edx
  80d109:	83 e2 01             	and    $0x1,%edx
  80d10c:	2b 35 c4 c1 b3 00    	sub    0xb3c1c4,%esi
  80d112:	01 d3                	add    %edx,%ebx
  80d114:	01 de                	add    %ebx,%esi
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  80d116:	85 f6                	test   %esi,%esi
  80d118:	0f 8e 14 ff ff ff    	jle    80d032 <tcp_receive+0x1d8>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  80d11e:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80d122:	75 08                	jne    80d12c <tcp_receive+0x2d2>
        pcb->rtime = -1;
  80d124:	66 c7 47 32 ff ff    	movw   $0xffff,0x32(%edi)
  80d12a:	eb 06                	jmp    80d132 <tcp_receive+0x2d8>
      else
        pcb->rtime = 0;
  80d12c:	66 c7 47 32 00 00    	movw   $0x0,0x32(%edi)

      pcb->polltmr = 0;
  80d132:	c6 47 30 00          	movb   $0x0,0x30(%edi)
  80d136:	e9 ae 00 00 00       	jmp    80d1e9 <tcp_receive+0x38f>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
  80d13b:	66 c7 47 6c 00 00    	movw   $0x0,0x6c(%edi)
  80d141:	e9 a3 00 00 00       	jmp    80d1e9 <tcp_receive+0x38f>
           ) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  80d146:	8b 5f 74             	mov    0x74(%edi),%ebx
      pcb->unsent = pcb->unsent->next;
  80d149:	8b 03                	mov    (%ebx),%eax
  80d14b:	89 47 74             	mov    %eax,0x74(%edi)
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  80d14e:	0f b7 77 70          	movzwl 0x70(%edi),%esi
  80d152:	8b 43 04             	mov    0x4(%ebx),%eax
  80d155:	89 04 24             	mov    %eax,(%esp)
  80d158:	e8 0d 81 ff ff       	call   80526a <pbuf_clen>
  80d15d:	0f b6 c0             	movzbl %al,%eax
  80d160:	66 39 c6             	cmp    %ax,%si
  80d163:	73 1c                	jae    80d181 <tcp_receive+0x327>
  80d165:	c7 44 24 08 1c 40 81 	movl   $0x81401c,0x8(%esp)
  80d16c:	00 
  80d16d:	c7 44 24 04 7f 03 00 	movl   $0x37f,0x4(%esp)
  80d174:	00 
  80d175:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d17c:	e8 0d 1f 00 00       	call   80f08e <_panic>
      pcb->snd_queuelen -= pbuf_clen(next->p);
  80d181:	0f b7 77 70          	movzwl 0x70(%edi),%esi
  80d185:	8b 43 04             	mov    0x4(%ebx),%eax
  80d188:	89 04 24             	mov    %eax,(%esp)
  80d18b:	e8 da 80 ff ff       	call   80526a <pbuf_clen>
  80d190:	0f b6 c0             	movzbl %al,%eax
  80d193:	29 c6                	sub    %eax,%esi
  80d195:	66 89 77 70          	mov    %si,0x70(%edi)
      tcp_seg_free(next);
  80d199:	89 1c 24             	mov    %ebx,(%esp)
  80d19c:	e8 08 8c ff ff       	call   805da9 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  80d1a1:	66 83 7f 70 00       	cmpw   $0x0,0x70(%edi)
  80d1a6:	74 29                	je     80d1d1 <tcp_receive+0x377>
        LWIP_ASSERT("tcp_receive: valid queue length",
  80d1a8:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80d1ac:	75 23                	jne    80d1d1 <tcp_receive+0x377>
  80d1ae:	8b 47 74             	mov    0x74(%edi),%eax
  80d1b1:	85 c0                	test   %eax,%eax
  80d1b3:	75 23                	jne    80d1d8 <tcp_receive+0x37e>
  80d1b5:	c7 44 24 08 44 40 81 	movl   $0x814044,0x8(%esp)
  80d1bc:	00 
  80d1bd:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
  80d1c4:	00 
  80d1c5:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d1cc:	e8 bd 1e 00 00       	call   80f08e <_panic>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }

      if (pcb->unsent != NULL) {
  80d1d1:	8b 47 74             	mov    0x74(%edi),%eax
  80d1d4:	85 c0                	test   %eax,%eax
  80d1d6:	74 11                	je     80d1e9 <tcp_receive+0x38f>
        pcb->snd_nxt = htonl(pcb->unsent->tcphdr->seqno);
  80d1d8:	8b 40 10             	mov    0x10(%eax),%eax
  80d1db:	8b 40 04             	mov    0x4(%eax),%eax
  80d1de:	89 04 24             	mov    %eax,(%esp)
  80d1e1:	e8 8a ab ff ff       	call   807d70 <htonl>
  80d1e6:	89 47 54             	mov    %eax,0x54(%edi)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  80d1e9:	8b 47 74             	mov    0x74(%edi),%eax
  80d1ec:	85 c0                	test   %eax,%eax
  80d1ee:	74 6b                	je     80d25b <tcp_receive+0x401>
           /*TCP_SEQ_LEQ(ntohl(pcb->unsent->tcphdr->seqno) + TCP_TCPLEN(pcb->unsent), ackno) &&
             TCP_SEQ_LEQ(ackno, pcb->snd_max)*/
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + TCP_TCPLEN(pcb->unsent), pcb->snd_max)
  80d1f0:	8b 35 c4 c1 b3 00    	mov    0xb3c1c4,%esi
  80d1f6:	8b 40 10             	mov    0x10(%eax),%eax
  80d1f9:	8b 40 04             	mov    0x4(%eax),%eax
  80d1fc:	89 04 24             	mov    %eax,(%esp)
  80d1ff:	e8 a6 ad ff ff       	call   807faa <ntohl>
  80d204:	89 c3                	mov    %eax,%ebx
  80d206:	8b 47 74             	mov    0x74(%edi),%eax
  80d209:	0f b7 48 0c          	movzwl 0xc(%eax),%ecx
  80d20d:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  80d210:	8b 40 10             	mov    0x10(%eax),%eax
  80d213:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d217:	89 04 24             	mov    %eax,(%esp)
  80d21a:	e8 44 ab ff ff       	call   807d63 <ntohs>
  80d21f:	ba 01 00 00 00       	mov    $0x1,%edx
  80d224:	a8 01                	test   $0x1,%al
  80d226:	75 1a                	jne    80d242 <tcp_receive+0x3e8>
  80d228:	8b 47 74             	mov    0x74(%edi),%eax
  80d22b:	8b 40 10             	mov    0x10(%eax),%eax
  80d22e:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d232:	89 04 24             	mov    %eax,(%esp)
  80d235:	e8 29 ab ff ff       	call   807d63 <ntohs>
  80d23a:	66 d1 e8             	shr    %ax
  80d23d:	89 c2                	mov    %eax,%edx
  80d23f:	83 e2 01             	and    $0x1,%edx
  80d242:	29 de                	sub    %ebx,%esi
  80d244:	03 55 e4             	add    -0x1c(%ebp),%edx
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  80d247:	39 d6                	cmp    %edx,%esi
  80d249:	78 10                	js     80d25b <tcp_receive+0x401>
           /*TCP_SEQ_LEQ(ntohl(pcb->unsent->tcphdr->seqno) + TCP_TCPLEN(pcb->unsent), ackno) &&
             TCP_SEQ_LEQ(ackno, pcb->snd_max)*/
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + TCP_TCPLEN(pcb->unsent), pcb->snd_max)
  80d24b:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80d250:	2b 47 58             	sub    0x58(%edi),%eax
  80d253:	85 c0                	test   %eax,%eax
  80d255:	0f 8e eb fe ff ff    	jle    80d146 <tcp_receive+0x2ec>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  80d25b:	8b 47 38             	mov    0x38(%edi),%eax
  80d25e:	85 c0                	test   %eax,%eax
  80d260:	74 55                	je     80d2b7 <tcp_receive+0x45d>
  80d262:	8b 0d c4 c1 b3 00    	mov    0xb3c1c4,%ecx
  80d268:	39 4f 3c             	cmp    %ecx,0x3c(%edi)
  80d26b:	79 4a                	jns    80d2b7 <tcp_receive+0x45d>

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  80d26d:	0f b7 57 40          	movzwl 0x40(%edi),%edx
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  80d271:	0f b7 0d 60 c2 b3 00 	movzwl 0xb3c260,%ecx
  80d278:	29 c1                	sub    %eax,%ecx
  80d27a:	89 c8                	mov    %ecx,%eax

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  80d27c:	89 d1                	mov    %edx,%ecx
  80d27e:	66 c1 f9 03          	sar    $0x3,%cx
  80d282:	29 c8                	sub    %ecx,%eax
      pcb->sa += m;
  80d284:	01 c2                	add    %eax,%edx
  80d286:	66 89 57 40          	mov    %dx,0x40(%edi)
      if (m < 0) {
        m = -m;
  80d28a:	89 c1                	mov    %eax,%ecx
  80d28c:	f7 d9                	neg    %ecx
  80d28e:	66 85 c0             	test   %ax,%ax
  80d291:	0f 48 c1             	cmovs  %ecx,%eax
      }
      m = m - (pcb->sv >> 2);
  80d294:	0f b7 4f 42          	movzwl 0x42(%edi),%ecx
  80d298:	89 cb                	mov    %ecx,%ebx
  80d29a:	66 c1 fb 02          	sar    $0x2,%bx
  80d29e:	29 d9                	sub    %ebx,%ecx
      pcb->sv += m;
  80d2a0:	01 c8                	add    %ecx,%eax
  80d2a2:	66 89 47 42          	mov    %ax,0x42(%edi)
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  80d2a6:	66 c1 fa 03          	sar    $0x3,%dx
  80d2aa:	01 d0                	add    %edx,%eax
  80d2ac:	66 89 47 44          	mov    %ax,0x44(%edi)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
  80d2b0:	c7 47 38 00 00 00 00 	movl   $0x0,0x38(%edi)
    }
  }

  /* If the incoming segment contains data, we must process it
     further. */
  if (tcplen > 0) {
  80d2b7:	0f b7 1d be c1 b3 00 	movzwl 0xb3c1be,%ebx
  80d2be:	66 85 db             	test   %bx,%bx
  80d2c1:	0f 84 5b 07 00 00    	je     80da22 <tcp_receive+0xbc8>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  80d2c7:	8b 57 24             	mov    0x24(%edi),%edx
  80d2ca:	a1 c8 c1 b3 00       	mov    0xb3c1c8,%eax
  80d2cf:	89 d1                	mov    %edx,%ecx
  80d2d1:	29 c1                	sub    %eax,%ecx
  80d2d3:	89 ce                	mov    %ecx,%esi
  80d2d5:	83 ee 01             	sub    $0x1,%esi
  80d2d8:	0f 88 41 01 00 00    	js     80d41f <tcp_receive+0x5c5>
  80d2de:	8d 72 01             	lea    0x1(%edx),%esi
  80d2e1:	29 c6                	sub    %eax,%esi
  80d2e3:	0f b7 db             	movzwl %bx,%ebx
  80d2e6:	29 de                	sub    %ebx,%esi
  80d2e8:	85 f6                	test   %esi,%esi
  80d2ea:	0f 8f 2f 01 00 00    	jg     80d41f <tcp_receive+0x5c5>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
  80d2f0:	89 ca                	mov    %ecx,%edx
      p = inseg.p;
  80d2f2:	8b 1d d8 c1 b3 00    	mov    0xb3c1d8,%ebx
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  80d2f8:	85 db                	test   %ebx,%ebx
  80d2fa:	75 1c                	jne    80d318 <tcp_receive+0x4be>
  80d2fc:	c7 44 24 08 9f 41 81 	movl   $0x81419f,0x8(%esp)
  80d303:	00 
  80d304:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
  80d30b:	00 
  80d30c:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d313:	e8 76 1d 00 00       	call   80f08e <_panic>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  80d318:	81 f9 fe 7f 00 00    	cmp    $0x7ffe,%ecx
  80d31e:	7e 1c                	jle    80d33c <tcp_receive+0x4e2>
  80d320:	c7 44 24 08 af 41 81 	movl   $0x8141af,0x8(%esp)
  80d327:	00 
  80d328:	c7 44 24 04 e6 03 00 	movl   $0x3e6,0x4(%esp)
  80d32f:	00 
  80d330:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d337:	e8 52 1d 00 00       	call   80f08e <_panic>
      if (inseg.p->len < off) {
  80d33c:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80d340:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80d343:	39 c1                	cmp    %eax,%ecx
  80d345:	7e 75                	jle    80d3bc <tcp_receive+0x562>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  80d347:	0f b7 73 08          	movzwl 0x8(%ebx),%esi
  80d34b:	0f b7 c6             	movzwl %si,%eax
  80d34e:	39 c1                	cmp    %eax,%ecx
  80d350:	7e 1c                	jle    80d36e <tcp_receive+0x514>
  80d352:	c7 44 24 08 be 41 81 	movl   $0x8141be,0x8(%esp)
  80d359:	00 
  80d35a:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
  80d361:	00 
  80d362:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d369:	e8 20 1d 00 00       	call   80f08e <_panic>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  80d36e:	29 ce                	sub    %ecx,%esi
  80d370:	89 f1                	mov    %esi,%ecx
  80d372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
        while (p->len < off) {
          off -= p->len;
  80d375:	29 c2                	sub    %eax,%edx
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  80d377:	66 89 4b 08          	mov    %cx,0x8(%ebx)
          p->len = 0;
  80d37b:	66 c7 43 0a 00 00    	movw   $0x0,0xa(%ebx)
          p = p->next;
  80d381:	8b 1b                	mov    (%ebx),%ebx
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
  80d383:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80d387:	39 d0                	cmp    %edx,%eax
  80d389:	7c ea                	jl     80d375 <tcp_receive+0x51b>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
  80d38b:	f7 da                	neg    %edx
  80d38d:	0f bf c2             	movswl %dx,%eax
  80d390:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d394:	89 1c 24             	mov    %ebx,(%esp)
  80d397:	e8 54 79 ff ff       	call   804cf0 <pbuf_header>
  80d39c:	84 c0                	test   %al,%al
  80d39e:	74 4d                	je     80d3ed <tcp_receive+0x593>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  80d3a0:	c7 44 24 08 ce 41 81 	movl   $0x8141ce,0x8(%esp)
  80d3a7:	00 
  80d3a8:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
  80d3af:	00 
  80d3b0:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d3b7:	e8 d2 1c 00 00       	call   80f08e <_panic>
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  80d3bc:	f7 d9                	neg    %ecx
  80d3be:	0f bf c1             	movswl %cx,%eax
  80d3c1:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d3c5:	89 1c 24             	mov    %ebx,(%esp)
  80d3c8:	e8 23 79 ff ff       	call   804cf0 <pbuf_header>
  80d3cd:	84 c0                	test   %al,%al
  80d3cf:	74 1c                	je     80d3ed <tcp_receive+0x593>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  80d3d1:	c7 44 24 08 ce 41 81 	movl   $0x8141ce,0x8(%esp)
  80d3d8:	00 
  80d3d9:	c7 44 24 04 fa 03 00 	movl   $0x3fa,0x4(%esp)
  80d3e0:	00 
  80d3e1:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80d3e8:	e8 a1 1c 00 00       	call   80f08e <_panic>
        }
      }
      /* KJM following line changed to use p->payload rather than inseg->p->payload
         to fix bug #9076 */
      inseg.dataptr = p->payload;
  80d3ed:	8b 43 04             	mov    0x4(%ebx),%eax
  80d3f0:	a3 dc c1 b3 00       	mov    %eax,0xb3c1dc
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  80d3f5:	8b 47 24             	mov    0x24(%edi),%eax
  80d3f8:	0f b7 15 e0 c1 b3 00 	movzwl 0xb3c1e0,%edx
  80d3ff:	66 03 15 c8 c1 b3 00 	add    0xb3c1c8,%dx
  80d406:	29 c2                	sub    %eax,%edx
  80d408:	66 89 15 e0 c1 b3 00 	mov    %dx,0xb3c1e0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  80d40f:	a3 c8 c1 b3 00       	mov    %eax,0xb3c1c8
  80d414:	8b 15 e4 c1 b3 00    	mov    0xb3c1e4,%edx
  80d41a:	89 42 04             	mov    %eax,0x4(%edx)
  80d41d:	eb 10                	jmp    80d42f <tcp_receive+0x5d5>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  80d41f:	39 d0                	cmp    %edx,%eax
  80d421:	79 1c                	jns    80d43f <tcp_receive+0x5e5>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  80d423:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  80d427:	89 3c 24             	mov    %edi,(%esp)
  80d42a:	e8 12 b3 ff ff       	call   808741 <tcp_output>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  80d42f:	a1 c8 c1 b3 00       	mov    0xb3c1c8,%eax
  80d434:	8b 57 24             	mov    0x24(%edi),%edx
  80d437:	39 d0                	cmp    %edx,%eax
  80d439:	0f 88 d0 05 00 00    	js     80da0f <tcp_receive+0xbb5>
  80d43f:	0f b7 4f 28          	movzwl 0x28(%edi),%ecx
  80d443:	89 c3                	mov    %eax,%ebx
  80d445:	29 cb                	sub    %ecx,%ebx
  80d447:	8d 4b 01             	lea    0x1(%ebx),%ecx
  80d44a:	29 d1                	sub    %edx,%ecx
  80d44c:	85 c9                	test   %ecx,%ecx
  80d44e:	0f 8f bb 05 00 00    	jg     80da0f <tcp_receive+0xbb5>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  80d454:	39 d0                	cmp    %edx,%eax
  80d456:	0f 85 53 03 00 00    	jne    80d7af <tcp_receive+0x955>
        accepted_inseq = 1; 
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
#if TCP_QUEUE_OOSEQ
        if (pcb->ooseq != NULL &&
  80d45c:	8b 57 7c             	mov    0x7c(%edi),%edx
  80d45f:	85 d2                	test   %edx,%edx
  80d461:	0f 84 83 00 00 00    	je     80d4ea <tcp_receive+0x690>
                TCP_SEQ_LEQ(pcb->ooseq->tcphdr->seqno, seqno + inseg.len)) {
  80d467:	8b 4a 10             	mov    0x10(%edx),%ecx
  80d46a:	8b 49 04             	mov    0x4(%ecx),%ecx
  80d46d:	0f b7 1d e0 c1 b3 00 	movzwl 0xb3c1e0,%ebx
  80d474:	89 ce                	mov    %ecx,%esi
  80d476:	29 de                	sub    %ebx,%esi
  80d478:	89 f3                	mov    %esi,%ebx
  80d47a:	29 c3                	sub    %eax,%ebx
        accepted_inseq = 1; 
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
#if TCP_QUEUE_OOSEQ
        if (pcb->ooseq != NULL &&
  80d47c:	85 db                	test   %ebx,%ebx
  80d47e:	7f 6a                	jg     80d4ea <tcp_receive+0x690>
                TCP_SEQ_LEQ(pcb->ooseq->tcphdr->seqno, seqno + inseg.len)) {
          if (pcb->ooseq->len > 0) {
  80d480:	66 83 7a 0c 00       	cmpw   $0x0,0xc(%edx)
  80d485:	74 1f                	je     80d4a6 <tcp_receive+0x64c>
            /* We have to trim the second edge of the incoming
               segment. */
            inseg.len = (u16_t)(pcb->ooseq->tcphdr->seqno - seqno);
  80d487:	29 c1                	sub    %eax,%ecx
  80d489:	66 89 0d e0 c1 b3 00 	mov    %cx,0xb3c1e0
            pbuf_realloc(inseg.p, inseg.len);
  80d490:	0f b7 c9             	movzwl %cx,%ecx
  80d493:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80d497:	a1 d8 c1 b3 00       	mov    0xb3c1d8,%eax
  80d49c:	89 04 24             	mov    %eax,(%esp)
  80d49f:	e8 a2 7c ff ff       	call   805146 <pbuf_realloc>
  80d4a4:	eb 44                	jmp    80d4ea <tcp_receive+0x690>
          } else {
            /* does the ooseq segment contain only flags that are in inseg also? */
            if ((TCPH_FLAGS(inseg.tcphdr) & (TCP_FIN|TCP_SYN)) ==
  80d4a6:	a1 e4 c1 b3 00       	mov    0xb3c1e4,%eax
  80d4ab:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d4af:	89 04 24             	mov    %eax,(%esp)
  80d4b2:	e8 ac a8 ff ff       	call   807d63 <ntohs>
  80d4b7:	89 c3                	mov    %eax,%ebx
                (TCPH_FLAGS(pcb->ooseq->tcphdr) & (TCP_FIN|TCP_SYN))) {
  80d4b9:	8b 47 7c             	mov    0x7c(%edi),%eax
  80d4bc:	8b 40 10             	mov    0x10(%eax),%eax
  80d4bf:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d4c3:	89 04 24             	mov    %eax,(%esp)
  80d4c6:	e8 98 a8 ff ff       	call   807d63 <ntohs>
               segment. */
            inseg.len = (u16_t)(pcb->ooseq->tcphdr->seqno - seqno);
            pbuf_realloc(inseg.p, inseg.len);
          } else {
            /* does the ooseq segment contain only flags that are in inseg also? */
            if ((TCPH_FLAGS(inseg.tcphdr) & (TCP_FIN|TCP_SYN)) ==
  80d4cb:	31 c3                	xor    %eax,%ebx
  80d4cd:	f6 c3 03             	test   $0x3,%bl
  80d4d0:	75 18                	jne    80d4ea <tcp_receive+0x690>
                (TCPH_FLAGS(pcb->ooseq->tcphdr) & (TCP_FIN|TCP_SYN))) {
              struct tcp_seg *old_ooseq = pcb->ooseq;
  80d4d2:	8b 47 7c             	mov    0x7c(%edi),%eax
              pcb->ooseq = pcb->ooseq->next;
  80d4d5:	8b 10                	mov    (%eax),%edx
  80d4d7:	89 57 7c             	mov    %edx,0x7c(%edi)
              memp_free(MEMP_TCP_SEG, old_ooseq);
  80d4da:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d4de:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  80d4e5:	e8 38 75 ff ff       	call   804a22 <memp_free>
            }
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        tcplen = TCP_TCPLEN(&inseg);
  80d4ea:	0f b7 1d e0 c1 b3 00 	movzwl 0xb3c1e0,%ebx
  80d4f1:	a1 e4 c1 b3 00       	mov    0xb3c1e4,%eax
  80d4f6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d4fa:	89 04 24             	mov    %eax,(%esp)
  80d4fd:	e8 61 a8 ff ff       	call   807d63 <ntohs>
  80d502:	ba 01 00 00 00       	mov    $0x1,%edx
  80d507:	a8 01                	test   $0x1,%al
  80d509:	75 19                	jne    80d524 <tcp_receive+0x6ca>
  80d50b:	a1 e4 c1 b3 00       	mov    0xb3c1e4,%eax
  80d510:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d514:	89 04 24             	mov    %eax,(%esp)
  80d517:	e8 47 a8 ff ff       	call   807d63 <ntohs>
  80d51c:	66 d1 e8             	shr    %ax
  80d51f:	89 c2                	mov    %eax,%edx
  80d521:	83 e2 01             	and    $0x1,%edx
  80d524:	8d 04 13             	lea    (%ebx,%edx,1),%eax
  80d527:	66 a3 be c1 b3 00    	mov    %ax,0xb3c1be

        /* First received FIN will be ACKed +1, on any successive (duplicate)
         * FINs we are already in CLOSE_WAIT and have already done +1.
         */
        if (pcb->state != CLOSE_WAIT) {
  80d52d:	83 7f 10 07          	cmpl   $0x7,0x10(%edi)
  80d531:	74 06                	je     80d539 <tcp_receive+0x6df>
          pcb->rcv_nxt += tcplen;
  80d533:	0f b7 d0             	movzwl %ax,%edx
  80d536:	01 57 24             	add    %edx,0x24(%edi)
        }

        /* Update the receiver's (our) window. */
        if (pcb->rcv_wnd < tcplen) {
  80d539:	0f b7 57 28          	movzwl 0x28(%edi),%edx
  80d53d:	66 39 d0             	cmp    %dx,%ax
  80d540:	76 08                	jbe    80d54a <tcp_receive+0x6f0>
          pcb->rcv_wnd = 0;
  80d542:	66 c7 47 28 00 00    	movw   $0x0,0x28(%edi)
  80d548:	eb 06                	jmp    80d550 <tcp_receive+0x6f6>
        } else {
          pcb->rcv_wnd -= tcplen;
  80d54a:	29 c2                	sub    %eax,%edx
  80d54c:	66 89 57 28          	mov    %dx,0x28(%edi)
        }

        if (pcb->rcv_ann_wnd < tcplen) {
  80d550:	0f b7 57 2a          	movzwl 0x2a(%edi),%edx
  80d554:	66 39 d0             	cmp    %dx,%ax
  80d557:	76 08                	jbe    80d561 <tcp_receive+0x707>
          pcb->rcv_ann_wnd = 0;
  80d559:	66 c7 47 2a 00 00    	movw   $0x0,0x2a(%edi)
  80d55f:	eb 06                	jmp    80d567 <tcp_receive+0x70d>
        } else {
          pcb->rcv_ann_wnd -= tcplen;
  80d561:	29 c2                	sub    %eax,%edx
  80d563:	66 89 57 2a          	mov    %dx,0x2a(%edi)
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  80d567:	a1 d8 c1 b3 00       	mov    0xb3c1d8,%eax
  80d56c:	66 83 78 08 00       	cmpw   $0x0,0x8(%eax)
  80d571:	74 0f                	je     80d582 <tcp_receive+0x728>
          recv_data = inseg.p;
  80d573:	a3 b8 c1 b3 00       	mov    %eax,0xb3c1b8
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  80d578:	c7 05 d8 c1 b3 00 00 	movl   $0x0,0xb3c1d8
  80d57f:	00 00 00 
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  80d582:	a1 e4 c1 b3 00       	mov    0xb3c1e4,%eax
  80d587:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d58b:	89 04 24             	mov    %eax,(%esp)
  80d58e:	e8 d0 a7 ff ff       	call   807d63 <ntohs>
  80d593:	a8 01                	test   $0x1,%al
  80d595:	0f 84 cb 01 00 00    	je     80d766 <tcp_receive+0x90c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags = TF_GOT_FIN;
  80d59b:	c6 05 bc c1 b3 00 20 	movb   $0x20,0xb3c1bc
  80d5a2:	e9 bf 01 00 00       	jmp    80d766 <tcp_receive+0x90c>
           is now in sequence. */
        while (pcb->ooseq != NULL &&
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
  80d5a7:	89 35 c8 c1 b3 00    	mov    %esi,0xb3c1c8

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  80d5ad:	0f b7 4b 0c          	movzwl 0xc(%ebx),%ecx
  80d5b1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  80d5b4:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d5b8:	89 04 24             	mov    %eax,(%esp)
  80d5bb:	e8 a3 a7 ff ff       	call   807d63 <ntohs>
  80d5c0:	ba 01 00 00 00       	mov    $0x1,%edx
  80d5c5:	a8 01                	test   $0x1,%al
  80d5c7:	75 17                	jne    80d5e0 <tcp_receive+0x786>
  80d5c9:	8b 43 10             	mov    0x10(%ebx),%eax
  80d5cc:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d5d0:	89 04 24             	mov    %eax,(%esp)
  80d5d3:	e8 8b a7 ff ff       	call   807d63 <ntohs>
  80d5d8:	66 d1 e8             	shr    %ax
  80d5db:	89 c2                	mov    %eax,%edx
  80d5dd:	83 e2 01             	and    $0x1,%edx
  80d5e0:	03 55 e4             	add    -0x1c(%ebp),%edx
  80d5e3:	01 d6                	add    %edx,%esi
  80d5e5:	89 77 24             	mov    %esi,0x24(%edi)
          if (pcb->rcv_wnd < TCP_TCPLEN(cseg)) {
  80d5e8:	0f b7 47 28          	movzwl 0x28(%edi),%eax
  80d5ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80d5ef:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  80d5f3:	8b 43 10             	mov    0x10(%ebx),%eax
  80d5f6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d5fa:	89 04 24             	mov    %eax,(%esp)
  80d5fd:	e8 61 a7 ff ff       	call   807d63 <ntohs>
  80d602:	ba 01 00 00 00       	mov    $0x1,%edx
  80d607:	a8 01                	test   $0x1,%al
  80d609:	75 17                	jne    80d622 <tcp_receive+0x7c8>
  80d60b:	8b 43 10             	mov    0x10(%ebx),%eax
  80d60e:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d612:	89 04 24             	mov    %eax,(%esp)
  80d615:	e8 49 a7 ff ff       	call   807d63 <ntohs>
  80d61a:	66 d1 e8             	shr    %ax
  80d61d:	89 c2                	mov    %eax,%edx
  80d61f:	83 e2 01             	and    $0x1,%edx
  80d622:	01 d6                	add    %edx,%esi
  80d624:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
  80d627:	7d 08                	jge    80d631 <tcp_receive+0x7d7>
            pcb->rcv_wnd = 0;
  80d629:	66 c7 47 28 00 00    	movw   $0x0,0x28(%edi)
  80d62f:	eb 45                	jmp    80d676 <tcp_receive+0x81c>
          } else {
            pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  80d631:	0f b7 77 28          	movzwl 0x28(%edi),%esi
  80d635:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80d639:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  80d63d:	8b 43 10             	mov    0x10(%ebx),%eax
  80d640:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d644:	89 04 24             	mov    %eax,(%esp)
  80d647:	e8 17 a7 ff ff       	call   807d63 <ntohs>
  80d64c:	ba 01 00 00 00       	mov    $0x1,%edx
  80d651:	a8 01                	test   $0x1,%al
  80d653:	75 17                	jne    80d66c <tcp_receive+0x812>
  80d655:	8b 43 10             	mov    0x10(%ebx),%eax
  80d658:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d65c:	89 04 24             	mov    %eax,(%esp)
  80d65f:	e8 ff a6 ff ff       	call   807d63 <ntohs>
  80d664:	66 d1 e8             	shr    %ax
  80d667:	89 c2                	mov    %eax,%edx
  80d669:	83 e2 01             	and    $0x1,%edx
  80d66c:	66 2b 75 e4          	sub    -0x1c(%ebp),%si
  80d670:	29 d6                	sub    %edx,%esi
  80d672:	66 89 77 28          	mov    %si,0x28(%edi)
          }
          if (pcb->rcv_ann_wnd < TCP_TCPLEN(cseg)) {
  80d676:	0f b7 47 2a          	movzwl 0x2a(%edi),%eax
  80d67a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80d67d:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  80d681:	8b 43 10             	mov    0x10(%ebx),%eax
  80d684:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d688:	89 04 24             	mov    %eax,(%esp)
  80d68b:	e8 d3 a6 ff ff       	call   807d63 <ntohs>
  80d690:	ba 01 00 00 00       	mov    $0x1,%edx
  80d695:	a8 01                	test   $0x1,%al
  80d697:	75 17                	jne    80d6b0 <tcp_receive+0x856>
  80d699:	8b 43 10             	mov    0x10(%ebx),%eax
  80d69c:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d6a0:	89 04 24             	mov    %eax,(%esp)
  80d6a3:	e8 bb a6 ff ff       	call   807d63 <ntohs>
  80d6a8:	66 d1 e8             	shr    %ax
  80d6ab:	89 c2                	mov    %eax,%edx
  80d6ad:	83 e2 01             	and    $0x1,%edx
  80d6b0:	01 d6                	add    %edx,%esi
  80d6b2:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
  80d6b5:	7d 08                	jge    80d6bf <tcp_receive+0x865>
            pcb->rcv_ann_wnd = 0;
  80d6b7:	66 c7 47 2a 00 00    	movw   $0x0,0x2a(%edi)
  80d6bd:	eb 45                	jmp    80d704 <tcp_receive+0x8aa>
          } else {
            pcb->rcv_ann_wnd -= TCP_TCPLEN(cseg);
  80d6bf:	0f b7 77 2a          	movzwl 0x2a(%edi),%esi
  80d6c3:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80d6c7:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  80d6cb:	8b 43 10             	mov    0x10(%ebx),%eax
  80d6ce:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d6d2:	89 04 24             	mov    %eax,(%esp)
  80d6d5:	e8 89 a6 ff ff       	call   807d63 <ntohs>
  80d6da:	ba 01 00 00 00       	mov    $0x1,%edx
  80d6df:	a8 01                	test   $0x1,%al
  80d6e1:	75 17                	jne    80d6fa <tcp_receive+0x8a0>
  80d6e3:	8b 43 10             	mov    0x10(%ebx),%eax
  80d6e6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d6ea:	89 04 24             	mov    %eax,(%esp)
  80d6ed:	e8 71 a6 ff ff       	call   807d63 <ntohs>
  80d6f2:	66 d1 e8             	shr    %ax
  80d6f5:	89 c2                	mov    %eax,%edx
  80d6f7:	83 e2 01             	and    $0x1,%edx
  80d6fa:	66 2b 75 e4          	sub    -0x1c(%ebp),%si
  80d6fe:	29 d6                	sub    %edx,%esi
  80d700:	66 89 77 2a          	mov    %si,0x2a(%edi)
          }

          if (cseg->p->tot_len > 0) {
  80d704:	8b 43 04             	mov    0x4(%ebx),%eax
  80d707:	66 83 78 08 00       	cmpw   $0x0,0x8(%eax)
  80d70c:	74 24                	je     80d732 <tcp_receive+0x8d8>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
  80d70e:	8b 15 b8 c1 b3 00    	mov    0xb3c1b8,%edx
  80d714:	85 d2                	test   %edx,%edx
  80d716:	74 0e                	je     80d726 <tcp_receive+0x8cc>
              pbuf_cat(recv_data, cseg->p);
  80d718:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d71c:	89 14 24             	mov    %edx,(%esp)
  80d71f:	e8 6f 7b ff ff       	call   805293 <pbuf_cat>
  80d724:	eb 05                	jmp    80d72b <tcp_receive+0x8d1>
            } else {
              recv_data = cseg->p;
  80d726:	a3 b8 c1 b3 00       	mov    %eax,0xb3c1b8
            }
            cseg->p = NULL;
  80d72b:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  80d732:	8b 43 10             	mov    0x10(%ebx),%eax
  80d735:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d739:	89 04 24             	mov    %eax,(%esp)
  80d73c:	e8 22 a6 ff ff       	call   807d63 <ntohs>
  80d741:	a8 01                	test   $0x1,%al
  80d743:	74 14                	je     80d759 <tcp_receive+0x8ff>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags = TF_GOT_FIN;
  80d745:	c6 05 bc c1 b3 00 20 	movb   $0x20,0xb3c1bc
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  80d74c:	83 7f 10 04          	cmpl   $0x4,0x10(%edi)
  80d750:	75 07                	jne    80d759 <tcp_receive+0x8ff>
              pcb->state = CLOSE_WAIT;
  80d752:	c7 47 10 07 00 00 00 	movl   $0x7,0x10(%edi)
            } 
          }


          pcb->ooseq = cseg->next;
  80d759:	8b 03                	mov    (%ebx),%eax
  80d75b:	89 47 7c             	mov    %eax,0x7c(%edi)
          tcp_seg_free(cseg);
  80d75e:	89 1c 24             	mov    %ebx,(%esp)
  80d761:	e8 43 86 ff ff       	call   805da9 <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           is now in sequence. */
        while (pcb->ooseq != NULL &&
  80d766:	8b 5f 7c             	mov    0x7c(%edi),%ebx
  80d769:	85 db                	test   %ebx,%ebx
  80d76b:	74 0f                	je     80d77c <tcp_receive+0x922>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  80d76d:	8b 43 10             	mov    0x10(%ebx),%eax
  80d770:	8b 70 04             	mov    0x4(%eax),%esi
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           is now in sequence. */
        while (pcb->ooseq != NULL &&
  80d773:	3b 77 24             	cmp    0x24(%edi),%esi
  80d776:	0f 84 2b fe ff ff    	je     80d5a7 <tcp_receive+0x74d>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  80d77c:	0f b6 47 20          	movzbl 0x20(%edi),%eax
  80d780:	a8 01                	test   $0x1,%al
  80d782:	74 1b                	je     80d79f <tcp_receive+0x945>
  80d784:	83 e0 fe             	and    $0xfffffffe,%eax
  80d787:	83 c8 02             	or     $0x2,%eax
  80d78a:	88 47 20             	mov    %al,0x20(%edi)
  80d78d:	89 3c 24             	mov    %edi,(%esp)
  80d790:	e8 ac af ff ff       	call   808741 <tcp_output>
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
        accepted_inseq = 1; 
  80d795:	b8 01 00 00 00       	mov    $0x1,%eax
  80d79a:	e9 e1 02 00 00       	jmp    80da80 <tcp_receive+0xc26>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  80d79f:	83 c8 01             	or     $0x1,%eax
  80d7a2:	88 47 20             	mov    %al,0x20(%edi)
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
        accepted_inseq = 1; 
  80d7a5:	b8 01 00 00 00       	mov    $0x1,%eax
  80d7aa:	e9 d1 02 00 00       	jmp    80da80 <tcp_receive+0xc26>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_ack_now(pcb);
  80d7af:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  80d7b3:	89 3c 24             	mov    %edi,(%esp)
  80d7b6:	e8 86 af ff ff       	call   808741 <tcp_output>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  80d7bb:	8b 5f 7c             	mov    0x7c(%edi),%ebx
  80d7be:	85 db                	test   %ebx,%ebx
  80d7c0:	75 19                	jne    80d7db <tcp_receive+0x981>
          pcb->ooseq = tcp_seg_copy(&inseg);
  80d7c2:	c7 04 24 d4 c1 b3 00 	movl   $0xb3c1d4,(%esp)
  80d7c9:	e8 5b 86 ff ff       	call   805e29 <tcp_seg_copy>
  80d7ce:	89 47 7c             	mov    %eax,0x7c(%edi)
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d7d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80d7d6:	e9 a5 02 00 00       	jmp    80da80 <tcp_receive+0xc26>
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  80d7db:	8b 0d c8 c1 b3 00    	mov    0xb3c1c8,%ecx
                  break;
                }
              } else 
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if(TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)){
  80d7e1:	8d 41 ff             	lea    -0x1(%ecx),%eax
  80d7e4:	8d 51 01             	lea    0x1(%ecx),%edx
  80d7e7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  80d7ea:	be 00 00 00 00       	mov    $0x0,%esi
  80d7ef:	89 7d e0             	mov    %edi,-0x20(%ebp)
  80d7f2:	89 c7                	mov    %eax,%edi
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  80d7f4:	8b 43 10             	mov    0x10(%ebx),%eax
  80d7f7:	8b 40 04             	mov    0x4(%eax),%eax
  80d7fa:	39 c8                	cmp    %ecx,%eax
  80d7fc:	0f 85 9e 00 00 00    	jne    80d8a0 <tcp_receive+0xa46>
  80d802:	8b 7d e0             	mov    -0x20(%ebp),%edi
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d805:	b8 00 00 00 00       	mov    $0x0,%eax
            if (seqno == next->tcphdr->seqno) {
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  80d80a:	0f b7 4b 0c          	movzwl 0xc(%ebx),%ecx
  80d80e:	66 39 0d e0 c1 b3 00 	cmp    %cx,0xb3c1e0
  80d815:	0f 86 65 02 00 00    	jbe    80da80 <tcp_receive+0xc26>
                /* The incoming segment is larger than the old
                   segment. We replace the old segment with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  80d81b:	c7 04 24 d4 c1 b3 00 	movl   $0xb3c1d4,(%esp)
  80d822:	e8 02 86 ff ff       	call   805e29 <tcp_seg_copy>
  80d827:	89 c1                	mov    %eax,%ecx
  80d829:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (cseg != NULL) {
  80d82c:	85 c0                	test   %eax,%eax
  80d82e:	0f 84 1d 02 00 00    	je     80da51 <tcp_receive+0xbf7>
                  cseg->next = next->next;
  80d834:	8b 03                	mov    (%ebx),%eax
  80d836:	89 01                	mov    %eax,(%ecx)
                  if (prev != NULL) {
  80d838:	85 f6                	test   %esi,%esi
  80d83a:	74 04                	je     80d840 <tcp_receive+0x9e6>
                    prev->next = cseg;
  80d83c:	89 0e                	mov    %ecx,(%esi)
  80d83e:	eb 06                	jmp    80d846 <tcp_receive+0x9ec>
                  } else {
                    pcb->ooseq = cseg;
  80d840:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80d843:	89 47 7c             	mov    %eax,0x7c(%edi)
                  }
                  tcp_seg_free(next);
  80d846:	89 1c 24             	mov    %ebx,(%esp)
  80d849:	e8 5b 85 ff ff       	call   805da9 <tcp_seg_free>
                  if (cseg->next != NULL) {
  80d84e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  80d851:	8b 06                	mov    (%esi),%eax
  80d853:	85 c0                	test   %eax,%eax
  80d855:	0f 84 fd 01 00 00    	je     80da58 <tcp_receive+0xbfe>
                    next = cseg->next;
                    if (TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  80d85b:	8b 15 c8 c1 b3 00    	mov    0xb3c1c8,%edx
  80d861:	8b 40 10             	mov    0x10(%eax),%eax
  80d864:	8b 48 04             	mov    0x4(%eax),%ecx
  80d867:	0f b7 5e 0c          	movzwl 0xc(%esi),%ebx
  80d86b:	29 cb                	sub    %ecx,%ebx
  80d86d:	01 d3                	add    %edx,%ebx
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d86f:	b8 00 00 00 00       	mov    $0x0,%eax
                    pcb->ooseq = cseg;
                  }
                  tcp_seg_free(next);
                  if (cseg->next != NULL) {
                    next = cseg->next;
                    if (TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  80d874:	85 db                	test   %ebx,%ebx
  80d876:	0f 8e 04 02 00 00    	jle    80da80 <tcp_receive+0xc26>
                      /* We need to trim the incoming segment. */
                      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  80d87c:	89 c8                	mov    %ecx,%eax
  80d87e:	29 d0                	sub    %edx,%eax
  80d880:	66 89 46 0c          	mov    %ax,0xc(%esi)
                      pbuf_realloc(cseg->p, cseg->len);
  80d884:	0f b7 c0             	movzwl %ax,%eax
  80d887:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d88b:	8b 46 04             	mov    0x4(%esi),%eax
  80d88e:	89 04 24             	mov    %eax,(%esp)
  80d891:	e8 b0 78 ff ff       	call   805146 <pbuf_realloc>
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d896:	b8 00 00 00 00       	mov    $0x0,%eax
  80d89b:	e9 e0 01 00 00       	jmp    80da80 <tcp_receive+0xc26>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  80d8a0:	85 f6                	test   %esi,%esi
  80d8a2:	75 59                	jne    80d8fd <tcp_receive+0xaa3>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  80d8a4:	39 c1                	cmp    %eax,%ecx
  80d8a6:	0f 89 f2 00 00 00    	jns    80d99e <tcp_receive+0xb44>
  80d8ac:	8b 7d e0             	mov    -0x20(%ebp),%edi
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */

                  if (TCP_SEQ_GT(seqno + inseg.len, next->tcphdr->seqno)) {
  80d8af:	0f b7 15 e0 c1 b3 00 	movzwl 0xb3c1e0,%edx
  80d8b6:	01 ca                	add    %ecx,%edx
  80d8b8:	29 c2                	sub    %eax,%edx
  80d8ba:	85 d2                	test   %edx,%edx
  80d8bc:	7e 1c                	jle    80d8da <tcp_receive+0xa80>
                    /* We need to trim the incoming segment. */
                    inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  80d8be:	29 c8                	sub    %ecx,%eax
  80d8c0:	66 a3 e0 c1 b3 00    	mov    %ax,0xb3c1e0
                    pbuf_realloc(inseg.p, inseg.len);
  80d8c6:	0f b7 c0             	movzwl %ax,%eax
  80d8c9:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d8cd:	a1 d8 c1 b3 00       	mov    0xb3c1d8,%eax
  80d8d2:	89 04 24             	mov    %eax,(%esp)
  80d8d5:	e8 6c 78 ff ff       	call   805146 <pbuf_realloc>
                  }
                  cseg = tcp_seg_copy(&inseg);
  80d8da:	c7 04 24 d4 c1 b3 00 	movl   $0xb3c1d4,(%esp)
  80d8e1:	e8 43 85 ff ff       	call   805e29 <tcp_seg_copy>
                  if (cseg != NULL) {
  80d8e6:	85 c0                	test   %eax,%eax
  80d8e8:	0f 84 71 01 00 00    	je     80da5f <tcp_receive+0xc05>
                    cseg->next = next;
  80d8ee:	89 18                	mov    %ebx,(%eax)
                    pcb->ooseq = cseg;
  80d8f0:	89 47 7c             	mov    %eax,0x7c(%edi)
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d8f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80d8f8:	e9 83 01 00 00       	jmp    80da80 <tcp_receive+0xc26>
                  break;
                }
              } else 
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if(TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)){
  80d8fd:	8b 56 10             	mov    0x10(%esi),%edx
  80d900:	3b 7a 04             	cmp    0x4(%edx),%edi
  80d903:	0f 88 95 00 00 00    	js     80d99e <tcp_receive+0xb44>
  80d909:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  80d90c:	29 c2                	sub    %eax,%edx
  80d90e:	85 d2                	test   %edx,%edx
  80d910:	0f 8f 88 00 00 00    	jg     80d99e <tcp_receive+0xb44>
                /* The sequence number of the incoming segment is in
                   between the sequence numbers of the previous and
                   the next segment on ->ooseq. We trim and insert the
                   incoming segment and trim the previous segment, if
                   needed. */
                if (TCP_SEQ_GT(seqno + inseg.len, next->tcphdr->seqno)) {
  80d916:	0f b7 15 e0 c1 b3 00 	movzwl 0xb3c1e0,%edx
  80d91d:	01 ca                	add    %ecx,%edx
  80d91f:	29 c2                	sub    %eax,%edx
  80d921:	85 d2                	test   %edx,%edx
  80d923:	7e 1c                	jle    80d941 <tcp_receive+0xae7>
                  /* We need to trim the incoming segment. */
                  inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  80d925:	29 c8                	sub    %ecx,%eax
  80d927:	66 a3 e0 c1 b3 00    	mov    %ax,0xb3c1e0
                  pbuf_realloc(inseg.p, inseg.len);
  80d92d:	0f b7 c0             	movzwl %ax,%eax
  80d930:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d934:	a1 d8 c1 b3 00       	mov    0xb3c1d8,%eax
  80d939:	89 04 24             	mov    %eax,(%esp)
  80d93c:	e8 05 78 ff ff       	call   805146 <pbuf_realloc>
                }

                cseg = tcp_seg_copy(&inseg);
  80d941:	c7 04 24 d4 c1 b3 00 	movl   $0xb3c1d4,(%esp)
  80d948:	e8 dc 84 ff ff       	call   805e29 <tcp_seg_copy>
                if (cseg != NULL) {
  80d94d:	85 c0                	test   %eax,%eax
  80d94f:	0f 84 11 01 00 00    	je     80da66 <tcp_receive+0xc0c>
                  cseg->next = next;
  80d955:	89 18                	mov    %ebx,(%eax)
                  prev->next = cseg;
  80d957:	89 06                	mov    %eax,(%esi)
                  if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  80d959:	8b 46 10             	mov    0x10(%esi),%eax
  80d95c:	8b 50 04             	mov    0x4(%eax),%edx
  80d95f:	8b 0d c8 c1 b3 00    	mov    0xb3c1c8,%ecx
  80d965:	0f b7 5e 0c          	movzwl 0xc(%esi),%ebx
  80d969:	29 cb                	sub    %ecx,%ebx
  80d96b:	01 d3                	add    %edx,%ebx
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d96d:	b8 00 00 00 00       	mov    $0x0,%eax

                cseg = tcp_seg_copy(&inseg);
                if (cseg != NULL) {
                  cseg->next = next;
                  prev->next = cseg;
                  if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  80d972:	85 db                	test   %ebx,%ebx
  80d974:	0f 8e 06 01 00 00    	jle    80da80 <tcp_receive+0xc26>
                    /* We need to trim the prev segment. */
                    prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  80d97a:	89 c8                	mov    %ecx,%eax
  80d97c:	29 d0                	sub    %edx,%eax
  80d97e:	66 89 46 0c          	mov    %ax,0xc(%esi)
                    pbuf_realloc(prev->p, prev->len);
  80d982:	0f b7 c0             	movzwl %ax,%eax
  80d985:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d989:	8b 46 04             	mov    0x4(%esi),%eax
  80d98c:	89 04 24             	mov    %eax,(%esp)
  80d98f:	e8 b2 77 ff ff       	call   805146 <pbuf_realloc>
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d994:	b8 00 00 00 00       	mov    $0x0,%eax
  80d999:	e9 e2 00 00 00       	jmp    80da80 <tcp_receive+0xc26>
                break;
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  80d99e:	8b 13                	mov    (%ebx),%edx
  80d9a0:	85 d2                	test   %edx,%edx
  80d9a2:	75 62                	jne    80da06 <tcp_receive+0xbac>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  80d9a4:	29 c1                	sub    %eax,%ecx
                break;
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  80d9a6:	85 c9                	test   %ecx,%ecx
  80d9a8:	0f 8e bf 00 00 00    	jle    80da6d <tcp_receive+0xc13>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                next->next = tcp_seg_copy(&inseg);
  80d9ae:	c7 04 24 d4 c1 b3 00 	movl   $0xb3c1d4,(%esp)
  80d9b5:	e8 6f 84 ff ff       	call   805e29 <tcp_seg_copy>
  80d9ba:	89 03                	mov    %eax,(%ebx)
                if (next->next != NULL) {
  80d9bc:	85 c0                	test   %eax,%eax
  80d9be:	0f 84 b0 00 00 00    	je     80da74 <tcp_receive+0xc1a>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  80d9c4:	8b 43 10             	mov    0x10(%ebx),%eax
  80d9c7:	8b 50 04             	mov    0x4(%eax),%edx
  80d9ca:	8b 0d c8 c1 b3 00    	mov    0xb3c1c8,%ecx
  80d9d0:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  80d9d4:	29 ce                	sub    %ecx,%esi
  80d9d6:	01 d6                	add    %edx,%esi
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d9d8:	b8 00 00 00 00       	mov    $0x0,%eax
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                next->next = tcp_seg_copy(&inseg);
                if (next->next != NULL) {
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  80d9dd:	85 f6                	test   %esi,%esi
  80d9df:	0f 8e 9b 00 00 00    	jle    80da80 <tcp_receive+0xc26>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  80d9e5:	89 c8                	mov    %ecx,%eax
  80d9e7:	29 d0                	sub    %edx,%eax
  80d9e9:	66 89 43 0c          	mov    %ax,0xc(%ebx)
                    pbuf_realloc(next->p, next->len);
  80d9ed:	0f b7 c0             	movzwl %ax,%eax
  80d9f0:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d9f4:	8b 43 04             	mov    0x4(%ebx),%eax
  80d9f7:	89 04 24             	mov    %eax,(%esp)
  80d9fa:	e8 47 77 ff ff       	call   805146 <pbuf_realloc>
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80d9ff:	b8 00 00 00 00       	mov    $0x0,%eax
  80da04:	eb 7a                	jmp    80da80 <tcp_receive+0xc26>
                break;
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  80da06:	89 de                	mov    %ebx,%esi
  80da08:	89 d3                	mov    %edx,%ebx
  80da0a:	e9 e5 fd ff ff       	jmp    80d7f4 <tcp_receive+0x99a>
        }
#endif /* TCP_QUEUE_OOSEQ */

      }
    } else {
      tcp_ack_now(pcb);
  80da0f:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  80da13:	89 3c 24             	mov    %edi,(%esp)
  80da16:	e8 26 ad ff ff       	call   808741 <tcp_output>
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80da1b:	b8 00 00 00 00       	mov    $0x0,%eax
  80da20:	eb 5e                	jmp    80da80 <tcp_receive+0xc26>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  80da22:	8b 15 c8 c1 b3 00    	mov    0xb3c1c8,%edx
  80da28:	8b 47 24             	mov    0x24(%edi),%eax
  80da2b:	39 c2                	cmp    %eax,%edx
  80da2d:	78 0f                	js     80da3e <tcp_receive+0xbe4>
  80da2f:	83 c2 01             	add    $0x1,%edx
  80da32:	29 c2                	sub    %eax,%edx
  80da34:	0f b7 47 28          	movzwl 0x28(%edi),%eax
  80da38:	29 c2                	sub    %eax,%edx
  80da3a:	85 d2                	test   %edx,%edx
  80da3c:	7e 3d                	jle    80da7b <tcp_receive+0xc21>
      tcp_ack_now(pcb);
  80da3e:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  80da42:	89 3c 24             	mov    %edi,(%esp)
  80da45:	e8 f7 ac ff ff       	call   808741 <tcp_output>
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  u8_t accepted_inseq = 0;
  80da4a:	b8 00 00 00 00       	mov    $0x0,%eax
  80da4f:	eb 2f                	jmp    80da80 <tcp_receive+0xc26>
  80da51:	b8 00 00 00 00       	mov    $0x0,%eax
  80da56:	eb 28                	jmp    80da80 <tcp_receive+0xc26>
  80da58:	b8 00 00 00 00       	mov    $0x0,%eax
  80da5d:	eb 21                	jmp    80da80 <tcp_receive+0xc26>
  80da5f:	b8 00 00 00 00       	mov    $0x0,%eax
  80da64:	eb 1a                	jmp    80da80 <tcp_receive+0xc26>
  80da66:	b8 00 00 00 00       	mov    $0x0,%eax
  80da6b:	eb 13                	jmp    80da80 <tcp_receive+0xc26>
  80da6d:	b8 00 00 00 00       	mov    $0x0,%eax
  80da72:	eb 0c                	jmp    80da80 <tcp_receive+0xc26>
  80da74:	b8 00 00 00 00       	mov    $0x0,%eax
  80da79:	eb 05                	jmp    80da80 <tcp_receive+0xc26>
  80da7b:	b8 00 00 00 00       	mov    $0x0,%eax
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
      tcp_ack_now(pcb);
    }
  }
  return accepted_inseq;
}
  80da80:	83 c4 2c             	add    $0x2c,%esp
  80da83:	5b                   	pop    %ebx
  80da84:	5e                   	pop    %esi
  80da85:	5f                   	pop    %edi
  80da86:	5d                   	pop    %ebp
  80da87:	c3                   	ret    

0080da88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  80da88:	55                   	push   %ebp
  80da89:	89 e5                	mov    %esp,%ebp
  80da8b:	57                   	push   %edi
  80da8c:	56                   	push   %esi
  80da8d:	53                   	push   %ebx
  80da8e:	83 ec 4c             	sub    $0x4c,%esp
  80da91:	8b 75 08             	mov    0x8(%ebp),%esi
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = p->payload;
  80da94:	8b 5e 04             	mov    0x4(%esi),%ebx
  80da97:	89 1d cc c1 b3 00    	mov    %ebx,0xb3c1cc
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  80da9d:	0f b7 03             	movzwl (%ebx),%eax
  80daa0:	89 04 24             	mov    %eax,(%esp)
  80daa3:	e8 bb a2 ff ff       	call   807d63 <ntohs>
  80daa8:	66 c1 e8 08          	shr    $0x8,%ax
  80daac:	83 e0 0f             	and    $0xf,%eax
  80daaf:	8d 04 83             	lea    (%ebx,%eax,4),%eax
  80dab2:	a3 d0 c1 b3 00       	mov    %eax,0xb3c1d0
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  80dab7:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
  80dabc:	0f b7 00             	movzwl (%eax),%eax
  80dabf:	89 04 24             	mov    %eax,(%esp)
  80dac2:	e8 9c a2 ff ff       	call   807d63 <ntohs>
  80dac7:	66 c1 e8 06          	shr    $0x6,%ax
  80dacb:	83 e0 3c             	and    $0x3c,%eax
  80dace:	f7 d8                	neg    %eax
  80dad0:	98                   	cwtl   
  80dad1:	89 44 24 04          	mov    %eax,0x4(%esp)
  80dad5:	89 34 24             	mov    %esi,(%esp)
  80dad8:	e8 13 72 ff ff       	call   804cf0 <pbuf_header>
  80dadd:	84 c0                	test   %al,%al
  80dadf:	75 07                	jne    80dae8 <tcp_input+0x60>
  80dae1:	66 83 7e 08 13       	cmpw   $0x13,0x8(%esi)
  80dae6:	77 0d                	ja     80daf5 <tcp_input+0x6d>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
    TCP_STATS_INC(tcp.drop);
    snmp_inc_tcpinerrs();
    pbuf_free(p);
  80dae8:	89 34 24             	mov    %esi,(%esp)
  80daeb:	e8 e4 72 ff ff       	call   804dd4 <pbuf_free>
    return;
  80daf0:	e9 cc 0c 00 00       	jmp    80e7c1 <tcp_input+0xd39>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&(iphdr->dest), inp) ||
  80daf5:	8b 45 0c             	mov    0xc(%ebp),%eax
  80daf8:	89 44 24 04          	mov    %eax,0x4(%esp)
  80dafc:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
  80db01:	83 c0 10             	add    $0x10,%eax
  80db04:	89 04 24             	mov    %eax,(%esp)
  80db07:	e8 65 8f ff ff       	call   806a71 <ip_addr_isbroadcast>
  80db0c:	84 c0                	test   %al,%al
  80db0e:	75 26                	jne    80db36 <tcp_input+0xae>
      ip_addr_ismulticast(&(iphdr->dest))) {
  80db10:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
  80db15:	8b 58 10             	mov    0x10(%eax),%ebx
  80db18:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80db1f:	e8 86 a4 ff ff       	call   807faa <ntohl>
  80db24:	21 c3                	and    %eax,%ebx
  80db26:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80db2d:	e8 78 a4 ff ff       	call   807faa <ntohl>
    pbuf_free(p);
    return;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&(iphdr->dest), inp) ||
  80db32:	39 c3                	cmp    %eax,%ebx
  80db34:	75 0f                	jne    80db45 <tcp_input+0xbd>
      ip_addr_ismulticast(&(iphdr->dest))) {
    TCP_STATS_INC(tcp.proterr);
    TCP_STATS_INC(tcp.drop);
    snmp_inc_tcpinerrs();
    pbuf_free(p);
  80db36:	89 34 24             	mov    %esi,(%esp)
  80db39:	e8 96 72 ff ff       	call   804dd4 <pbuf_free>
    return;
  80db3e:	66 90                	xchg   %ax,%ax
  80db40:	e9 7c 0c 00 00       	jmp    80e7c1 <tcp_input+0xd39>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src),
      (struct ip_addr *)&(iphdr->dest),
  80db45:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
    return;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src),
  80db4a:	0f b7 56 08          	movzwl 0x8(%esi),%edx
  80db4e:	89 54 24 10          	mov    %edx,0x10(%esp)
  80db52:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80db59:	00 
  80db5a:	8d 50 10             	lea    0x10(%eax),%edx
  80db5d:	89 54 24 08          	mov    %edx,0x8(%esp)
  80db61:	83 c0 0c             	add    $0xc,%eax
  80db64:	89 44 24 04          	mov    %eax,0x4(%esp)
  80db68:	89 34 24             	mov    %esi,(%esp)
  80db6b:	e8 9e 9e ff ff       	call   807a0e <inet_chksum_pseudo>
  80db70:	66 85 c0             	test   %ax,%ax
  80db73:	74 0d                	je     80db82 <tcp_input+0xfa>
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
    TCP_STATS_INC(tcp.drop);
    snmp_inc_tcpinerrs();
    pbuf_free(p);
  80db75:	89 34 24             	mov    %esi,(%esp)
  80db78:	e8 57 72 ff ff       	call   804dd4 <pbuf_free>
    return;
  80db7d:	e9 3f 0c 00 00       	jmp    80e7c1 <tcp_input+0xd39>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  80db82:	a1 d0 c1 b3 00       	mov    0xb3c1d0,%eax
  80db87:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80db8b:	89 04 24             	mov    %eax,(%esp)
  80db8e:	e8 d0 a1 ff ff       	call   807d63 <ntohs>
  80db93:	66 c1 e8 0c          	shr    $0xc,%ax
  if(pbuf_header(p, -(hdrlen * 4))){
  80db97:	f7 d8                	neg    %eax
  80db99:	c1 e0 02             	shl    $0x2,%eax
  80db9c:	98                   	cwtl   
  80db9d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80dba1:	89 34 24             	mov    %esi,(%esp)
  80dba4:	e8 47 71 ff ff       	call   804cf0 <pbuf_header>
  80dba9:	84 c0                	test   %al,%al
  80dbab:	74 0d                	je     80dbba <tcp_input+0x132>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
    TCP_STATS_INC(tcp.drop);
    snmp_inc_tcpinerrs();
    pbuf_free(p);
  80dbad:	89 34 24             	mov    %esi,(%esp)
  80dbb0:	e8 1f 72 ff ff       	call   804dd4 <pbuf_free>
    return;
  80dbb5:	e9 07 0c 00 00       	jmp    80e7c1 <tcp_input+0xd39>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  80dbba:	8b 1d d0 c1 b3 00    	mov    0xb3c1d0,%ebx
  80dbc0:	0f b7 03             	movzwl (%ebx),%eax
  80dbc3:	89 04 24             	mov    %eax,(%esp)
  80dbc6:	e8 98 a1 ff ff       	call   807d63 <ntohs>
  80dbcb:	66 89 03             	mov    %ax,(%ebx)
  tcphdr->dest = ntohs(tcphdr->dest);
  80dbce:	8b 1d d0 c1 b3 00    	mov    0xb3c1d0,%ebx
  80dbd4:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  80dbd8:	89 04 24             	mov    %eax,(%esp)
  80dbdb:	e8 83 a1 ff ff       	call   807d63 <ntohs>
  80dbe0:	66 89 43 02          	mov    %ax,0x2(%ebx)
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  80dbe4:	8b 1d d0 c1 b3 00    	mov    0xb3c1d0,%ebx
  80dbea:	8b 43 04             	mov    0x4(%ebx),%eax
  80dbed:	89 04 24             	mov    %eax,(%esp)
  80dbf0:	e8 b5 a3 ff ff       	call   807faa <ntohl>
  80dbf5:	89 43 04             	mov    %eax,0x4(%ebx)
  80dbf8:	a3 c8 c1 b3 00       	mov    %eax,0xb3c1c8
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  80dbfd:	8b 1d d0 c1 b3 00    	mov    0xb3c1d0,%ebx
  80dc03:	8b 43 08             	mov    0x8(%ebx),%eax
  80dc06:	89 04 24             	mov    %eax,(%esp)
  80dc09:	e8 9c a3 ff ff       	call   807faa <ntohl>
  80dc0e:	89 43 08             	mov    %eax,0x8(%ebx)
  80dc11:	a3 c4 c1 b3 00       	mov    %eax,0xb3c1c4
  tcphdr->wnd = ntohs(tcphdr->wnd);
  80dc16:	8b 1d d0 c1 b3 00    	mov    0xb3c1d0,%ebx
  80dc1c:	0f b7 43 0e          	movzwl 0xe(%ebx),%eax
  80dc20:	89 04 24             	mov    %eax,(%esp)
  80dc23:	e8 3b a1 ff ff       	call   807d63 <ntohs>
  80dc28:	66 89 43 0e          	mov    %ax,0xe(%ebx)

  flags = TCPH_FLAGS(tcphdr) & TCP_FLAGS;
  80dc2c:	a1 d0 c1 b3 00       	mov    0xb3c1d0,%eax
  80dc31:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80dc35:	89 04 24             	mov    %eax,(%esp)
  80dc38:	e8 26 a1 ff ff       	call   807d63 <ntohs>
  80dc3d:	89 c1                	mov    %eax,%ecx
  80dc3f:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
  80dc43:	83 e0 3f             	and    $0x3f,%eax
  80dc46:	a2 c0 c1 b3 00       	mov    %al,0xb3c1c0
  tcplen = p->tot_len + ((flags & TCP_FIN || flags & TCP_SYN)? 1: 0);
  80dc4b:	f6 c1 03             	test   $0x3,%cl
  80dc4e:	0f 95 c0             	setne  %al
  80dc51:	0f b6 c0             	movzbl %al,%eax
  80dc54:	66 03 46 08          	add    0x8(%esi),%ax
  80dc58:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
  80dc5c:	66 a3 be c1 b3 00    	mov    %ax,0xb3c1be
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  80dc62:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  80dc67:	89 45 d0             	mov    %eax,-0x30(%ebp)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  80dc6a:	8b 15 d0 c1 b3 00    	mov    0xb3c1d0,%edx
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
  80dc70:	8b 0d cc c1 b3 00    	mov    0xb3c1cc,%ecx
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  80dc76:	89 c3                	mov    %eax,%ebx
  flags = TCPH_FLAGS(tcphdr) & TCP_FLAGS;
  tcplen = p->tot_len + ((flags & TCP_FIN || flags & TCP_SYN)? 1: 0);

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  80dc78:	bf 00 00 00 00       	mov    $0x0,%edi

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  80dc7d:	e9 ea 00 00 00       	jmp    80dd6c <tcp_input+0x2e4>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  80dc82:	8b 43 10             	mov    0x10(%ebx),%eax
  80dc85:	85 c0                	test   %eax,%eax
  80dc87:	75 1c                	jne    80dca5 <tcp_input+0x21d>
  80dc89:	c7 44 24 08 64 40 81 	movl   $0x814064,0x8(%esp)
  80dc90:	00 
  80dc91:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
  80dc98:	00 
  80dc99:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80dca0:	e8 e9 13 00 00       	call   80f08e <_panic>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  80dca5:	83 f8 0a             	cmp    $0xa,%eax
  80dca8:	75 1c                	jne    80dcc6 <tcp_input+0x23e>
  80dcaa:	c7 44 24 08 8c 40 81 	movl   $0x81408c,0x8(%esp)
  80dcb1:	00 
  80dcb2:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
  80dcb9:	00 
  80dcba:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80dcc1:	e8 c8 13 00 00       	call   80f08e <_panic>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  80dcc6:	83 f8 01             	cmp    $0x1,%eax
  80dcc9:	75 1c                	jne    80dce7 <tcp_input+0x25f>
  80dccb:	c7 44 24 08 b8 40 81 	movl   $0x8140b8,0x8(%esp)
  80dcd2:	00 
  80dcd3:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
  80dcda:	00 
  80dcdb:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80dce2:	e8 a7 13 00 00       	call   80f08e <_panic>
    if (pcb->remote_port == tcphdr->src &&
  80dce7:	0f b7 02             	movzwl (%edx),%eax
  80dcea:	66 39 43 1e          	cmp    %ax,0x1e(%ebx)
  80dcee:	75 77                	jne    80dd67 <tcp_input+0x2df>
  80dcf0:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  80dcf4:	66 39 43 1c          	cmp    %ax,0x1c(%ebx)
  80dcf8:	75 6d                	jne    80dd67 <tcp_input+0x2df>
       pcb->local_port == tcphdr->dest &&
  80dcfa:	8b 41 0c             	mov    0xc(%ecx),%eax
  80dcfd:	39 43 04             	cmp    %eax,0x4(%ebx)
  80dd00:	75 65                	jne    80dd67 <tcp_input+0x2df>
       ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
  80dd02:	8b 41 10             	mov    0x10(%ecx),%eax
  80dd05:	39 03                	cmp    %eax,(%ebx)
  80dd07:	75 5e                	jne    80dd67 <tcp_input+0x2df>
       ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest))) {

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  80dd09:	8b 43 0c             	mov    0xc(%ebx),%eax
  80dd0c:	39 d8                	cmp    %ebx,%eax
  80dd0e:	75 1c                	jne    80dd2c <tcp_input+0x2a4>
  80dd10:	c7 44 24 08 e0 40 81 	movl   $0x8140e0,0x8(%esp)
  80dd17:	00 
  80dd18:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
  80dd1f:	00 
  80dd20:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80dd27:	e8 62 13 00 00       	call   80f08e <_panic>
      if (prev != NULL) {
  80dd2c:	85 ff                	test   %edi,%edi
  80dd2e:	0f 84 06 0a 00 00    	je     80e73a <tcp_input+0xcb2>
        prev->next = pcb->next;
  80dd34:	89 47 0c             	mov    %eax,0xc(%edi)
        pcb->next = tcp_active_pcbs;
  80dd37:	8b 45 d0             	mov    -0x30(%ebp),%eax
  80dd3a:	89 43 0c             	mov    %eax,0xc(%ebx)
        tcp_active_pcbs = pcb;
  80dd3d:	89 1d 5c c2 b3 00    	mov    %ebx,0xb3c25c
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  80dd43:	39 d8                	cmp    %ebx,%eax
  80dd45:	0f 85 ef 09 00 00    	jne    80e73a <tcp_input+0xcb2>
  80dd4b:	c7 44 24 08 0c 41 81 	movl   $0x81410c,0x8(%esp)
  80dd52:	00 
  80dd53:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
  80dd5a:	00 
  80dd5b:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80dd62:	e8 27 13 00 00       	call   80f08e <_panic>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  80dd67:	89 df                	mov    %ebx,%edi
  80dd69:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  80dd6c:	85 db                	test   %ebx,%ebx
  80dd6e:	0f 85 0e ff ff ff    	jne    80dc82 <tcp_input+0x1fa>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  80dd74:	8b 1d 70 c2 b3 00    	mov    0xb3c270,%ebx
  80dd7a:	e9 85 00 00 00       	jmp    80de04 <tcp_input+0x37c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  80dd7f:	83 7b 10 0a          	cmpl   $0xa,0x10(%ebx)
  80dd83:	74 1c                	je     80dda1 <tcp_input+0x319>
  80dd85:	c7 44 24 08 38 41 81 	movl   $0x814138,0x8(%esp)
  80dd8c:	00 
  80dd8d:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
  80dd94:	00 
  80dd95:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80dd9c:	e8 ed 12 00 00       	call   80f08e <_panic>
      if (pcb->remote_port == tcphdr->src &&
  80dda1:	0f b7 02             	movzwl (%edx),%eax
  80dda4:	66 39 43 1e          	cmp    %ax,0x1e(%ebx)
  80dda8:	75 57                	jne    80de01 <tcp_input+0x379>
  80ddaa:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  80ddae:	66 39 43 1c          	cmp    %ax,0x1c(%ebx)
  80ddb2:	75 4d                	jne    80de01 <tcp_input+0x379>
         pcb->local_port == tcphdr->dest &&
  80ddb4:	8b 41 0c             	mov    0xc(%ecx),%eax
  80ddb7:	39 43 04             	cmp    %eax,0x4(%ebx)
  80ddba:	75 45                	jne    80de01 <tcp_input+0x379>
         ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
  80ddbc:	8b 41 10             	mov    0x10(%ecx),%eax
  80ddbf:	39 03                	cmp    %eax,(%ebx)
  80ddc1:	75 3e                	jne    80de01 <tcp_input+0x379>
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
  if (TCP_SEQ_GT(seqno + tcplen, pcb->rcv_nxt)) {
  80ddc3:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
  80ddc7:	03 05 c8 c1 b3 00    	add    0xb3c1c8,%eax
  80ddcd:	89 c2                	mov    %eax,%edx
  80ddcf:	2b 53 24             	sub    0x24(%ebx),%edx
  80ddd2:	85 d2                	test   %edx,%edx
  80ddd4:	7e 03                	jle    80ddd9 <tcp_input+0x351>
    pcb->rcv_nxt = seqno + tcplen;
  80ddd6:	89 43 24             	mov    %eax,0x24(%ebx)
  }
  if (tcplen > 0) {
  80ddd9:	66 83 7d d6 00       	cmpw   $0x0,-0x2a(%ebp)
  80ddde:	74 0c                	je     80ddec <tcp_input+0x364>
    tcp_ack_now(pcb);
  80dde0:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80dde4:	89 1c 24             	mov    %ebx,(%esp)
  80dde7:	e8 55 a9 ff ff       	call   808741 <tcp_output>
  }
  return tcp_output(pcb);
  80ddec:	89 1c 24             	mov    %ebx,(%esp)
  80ddef:	e8 4d a9 ff ff       	call   808741 <tcp_output>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
        pbuf_free(p);
  80ddf4:	89 34 24             	mov    %esi,(%esp)
  80ddf7:	e8 d8 6f ff ff       	call   804dd4 <pbuf_free>
        return;
  80ddfc:	e9 c0 09 00 00       	jmp    80e7c1 <tcp_input+0xd39>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  80de01:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  80de04:	85 db                	test   %ebx,%ebx
  80de06:	0f 85 73 ff ff ff    	jne    80dd7f <tcp_input+0x2f7>
    }

  /* Finally, if we still did not get a match, we check all PCBs that
     are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  80de0c:	a1 64 c2 b3 00       	mov    0xb3c264,%eax
  80de11:	89 45 d0             	mov    %eax,-0x30(%ebp)
  80de14:	89 c3                	mov    %eax,%ebx
      }
    }

  /* Finally, if we still did not get a match, we check all PCBs that
     are LISTENing for incoming connections. */
    prev = NULL;
  80de16:	bf 00 00 00 00       	mov    $0x0,%edi
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  80de1b:	e9 af 01 00 00       	jmp    80dfcf <tcp_input+0x547>
      if ((ip_addr_isany(&(lpcb->local_ip)) ||
  80de20:	85 db                	test   %ebx,%ebx
  80de22:	74 0f                	je     80de33 <tcp_input+0x3ab>
  80de24:	8b 03                	mov    (%ebx),%eax
  80de26:	85 c0                	test   %eax,%eax
  80de28:	74 09                	je     80de33 <tcp_input+0x3ab>
  80de2a:	3b 41 10             	cmp    0x10(%ecx),%eax
  80de2d:	0f 85 97 01 00 00    	jne    80dfca <tcp_input+0x542>
        ip_addr_cmp(&(lpcb->local_ip), &(iphdr->dest))) &&
  80de33:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  80de37:	66 39 43 1c          	cmp    %ax,0x1c(%ebx)
  80de3b:	0f 85 89 01 00 00    	jne    80dfca <tcp_input+0x542>
        lpcb->local_port == tcphdr->dest) {
        /* Move this PCB to the front of the list so that subsequent
           lookups will be faster (we exploit locality in TCP segment
           arrivals). */
        if (prev != NULL) {
  80de41:	85 ff                	test   %edi,%edi
  80de43:	74 12                	je     80de57 <tcp_input+0x3cf>
          ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  80de45:	8b 43 0c             	mov    0xc(%ebx),%eax
  80de48:	89 47 0c             	mov    %eax,0xc(%edi)
                /* our successor is the remainder of the listening list */
          lpcb->next = tcp_listen_pcbs.listen_pcbs;
  80de4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  80de4e:	89 43 0c             	mov    %eax,0xc(%ebx)
                /* put this listening pcb at the head of the listening list */
          tcp_listen_pcbs.listen_pcbs = lpcb;
  80de51:	89 1d 64 c2 b3 00    	mov    %ebx,0xb3c264
  struct tcp_pcb *npcb;
  u32_t optdata;

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  80de57:	f6 45 d4 10          	testb  $0x10,-0x2c(%ebp)
  80de5b:	74 45                	je     80dea2 <tcp_input+0x41a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
      &(iphdr->dest), &(iphdr->src),
  80de5d:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
  80de62:	0f b7 0a             	movzwl (%edx),%ecx
  80de65:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  80de69:	0f b7 52 02          	movzwl 0x2(%edx),%edx
  80de6d:	89 54 24 10          	mov    %edx,0x10(%esp)
  80de71:	8d 50 0c             	lea    0xc(%eax),%edx
  80de74:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80de78:	83 c0 10             	add    $0x10,%eax
  80de7b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80de7f:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
  80de83:	03 05 c8 c1 b3 00    	add    0xb3c1c8,%eax
  80de89:	89 44 24 04          	mov    %eax,0x4(%esp)
  80de8d:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80de92:	83 c0 01             	add    $0x1,%eax
  80de95:	89 04 24             	mov    %eax,(%esp)
  80de98:	e8 38 ad ff ff       	call   808bd5 <tcp_rst>
  80de9d:	e9 1b 01 00 00       	jmp    80dfbd <tcp_input+0x535>
      &(iphdr->dest), &(iphdr->src),
      tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
  80dea2:	f6 45 d4 02          	testb  $0x2,-0x2c(%ebp)
  80dea6:	0f 84 11 01 00 00    	je     80dfbd <tcp_input+0x535>
#if TCP_LISTEN_BACKLOG
    if (pcb->accepts_pending >= pcb->backlog) {
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
  80deac:	0f b6 43 14          	movzbl 0x14(%ebx),%eax
  80deb0:	89 04 24             	mov    %eax,(%esp)
  80deb3:	e8 82 88 ff ff       	call   80673a <tcp_alloc>
  80deb8:	89 c7                	mov    %eax,%edi
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
  80deba:	85 c0                	test   %eax,%eax
  80debc:	0f 84 fb 00 00 00    	je     80dfbd <tcp_input+0x535>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_set(&(npcb->local_ip), &(iphdr->dest));
  80dec2:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
  80dec7:	83 f8 f0             	cmp    $0xfffffff0,%eax
  80deca:	74 05                	je     80ded1 <tcp_input+0x449>
  80decc:	8b 50 10             	mov    0x10(%eax),%edx
  80decf:	eb 05                	jmp    80ded6 <tcp_input+0x44e>
  80ded1:	ba 00 00 00 00       	mov    $0x0,%edx
  80ded6:	89 17                	mov    %edx,(%edi)
    npcb->local_port = pcb->local_port;
  80ded8:	0f b7 53 1c          	movzwl 0x1c(%ebx),%edx
  80dedc:	66 89 57 1c          	mov    %dx,0x1c(%edi)
    ip_addr_set(&(npcb->remote_ip), &(iphdr->src));
  80dee0:	83 f8 f4             	cmp    $0xfffffff4,%eax
  80dee3:	74 05                	je     80deea <tcp_input+0x462>
  80dee5:	8b 40 0c             	mov    0xc(%eax),%eax
  80dee8:	eb 05                	jmp    80deef <tcp_input+0x467>
  80deea:	b8 00 00 00 00       	mov    $0x0,%eax
  80deef:	89 47 04             	mov    %eax,0x4(%edi)
    npcb->remote_port = tcphdr->src;
  80def2:	8b 15 d0 c1 b3 00    	mov    0xb3c1d0,%edx
  80def8:	0f b7 02             	movzwl (%edx),%eax
  80defb:	66 89 47 1e          	mov    %ax,0x1e(%edi)
    npcb->state = SYN_RCVD;
  80deff:	c7 47 10 03 00 00 00 	movl   $0x3,0x10(%edi)
    npcb->rcv_nxt = seqno + 1;
  80df06:	a1 c8 c1 b3 00       	mov    0xb3c1c8,%eax
  80df0b:	8d 48 01             	lea    0x1(%eax),%ecx
  80df0e:	89 4f 24             	mov    %ecx,0x24(%edi)
    npcb->snd_wnd = tcphdr->wnd;
  80df11:	0f b7 52 0e          	movzwl 0xe(%edx),%edx
  80df15:	66 89 57 5c          	mov    %dx,0x5c(%edi)
    npcb->ssthresh = npcb->snd_wnd;
  80df19:	66 89 57 50          	mov    %dx,0x50(%edi)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  80df1d:	83 e8 01             	sub    $0x1,%eax
  80df20:	89 47 60             	mov    %eax,0x60(%edi)
    npcb->callback_arg = pcb->callback_arg;
  80df23:	8b 43 18             	mov    0x18(%ebx),%eax
  80df26:	89 47 18             	mov    %eax,0x18(%edi)
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
  80df29:	8b 43 20             	mov    0x20(%ebx),%eax
  80df2c:	89 87 90 00 00 00    	mov    %eax,0x90(%edi)
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & (SOF_DEBUG|SOF_DONTROUTE|SOF_KEEPALIVE|SOF_OOBINLINE|SOF_LINGER);
  80df32:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80df36:	66 25 99 01          	and    $0x199,%ax
  80df3a:	66 89 47 08          	mov    %ax,0x8(%edi)
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG(&tcp_active_pcbs, npcb);
  80df3e:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  80df43:	89 47 0c             	mov    %eax,0xc(%edi)
  80df46:	89 3d 5c c2 b3 00    	mov    %edi,0xb3c25c
  80df4c:	e8 01 46 ff ff       	call   802552 <tcp_timer_needed>

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
  80df51:	89 f8                	mov    %edi,%eax
  80df53:	e8 58 ee ff ff       	call   80cdb0 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  80df58:	8d 47 04             	lea    0x4(%edi),%eax
  80df5b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80df5f:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  80df63:	89 04 24             	mov    %eax,(%esp)
  80df66:	e8 5e 89 ff ff       	call   8068c9 <tcp_eff_send_mss>
  80df6b:	66 89 47 34          	mov    %ax,0x34(%edi)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Build an MSS option. */
    optdata = TCP_BUILD_MSS_OPTION();
  80df6f:	c7 04 24 b4 05 04 02 	movl   $0x20405b4,(%esp)
  80df76:	e8 f5 9d ff ff       	call   807d70 <htonl>
  80df7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    /* Send a SYN|ACK together with the MSS option. */
    tcp_enqueue(npcb, NULL, 0, TCP_SYN | TCP_ACK, 0, (u8_t *)&optdata, 4);
  80df7e:	c7 44 24 18 04 00 00 	movl   $0x4,0x18(%esp)
  80df85:	00 
  80df86:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  80df89:	89 44 24 14          	mov    %eax,0x14(%esp)
  80df8d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80df94:	00 
  80df95:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
  80df9c:	00 
  80df9d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80dfa4:	00 
  80dfa5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80dfac:	00 
  80dfad:	89 3c 24             	mov    %edi,(%esp)
  80dfb0:	e8 0b a0 ff ff       	call   807fc0 <tcp_enqueue>
    return tcp_output(npcb);
  80dfb5:	89 3c 24             	mov    %edi,(%esp)
  80dfb8:	e8 84 a7 ff ff       	call   808741 <tcp_output>
          tcp_listen_pcbs.listen_pcbs = lpcb;
        }
      
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
        tcp_listen_input(lpcb);
        pbuf_free(p);
  80dfbd:	89 34 24             	mov    %esi,(%esp)
  80dfc0:	e8 0f 6e ff ff       	call   804dd4 <pbuf_free>
        return;
  80dfc5:	e9 f7 07 00 00       	jmp    80e7c1 <tcp_input+0xd39>
  80dfca:	89 df                	mov    %ebx,%edi
    }

  /* Finally, if we still did not get a match, we check all PCBs that
     are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  80dfcc:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  80dfcf:	85 db                	test   %ebx,%ebx
  80dfd1:	0f 85 49 fe ff ff    	jne    80de20 <tcp_input+0x398>
  80dfd7:	e9 ae 07 00 00       	jmp    80e78a <tcp_input+0xd02>

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      /* Notify again application with data previously received. */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
  80dfdc:	8b 83 88 00 00 00    	mov    0x88(%ebx),%eax
  80dfe2:	85 c0                	test   %eax,%eax
  80dfe4:	74 1e                	je     80e004 <tcp_input+0x57c>
  80dfe6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80dfed:	00 
  80dfee:	89 54 24 08          	mov    %edx,0x8(%esp)
  80dff2:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80dff6:	8b 53 18             	mov    0x18(%ebx),%edx
  80dff9:	89 14 24             	mov    %edx,(%esp)
  80dffc:	ff d0                	call   *%eax
      if (err == ERR_OK) {
  80dffe:	84 c0                	test   %al,%al
  80e000:	74 0a                	je     80e00c <tcp_input+0x584>
  80e002:	eb 14                	jmp    80e018 <tcp_input+0x590>

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      /* Notify again application with data previously received. */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
  80e004:	89 14 24             	mov    %edx,(%esp)
  80e007:	e8 c8 6d ff ff       	call   804dd4 <pbuf_free>
      if (err == ERR_OK) {
        pcb->refused_data = NULL;
  80e00c:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  80e013:	00 00 00 
  80e016:	eb 0d                	jmp    80e025 <tcp_input+0x59d>
      } else {
        /* drop incoming packets, because pcb is "full" */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        pbuf_free(p);
  80e018:	89 34 24             	mov    %esi,(%esp)
  80e01b:	e8 b4 6d ff ff       	call   804dd4 <pbuf_free>
        return;
  80e020:	e9 9c 07 00 00       	jmp    80e7c1 <tcp_input+0xd39>
      }
    }

    tcp_input_pcb = pcb;
  80e025:	89 1d 78 c2 b3 00    	mov    %ebx,0xb3c278
  u8_t accepted_inseq;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  80e02b:	0f b6 05 c0 c1 b3 00 	movzbl 0xb3c1c0,%eax
  80e032:	a8 04                	test   $0x4,%al
  80e034:	74 64                	je     80e09a <tcp_input+0x612>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  80e036:	8b 43 10             	mov    0x10(%ebx),%eax
  80e039:	83 f8 02             	cmp    $0x2,%eax
  80e03c:	75 0f                	jne    80e04d <tcp_input+0x5c5>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
      }
    }

    if (acceptable) {
  80e03e:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e043:	39 43 54             	cmp    %eax,0x54(%ebx)
  80e046:	74 42                	je     80e08a <tcp_input+0x602>
  80e048:	e9 38 05 00 00       	jmp    80e585 <tcp_input+0xafd>
    if (pcb->state == SYN_SENT) {
      if (ackno == pcb->snd_nxt) {
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  80e04d:	8b 15 c8 c1 b3 00    	mov    0xb3c1c8,%edx
  80e053:	2b 53 24             	sub    0x24(%ebx),%edx
  80e056:	0f 88 43 07 00 00    	js     80e79f <tcp_input+0xd17>
  80e05c:	0f b7 4b 28          	movzwl 0x28(%ebx),%ecx
  80e060:	29 ca                	sub    %ecx,%edx
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
      }
    }

    if (acceptable) {
  80e062:	85 d2                	test   %edx,%edx
  80e064:	0f 8f 35 07 00 00    	jg     80e79f <tcp_input+0xd17>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  80e06a:	85 c0                	test   %eax,%eax
  80e06c:	75 1c                	jne    80e08a <tcp_input+0x602>
  80e06e:	c7 44 24 08 68 41 81 	movl   $0x814168,0x8(%esp)
  80e075:	00 
  80e076:	c7 44 24 04 09 02 00 	movl   $0x209,0x4(%esp)
  80e07d:	00 
  80e07e:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80e085:	e8 04 10 00 00       	call   80f08e <_panic>
      recv_flags = TF_RESET;
  80e08a:	c6 05 bc c1 b3 00 08 	movb   $0x8,0xb3c1bc
      pcb->flags &= ~TF_ACK_DELAY;
  80e091:	80 63 20 fe          	andb   $0xfe,0x20(%ebx)
  80e095:	e9 05 07 00 00       	jmp    80e79f <tcp_input+0xd17>
      return ERR_OK;
    }
  }

  /* Update the PCB (in)activity timer. */
  pcb->tmr = tcp_ticks;
  80e09a:	8b 15 60 c2 b3 00    	mov    0xb3c260,%edx
  80e0a0:	89 53 2c             	mov    %edx,0x2c(%ebx)
  pcb->keep_cnt_sent = 0;
  80e0a3:	c6 83 a5 00 00 00 00 	movb   $0x0,0xa5(%ebx)

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  80e0aa:	83 7b 10 09          	cmpl   $0x9,0x10(%ebx)
  80e0ae:	0f 87 d1 04 00 00    	ja     80e585 <tcp_input+0xafd>
  80e0b4:	8b 53 10             	mov    0x10(%ebx),%edx
  80e0b7:	ff 24 95 0c 42 81 00 	jmp    *0x81420c(,%edx,4)
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  80e0be:	83 e0 12             	and    $0x12,%eax
  80e0c1:	3c 12                	cmp    $0x12,%al
  80e0c3:	0f 85 03 01 00 00    	jne    80e1cc <tcp_input+0x744>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  80e0c9:	8b 43 78             	mov    0x78(%ebx),%eax
  80e0cc:	8b 40 10             	mov    0x10(%eax),%eax
  80e0cf:	8b 40 04             	mov    0x4(%eax),%eax
  80e0d2:	89 04 24             	mov    %eax,(%esp)
  80e0d5:	e8 d0 9e ff ff       	call   807faa <ntohl>
  80e0da:	8d 50 01             	lea    0x1(%eax),%edx
  80e0dd:	3b 15 c4 c1 b3 00    	cmp    0xb3c1c4,%edx
  80e0e3:	0f 85 e3 00 00 00    	jne    80e1cc <tcp_input+0x744>
      pcb->snd_buf++;
  80e0e9:	66 83 43 6e 01       	addw   $0x1,0x6e(%ebx)
      pcb->rcv_nxt = seqno + 1;
  80e0ee:	a1 c8 c1 b3 00       	mov    0xb3c1c8,%eax
  80e0f3:	8d 48 01             	lea    0x1(%eax),%ecx
  80e0f6:	89 4b 24             	mov    %ecx,0x24(%ebx)
      pcb->lastack = ackno;
  80e0f9:	89 53 48             	mov    %edx,0x48(%ebx)
      pcb->snd_wnd = tcphdr->wnd;
  80e0fc:	8b 15 d0 c1 b3 00    	mov    0xb3c1d0,%edx
  80e102:	0f b7 52 0e          	movzwl 0xe(%edx),%edx
  80e106:	66 89 53 5c          	mov    %dx,0x5c(%ebx)
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  80e10a:	83 e8 01             	sub    $0x1,%eax
  80e10d:	89 43 60             	mov    %eax,0x60(%ebx)
      pcb->state = ESTABLISHED;
  80e110:	c7 43 10 04 00 00 00 	movl   $0x4,0x10(%ebx)

      /* Parse any options in the SYNACK before using pcb->mss since that
       * can be changed by the received options! */
      tcp_parseopt(pcb);
  80e117:	89 d8                	mov    %ebx,%eax
  80e119:	e8 92 ec ff ff       	call   80cdb0 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  80e11e:	8d 43 04             	lea    0x4(%ebx),%eax
  80e121:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e125:	0f b7 43 34          	movzwl 0x34(%ebx),%eax
  80e129:	89 04 24             	mov    %eax,(%esp)
  80e12c:	e8 98 87 ff ff       	call   8068c9 <tcp_eff_send_mss>
  80e131:	66 89 43 34          	mov    %ax,0x34(%ebx)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
  80e135:	6b d0 0a             	imul   $0xa,%eax,%edx
  80e138:	66 89 53 50          	mov    %dx,0x50(%ebx)

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  80e13c:	8d 14 00             	lea    (%eax,%eax,1),%edx
  80e13f:	66 83 7b 4e 01       	cmpw   $0x1,0x4e(%ebx)
  80e144:	0f 44 c2             	cmove  %edx,%eax
  80e147:	66 89 43 4e          	mov    %ax,0x4e(%ebx)
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  80e14b:	0f b7 43 70          	movzwl 0x70(%ebx),%eax
  80e14f:	66 85 c0             	test   %ax,%ax
  80e152:	75 1c                	jne    80e170 <tcp_input+0x6e8>
  80e154:	c7 44 24 08 e1 41 81 	movl   $0x8141e1,0x8(%esp)
  80e15b:	00 
  80e15c:	c7 44 24 04 35 02 00 	movl   $0x235,0x4(%esp)
  80e163:	00 
  80e164:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80e16b:	e8 1e 0f 00 00       	call   80f08e <_panic>
      --pcb->snd_queuelen;
  80e170:	83 e8 01             	sub    $0x1,%eax
  80e173:	66 89 43 70          	mov    %ax,0x70(%ebx)
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  80e177:	8b 43 78             	mov    0x78(%ebx),%eax
      pcb->unacked = rseg->next;
  80e17a:	8b 10                	mov    (%eax),%edx
  80e17c:	89 53 78             	mov    %edx,0x78(%ebx)

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  80e17f:	85 d2                	test   %edx,%edx
  80e181:	75 08                	jne    80e18b <tcp_input+0x703>
        pcb->rtime = -1;
  80e183:	66 c7 43 32 ff ff    	movw   $0xffff,0x32(%ebx)
  80e189:	eb 0a                	jmp    80e195 <tcp_input+0x70d>
      else {
        pcb->rtime = 0;
  80e18b:	66 c7 43 32 00 00    	movw   $0x0,0x32(%ebx)
        pcb->nrtx = 0;
  80e191:	c6 43 46 00          	movb   $0x0,0x46(%ebx)
      }

      tcp_seg_free(rseg);
  80e195:	89 04 24             	mov    %eax,(%esp)
  80e198:	e8 0c 7c ff ff       	call   805da9 <tcp_seg_free>

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  80e19d:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
  80e1a3:	85 c0                	test   %eax,%eax
  80e1a5:	74 14                	je     80e1bb <tcp_input+0x733>
  80e1a7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e1ae:	00 
  80e1af:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e1b3:	8b 53 18             	mov    0x18(%ebx),%edx
  80e1b6:	89 14 24             	mov    %edx,(%esp)
  80e1b9:	ff d0                	call   *%eax
      tcp_ack_now(pcb);
  80e1bb:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e1bf:	89 1c 24             	mov    %ebx,(%esp)
  80e1c2:	e8 7a a5 ff ff       	call   808741 <tcp_output>
  80e1c7:	e9 d3 05 00 00       	jmp    80e79f <tcp_input+0xd17>
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
  80e1cc:	f6 05 c0 c1 b3 00 10 	testb  $0x10,0xb3c1c0
  80e1d3:	0f 84 c6 05 00 00    	je     80e79f <tcp_input+0xd17>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
        tcphdr->dest, tcphdr->src);
  80e1d9:	8b 15 d0 c1 b3 00    	mov    0xb3c1d0,%edx
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
  80e1df:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
  80e1e4:	0f b7 0a             	movzwl (%edx),%ecx
  80e1e7:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  80e1eb:	0f b7 52 02          	movzwl 0x2(%edx),%edx
  80e1ef:	89 54 24 10          	mov    %edx,0x10(%esp)
  80e1f3:	8d 50 0c             	lea    0xc(%eax),%edx
  80e1f6:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80e1fa:	83 c0 10             	add    $0x10,%eax
  80e1fd:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e201:	0f b7 05 be c1 b3 00 	movzwl 0xb3c1be,%eax
  80e208:	03 05 c8 c1 b3 00    	add    0xb3c1c8,%eax
  80e20e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e212:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e217:	89 04 24             	mov    %eax,(%esp)
  80e21a:	e8 b6 a9 ff ff       	call   808bd5 <tcp_rst>
  80e21f:	e9 7b 05 00 00       	jmp    80e79f <tcp_input+0xd17>
        tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK &&
  80e224:	83 e0 14             	and    $0x14,%eax
  80e227:	3c 10                	cmp    $0x10,%al
  80e229:	0f 85 70 05 00 00    	jne    80e79f <tcp_input+0xd17>
       !(flags & TCP_RST)) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  80e22f:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e234:	8d 50 ff             	lea    -0x1(%eax),%edx
  80e237:	3b 53 48             	cmp    0x48(%ebx),%edx
  80e23a:	0f 88 b8 00 00 00    	js     80e2f8 <tcp_input+0x870>
  80e240:	89 c2                	mov    %eax,%edx
  80e242:	2b 53 54             	sub    0x54(%ebx),%edx
  80e245:	85 d2                	test   %edx,%edx
  80e247:	0f 8f ab 00 00 00    	jg     80e2f8 <tcp_input+0x870>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
  80e24d:	c7 43 10 04 00 00 00 	movl   $0x4,0x10(%ebx)
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
  80e254:	8b 83 90 00 00 00    	mov    0x90(%ebx),%eax
  80e25a:	85 c0                	test   %eax,%eax
  80e25c:	75 1c                	jne    80e27a <tcp_input+0x7f2>
  80e25e:	c7 44 24 08 f7 41 81 	movl   $0x8141f7,0x8(%esp)
  80e265:	00 
  80e266:	c7 44 24 04 5b 02 00 	movl   $0x25b,0x4(%esp)
  80e26d:	00 
  80e26e:	c7 04 24 88 41 81 00 	movl   $0x814188,(%esp)
  80e275:	e8 14 0e 00 00       	call   80f08e <_panic>
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  80e27a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e281:	00 
  80e282:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e286:	8b 53 18             	mov    0x18(%ebx),%edx
  80e289:	89 14 24             	mov    %edx,(%esp)
  80e28c:	ff d0                	call   *%eax
        if (err != ERR_OK) {
  80e28e:	84 c0                	test   %al,%al
  80e290:	74 17                	je     80e2a9 <tcp_input+0x821>
          /* If the accept function returns with an error, we abort
           * the connection. */
          tcp_abort(pcb);
  80e292:	89 1c 24             	mov    %ebx,(%esp)
  80e295:	e8 1f 7f ff ff       	call   8061b9 <tcp_abort>
      }
    }

    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    tcp_input_pcb = NULL;
  80e29a:	c7 05 78 c2 b3 00 00 	movl   $0x0,0xb3c278
  80e2a1:	00 00 00 
  80e2a4:	e9 1a 04 00 00       	jmp    80e6c3 <tcp_input+0xc3b>
          /* If the accept function returns with an error, we abort
           * the connection. */
          tcp_abort(pcb);
          return ERR_ABRT;
        }
        old_cwnd = pcb->cwnd;
  80e2a9:	0f b7 73 4e          	movzwl 0x4e(%ebx),%esi
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        accepted_inseq = tcp_receive(pcb);
  80e2ad:	89 d8                	mov    %ebx,%eax
  80e2af:	e8 a6 eb ff ff       	call   80ce5a <tcp_receive>

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  80e2b4:	66 83 fe 01          	cmp    $0x1,%si
  80e2b8:	75 09                	jne    80e2c3 <tcp_input+0x83b>
  80e2ba:	0f b7 4b 34          	movzwl 0x34(%ebx),%ecx
  80e2be:	8d 14 09             	lea    (%ecx,%ecx,1),%edx
  80e2c1:	eb 04                	jmp    80e2c7 <tcp_input+0x83f>
  80e2c3:	0f b7 53 34          	movzwl 0x34(%ebx),%edx
  80e2c7:	66 89 53 4e          	mov    %dx,0x4e(%ebx)

        if ((flags & TCP_FIN) && accepted_inseq) {
  80e2cb:	f6 05 c0 c1 b3 00 01 	testb  $0x1,0xb3c1c0
  80e2d2:	0f 84 c7 04 00 00    	je     80e79f <tcp_input+0xd17>
  80e2d8:	84 c0                	test   %al,%al
  80e2da:	0f 84 bf 04 00 00    	je     80e79f <tcp_input+0xd17>
          tcp_ack_now(pcb);
  80e2e0:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e2e4:	89 1c 24             	mov    %ebx,(%esp)
  80e2e7:	e8 55 a4 ff ff       	call   808741 <tcp_output>
          pcb->state = CLOSE_WAIT;
  80e2ec:	c7 43 10 07 00 00 00 	movl   $0x7,0x10(%ebx)
  80e2f3:	e9 a7 04 00 00       	jmp    80e79f <tcp_input+0xd17>
      }
      /* incorrect ACK number */
      else {
        /* send RST */
        tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
                tcphdr->dest, tcphdr->src);
  80e2f8:	8b 0d d0 c1 b3 00    	mov    0xb3c1d0,%ecx
        }
      }
      /* incorrect ACK number */
      else {
        /* send RST */
        tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
  80e2fe:	8b 15 cc c1 b3 00    	mov    0xb3c1cc,%edx
  80e304:	0f b7 31             	movzwl (%ecx),%esi
  80e307:	89 74 24 14          	mov    %esi,0x14(%esp)
  80e30b:	0f b7 49 02          	movzwl 0x2(%ecx),%ecx
  80e30f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  80e313:	8d 4a 0c             	lea    0xc(%edx),%ecx
  80e316:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  80e31a:	83 c2 10             	add    $0x10,%edx
  80e31d:	89 54 24 08          	mov    %edx,0x8(%esp)
  80e321:	0f b7 15 be c1 b3 00 	movzwl 0xb3c1be,%edx
  80e328:	03 15 c8 c1 b3 00    	add    0xb3c1c8,%edx
  80e32e:	89 54 24 04          	mov    %edx,0x4(%esp)
  80e332:	89 04 24             	mov    %eax,(%esp)
  80e335:	e8 9b a8 ff ff       	call   808bd5 <tcp_rst>
  80e33a:	e9 60 04 00 00       	jmp    80e79f <tcp_input+0xd17>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    accepted_inseq = tcp_receive(pcb);
  80e33f:	89 d8                	mov    %ebx,%eax
  80e341:	e8 14 eb ff ff       	call   80ce5a <tcp_receive>
    if ((flags & TCP_FIN) && accepted_inseq) { /* passive close */
  80e346:	f6 05 c0 c1 b3 00 01 	testb  $0x1,0xb3c1c0
  80e34d:	0f 84 4c 04 00 00    	je     80e79f <tcp_input+0xd17>
  80e353:	84 c0                	test   %al,%al
  80e355:	0f 84 44 04 00 00    	je     80e79f <tcp_input+0xd17>
      tcp_ack_now(pcb);
  80e35b:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e35f:	89 1c 24             	mov    %ebx,(%esp)
  80e362:	e8 da a3 ff ff       	call   808741 <tcp_output>
      pcb->state = CLOSE_WAIT;
  80e367:	c7 43 10 07 00 00 00 	movl   $0x7,0x10(%ebx)
  80e36e:	e9 2c 04 00 00       	jmp    80e79f <tcp_input+0xd17>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
  80e373:	89 d8                	mov    %ebx,%eax
  80e375:	e8 e0 ea ff ff       	call   80ce5a <tcp_receive>
    if (flags & TCP_FIN) {
  80e37a:	0f b6 05 c0 c1 b3 00 	movzbl 0xb3c1c0,%eax
  80e381:	a8 01                	test   $0x1,%al
  80e383:	0f 84 96 00 00 00    	je     80e41f <tcp_input+0x997>
      if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  80e389:	a8 10                	test   $0x10,%al
  80e38b:	74 7a                	je     80e407 <tcp_input+0x97f>
  80e38d:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e392:	39 43 54             	cmp    %eax,0x54(%ebx)
  80e395:	75 70                	jne    80e407 <tcp_input+0x97f>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  80e397:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e39b:	89 1c 24             	mov    %ebx,(%esp)
  80e39e:	e8 9e a3 ff ff       	call   808741 <tcp_output>
        tcp_pcb_purge(pcb);
  80e3a3:	89 1c 24             	mov    %ebx,(%esp)
  80e3a6:	e8 27 7b ff ff       	call   805ed2 <tcp_pcb_purge>
        TCP_RMV(&tcp_active_pcbs, pcb);
  80e3ab:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  80e3b0:	39 c3                	cmp    %eax,%ebx
  80e3b2:	75 0a                	jne    80e3be <tcp_input+0x936>
  80e3b4:	8b 43 0c             	mov    0xc(%ebx),%eax
  80e3b7:	a3 5c c2 b3 00       	mov    %eax,0xb3c25c
  80e3bc:	eb 2a                	jmp    80e3e8 <tcp_input+0x960>
  80e3be:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  80e3c3:	eb 1a                	jmp    80e3df <tcp_input+0x957>
  80e3c5:	8b 50 0c             	mov    0xc(%eax),%edx
  80e3c8:	85 d2                	test   %edx,%edx
  80e3ca:	74 11                	je     80e3dd <tcp_input+0x955>
  80e3cc:	39 d3                	cmp    %edx,%ebx
  80e3ce:	75 0d                	jne    80e3dd <tcp_input+0x955>
  80e3d0:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  80e3d5:	8b 53 0c             	mov    0xc(%ebx),%edx
  80e3d8:	89 50 0c             	mov    %edx,0xc(%eax)
  80e3db:	eb 0b                	jmp    80e3e8 <tcp_input+0x960>
  80e3dd:	89 d0                	mov    %edx,%eax
  80e3df:	85 c0                	test   %eax,%eax
  80e3e1:	75 e2                	jne    80e3c5 <tcp_input+0x93d>
  80e3e3:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
        pcb->state = TIME_WAIT;
  80e3e8:	c7 43 10 0a 00 00 00 	movl   $0xa,0x10(%ebx)
        TCP_REG(&tcp_tw_pcbs, pcb);
  80e3ef:	a1 70 c2 b3 00       	mov    0xb3c270,%eax
  80e3f4:	89 43 0c             	mov    %eax,0xc(%ebx)
  80e3f7:	89 1d 70 c2 b3 00    	mov    %ebx,0xb3c270
  80e3fd:	e8 50 41 ff ff       	call   802552 <tcp_timer_needed>
  80e402:	e9 98 03 00 00       	jmp    80e79f <tcp_input+0xd17>
      } else {
        tcp_ack_now(pcb);
  80e407:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e40b:	89 1c 24             	mov    %ebx,(%esp)
  80e40e:	e8 2e a3 ff ff       	call   808741 <tcp_output>
        pcb->state = CLOSING;
  80e413:	c7 43 10 08 00 00 00 	movl   $0x8,0x10(%ebx)
  80e41a:	e9 80 03 00 00       	jmp    80e79f <tcp_input+0xd17>
      }
    } else if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  80e41f:	a8 10                	test   $0x10,%al
  80e421:	0f 84 78 03 00 00    	je     80e79f <tcp_input+0xd17>
  80e427:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e42c:	39 43 54             	cmp    %eax,0x54(%ebx)
  80e42f:	0f 85 6a 03 00 00    	jne    80e79f <tcp_input+0xd17>
      pcb->state = FIN_WAIT_2;
  80e435:	c7 43 10 06 00 00 00 	movl   $0x6,0x10(%ebx)
  80e43c:	e9 5e 03 00 00       	jmp    80e79f <tcp_input+0xd17>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
  80e441:	89 d8                	mov    %ebx,%eax
  80e443:	e8 12 ea ff ff       	call   80ce5a <tcp_receive>
    if (flags & TCP_FIN) {
  80e448:	f6 05 c0 c1 b3 00 01 	testb  $0x1,0xb3c1c0
  80e44f:	0f 84 4a 03 00 00    	je     80e79f <tcp_input+0xd17>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  80e455:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e459:	89 1c 24             	mov    %ebx,(%esp)
  80e45c:	e8 e0 a2 ff ff       	call   808741 <tcp_output>
      tcp_pcb_purge(pcb);
  80e461:	89 1c 24             	mov    %ebx,(%esp)
  80e464:	e8 69 7a ff ff       	call   805ed2 <tcp_pcb_purge>
      TCP_RMV(&tcp_active_pcbs, pcb);
  80e469:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  80e46e:	39 c3                	cmp    %eax,%ebx
  80e470:	75 0a                	jne    80e47c <tcp_input+0x9f4>
  80e472:	8b 43 0c             	mov    0xc(%ebx),%eax
  80e475:	a3 5c c2 b3 00       	mov    %eax,0xb3c25c
  80e47a:	eb 2a                	jmp    80e4a6 <tcp_input+0xa1e>
  80e47c:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  80e481:	eb 1a                	jmp    80e49d <tcp_input+0xa15>
  80e483:	8b 50 0c             	mov    0xc(%eax),%edx
  80e486:	85 d2                	test   %edx,%edx
  80e488:	74 11                	je     80e49b <tcp_input+0xa13>
  80e48a:	39 d3                	cmp    %edx,%ebx
  80e48c:	75 0d                	jne    80e49b <tcp_input+0xa13>
  80e48e:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  80e493:	8b 53 0c             	mov    0xc(%ebx),%edx
  80e496:	89 50 0c             	mov    %edx,0xc(%eax)
  80e499:	eb 0b                	jmp    80e4a6 <tcp_input+0xa1e>
  80e49b:	89 d0                	mov    %edx,%eax
  80e49d:	85 c0                	test   %eax,%eax
  80e49f:	75 e2                	jne    80e483 <tcp_input+0x9fb>
  80e4a1:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
      pcb->state = TIME_WAIT;
  80e4a6:	c7 43 10 0a 00 00 00 	movl   $0xa,0x10(%ebx)
      TCP_REG(&tcp_tw_pcbs, pcb);
  80e4ad:	a1 70 c2 b3 00       	mov    0xb3c270,%eax
  80e4b2:	89 43 0c             	mov    %eax,0xc(%ebx)
  80e4b5:	89 1d 70 c2 b3 00    	mov    %ebx,0xb3c270
  80e4bb:	e8 92 40 ff ff       	call   802552 <tcp_timer_needed>
  80e4c0:	e9 da 02 00 00       	jmp    80e79f <tcp_input+0xd17>
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
  80e4c5:	89 d8                	mov    %ebx,%eax
  80e4c7:	e8 8e e9 ff ff       	call   80ce5a <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  80e4cc:	f6 05 c0 c1 b3 00 10 	testb  $0x10,0xb3c1c0
  80e4d3:	0f 84 c6 02 00 00    	je     80e79f <tcp_input+0xd17>
  80e4d9:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e4de:	39 43 54             	cmp    %eax,0x54(%ebx)
  80e4e1:	0f 85 b8 02 00 00    	jne    80e79f <tcp_input+0xd17>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  80e4e7:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  80e4eb:	89 1c 24             	mov    %ebx,(%esp)
  80e4ee:	e8 4e a2 ff ff       	call   808741 <tcp_output>
      tcp_pcb_purge(pcb);
  80e4f3:	89 1c 24             	mov    %ebx,(%esp)
  80e4f6:	e8 d7 79 ff ff       	call   805ed2 <tcp_pcb_purge>
      TCP_RMV(&tcp_active_pcbs, pcb);
  80e4fb:	a1 5c c2 b3 00       	mov    0xb3c25c,%eax
  80e500:	39 c3                	cmp    %eax,%ebx
  80e502:	75 0a                	jne    80e50e <tcp_input+0xa86>
  80e504:	8b 43 0c             	mov    0xc(%ebx),%eax
  80e507:	a3 5c c2 b3 00       	mov    %eax,0xb3c25c
  80e50c:	eb 2a                	jmp    80e538 <tcp_input+0xab0>
  80e50e:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  80e513:	eb 1a                	jmp    80e52f <tcp_input+0xaa7>
  80e515:	8b 50 0c             	mov    0xc(%eax),%edx
  80e518:	85 d2                	test   %edx,%edx
  80e51a:	74 11                	je     80e52d <tcp_input+0xaa5>
  80e51c:	39 d3                	cmp    %edx,%ebx
  80e51e:	75 0d                	jne    80e52d <tcp_input+0xaa5>
  80e520:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
  80e525:	8b 53 0c             	mov    0xc(%ebx),%edx
  80e528:	89 50 0c             	mov    %edx,0xc(%eax)
  80e52b:	eb 0b                	jmp    80e538 <tcp_input+0xab0>
  80e52d:	89 d0                	mov    %edx,%eax
  80e52f:	85 c0                	test   %eax,%eax
  80e531:	75 e2                	jne    80e515 <tcp_input+0xa8d>
  80e533:	a3 68 c2 b3 00       	mov    %eax,0xb3c268
      pcb->state = TIME_WAIT;
  80e538:	c7 43 10 0a 00 00 00 	movl   $0xa,0x10(%ebx)
      TCP_REG(&tcp_tw_pcbs, pcb);
  80e53f:	a1 70 c2 b3 00       	mov    0xb3c270,%eax
  80e544:	89 43 0c             	mov    %eax,0xc(%ebx)
  80e547:	89 1d 70 c2 b3 00    	mov    %ebx,0xb3c270
  80e54d:	e8 00 40 ff ff       	call   802552 <tcp_timer_needed>
  80e552:	e9 48 02 00 00       	jmp    80e79f <tcp_input+0xd17>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
  80e557:	89 d8                	mov    %ebx,%eax
  80e559:	e8 fc e8 ff ff       	call   80ce5a <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  80e55e:	f6 05 c0 c1 b3 00 10 	testb  $0x10,0xb3c1c0
  80e565:	0f 84 34 02 00 00    	je     80e79f <tcp_input+0xd17>
  80e56b:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e570:	39 43 54             	cmp    %eax,0x54(%ebx)
  80e573:	0f 85 26 02 00 00    	jne    80e79f <tcp_input+0xd17>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags = TF_CLOSED;
  80e579:	c6 05 bc c1 b3 00 10 	movb   $0x10,0xb3c1bc
  80e580:	e9 1a 02 00 00       	jmp    80e79f <tcp_input+0xd17>
      }
    }

    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    tcp_input_pcb = NULL;
  80e585:	c7 05 78 c2 b3 00 00 	movl   $0x0,0xb3c278
  80e58c:	00 00 00 
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
  80e58f:	0f b6 05 bc c1 b3 00 	movzbl 0xb3c1bc,%eax
  80e596:	a8 08                	test   $0x8,%al
  80e598:	74 3f                	je     80e5d9 <tcp_input+0xb51>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  80e59a:	8b 83 98 00 00 00    	mov    0x98(%ebx),%eax
  80e5a0:	85 c0                	test   %eax,%eax
  80e5a2:	74 10                	je     80e5b4 <tcp_input+0xb2c>
  80e5a4:	c7 44 24 04 fa ff ff 	movl   $0xfffffffa,0x4(%esp)
  80e5ab:	ff 
  80e5ac:	8b 53 18             	mov    0x18(%ebx),%edx
  80e5af:	89 14 24             	mov    %edx,(%esp)
  80e5b2:	ff d0                	call   *%eax
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  80e5b4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e5b8:	c7 04 24 5c c2 b3 00 	movl   $0xb3c25c,(%esp)
  80e5bf:	e8 83 79 ff ff       	call   805f47 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  80e5c4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e5c8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80e5cf:	e8 4e 64 ff ff       	call   804a22 <memp_free>
  80e5d4:	e9 ea 00 00 00       	jmp    80e6c3 <tcp_input+0xc3b>
      } else if (recv_flags & TF_CLOSED) {
  80e5d9:	a8 10                	test   $0x10,%al
  80e5db:	74 25                	je     80e602 <tcp_input+0xb7a>
        /* The connection has been closed and we will deallocate the
           PCB. */
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  80e5dd:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e5e1:	c7 04 24 5c c2 b3 00 	movl   $0xb3c25c,(%esp)
  80e5e8:	e8 5a 79 ff ff       	call   805f47 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  80e5ed:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e5f1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80e5f8:	e8 25 64 ff ff       	call   804a22 <memp_free>
  80e5fd:	e9 c1 00 00 00       	jmp    80e6c3 <tcp_input+0xc3b>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  80e602:	0f b7 53 6c          	movzwl 0x6c(%ebx),%edx
        /* The connection has been closed and we will deallocate the
           PCB. */
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
        memp_free(MEMP_TCP_PCB, pcb);
      } else {
        err = ERR_OK;
  80e606:	b8 00 00 00 00       	mov    $0x0,%eax
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  80e60b:	66 85 d2             	test   %dx,%dx
  80e60e:	74 1d                	je     80e62d <tcp_input+0xba5>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  80e610:	8b 8b 84 00 00 00    	mov    0x84(%ebx),%ecx
  80e616:	85 c9                	test   %ecx,%ecx
  80e618:	74 13                	je     80e62d <tcp_input+0xba5>
  80e61a:	0f b7 d2             	movzwl %dx,%edx
  80e61d:	89 54 24 08          	mov    %edx,0x8(%esp)
  80e621:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e625:	8b 43 18             	mov    0x18(%ebx),%eax
  80e628:	89 04 24             	mov    %eax,(%esp)
  80e62b:	ff d1                	call   *%ecx
        }
      
        if (recv_data != NULL) {
  80e62d:	8b 15 b8 c1 b3 00    	mov    0xb3c1b8,%edx
  80e633:	85 d2                	test   %edx,%edx
  80e635:	74 51                	je     80e688 <tcp_input+0xc00>
          if(flags & TCP_PSH) {
  80e637:	f6 05 c0 c1 b3 00 08 	testb  $0x8,0xb3c1c0
  80e63e:	0f 84 6a 01 00 00    	je     80e7ae <tcp_input+0xd26>
            recv_data->flags |= PBUF_FLAG_PUSH;
  80e644:	80 4a 0d 01          	orb    $0x1,0xd(%edx)
  80e648:	e9 61 01 00 00       	jmp    80e7ae <tcp_input+0xd26>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  80e64d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80e654:	00 
  80e655:	89 54 24 08          	mov    %edx,0x8(%esp)
  80e659:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e65d:	8b 53 18             	mov    0x18(%ebx),%edx
  80e660:	89 14 24             	mov    %edx,(%esp)
  80e663:	ff d0                	call   *%eax

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  80e665:	84 c0                	test   %al,%al
  80e667:	75 13                	jne    80e67c <tcp_input+0xbf4>
  80e669:	eb 1d                	jmp    80e688 <tcp_input+0xc00>
          if(flags & TCP_PSH) {
            recv_data->flags |= PBUF_FLAG_PUSH;
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  80e66b:	89 14 24             	mov    %edx,(%esp)
  80e66e:	66 90                	xchg   %ax,%ax
  80e670:	e8 5f 67 ff ff       	call   804dd4 <pbuf_free>
  80e675:	b8 00 00 00 00       	mov    $0x0,%eax
  80e67a:	eb 0c                	jmp    80e688 <tcp_input+0xc00>

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
            pcb->refused_data = recv_data;
  80e67c:	8b 15 b8 c1 b3 00    	mov    0xb3c1b8,%edx
  80e682:	89 93 80 00 00 00    	mov    %edx,0x80(%ebx)
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  80e688:	f6 05 bc c1 b3 00 20 	testb  $0x20,0xb3c1bc
  80e68f:	74 26                	je     80e6b7 <tcp_input+0xc2f>
          TCP_EVENT_RECV(pcb, NULL, ERR_OK, err);
  80e691:	8b 83 88 00 00 00    	mov    0x88(%ebx),%eax
  80e697:	85 c0                	test   %eax,%eax
  80e699:	74 20                	je     80e6bb <tcp_input+0xc33>
  80e69b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80e6a2:	00 
  80e6a3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e6aa:	00 
  80e6ab:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e6af:	8b 53 18             	mov    0x18(%ebx),%edx
  80e6b2:	89 14 24             	mov    %edx,(%esp)
  80e6b5:	ff d0                	call   *%eax
        }

        /* If there were no errors, we try to send something out. */
        if (err == ERR_OK) {
  80e6b7:	84 c0                	test   %al,%al
  80e6b9:	75 08                	jne    80e6c3 <tcp_input+0xc3b>
          tcp_output(pcb);
  80e6bb:	89 1c 24             	mov    %ebx,(%esp)
  80e6be:	e8 7e a0 ff ff       	call   808741 <tcp_output>
      }
    }


    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  80e6c3:	a1 d8 c1 b3 00       	mov    0xb3c1d8,%eax
  80e6c8:	85 c0                	test   %eax,%eax
  80e6ca:	0f 84 f1 00 00 00    	je     80e7c1 <tcp_input+0xd39>
    {
      pbuf_free(inseg.p);
  80e6d0:	89 04 24             	mov    %eax,(%esp)
  80e6d3:	e8 fc 66 ff ff       	call   804dd4 <pbuf_free>
      inseg.p = NULL;
  80e6d8:	c7 05 d8 c1 b3 00 00 	movl   $0x0,0xb3c1d8
  80e6df:	00 00 00 
  80e6e2:	e9 da 00 00 00       	jmp    80e7c1 <tcp_input+0xd39>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
        &(iphdr->dest), &(iphdr->src),
        tcphdr->dest, tcphdr->src);
  80e6e7:	8b 15 d0 c1 b3 00    	mov    0xb3c1d0,%edx
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
        &(iphdr->dest), &(iphdr->src),
  80e6ed:	a1 cc c1 b3 00       	mov    0xb3c1cc,%eax
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
  80e6f2:	0f b7 0a             	movzwl (%edx),%ecx
  80e6f5:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  80e6f9:	0f b7 52 02          	movzwl 0x2(%edx),%edx
  80e6fd:	89 54 24 10          	mov    %edx,0x10(%esp)
  80e701:	8d 50 0c             	lea    0xc(%eax),%edx
  80e704:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80e708:	83 c0 10             	add    $0x10,%eax
  80e70b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e70f:	0f b7 05 be c1 b3 00 	movzwl 0xb3c1be,%eax
  80e716:	03 05 c8 c1 b3 00    	add    0xb3c1c8,%eax
  80e71c:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e720:	a1 c4 c1 b3 00       	mov    0xb3c1c4,%eax
  80e725:	89 04 24             	mov    %eax,(%esp)
  80e728:	e8 a8 a4 ff ff       	call   808bd5 <tcp_rst>
        &(iphdr->dest), &(iphdr->src),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
  80e72d:	89 34 24             	mov    %esi,(%esp)
  80e730:	e8 9f 66 ff ff       	call   804dd4 <pbuf_free>
  80e735:	e9 87 00 00 00       	jmp    80e7c1 <tcp_input+0xd39>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  80e73a:	c7 05 d4 c1 b3 00 00 	movl   $0x0,0xb3c1d4
  80e741:	00 00 00 
    inseg.len = p->tot_len;
  80e744:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80e748:	66 a3 e0 c1 b3 00    	mov    %ax,0xb3c1e0
    inseg.dataptr = p->payload;
  80e74e:	8b 46 04             	mov    0x4(%esi),%eax
  80e751:	a3 dc c1 b3 00       	mov    %eax,0xb3c1dc
    inseg.p = p;
  80e756:	89 35 d8 c1 b3 00    	mov    %esi,0xb3c1d8
    inseg.tcphdr = tcphdr;
  80e75c:	a1 d0 c1 b3 00       	mov    0xb3c1d0,%eax
  80e761:	a3 e4 c1 b3 00       	mov    %eax,0xb3c1e4

    recv_data = NULL;
  80e766:	c7 05 b8 c1 b3 00 00 	movl   $0x0,0xb3c1b8
  80e76d:	00 00 00 
    recv_flags = 0;
  80e770:	c6 05 bc c1 b3 00 00 	movb   $0x0,0xb3c1bc

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  80e777:	8b 93 80 00 00 00    	mov    0x80(%ebx),%edx
  80e77d:	85 d2                	test   %edx,%edx
  80e77f:	0f 85 57 f8 ff ff    	jne    80dfdc <tcp_input+0x554>
  80e785:	e9 9b f8 ff ff       	jmp    80e025 <tcp_input+0x59d>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  80e78a:	0f b7 42 0c          	movzwl 0xc(%edx),%eax
  80e78e:	89 04 24             	mov    %eax,(%esp)
  80e791:	e8 cd 95 ff ff       	call   807d63 <ntohs>
  80e796:	a8 04                	test   $0x4,%al
  80e798:	75 93                	jne    80e72d <tcp_input+0xca5>
  80e79a:	e9 48 ff ff ff       	jmp    80e6e7 <tcp_input+0xc5f>
      }
    }

    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    tcp_input_pcb = NULL;
  80e79f:	c7 05 78 c2 b3 00 00 	movl   $0x0,0xb3c278
  80e7a6:	00 00 00 
  80e7a9:	e9 e1 fd ff ff       	jmp    80e58f <tcp_input+0xb07>
          if(flags & TCP_PSH) {
            recv_data->flags |= PBUF_FLAG_PUSH;
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  80e7ae:	8b 83 88 00 00 00    	mov    0x88(%ebx),%eax
  80e7b4:	85 c0                	test   %eax,%eax
  80e7b6:	0f 85 91 fe ff ff    	jne    80e64d <tcp_input+0xbc5>
  80e7bc:	e9 aa fe ff ff       	jmp    80e66b <tcp_input+0xbe3>
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
}
  80e7c1:	83 c4 4c             	add    $0x4c,%esp
  80e7c4:	5b                   	pop    %ebx
  80e7c5:	5e                   	pop    %esi
  80e7c6:	5f                   	pop    %edi
  80e7c7:	5d                   	pop    %ebp
  80e7c8:	c3                   	ret    

0080e7c9 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  80e7c9:	55                   	push   %ebp
  80e7ca:	89 e5                	mov    %esp,%ebp
  80e7cc:	57                   	push   %edi
  80e7cd:	56                   	push   %esi
  80e7ce:	53                   	push   %ebx
  80e7cf:	83 ec 2c             	sub    $0x2c,%esp
  s16_t proto;
  u8_t eaten = 0;

  LWIP_UNUSED_ARG(inp);

  iphdr = p->payload;
  80e7d2:	8b 45 08             	mov    0x8(%ebp),%eax
  80e7d5:	8b 40 04             	mov    0x4(%eax),%eax
  proto = IPH_PROTO(iphdr);
  80e7d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  80e7db:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80e7df:	89 04 24             	mov    %eax,(%esp)
  80e7e2:	e8 7c 95 ff ff       	call   807d63 <ntohs>

  prev = NULL;
  pcb = raw_pcbs;
  80e7e7:	8b 1d e8 c1 b3 00    	mov    0xb3c1e8,%ebx
raw_input(struct pbuf *p, struct netif *inp)
{
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
  80e7ed:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
  LWIP_UNUSED_ARG(inp);

  iphdr = p->payload;
  proto = IPH_PROTO(iphdr);

  prev = NULL;
  80e7f1:	be 00 00 00 00       	mov    $0x0,%esi
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if (pcb->protocol == proto) {
  80e7f6:	0f b6 f8             	movzbl %al,%edi
      /* receive callback function available? */
      if (pcb->recv != NULL) {
        /* the receive callback function did not eat the packet? */
        if (pcb->recv(pcb->recv_arg, pcb, p, &(iphdr->src)) != 0)
  80e7f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80e7fc:	83 c0 0c             	add    $0xc,%eax
  80e7ff:	89 45 e0             	mov    %eax,-0x20(%ebp)

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  80e802:	eb 62                	jmp    80e866 <raw_input+0x9d>
    if (pcb->protocol == proto) {
  80e804:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
  80e808:	39 f8                	cmp    %edi,%eax
  80e80a:	75 55                	jne    80e861 <raw_input+0x98>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  80e80c:	8b 43 14             	mov    0x14(%ebx),%eax
  80e80f:	85 c0                	test   %eax,%eax
  80e811:	74 4e                	je     80e861 <raw_input+0x98>
        /* the receive callback function did not eat the packet? */
        if (pcb->recv(pcb->recv_arg, pcb, p, &(iphdr->src)) != 0)
  80e813:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  80e816:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  80e81a:	8b 55 08             	mov    0x8(%ebp),%edx
  80e81d:	89 54 24 08          	mov    %edx,0x8(%esp)
  80e821:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e825:	8b 53 18             	mov    0x18(%ebx),%edx
  80e828:	89 14 24             	mov    %edx,(%esp)
  80e82b:	ff d0                	call   *%eax
  80e82d:	84 c0                	test   %al,%al
  80e82f:	74 30                	je     80e861 <raw_input+0x98>
        {
          /* receive function ate the packet */
          p = NULL;
          eaten = 1;
          if (prev != NULL) {
  80e831:	85 f6                	test   %esi,%esi
  80e833:	74 21                	je     80e856 <raw_input+0x8d>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  80e835:	8b 43 0c             	mov    0xc(%ebx),%eax
  80e838:	89 46 0c             	mov    %eax,0xc(%esi)
            pcb->next = raw_pcbs;
  80e83b:	a1 e8 c1 b3 00       	mov    0xb3c1e8,%eax
  80e840:	89 43 0c             	mov    %eax,0xc(%ebx)
            raw_pcbs = pcb;
  80e843:	89 1d e8 c1 b3 00    	mov    %ebx,0xb3c1e8
        /* the receive callback function did not eat the packet? */
        if (pcb->recv(pcb->recv_arg, pcb, p, &(iphdr->src)) != 0)
        {
          /* receive function ate the packet */
          p = NULL;
          eaten = 1;
  80e849:	c6 45 e7 01          	movb   $0x1,-0x19(%ebp)
      if (pcb->recv != NULL) {
        /* the receive callback function did not eat the packet? */
        if (pcb->recv(pcb->recv_arg, pcb, p, &(iphdr->src)) != 0)
        {
          /* receive function ate the packet */
          p = NULL;
  80e84d:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
  80e854:	eb 0b                	jmp    80e861 <raw_input+0x98>
          eaten = 1;
  80e856:	c6 45 e7 01          	movb   $0x1,-0x19(%ebp)
      if (pcb->recv != NULL) {
        /* the receive callback function did not eat the packet? */
        if (pcb->recv(pcb->recv_arg, pcb, p, &(iphdr->src)) != 0)
        {
          /* receive function ate the packet */
          p = NULL;
  80e85a:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
        }
      }
      /* no receive callback function was set for this raw PCB */
      /* drop the packet */
    }
    prev = pcb;
  80e861:	89 de                	mov    %ebx,%esi
    pcb = pcb->next;
  80e863:	8b 5b 0c             	mov    0xc(%ebx),%ebx

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  80e866:	85 db                	test   %ebx,%ebx
  80e868:	74 06                	je     80e870 <raw_input+0xa7>
  80e86a:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
  80e86e:	74 94                	je     80e804 <raw_input+0x3b>
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
}
  80e870:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
  80e874:	83 c4 2c             	add    $0x2c,%esp
  80e877:	5b                   	pop    %ebx
  80e878:	5e                   	pop    %esi
  80e879:	5f                   	pop    %edi
  80e87a:	5d                   	pop    %ebp
  80e87b:	c3                   	ret    

0080e87c <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, struct ip_addr *ipaddr)
{
  80e87c:	55                   	push   %ebp
  80e87d:	89 e5                	mov    %esp,%ebp
  80e87f:	8b 45 0c             	mov    0xc(%ebp),%eax
  ip_addr_set(&pcb->local_ip, ipaddr);
  80e882:	85 c0                	test   %eax,%eax
  80e884:	74 04                	je     80e88a <raw_bind+0xe>
  80e886:	8b 10                	mov    (%eax),%edx
  80e888:	eb 05                	jmp    80e88f <raw_bind+0x13>
  80e88a:	ba 00 00 00 00       	mov    $0x0,%edx
  80e88f:	8b 45 08             	mov    0x8(%ebp),%eax
  80e892:	89 10                	mov    %edx,(%eax)
  return ERR_OK;
}
  80e894:	b8 00 00 00 00       	mov    $0x0,%eax
  80e899:	5d                   	pop    %ebp
  80e89a:	c3                   	ret    

0080e89b <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, struct ip_addr *ipaddr)
{
  80e89b:	55                   	push   %ebp
  80e89c:	89 e5                	mov    %esp,%ebp
  80e89e:	8b 45 0c             	mov    0xc(%ebp),%eax
  ip_addr_set(&pcb->remote_ip, ipaddr);
  80e8a1:	85 c0                	test   %eax,%eax
  80e8a3:	74 04                	je     80e8a9 <raw_connect+0xe>
  80e8a5:	8b 10                	mov    (%eax),%edx
  80e8a7:	eb 05                	jmp    80e8ae <raw_connect+0x13>
  80e8a9:	ba 00 00 00 00       	mov    $0x0,%edx
  80e8ae:	8b 45 08             	mov    0x8(%ebp),%eax
  80e8b1:	89 50 04             	mov    %edx,0x4(%eax)
  return ERR_OK;
}
  80e8b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80e8b9:	5d                   	pop    %ebp
  80e8ba:	c3                   	ret    

0080e8bb <raw_recv>:
void
raw_recv(struct raw_pcb *pcb,
         u8_t (* recv)(void *arg, struct raw_pcb *upcb, struct pbuf *p,
                      struct ip_addr *addr),
         void *recv_arg)
{
  80e8bb:	55                   	push   %ebp
  80e8bc:	89 e5                	mov    %esp,%ebp
  80e8be:	8b 45 08             	mov    0x8(%ebp),%eax
  /* remember recv() callback and user data */
  pcb->recv = recv;
  80e8c1:	8b 55 0c             	mov    0xc(%ebp),%edx
  80e8c4:	89 50 14             	mov    %edx,0x14(%eax)
  pcb->recv_arg = recv_arg;
  80e8c7:	8b 55 10             	mov    0x10(%ebp),%edx
  80e8ca:	89 50 18             	mov    %edx,0x18(%eax)
}
  80e8cd:	5d                   	pop    %ebp
  80e8ce:	c3                   	ret    

0080e8cf <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *ipaddr)
{
  80e8cf:	55                   	push   %ebp
  80e8d0:	89 e5                	mov    %esp,%ebp
  80e8d2:	57                   	push   %edi
  80e8d3:	56                   	push   %esi
  80e8d4:	53                   	push   %ebx
  80e8d5:	83 ec 2c             	sub    $0x2c,%esp
  80e8d8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e8db:	8b 7d 0c             	mov    0xc(%ebp),%edi
  struct pbuf *q; /* q will be sent down the stack */
  
  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 3, ("raw_sendto\n"));
  
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, IP_HLEN)) {
  80e8de:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80e8e5:	00 
  80e8e6:	89 3c 24             	mov    %edi,(%esp)
  80e8e9:	e8 02 64 ff ff       	call   804cf0 <pbuf_header>
  80e8ee:	84 c0                	test   %al,%al
  80e8f0:	74 43                	je     80e935 <raw_sendto+0x66>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  80e8f2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e8f9:	00 
  80e8fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80e901:	00 
  80e902:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80e909:	e8 a7 65 ff ff       	call   804eb5 <pbuf_alloc>
  80e90e:	89 c6                	mov    %eax,%esi
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  80e910:	85 c0                	test   %eax,%eax
  80e912:	0f 84 b8 00 00 00    	je     80e9d0 <raw_sendto+0x101>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 2, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
    }
    /* chain header q in front of given pbuf p */
    pbuf_chain(q, p);
  80e918:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80e91c:	89 04 24             	mov    %eax,(%esp)
  80e91f:	e8 e6 69 ff ff       	call   80530a <pbuf_chain>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
      return ERR_MEM;
    }
  }
  
  if ((netif = ip_route(ipaddr)) == NULL) {
  80e924:	8b 45 10             	mov    0x10(%ebp),%eax
  80e927:	89 04 24             	mov    %eax,(%esp)
  80e92a:	e8 91 81 ff ff       	call   806ac0 <ip_route>
  80e92f:	85 c0                	test   %eax,%eax
  80e931:	75 4e                	jne    80e981 <raw_sendto+0xb2>
  80e933:	eb 34                	jmp    80e969 <raw_sendto+0x9a>
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
    if(pbuf_header(q, -IP_HLEN)) {
  80e935:	c7 44 24 04 ec ff ff 	movl   $0xffffffec,0x4(%esp)
  80e93c:	ff 
  80e93d:	89 3c 24             	mov    %edi,(%esp)
  80e940:	e8 ab 63 ff ff       	call   804cf0 <pbuf_header>
  80e945:	84 c0                	test   %al,%al
  80e947:	0f 84 91 00 00 00    	je     80e9de <raw_sendto+0x10f>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  80e94d:	c7 44 24 08 34 42 81 	movl   $0x814234,0x8(%esp)
  80e954:	00 
  80e955:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
  80e95c:	00 
  80e95d:	c7 04 24 5a 42 81 00 	movl   $0x81425a,(%esp)
  80e964:	e8 25 07 00 00       	call   80f08e <_panic>
    LWIP_DEBUGF(RAW_DEBUG | 1, ("raw_sendto: No route to 0x%"X32_F"\n", ipaddr->addr));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
      pbuf_free(q);
    }
    return ERR_RTE;
  80e969:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  }
  
  if ((netif = ip_route(ipaddr)) == NULL) {
    LWIP_DEBUGF(RAW_DEBUG | 1, ("raw_sendto: No route to 0x%"X32_F"\n", ipaddr->addr));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  80e96e:	39 f7                	cmp    %esi,%edi
  80e970:	74 7f                	je     80e9f1 <raw_sendto+0x122>
      pbuf_free(q);
  80e972:	89 34 24             	mov    %esi,(%esp)
  80e975:	e8 5a 64 ff ff       	call   804dd4 <pbuf_free>
    }
    return ERR_RTE;
  80e97a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80e97f:	eb 70                	jmp    80e9f1 <raw_sendto+0x122>
  }

  if (ip_addr_isany(&pcb->local_ip)) {
  80e981:	89 da                	mov    %ebx,%edx
  80e983:	85 db                	test   %ebx,%ebx
  80e985:	74 05                	je     80e98c <raw_sendto+0xbd>
  80e987:	83 3b 00             	cmpl   $0x0,(%ebx)
  80e98a:	75 03                	jne    80e98f <raw_sendto+0xc0>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  80e98c:	8d 50 04             	lea    0x4(%eax),%edx
  }

#if LWIP_NETIF_HWADDRHINT
  netif->addr_hint = &(pcb->addr_hint);
#endif /* LWIP_NETIF_HWADDRHINT*/
  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  80e98f:	89 44 24 18          	mov    %eax,0x18(%esp)
  80e993:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
  80e997:	89 44 24 14          	mov    %eax,0x14(%esp)
  80e99b:	0f b6 43 0a          	movzbl 0xa(%ebx),%eax
  80e99f:	89 44 24 10          	mov    %eax,0x10(%esp)
  80e9a3:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
  80e9a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80e9ab:	8b 45 10             	mov    0x10(%ebp),%eax
  80e9ae:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e9b2:	89 54 24 04          	mov    %edx,0x4(%esp)
  80e9b6:	89 34 24             	mov    %esi,(%esp)
  80e9b9:	e8 40 84 ff ff       	call   806dfe <ip_output_if>
  80e9be:	89 c3                	mov    %eax,%ebx
#if LWIP_NETIF_HWADDRHINT
  netif->addr_hint = NULL;
#endif /* LWIP_NETIF_HWADDRHINT*/

  /* did we chain a header earlier? */
  if (q != p) {
  80e9c0:	39 fe                	cmp    %edi,%esi
  80e9c2:	74 2d                	je     80e9f1 <raw_sendto+0x122>
    /* free the header */
    pbuf_free(q);
  80e9c4:	89 34 24             	mov    %esi,(%esp)
  80e9c7:	e8 08 64 ff ff       	call   804dd4 <pbuf_free>
  }
  return err;
  80e9cc:	89 d8                	mov    %ebx,%eax
  80e9ce:	eb 21                	jmp    80e9f1 <raw_sendto+0x122>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 2, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  80e9d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80e9d5:	eb 1a                	jmp    80e9f1 <raw_sendto+0x122>
    LWIP_DEBUGF(RAW_DEBUG | 1, ("raw_sendto: No route to 0x%"X32_F"\n", ipaddr->addr));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
      pbuf_free(q);
    }
    return ERR_RTE;
  80e9d7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80e9dc:	eb 13                	jmp    80e9f1 <raw_sendto+0x122>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
      return ERR_MEM;
    }
  }
  
  if ((netif = ip_route(ipaddr)) == NULL) {
  80e9de:	8b 45 10             	mov    0x10(%ebp),%eax
  80e9e1:	89 04 24             	mov    %eax,(%esp)
  80e9e4:	e8 d7 80 ff ff       	call   806ac0 <ip_route>
  80e9e9:	85 c0                	test   %eax,%eax
  80e9eb:	74 ea                	je     80e9d7 <raw_sendto+0x108>
    pbuf_chain(q, p);
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
  80e9ed:	89 fe                	mov    %edi,%esi
  80e9ef:	eb 90                	jmp    80e981 <raw_sendto+0xb2>
  if (q != p) {
    /* free the header */
    pbuf_free(q);
  }
  return err;
}
  80e9f1:	83 c4 2c             	add    $0x2c,%esp
  80e9f4:	5b                   	pop    %ebx
  80e9f5:	5e                   	pop    %esi
  80e9f6:	5f                   	pop    %edi
  80e9f7:	5d                   	pop    %ebp
  80e9f8:	c3                   	ret    

0080e9f9 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  80e9f9:	55                   	push   %ebp
  80e9fa:	89 e5                	mov    %esp,%ebp
  80e9fc:	83 ec 18             	sub    $0x18,%esp
  80e9ff:	8b 45 08             	mov    0x8(%ebp),%eax
  return raw_sendto(pcb, p, &pcb->remote_ip);
  80ea02:	8d 50 04             	lea    0x4(%eax),%edx
  80ea05:	89 54 24 08          	mov    %edx,0x8(%esp)
  80ea09:	8b 55 0c             	mov    0xc(%ebp),%edx
  80ea0c:	89 54 24 04          	mov    %edx,0x4(%esp)
  80ea10:	89 04 24             	mov    %eax,(%esp)
  80ea13:	e8 b7 fe ff ff       	call   80e8cf <raw_sendto>
}
  80ea18:	c9                   	leave  
  80ea19:	c3                   	ret    

0080ea1a <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  80ea1a:	55                   	push   %ebp
  80ea1b:	89 e5                	mov    %esp,%ebp
  80ea1d:	83 ec 18             	sub    $0x18,%esp
  80ea20:	8b 4d 08             	mov    0x8(%ebp),%ecx
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  80ea23:	a1 e8 c1 b3 00       	mov    0xb3c1e8,%eax
  80ea28:	39 c8                	cmp    %ecx,%eax
  80ea2a:	75 1e                	jne    80ea4a <raw_remove+0x30>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  80ea2c:	8b 40 0c             	mov    0xc(%eax),%eax
  80ea2f:	a3 e8 c1 b3 00       	mov    %eax,0xb3c1e8
  80ea34:	eb 18                	jmp    80ea4e <raw_remove+0x34>
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  80ea36:	8b 50 0c             	mov    0xc(%eax),%edx
  80ea39:	85 d2                	test   %edx,%edx
  80ea3b:	74 0a                	je     80ea47 <raw_remove+0x2d>
  80ea3d:	39 d1                	cmp    %edx,%ecx
  80ea3f:	75 06                	jne    80ea47 <raw_remove+0x2d>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  80ea41:	8b 51 0c             	mov    0xc(%ecx),%edx
  80ea44:	89 50 0c             	mov    %edx,0xc(%eax)
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  80ea47:	8b 40 0c             	mov    0xc(%eax),%eax
  80ea4a:	85 c0                	test   %eax,%eax
  80ea4c:	75 e8                	jne    80ea36 <raw_remove+0x1c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  80ea4e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80ea52:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80ea59:	e8 c4 5f ff ff       	call   804a22 <memp_free>
}
  80ea5e:	c9                   	leave  
  80ea5f:	c3                   	ret    

0080ea60 <raw_new>:
 * @param proto the protocol number of the IPs payload (e.g. IP_PROTO_ICMP)
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto) {
  80ea60:	55                   	push   %ebp
  80ea61:	89 e5                	mov    %esp,%ebp
  80ea63:	56                   	push   %esi
  80ea64:	53                   	push   %ebx
  80ea65:	83 ec 10             	sub    $0x10,%esp
  80ea68:	8b 75 08             	mov    0x8(%ebp),%esi
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 3, ("raw_new\n"));

  pcb = memp_malloc(MEMP_RAW_PCB);
  80ea6b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80ea72:	e8 4b 5f ff ff       	call   8049c2 <memp_malloc>
  80ea77:	89 c3                	mov    %eax,%ebx
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  80ea79:	85 c0                	test   %eax,%eax
  80ea7b:	74 2f                	je     80eaac <raw_new+0x4c>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  80ea7d:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
  80ea84:	00 
  80ea85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ea8c:	00 
  80ea8d:	89 04 24             	mov    %eax,(%esp)
  80ea90:	e8 72 0e 00 00       	call   80f907 <memset>
    pcb->protocol = proto;
  80ea95:	89 f0                	mov    %esi,%eax
  80ea97:	88 43 10             	mov    %al,0x10(%ebx)
    pcb->ttl = RAW_TTL;
  80ea9a:	c6 43 0b ff          	movb   $0xff,0xb(%ebx)
    pcb->next = raw_pcbs;
  80ea9e:	a1 e8 c1 b3 00       	mov    0xb3c1e8,%eax
  80eaa3:	89 43 0c             	mov    %eax,0xc(%ebx)
    raw_pcbs = pcb;
  80eaa6:	89 1d e8 c1 b3 00    	mov    %ebx,0xb3c1e8
  }
  return pcb;
}
  80eaac:	89 d8                	mov    %ebx,%eax
  80eaae:	83 c4 10             	add    $0x10,%esp
  80eab1:	5b                   	pop    %ebx
  80eab2:	5e                   	pop    %esi
  80eab3:	5d                   	pop    %ebp
  80eab4:	c3                   	ret    
  80eab5:	66 90                	xchg   %ax,%ax
  80eab7:	66 90                	xchg   %ax,%ax
  80eab9:	66 90                	xchg   %ax,%ax
  80eabb:	66 90                	xchg   %ax,%ax
  80eabd:	66 90                	xchg   %ax,%ax
  80eabf:	90                   	nop

0080eac0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  80eac0:	55                   	push   %ebp
  80eac1:	89 e5                	mov    %esp,%ebp
  80eac3:	57                   	push   %edi
  80eac4:	56                   	push   %esi
  80eac5:	53                   	push   %ebx
  80eac6:	83 ec 3c             	sub    $0x3c,%esp
  80eac9:	8b 5d 08             	mov    0x8(%ebp),%ebx

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = p->payload;
  80eacc:	8b 73 04             	mov    0x4(%ebx),%esi
  hlen = IPH_HL(iphdr) * 4;
  80eacf:	0f b7 06             	movzwl (%esi),%eax
  80ead2:	89 04 24             	mov    %eax,(%esp)
  80ead5:	e8 89 92 ff ff       	call   807d63 <ntohs>
  80eada:	66 c1 e8 06          	shr    $0x6,%ax
  80eade:	83 e0 3c             	and    $0x3c,%eax
  80eae1:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  80eae5:	89 c7                	mov    %eax,%edi
  80eae7:	f7 df                	neg    %edi
  80eae9:	0f bf ff             	movswl %di,%edi
  80eaec:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80eaf0:	89 1c 24             	mov    %ebx,(%esp)
  80eaf3:	e8 f8 61 ff ff       	call   804cf0 <pbuf_header>
  80eaf8:	84 c0                	test   %al,%al
  80eafa:	0f 85 eb 02 00 00    	jne    80edeb <icmp_input+0x32b>
  80eb00:	66 83 7b 08 03       	cmpw   $0x3,0x8(%ebx)
  80eb05:	0f 86 e0 02 00 00    	jbe    80edeb <icmp_input+0x32b>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  80eb0b:	8b 43 04             	mov    0x4(%ebx),%eax
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  80eb0e:	80 38 08             	cmpb   $0x8,(%eax)
  80eb11:	0f 85 ca 02 00 00    	jne    80ede1 <icmp_input+0x321>
  case ICMP_ECHO:
    /* broadcast or multicast destination address? */
    if (ip_addr_isbroadcast(&iphdr->dest, inp) || ip_addr_ismulticast(&iphdr->dest)) {
  80eb17:	8b 45 0c             	mov    0xc(%ebp),%eax
  80eb1a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80eb1e:	8d 46 10             	lea    0x10(%esi),%eax
  80eb21:	89 04 24             	mov    %eax,(%esp)
  80eb24:	e8 48 7f ff ff       	call   806a71 <ip_addr_isbroadcast>
  80eb29:	84 c0                	test   %al,%al
  80eb2b:	75 29                	jne    80eb56 <icmp_input+0x96>
  80eb2d:	8b 46 10             	mov    0x10(%esi),%eax
  80eb30:	89 45 e0             	mov    %eax,-0x20(%ebp)
  80eb33:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80eb3a:	e8 6b 94 ff ff       	call   807faa <ntohl>
  80eb3f:	23 45 e0             	and    -0x20(%ebp),%eax
  80eb42:	89 45 e0             	mov    %eax,-0x20(%ebp)
  80eb45:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80eb4c:	e8 59 94 ff ff       	call   807faa <ntohl>
  80eb51:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  80eb54:	75 0f                	jne    80eb65 <icmp_input+0xa5>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
      ICMP_STATS_INC(icmp.err);
      pbuf_free(p);
  80eb56:	89 1c 24             	mov    %ebx,(%esp)
  80eb59:	e8 76 62 ff ff       	call   804dd4 <pbuf_free>
      return;
  80eb5e:	66 90                	xchg   %ax,%ax
  80eb60:	e9 98 02 00 00       	jmp    80edfd <icmp_input+0x33d>
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  80eb65:	66 83 7b 08 07       	cmpw   $0x7,0x8(%ebx)
  80eb6a:	0f 86 7b 02 00 00    	jbe    80edeb <icmp_input+0x32b>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
  80eb70:	89 1c 24             	mov    %ebx,(%esp)
  80eb73:	e8 9f 90 ff ff       	call   807c17 <inet_chksum_pbuf>
  80eb78:	66 85 c0             	test   %ax,%ax
  80eb7b:	74 0d                	je     80eb8a <icmp_input+0xca>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
  80eb7d:	89 1c 24             	mov    %ebx,(%esp)
  80eb80:	e8 4f 62 ff ff       	call   804dd4 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
  80eb85:	e9 73 02 00 00       	jmp    80edfd <icmp_input+0x33d>
    }
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  80eb8a:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
  80eb91:	00 
  80eb92:	89 1c 24             	mov    %ebx,(%esp)
  80eb95:	e8 56 61 ff ff       	call   804cf0 <pbuf_header>
  80eb9a:	84 c0                	test   %al,%al
  80eb9c:	0f 84 f0 00 00 00    	je     80ec92 <icmp_input+0x1d2>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
  80eba2:	0f bf 45 e6          	movswl -0x1a(%ebp),%eax
  80eba6:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ebaa:	89 1c 24             	mov    %ebx,(%esp)
  80ebad:	e8 3e 61 ff ff       	call   804cf0 <pbuf_header>
  80ebb2:	84 c0                	test   %al,%al
  80ebb4:	74 1c                	je     80ebd2 <icmp_input+0x112>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
  80ebb6:	c7 44 24 08 70 42 81 	movl   $0x814270,0x8(%esp)
  80ebbd:	00 
  80ebbe:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
  80ebc5:	00 
  80ebc6:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ebcd:	e8 bc 04 00 00       	call   80f08e <_panic>
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  80ebd2:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80ebd6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ebdd:	00 
  80ebde:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ebe2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80ebe9:	e8 c7 62 ff ff       	call   804eb5 <pbuf_alloc>
  80ebee:	89 45 e0             	mov    %eax,-0x20(%ebp)
      if (r == NULL) {
  80ebf1:	85 c0                	test   %eax,%eax
  80ebf3:	0f 84 fc 01 00 00    	je     80edf5 <icmp_input+0x335>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
  80ebf9:	0f b7 50 0a          	movzwl 0xa(%eax),%edx
  80ebfd:	0f bf 45 e6          	movswl -0x1a(%ebp),%eax
  80ec01:	83 c0 08             	add    $0x8,%eax
  80ec04:	39 c2                	cmp    %eax,%edx
  80ec06:	73 1c                	jae    80ec24 <icmp_input+0x164>
  80ec08:	c7 44 24 08 a4 42 81 	movl   $0x8142a4,0x8(%esp)
  80ec0f:	00 
  80ec10:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
  80ec17:	00 
  80ec18:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ec1f:	e8 6a 04 00 00       	call   80f08e <_panic>
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  80ec24:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80ec28:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80ec2b:	89 04 24             	mov    %eax,(%esp)
  80ec2e:	e8 b1 67 ff ff       	call   8053e4 <pbuf_copy>
  80ec33:	84 c0                	test   %al,%al
  80ec35:	74 1c                	je     80ec53 <icmp_input+0x193>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
  80ec37:	c7 44 24 08 dc 42 81 	movl   $0x8142dc,0x8(%esp)
  80ec3e:	00 
  80ec3f:	c7 44 24 04 88 00 00 	movl   $0x88,0x4(%esp)
  80ec46:	00 
  80ec47:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ec4e:	e8 3b 04 00 00       	call   80f08e <_panic>
        goto memerr;
      }
      iphdr = r->payload;
  80ec53:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80ec56:	8b 70 04             	mov    0x4(%eax),%esi
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
  80ec59:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80ec5d:	89 04 24             	mov    %eax,(%esp)
  80ec60:	e8 8b 60 ff ff       	call   804cf0 <pbuf_header>
  80ec65:	84 c0                	test   %al,%al
  80ec67:	74 1c                	je     80ec85 <icmp_input+0x1c5>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  80ec69:	c7 44 24 08 04 43 81 	movl   $0x814304,0x8(%esp)
  80ec70:	00 
  80ec71:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  80ec78:	00 
  80ec79:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ec80:	e8 09 04 00 00       	call   80f08e <_panic>
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
  80ec85:	89 1c 24             	mov    %ebx,(%esp)
  80ec88:	e8 47 61 ff ff       	call   804dd4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  80ec8d:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  80ec90:	eb 30                	jmp    80ecc2 <icmp_input+0x202>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  80ec92:	c7 44 24 04 de ff ff 	movl   $0xffffffde,0x4(%esp)
  80ec99:	ff 
  80ec9a:	89 1c 24             	mov    %ebx,(%esp)
  80ec9d:	e8 4e 60 ff ff       	call   804cf0 <pbuf_header>
  80eca2:	84 c0                	test   %al,%al
  80eca4:	74 1c                	je     80ecc2 <icmp_input+0x202>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  80eca6:	c7 44 24 08 04 43 81 	movl   $0x814304,0x8(%esp)
  80ecad:	00 
  80ecae:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  80ecb5:	00 
  80ecb6:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ecbd:	e8 cc 03 00 00       	call   80f08e <_panic>
      }
    }
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = p->payload;
  80ecc2:	8b 7b 04             	mov    0x4(%ebx),%edi
    tmpaddr.addr = iphdr->src.addr;
  80ecc5:	8b 46 0c             	mov    0xc(%esi),%eax
    iphdr->src.addr = iphdr->dest.addr;
  80ecc8:	8b 56 10             	mov    0x10(%esi),%edx
  80eccb:	89 56 0c             	mov    %edx,0xc(%esi)
    iphdr->dest.addr = tmpaddr.addr;
  80ecce:	89 46 10             	mov    %eax,0x10(%esi)
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  80ecd1:	0f b7 07             	movzwl (%edi),%eax
  80ecd4:	89 04 24             	mov    %eax,(%esp)
  80ecd7:	e8 87 90 ff ff       	call   807d63 <ntohs>
  80ecdc:	0f b6 c0             	movzbl %al,%eax
  80ecdf:	89 04 24             	mov    %eax,(%esp)
  80ece2:	e8 6f 90 ff ff       	call   807d56 <htons>
  80ece7:	66 89 07             	mov    %ax,(%edi)
    /* adjust the checksum */
    if (iecho->chksum >= htons(0xffff - (ICMP_ECHO << 8))) {
  80ecea:	0f b7 47 02          	movzwl 0x2(%edi),%eax
  80ecee:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
  80ecf2:	c7 04 24 ff f7 00 00 	movl   $0xf7ff,(%esp)
  80ecf9:	e8 58 90 ff ff       	call   807d56 <htons>
  80ecfe:	66 39 45 e0          	cmp    %ax,-0x20(%ebp)
  80ed02:	72 22                	jb     80ed26 <icmp_input+0x266>
      iecho->chksum += htons(ICMP_ECHO << 8) + 1;
  80ed04:	0f b7 47 02          	movzwl 0x2(%edi),%eax
  80ed08:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
  80ed0c:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  80ed13:	e8 3e 90 ff ff       	call   807d56 <htons>
  80ed18:	0f b7 4d e0          	movzwl -0x20(%ebp),%ecx
  80ed1c:	8d 44 01 01          	lea    0x1(%ecx,%eax,1),%eax
  80ed20:	66 89 47 02          	mov    %ax,0x2(%edi)
  80ed24:	eb 1c                	jmp    80ed42 <icmp_input+0x282>
    } else {
      iecho->chksum += htons(ICMP_ECHO << 8);
  80ed26:	0f b7 47 02          	movzwl 0x2(%edi),%eax
  80ed2a:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
  80ed2e:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  80ed35:	e8 1c 90 ff ff       	call   807d56 <htons>
  80ed3a:	66 03 45 e0          	add    -0x20(%ebp),%ax
  80ed3e:	66 89 47 02          	mov    %ax,0x2(%edi)
    }

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
  80ed42:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80ed46:	89 04 24             	mov    %eax,(%esp)
  80ed49:	e8 15 90 ff ff       	call   807d63 <ntohs>
  80ed4e:	66 0d 00 ff          	or     $0xff00,%ax
  80ed52:	0f b7 c0             	movzwl %ax,%eax
  80ed55:	89 04 24             	mov    %eax,(%esp)
  80ed58:	e8 f9 8f ff ff       	call   807d56 <htons>
  80ed5d:	66 89 46 08          	mov    %ax,0x8(%esi)
    IPH_CHKSUM_SET(iphdr, 0);
  80ed61:	66 c7 46 0a 00 00    	movw   $0x0,0xa(%esi)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  80ed67:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80ed6e:	00 
  80ed6f:	89 34 24             	mov    %esi,(%esp)
  80ed72:	e8 8a 8e ff ff       	call   807c01 <inet_chksum>
  80ed77:	66 89 46 0a          	mov    %ax,0xa(%esi)
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
  80ed7b:	0f bf 45 e6          	movswl -0x1a(%ebp),%eax
  80ed7f:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ed83:	89 1c 24             	mov    %ebx,(%esp)
  80ed86:	e8 65 5f ff ff       	call   804cf0 <pbuf_header>
  80ed8b:	84 c0                	test   %al,%al
  80ed8d:	74 1c                	je     80edab <icmp_input+0x2eb>
      LWIP_ASSERT("Can't move over header in packet", 0);
  80ed8f:	c7 44 24 08 d0 33 81 	movl   $0x8133d0,0x8(%esp)
  80ed96:	00 
  80ed97:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
  80ed9e:	00 
  80ed9f:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80eda6:	e8 e3 02 00 00       	call   80f08e <_panic>
    } else {
      err_t ret;
      ret = ip_output_if(p, &(iphdr->src), IP_HDRINCL,
  80edab:	8b 45 0c             	mov    0xc(%ebp),%eax
  80edae:	89 44 24 18          	mov    %eax,0x18(%esp)
  80edb2:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  80edb9:	00 
  80edba:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80edc1:	00 
  80edc2:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  80edc9:	00 
  80edca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80edd1:	00 
  80edd2:	83 c6 0c             	add    $0xc,%esi
  80edd5:	89 74 24 04          	mov    %esi,0x4(%esp)
  80edd9:	89 1c 24             	mov    %ebx,(%esp)
  80eddc:	e8 1d 80 ff ff       	call   806dfe <ip_output_if>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  80ede1:	89 1c 24             	mov    %ebx,(%esp)
  80ede4:	e8 eb 5f ff ff       	call   804dd4 <pbuf_free>
  return;
  80ede9:	eb 12                	jmp    80edfd <icmp_input+0x33d>
lenerr:
  pbuf_free(p);
  80edeb:	89 1c 24             	mov    %ebx,(%esp)
  80edee:	e8 e1 5f ff ff       	call   804dd4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
  80edf3:	eb 08                	jmp    80edfd <icmp_input+0x33d>
memerr:
  pbuf_free(p);
  80edf5:	89 1c 24             	mov    %ebx,(%esp)
  80edf8:	e8 d7 5f ff ff       	call   804dd4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
}
  80edfd:	83 c4 3c             	add    $0x3c,%esp
  80ee00:	5b                   	pop    %ebx
  80ee01:	5e                   	pop    %esi
  80ee02:	5f                   	pop    %edi
  80ee03:	5d                   	pop    %ebp
  80ee04:	c3                   	ret    

0080ee05 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  80ee05:	55                   	push   %ebp
  80ee06:	89 e5                	mov    %esp,%ebp
  80ee08:	57                   	push   %edi
  80ee09:	56                   	push   %esi
  80ee0a:	53                   	push   %ebx
  80ee0b:	83 ec 2c             	sub    $0x2c,%esp
  80ee0e:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct pbuf *q;
  struct ip_hdr *iphdr;
  struct icmp_dur_hdr *idur;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_dur_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  80ee11:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ee18:	00 
  80ee19:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%esp)
  80ee20:	00 
  80ee21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80ee28:	e8 88 60 ff ff       	call   804eb5 <pbuf_alloc>
  80ee2d:	89 c3                	mov    %eax,%ebx
                 PBUF_RAM);
  if (q == NULL) {
  80ee2f:	85 c0                	test   %eax,%eax
  80ee31:	0f 84 d8 00 00 00    	je     80ef0f <icmp_dest_unreach+0x10a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_dest_unreach: failed to allocate pbuf for ICMP packet.\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  80ee37:	66 83 78 0a 23       	cmpw   $0x23,0xa(%eax)
  80ee3c:	77 1c                	ja     80ee5a <icmp_dest_unreach+0x55>
  80ee3e:	c7 44 24 08 38 43 81 	movl   $0x814338,0x8(%esp)
  80ee45:	00 
  80ee46:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
  80ee4d:	00 
  80ee4e:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ee55:	e8 34 02 00 00       	call   80f08e <_panic>
             (q->len >= (sizeof(struct icmp_dur_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = p->payload;
  80ee5a:	8b 47 04             	mov    0x4(%edi),%eax
  80ee5d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  idur = q->payload;
  80ee60:	8b 73 04             	mov    0x4(%ebx),%esi
  ICMPH_TYPE_SET(idur, ICMP_DUR);
  80ee63:	0f b7 06             	movzwl (%esi),%eax
  80ee66:	89 04 24             	mov    %eax,(%esp)
  80ee69:	e8 f5 8e ff ff       	call   807d63 <ntohs>
  80ee6e:	0f b6 c0             	movzbl %al,%eax
  80ee71:	80 cc 03             	or     $0x3,%ah
  80ee74:	89 04 24             	mov    %eax,(%esp)
  80ee77:	e8 da 8e ff ff       	call   807d56 <htons>
  80ee7c:	66 89 06             	mov    %ax,(%esi)
  ICMPH_CODE_SET(idur, t);
  80ee7f:	0f b7 c0             	movzwl %ax,%eax
  80ee82:	89 04 24             	mov    %eax,(%esp)
  80ee85:	e8 d9 8e ff ff       	call   807d63 <ntohs>
  80ee8a:	b0 00                	mov    $0x0,%al
  80ee8c:	66 0b 45 0c          	or     0xc(%ebp),%ax
  80ee90:	0f b7 c0             	movzwl %ax,%eax
  80ee93:	89 04 24             	mov    %eax,(%esp)
  80ee96:	e8 bb 8e ff ff       	call   807d56 <htons>
  80ee9b:	66 89 06             	mov    %ax,(%esi)

  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_dur_hdr), p->payload,
  80ee9e:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
  80eea5:	00 
  80eea6:	8b 47 04             	mov    0x4(%edi),%eax
  80eea9:	89 44 24 04          	mov    %eax,0x4(%esp)
  80eead:	8b 53 04             	mov    0x4(%ebx),%edx
  80eeb0:	8d 42 08             	lea    0x8(%edx),%eax
  80eeb3:	89 04 24             	mov    %eax,(%esp)
  80eeb6:	e8 01 0b 00 00       	call   80f9bc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  idur->chksum = 0;
  80eebb:	66 c7 46 02 00 00    	movw   $0x0,0x2(%esi)
  idur->chksum = inet_chksum(idur, q->len);
  80eec1:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80eec5:	89 44 24 04          	mov    %eax,0x4(%esp)
  80eec9:	89 34 24             	mov    %esi,(%esp)
  80eecc:	e8 30 8d ff ff       	call   807c01 <inet_chksum>
  80eed1:	66 89 46 02          	mov    %ax,0x2(%esi)
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpoutdestunreachs();

  ip_output(q, NULL, &(iphdr->src), ICMP_TTL, 0, IP_PROTO_ICMP);
  80eed5:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  80eedc:	00 
  80eedd:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80eee4:	00 
  80eee5:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  80eeec:	00 
  80eeed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80eef0:	83 c0 0c             	add    $0xc,%eax
  80eef3:	89 44 24 08          	mov    %eax,0x8(%esp)
  80eef7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80eefe:	00 
  80eeff:	89 1c 24             	mov    %ebx,(%esp)
  80ef02:	e8 89 80 ff ff       	call   806f90 <ip_output>
  pbuf_free(q);
  80ef07:	89 1c 24             	mov    %ebx,(%esp)
  80ef0a:	e8 c5 5e ff ff       	call   804dd4 <pbuf_free>
}
  80ef0f:	83 c4 2c             	add    $0x2c,%esp
  80ef12:	5b                   	pop    %ebx
  80ef13:	5e                   	pop    %esi
  80ef14:	5f                   	pop    %edi
  80ef15:	5d                   	pop    %ebp
  80ef16:	c3                   	ret    

0080ef17 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  80ef17:	55                   	push   %ebp
  80ef18:	89 e5                	mov    %esp,%ebp
  80ef1a:	57                   	push   %edi
  80ef1b:	56                   	push   %esi
  80ef1c:	53                   	push   %ebx
  80ef1d:	83 ec 2c             	sub    $0x2c,%esp
  80ef20:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct pbuf *q;
  struct ip_hdr *iphdr;
  struct icmp_te_hdr *tehdr;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_dur_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  80ef23:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ef2a:	00 
  80ef2b:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%esp)
  80ef32:	00 
  80ef33:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80ef3a:	e8 76 5f ff ff       	call   804eb5 <pbuf_alloc>
  80ef3f:	89 c3                	mov    %eax,%ebx
                 PBUF_RAM);
  if (q == NULL) {
  80ef41:	85 c0                	test   %eax,%eax
  80ef43:	0f 84 d8 00 00 00    	je     80f021 <icmp_time_exceeded+0x10a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  80ef49:	66 83 78 0a 23       	cmpw   $0x23,0xa(%eax)
  80ef4e:	77 1c                	ja     80ef6c <icmp_time_exceeded+0x55>
  80ef50:	c7 44 24 08 38 43 81 	movl   $0x814338,0x8(%esp)
  80ef57:	00 
  80ef58:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
  80ef5f:	00 
  80ef60:	c7 04 24 64 43 81 00 	movl   $0x814364,(%esp)
  80ef67:	e8 22 01 00 00       	call   80f08e <_panic>
             (q->len >= (sizeof(struct icmp_dur_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = p->payload;
  80ef6c:	8b 47 04             	mov    0x4(%edi),%eax
  80ef6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  tehdr = q->payload;
  80ef72:	8b 73 04             	mov    0x4(%ebx),%esi
  ICMPH_TYPE_SET(tehdr, ICMP_TE);
  80ef75:	0f b7 06             	movzwl (%esi),%eax
  80ef78:	89 04 24             	mov    %eax,(%esp)
  80ef7b:	e8 e3 8d ff ff       	call   807d63 <ntohs>
  80ef80:	0f b6 c0             	movzbl %al,%eax
  80ef83:	80 cc 0b             	or     $0xb,%ah
  80ef86:	89 04 24             	mov    %eax,(%esp)
  80ef89:	e8 c8 8d ff ff       	call   807d56 <htons>
  80ef8e:	66 89 06             	mov    %ax,(%esi)
  ICMPH_CODE_SET(tehdr, t);
  80ef91:	0f b7 c0             	movzwl %ax,%eax
  80ef94:	89 04 24             	mov    %eax,(%esp)
  80ef97:	e8 c7 8d ff ff       	call   807d63 <ntohs>
  80ef9c:	b0 00                	mov    $0x0,%al
  80ef9e:	66 0b 45 0c          	or     0xc(%ebp),%ax
  80efa2:	0f b7 c0             	movzwl %ax,%eax
  80efa5:	89 04 24             	mov    %eax,(%esp)
  80efa8:	e8 a9 8d ff ff       	call   807d56 <htons>
  80efad:	66 89 06             	mov    %ax,(%esi)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_dur_hdr), (u8_t *)p->payload,
  80efb0:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
  80efb7:	00 
  80efb8:	8b 47 04             	mov    0x4(%edi),%eax
  80efbb:	89 44 24 04          	mov    %eax,0x4(%esp)
  80efbf:	8b 53 04             	mov    0x4(%ebx),%edx
  80efc2:	8d 42 08             	lea    0x8(%edx),%eax
  80efc5:	89 04 24             	mov    %eax,(%esp)
  80efc8:	e8 ef 09 00 00       	call   80f9bc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  tehdr->chksum = 0;
  80efcd:	66 c7 46 02 00 00    	movw   $0x0,0x2(%esi)
  tehdr->chksum = inet_chksum(tehdr, q->len);
  80efd3:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80efd7:	89 44 24 04          	mov    %eax,0x4(%esp)
  80efdb:	89 34 24             	mov    %esi,(%esp)
  80efde:	e8 1e 8c ff ff       	call   807c01 <inet_chksum>
  80efe3:	66 89 46 02          	mov    %ax,0x2(%esi)
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_output(q, NULL, &(iphdr->src), ICMP_TTL, 0, IP_PROTO_ICMP);
  80efe7:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  80efee:	00 
  80efef:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80eff6:	00 
  80eff7:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  80effe:	00 
  80efff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80f002:	83 c0 0c             	add    $0xc,%eax
  80f005:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f009:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80f010:	00 
  80f011:	89 1c 24             	mov    %ebx,(%esp)
  80f014:	e8 77 7f ff ff       	call   806f90 <ip_output>
  pbuf_free(q);
  80f019:	89 1c 24             	mov    %ebx,(%esp)
  80f01c:	e8 b3 5d ff ff       	call   804dd4 <pbuf_free>
}
  80f021:	83 c4 2c             	add    $0x2c,%esp
  80f024:	5b                   	pop    %ebx
  80f025:	5e                   	pop    %esi
  80f026:	5f                   	pop    %edi
  80f027:	5d                   	pop    %ebp
  80f028:	c3                   	ret    

0080f029 <libmain>:
const volatile struct Env *thisenv;
const char *binaryname = "<unknown>";

void
libmain(int argc, char **argv)
{
  80f029:	55                   	push   %ebp
  80f02a:	89 e5                	mov    %esp,%ebp
  80f02c:	56                   	push   %esi
  80f02d:	53                   	push   %ebx
  80f02e:	83 ec 10             	sub    $0x10,%esp
  80f031:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80f034:	8b 75 0c             	mov    0xc(%ebp),%esi
	// set thisenv to point at our Env structure in envs[].
	// LAB 3: Your code here.
	thisenv = envs+ENVX(sys_getenvid());
  80f037:	e8 59 0b 00 00       	call   80fb95 <sys_getenvid>
  80f03c:	25 ff 03 00 00       	and    $0x3ff,%eax
  80f041:	89 c2                	mov    %eax,%edx
  80f043:	c1 e2 07             	shl    $0x7,%edx
  80f046:	8d 84 82 00 00 c0 ee 	lea    -0x11400000(%edx,%eax,4),%eax
  80f04d:	a3 7c c2 b3 00       	mov    %eax,0xb3c27c

	// save the name of the program so that panic() can use it
	if (argc > 0)
  80f052:	85 db                	test   %ebx,%ebx
  80f054:	7e 07                	jle    80f05d <libmain+0x34>
		binaryname = argv[0];
  80f056:	8b 06                	mov    (%esi),%eax
  80f058:	a3 e8 52 81 00       	mov    %eax,0x8152e8

	// call user main routine
	umain(argc, argv);
  80f05d:	89 74 24 04          	mov    %esi,0x4(%esp)
  80f061:	89 1c 24             	mov    %ebx,(%esp)
  80f064:	e8 e6 15 ff ff       	call   80064f <umain>

	// exit gracefully
	exit();
  80f069:	e8 07 00 00 00       	call   80f075 <exit>
}
  80f06e:	83 c4 10             	add    $0x10,%esp
  80f071:	5b                   	pop    %ebx
  80f072:	5e                   	pop    %esi
  80f073:	5d                   	pop    %ebp
  80f074:	c3                   	ret    

0080f075 <exit>:

#include <inc/lib.h>

void
exit(void)
{
  80f075:	55                   	push   %ebp
  80f076:	89 e5                	mov    %esp,%ebp
  80f078:	83 ec 18             	sub    $0x18,%esp
	close_all();
  80f07b:	e8 5a 16 00 00       	call   8106da <close_all>
	sys_env_destroy(0);
  80f080:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80f087:	e8 b7 0a 00 00       	call   80fb43 <sys_env_destroy>
}
  80f08c:	c9                   	leave  
  80f08d:	c3                   	ret    

0080f08e <_panic>:
 * It prints "panic: <message>", then causes a breakpoint exception,
 * which causes JOS to enter the JOS kernel monitor.
 */
void
_panic(const char *file, int line, const char *fmt, ...)
{
  80f08e:	55                   	push   %ebp
  80f08f:	89 e5                	mov    %esp,%ebp
  80f091:	56                   	push   %esi
  80f092:	53                   	push   %ebx
  80f093:	83 ec 20             	sub    $0x20,%esp
	va_list ap;

	va_start(ap, fmt);
  80f096:	8d 5d 14             	lea    0x14(%ebp),%ebx

	// Print the panic message
	cprintf("[%08x] user panic in %s at %s:%d: ",
  80f099:	8b 35 e8 52 81 00    	mov    0x8152e8,%esi
  80f09f:	e8 f1 0a 00 00       	call   80fb95 <sys_getenvid>
  80f0a4:	8b 55 0c             	mov    0xc(%ebp),%edx
  80f0a7:	89 54 24 10          	mov    %edx,0x10(%esp)
  80f0ab:	8b 55 08             	mov    0x8(%ebp),%edx
  80f0ae:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80f0b2:	89 74 24 08          	mov    %esi,0x8(%esp)
  80f0b6:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f0ba:	c7 04 24 88 43 81 00 	movl   $0x814388,(%esp)
  80f0c1:	e8 c1 00 00 00       	call   80f187 <cprintf>
		sys_getenvid(), binaryname, file, line);
	vcprintf(fmt, ap);
  80f0c6:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80f0ca:	8b 45 10             	mov    0x10(%ebp),%eax
  80f0cd:	89 04 24             	mov    %eax,(%esp)
  80f0d0:	e8 51 00 00 00       	call   80f126 <vcprintf>
	cprintf("\n");
  80f0d5:	c7 04 24 68 1f 81 00 	movl   $0x811f68,(%esp)
  80f0dc:	e8 a6 00 00 00       	call   80f187 <cprintf>

	// Cause a breakpoint exception
	while (1)
		asm volatile("int3");
  80f0e1:	cc                   	int3   
  80f0e2:	eb fd                	jmp    80f0e1 <_panic+0x53>

0080f0e4 <putch>:
};


static void
putch(int ch, struct printbuf *b)
{
  80f0e4:	55                   	push   %ebp
  80f0e5:	89 e5                	mov    %esp,%ebp
  80f0e7:	53                   	push   %ebx
  80f0e8:	83 ec 14             	sub    $0x14,%esp
  80f0eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	b->buf[b->idx++] = ch;
  80f0ee:	8b 13                	mov    (%ebx),%edx
  80f0f0:	8d 42 01             	lea    0x1(%edx),%eax
  80f0f3:	89 03                	mov    %eax,(%ebx)
  80f0f5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80f0f8:	88 4c 13 08          	mov    %cl,0x8(%ebx,%edx,1)
	if (b->idx == 256-1) {
  80f0fc:	3d ff 00 00 00       	cmp    $0xff,%eax
  80f101:	75 19                	jne    80f11c <putch+0x38>
		sys_cputs(b->buf, b->idx);
  80f103:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
  80f10a:	00 
  80f10b:	8d 43 08             	lea    0x8(%ebx),%eax
  80f10e:	89 04 24             	mov    %eax,(%esp)
  80f111:	e8 f0 09 00 00       	call   80fb06 <sys_cputs>
		b->idx = 0;
  80f116:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
	}
	b->cnt++;
  80f11c:	83 43 04 01          	addl   $0x1,0x4(%ebx)
}
  80f120:	83 c4 14             	add    $0x14,%esp
  80f123:	5b                   	pop    %ebx
  80f124:	5d                   	pop    %ebp
  80f125:	c3                   	ret    

0080f126 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
  80f126:	55                   	push   %ebp
  80f127:	89 e5                	mov    %esp,%ebp
  80f129:	81 ec 28 01 00 00    	sub    $0x128,%esp
	struct printbuf b;

	b.idx = 0;
  80f12f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
  80f136:	00 00 00 
	b.cnt = 0;
  80f139:	c7 85 f4 fe ff ff 00 	movl   $0x0,-0x10c(%ebp)
  80f140:	00 00 00 
	vprintfmt((void*)putch, &b, fmt, ap);
  80f143:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f146:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80f14a:	8b 45 08             	mov    0x8(%ebp),%eax
  80f14d:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f151:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
  80f157:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f15b:	c7 04 24 e4 f0 80 00 	movl   $0x80f0e4,(%esp)
  80f162:	e8 b7 01 00 00       	call   80f31e <vprintfmt>
	sys_cputs(b.buf, b.idx);
  80f167:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
  80f16d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f171:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
  80f177:	89 04 24             	mov    %eax,(%esp)
  80f17a:	e8 87 09 00 00       	call   80fb06 <sys_cputs>

	return b.cnt;
}
  80f17f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
  80f185:	c9                   	leave  
  80f186:	c3                   	ret    

0080f187 <cprintf>:

int
cprintf(const char *fmt, ...)
{
  80f187:	55                   	push   %ebp
  80f188:	89 e5                	mov    %esp,%ebp
  80f18a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
  80f18d:	8d 45 0c             	lea    0xc(%ebp),%eax
	cnt = vcprintf(fmt, ap);
  80f190:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f194:	8b 45 08             	mov    0x8(%ebp),%eax
  80f197:	89 04 24             	mov    %eax,(%esp)
  80f19a:	e8 87 ff ff ff       	call   80f126 <vcprintf>
	va_end(ap);

	return cnt;
}
  80f19f:	c9                   	leave  
  80f1a0:	c3                   	ret    
  80f1a1:	66 90                	xchg   %ax,%ax
  80f1a3:	66 90                	xchg   %ax,%ax
  80f1a5:	66 90                	xchg   %ax,%ax
  80f1a7:	66 90                	xchg   %ax,%ax
  80f1a9:	66 90                	xchg   %ax,%ax
  80f1ab:	66 90                	xchg   %ax,%ax
  80f1ad:	66 90                	xchg   %ax,%ax
  80f1af:	90                   	nop

0080f1b0 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
  80f1b0:	55                   	push   %ebp
  80f1b1:	89 e5                	mov    %esp,%ebp
  80f1b3:	57                   	push   %edi
  80f1b4:	56                   	push   %esi
  80f1b5:	53                   	push   %ebx
  80f1b6:	83 ec 3c             	sub    $0x3c,%esp
  80f1b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80f1bc:	89 d7                	mov    %edx,%edi
  80f1be:	8b 45 08             	mov    0x8(%ebp),%eax
  80f1c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
  80f1c4:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f1c7:	89 c3                	mov    %eax,%ebx
  80f1c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  80f1cc:	8b 45 10             	mov    0x10(%ebp),%eax
  80f1cf:	8b 75 14             	mov    0x14(%ebp),%esi
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
  80f1d2:	b9 00 00 00 00       	mov    $0x0,%ecx
  80f1d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  80f1da:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  80f1dd:	39 d9                	cmp    %ebx,%ecx
  80f1df:	72 05                	jb     80f1e6 <printnum+0x36>
  80f1e1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  80f1e4:	77 69                	ja     80f24f <printnum+0x9f>
		printnum(putch, putdat, num / base, base, width - 1, padc);
  80f1e6:	8b 4d 18             	mov    0x18(%ebp),%ecx
  80f1e9:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  80f1ed:	83 ee 01             	sub    $0x1,%esi
  80f1f0:	89 74 24 0c          	mov    %esi,0xc(%esp)
  80f1f4:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f1f8:	8b 44 24 08          	mov    0x8(%esp),%eax
  80f1fc:	8b 54 24 0c          	mov    0xc(%esp),%edx
  80f200:	89 c3                	mov    %eax,%ebx
  80f202:	89 d6                	mov    %edx,%esi
  80f204:	8b 55 d8             	mov    -0x28(%ebp),%edx
  80f207:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  80f20a:	89 54 24 08          	mov    %edx,0x8(%esp)
  80f20e:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  80f212:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80f215:	89 04 24             	mov    %eax,(%esp)
  80f218:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  80f21b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f21f:	e8 1c 29 00 00       	call   811b40 <__udivdi3>
  80f224:	89 d9                	mov    %ebx,%ecx
  80f226:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80f22a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  80f22e:	89 04 24             	mov    %eax,(%esp)
  80f231:	89 54 24 04          	mov    %edx,0x4(%esp)
  80f235:	89 fa                	mov    %edi,%edx
  80f237:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80f23a:	e8 71 ff ff ff       	call   80f1b0 <printnum>
  80f23f:	eb 1b                	jmp    80f25c <printnum+0xac>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
  80f241:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f245:	8b 45 18             	mov    0x18(%ebp),%eax
  80f248:	89 04 24             	mov    %eax,(%esp)
  80f24b:	ff d3                	call   *%ebx
  80f24d:	eb 03                	jmp    80f252 <printnum+0xa2>
  80f24f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
  80f252:	83 ee 01             	sub    $0x1,%esi
  80f255:	85 f6                	test   %esi,%esi
  80f257:	7f e8                	jg     80f241 <printnum+0x91>
  80f259:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
  80f25c:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f260:	8b 7c 24 04          	mov    0x4(%esp),%edi
  80f264:	8b 45 d8             	mov    -0x28(%ebp),%eax
  80f267:	8b 55 dc             	mov    -0x24(%ebp),%edx
  80f26a:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f26e:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80f272:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80f275:	89 04 24             	mov    %eax,(%esp)
  80f278:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  80f27b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f27f:	e8 ec 29 00 00       	call   811c70 <__umoddi3>
  80f284:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f288:	0f be 80 ab 43 81 00 	movsbl 0x8143ab(%eax),%eax
  80f28f:	89 04 24             	mov    %eax,(%esp)
  80f292:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  80f295:	ff d0                	call   *%eax
}
  80f297:	83 c4 3c             	add    $0x3c,%esp
  80f29a:	5b                   	pop    %ebx
  80f29b:	5e                   	pop    %esi
  80f29c:	5f                   	pop    %edi
  80f29d:	5d                   	pop    %ebp
  80f29e:	c3                   	ret    

0080f29f <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
  80f29f:	55                   	push   %ebp
  80f2a0:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
  80f2a2:	83 fa 01             	cmp    $0x1,%edx
  80f2a5:	7e 0e                	jle    80f2b5 <getuint+0x16>
		return va_arg(*ap, unsigned long long);
  80f2a7:	8b 10                	mov    (%eax),%edx
  80f2a9:	8d 4a 08             	lea    0x8(%edx),%ecx
  80f2ac:	89 08                	mov    %ecx,(%eax)
  80f2ae:	8b 02                	mov    (%edx),%eax
  80f2b0:	8b 52 04             	mov    0x4(%edx),%edx
  80f2b3:	eb 22                	jmp    80f2d7 <getuint+0x38>
	else if (lflag)
  80f2b5:	85 d2                	test   %edx,%edx
  80f2b7:	74 10                	je     80f2c9 <getuint+0x2a>
		return va_arg(*ap, unsigned long);
  80f2b9:	8b 10                	mov    (%eax),%edx
  80f2bb:	8d 4a 04             	lea    0x4(%edx),%ecx
  80f2be:	89 08                	mov    %ecx,(%eax)
  80f2c0:	8b 02                	mov    (%edx),%eax
  80f2c2:	ba 00 00 00 00       	mov    $0x0,%edx
  80f2c7:	eb 0e                	jmp    80f2d7 <getuint+0x38>
	else
		return va_arg(*ap, unsigned int);
  80f2c9:	8b 10                	mov    (%eax),%edx
  80f2cb:	8d 4a 04             	lea    0x4(%edx),%ecx
  80f2ce:	89 08                	mov    %ecx,(%eax)
  80f2d0:	8b 02                	mov    (%edx),%eax
  80f2d2:	ba 00 00 00 00       	mov    $0x0,%edx
}
  80f2d7:	5d                   	pop    %ebp
  80f2d8:	c3                   	ret    

0080f2d9 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
  80f2d9:	55                   	push   %ebp
  80f2da:	89 e5                	mov    %esp,%ebp
  80f2dc:	8b 45 0c             	mov    0xc(%ebp),%eax
	b->cnt++;
  80f2df:	83 40 08 01          	addl   $0x1,0x8(%eax)
	if (b->buf < b->ebuf)
  80f2e3:	8b 10                	mov    (%eax),%edx
  80f2e5:	3b 50 04             	cmp    0x4(%eax),%edx
  80f2e8:	73 0a                	jae    80f2f4 <sprintputch+0x1b>
		*b->buf++ = ch;
  80f2ea:	8d 4a 01             	lea    0x1(%edx),%ecx
  80f2ed:	89 08                	mov    %ecx,(%eax)
  80f2ef:	8b 45 08             	mov    0x8(%ebp),%eax
  80f2f2:	88 02                	mov    %al,(%edx)
}
  80f2f4:	5d                   	pop    %ebp
  80f2f5:	c3                   	ret    

0080f2f6 <printfmt>:
	}
}

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
  80f2f6:	55                   	push   %ebp
  80f2f7:	89 e5                	mov    %esp,%ebp
  80f2f9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
  80f2fc:	8d 45 14             	lea    0x14(%ebp),%eax
	vprintfmt(putch, putdat, fmt, ap);
  80f2ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80f303:	8b 45 10             	mov    0x10(%ebp),%eax
  80f306:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f30a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f30d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f311:	8b 45 08             	mov    0x8(%ebp),%eax
  80f314:	89 04 24             	mov    %eax,(%esp)
  80f317:	e8 02 00 00 00       	call   80f31e <vprintfmt>
	va_end(ap);
}
  80f31c:	c9                   	leave  
  80f31d:	c3                   	ret    

0080f31e <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
  80f31e:	55                   	push   %ebp
  80f31f:	89 e5                	mov    %esp,%ebp
  80f321:	57                   	push   %edi
  80f322:	56                   	push   %esi
  80f323:	53                   	push   %ebx
  80f324:	83 ec 3c             	sub    $0x3c,%esp
  80f327:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80f32a:	8b 5d 10             	mov    0x10(%ebp),%ebx
  80f32d:	eb 14                	jmp    80f343 <vprintfmt+0x25>
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
  80f32f:	85 c0                	test   %eax,%eax
  80f331:	0f 84 b3 03 00 00    	je     80f6ea <vprintfmt+0x3cc>
				return;
			putch(ch, putdat);
  80f337:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f33b:	89 04 24             	mov    %eax,(%esp)
  80f33e:	ff 55 08             	call   *0x8(%ebp)
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
  80f341:	89 f3                	mov    %esi,%ebx
  80f343:	8d 73 01             	lea    0x1(%ebx),%esi
  80f346:	0f b6 03             	movzbl (%ebx),%eax
  80f349:	83 f8 25             	cmp    $0x25,%eax
  80f34c:	75 e1                	jne    80f32f <vprintfmt+0x11>
  80f34e:	c6 45 d8 20          	movb   $0x20,-0x28(%ebp)
  80f352:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  80f359:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
  80f360:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
  80f367:	ba 00 00 00 00       	mov    $0x0,%edx
  80f36c:	eb 1d                	jmp    80f38b <vprintfmt+0x6d>
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f36e:	89 de                	mov    %ebx,%esi

		// flag to pad on the right
		case '-':
			padc = '-';
  80f370:	c6 45 d8 2d          	movb   $0x2d,-0x28(%ebp)
  80f374:	eb 15                	jmp    80f38b <vprintfmt+0x6d>
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f376:	89 de                	mov    %ebx,%esi
			padc = '-';
			goto reswitch;

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
  80f378:	c6 45 d8 30          	movb   $0x30,-0x28(%ebp)
  80f37c:	eb 0d                	jmp    80f38b <vprintfmt+0x6d>
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
				width = precision, precision = -1;
  80f37e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  80f381:	89 45 dc             	mov    %eax,-0x24(%ebp)
  80f384:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f38b:	8d 5e 01             	lea    0x1(%esi),%ebx
  80f38e:	0f b6 0e             	movzbl (%esi),%ecx
  80f391:	0f b6 c1             	movzbl %cl,%eax
  80f394:	83 e9 23             	sub    $0x23,%ecx
  80f397:	80 f9 55             	cmp    $0x55,%cl
  80f39a:	0f 87 2a 03 00 00    	ja     80f6ca <vprintfmt+0x3ac>
  80f3a0:	0f b6 c9             	movzbl %cl,%ecx
  80f3a3:	ff 24 8d 20 45 81 00 	jmp    *0x814520(,%ecx,4)
  80f3aa:	89 de                	mov    %ebx,%esi
  80f3ac:	b9 00 00 00 00       	mov    $0x0,%ecx
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
				precision = precision * 10 + ch - '0';
  80f3b1:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
  80f3b4:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
				ch = *fmt;
  80f3b8:	0f be 06             	movsbl (%esi),%eax
				if (ch < '0' || ch > '9')
  80f3bb:	8d 58 d0             	lea    -0x30(%eax),%ebx
  80f3be:	83 fb 09             	cmp    $0x9,%ebx
  80f3c1:	77 36                	ja     80f3f9 <vprintfmt+0xdb>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
  80f3c3:	83 c6 01             	add    $0x1,%esi
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
  80f3c6:	eb e9                	jmp    80f3b1 <vprintfmt+0x93>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
  80f3c8:	8b 45 14             	mov    0x14(%ebp),%eax
  80f3cb:	8d 48 04             	lea    0x4(%eax),%ecx
  80f3ce:	89 4d 14             	mov    %ecx,0x14(%ebp)
  80f3d1:	8b 00                	mov    (%eax),%eax
  80f3d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f3d6:	89 de                	mov    %ebx,%esi
			}
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
			goto process_precision;
  80f3d8:	eb 22                	jmp    80f3fc <vprintfmt+0xde>
  80f3da:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  80f3dd:	85 c9                	test   %ecx,%ecx
  80f3df:	b8 00 00 00 00       	mov    $0x0,%eax
  80f3e4:	0f 49 c1             	cmovns %ecx,%eax
  80f3e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f3ea:	89 de                	mov    %ebx,%esi
  80f3ec:	eb 9d                	jmp    80f38b <vprintfmt+0x6d>
  80f3ee:	89 de                	mov    %ebx,%esi
			if (width < 0)
				width = 0;
			goto reswitch;

		case '#':
			altflag = 1;
  80f3f0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
			goto reswitch;
  80f3f7:	eb 92                	jmp    80f38b <vprintfmt+0x6d>
  80f3f9:	89 4d d4             	mov    %ecx,-0x2c(%ebp)

		process_precision:
			if (width < 0)
  80f3fc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  80f400:	79 89                	jns    80f38b <vprintfmt+0x6d>
  80f402:	e9 77 ff ff ff       	jmp    80f37e <vprintfmt+0x60>
				width = precision, precision = -1;
			goto reswitch;

		// long flag (doubled for long long)
		case 'l':
			lflag++;
  80f407:	83 c2 01             	add    $0x1,%edx
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f40a:	89 de                	mov    %ebx,%esi
			goto reswitch;

		// long flag (doubled for long long)
		case 'l':
			lflag++;
			goto reswitch;
  80f40c:	e9 7a ff ff ff       	jmp    80f38b <vprintfmt+0x6d>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
  80f411:	8b 45 14             	mov    0x14(%ebp),%eax
  80f414:	8d 50 04             	lea    0x4(%eax),%edx
  80f417:	89 55 14             	mov    %edx,0x14(%ebp)
  80f41a:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f41e:	8b 00                	mov    (%eax),%eax
  80f420:	89 04 24             	mov    %eax,(%esp)
  80f423:	ff 55 08             	call   *0x8(%ebp)
			break;
  80f426:	e9 18 ff ff ff       	jmp    80f343 <vprintfmt+0x25>

		// error message
		case 'e':
			err = va_arg(ap, int);
  80f42b:	8b 45 14             	mov    0x14(%ebp),%eax
  80f42e:	8d 50 04             	lea    0x4(%eax),%edx
  80f431:	89 55 14             	mov    %edx,0x14(%ebp)
  80f434:	8b 00                	mov    (%eax),%eax
  80f436:	99                   	cltd   
  80f437:	31 d0                	xor    %edx,%eax
  80f439:	29 d0                	sub    %edx,%eax
			if (err < 0)
				err = -err;
			if (err >= MAXERROR || (p = error_string[err]) == NULL)
  80f43b:	83 f8 12             	cmp    $0x12,%eax
  80f43e:	7f 0b                	jg     80f44b <vprintfmt+0x12d>
  80f440:	8b 14 85 80 46 81 00 	mov    0x814680(,%eax,4),%edx
  80f447:	85 d2                	test   %edx,%edx
  80f449:	75 20                	jne    80f46b <vprintfmt+0x14d>
				printfmt(putch, putdat, "error %d", err);
  80f44b:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80f44f:	c7 44 24 08 c3 43 81 	movl   $0x8143c3,0x8(%esp)
  80f456:	00 
  80f457:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f45b:	8b 45 08             	mov    0x8(%ebp),%eax
  80f45e:	89 04 24             	mov    %eax,(%esp)
  80f461:	e8 90 fe ff ff       	call   80f2f6 <printfmt>
  80f466:	e9 d8 fe ff ff       	jmp    80f343 <vprintfmt+0x25>
			else
				printfmt(putch, putdat, "%s", p);
  80f46b:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80f46f:	c7 44 24 08 91 35 81 	movl   $0x813591,0x8(%esp)
  80f476:	00 
  80f477:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f47b:	8b 45 08             	mov    0x8(%ebp),%eax
  80f47e:	89 04 24             	mov    %eax,(%esp)
  80f481:	e8 70 fe ff ff       	call   80f2f6 <printfmt>
  80f486:	e9 b8 fe ff ff       	jmp    80f343 <vprintfmt+0x25>
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  80f48b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  80f48e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80f491:	89 45 d0             	mov    %eax,-0x30(%ebp)
				printfmt(putch, putdat, "%s", p);
			break;

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
  80f494:	8b 45 14             	mov    0x14(%ebp),%eax
  80f497:	8d 50 04             	lea    0x4(%eax),%edx
  80f49a:	89 55 14             	mov    %edx,0x14(%ebp)
  80f49d:	8b 30                	mov    (%eax),%esi
				p = "(null)";
  80f49f:	85 f6                	test   %esi,%esi
  80f4a1:	b8 bc 43 81 00       	mov    $0x8143bc,%eax
  80f4a6:	0f 44 f0             	cmove  %eax,%esi
			if (width > 0 && padc != '-')
  80f4a9:	80 7d d8 2d          	cmpb   $0x2d,-0x28(%ebp)
  80f4ad:	0f 84 97 00 00 00    	je     80f54a <vprintfmt+0x22c>
  80f4b3:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  80f4b7:	0f 8e 9b 00 00 00    	jle    80f558 <vprintfmt+0x23a>
				for (width -= strnlen(p, precision); width > 0; width--)
  80f4bd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80f4c1:	89 34 24             	mov    %esi,(%esp)
  80f4c4:	e8 cf 02 00 00       	call   80f798 <strnlen>
  80f4c9:	8b 55 d0             	mov    -0x30(%ebp),%edx
  80f4cc:	29 c2                	sub    %eax,%edx
  80f4ce:	89 55 d0             	mov    %edx,-0x30(%ebp)
					putch(padc, putdat);
  80f4d1:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  80f4d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  80f4d8:	89 75 d8             	mov    %esi,-0x28(%ebp)
  80f4db:	8b 75 08             	mov    0x8(%ebp),%esi
  80f4de:	89 5d 10             	mov    %ebx,0x10(%ebp)
  80f4e1:	89 d3                	mov    %edx,%ebx
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
  80f4e3:	eb 0f                	jmp    80f4f4 <vprintfmt+0x1d6>
					putch(padc, putdat);
  80f4e5:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f4e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  80f4ec:	89 04 24             	mov    %eax,(%esp)
  80f4ef:	ff d6                	call   *%esi
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
  80f4f1:	83 eb 01             	sub    $0x1,%ebx
  80f4f4:	85 db                	test   %ebx,%ebx
  80f4f6:	7f ed                	jg     80f4e5 <vprintfmt+0x1c7>
  80f4f8:	8b 75 d8             	mov    -0x28(%ebp),%esi
  80f4fb:	8b 55 d0             	mov    -0x30(%ebp),%edx
  80f4fe:	85 d2                	test   %edx,%edx
  80f500:	b8 00 00 00 00       	mov    $0x0,%eax
  80f505:	0f 49 c2             	cmovns %edx,%eax
  80f508:	29 c2                	sub    %eax,%edx
  80f50a:	89 7d 0c             	mov    %edi,0xc(%ebp)
  80f50d:	89 d7                	mov    %edx,%edi
  80f50f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
  80f512:	eb 50                	jmp    80f564 <vprintfmt+0x246>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
  80f514:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  80f518:	74 1e                	je     80f538 <vprintfmt+0x21a>
  80f51a:	0f be d2             	movsbl %dl,%edx
  80f51d:	83 ea 20             	sub    $0x20,%edx
  80f520:	83 fa 5e             	cmp    $0x5e,%edx
  80f523:	76 13                	jbe    80f538 <vprintfmt+0x21a>
					putch('?', putdat);
  80f525:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f528:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f52c:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
  80f533:	ff 55 08             	call   *0x8(%ebp)
  80f536:	eb 0d                	jmp    80f545 <vprintfmt+0x227>
				else
					putch(ch, putdat);
  80f538:	8b 55 0c             	mov    0xc(%ebp),%edx
  80f53b:	89 54 24 04          	mov    %edx,0x4(%esp)
  80f53f:	89 04 24             	mov    %eax,(%esp)
  80f542:	ff 55 08             	call   *0x8(%ebp)
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
  80f545:	83 ef 01             	sub    $0x1,%edi
  80f548:	eb 1a                	jmp    80f564 <vprintfmt+0x246>
  80f54a:	89 7d 0c             	mov    %edi,0xc(%ebp)
  80f54d:	8b 7d dc             	mov    -0x24(%ebp),%edi
  80f550:	89 5d 10             	mov    %ebx,0x10(%ebp)
  80f553:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
  80f556:	eb 0c                	jmp    80f564 <vprintfmt+0x246>
  80f558:	89 7d 0c             	mov    %edi,0xc(%ebp)
  80f55b:	8b 7d dc             	mov    -0x24(%ebp),%edi
  80f55e:	89 5d 10             	mov    %ebx,0x10(%ebp)
  80f561:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
  80f564:	83 c6 01             	add    $0x1,%esi
  80f567:	0f b6 56 ff          	movzbl -0x1(%esi),%edx
  80f56b:	0f be c2             	movsbl %dl,%eax
  80f56e:	85 c0                	test   %eax,%eax
  80f570:	74 27                	je     80f599 <vprintfmt+0x27b>
  80f572:	85 db                	test   %ebx,%ebx
  80f574:	78 9e                	js     80f514 <vprintfmt+0x1f6>
  80f576:	83 eb 01             	sub    $0x1,%ebx
  80f579:	79 99                	jns    80f514 <vprintfmt+0x1f6>
  80f57b:	89 f8                	mov    %edi,%eax
  80f57d:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80f580:	8b 75 08             	mov    0x8(%ebp),%esi
  80f583:	89 c3                	mov    %eax,%ebx
  80f585:	eb 1a                	jmp    80f5a1 <vprintfmt+0x283>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
				putch(' ', putdat);
  80f587:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f58b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  80f592:	ff d6                	call   *%esi
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
  80f594:	83 eb 01             	sub    $0x1,%ebx
  80f597:	eb 08                	jmp    80f5a1 <vprintfmt+0x283>
  80f599:	89 fb                	mov    %edi,%ebx
  80f59b:	8b 75 08             	mov    0x8(%ebp),%esi
  80f59e:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80f5a1:	85 db                	test   %ebx,%ebx
  80f5a3:	7f e2                	jg     80f587 <vprintfmt+0x269>
  80f5a5:	89 75 08             	mov    %esi,0x8(%ebp)
  80f5a8:	8b 5d 10             	mov    0x10(%ebp),%ebx
  80f5ab:	e9 93 fd ff ff       	jmp    80f343 <vprintfmt+0x25>
// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
	if (lflag >= 2)
  80f5b0:	83 fa 01             	cmp    $0x1,%edx
  80f5b3:	7e 16                	jle    80f5cb <vprintfmt+0x2ad>
		return va_arg(*ap, long long);
  80f5b5:	8b 45 14             	mov    0x14(%ebp),%eax
  80f5b8:	8d 50 08             	lea    0x8(%eax),%edx
  80f5bb:	89 55 14             	mov    %edx,0x14(%ebp)
  80f5be:	8b 50 04             	mov    0x4(%eax),%edx
  80f5c1:	8b 00                	mov    (%eax),%eax
  80f5c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  80f5c6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  80f5c9:	eb 32                	jmp    80f5fd <vprintfmt+0x2df>
	else if (lflag)
  80f5cb:	85 d2                	test   %edx,%edx
  80f5cd:	74 18                	je     80f5e7 <vprintfmt+0x2c9>
		return va_arg(*ap, long);
  80f5cf:	8b 45 14             	mov    0x14(%ebp),%eax
  80f5d2:	8d 50 04             	lea    0x4(%eax),%edx
  80f5d5:	89 55 14             	mov    %edx,0x14(%ebp)
  80f5d8:	8b 30                	mov    (%eax),%esi
  80f5da:	89 75 e0             	mov    %esi,-0x20(%ebp)
  80f5dd:	89 f0                	mov    %esi,%eax
  80f5df:	c1 f8 1f             	sar    $0x1f,%eax
  80f5e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  80f5e5:	eb 16                	jmp    80f5fd <vprintfmt+0x2df>
	else
		return va_arg(*ap, int);
  80f5e7:	8b 45 14             	mov    0x14(%ebp),%eax
  80f5ea:	8d 50 04             	lea    0x4(%eax),%edx
  80f5ed:	89 55 14             	mov    %edx,0x14(%ebp)
  80f5f0:	8b 30                	mov    (%eax),%esi
  80f5f2:	89 75 e0             	mov    %esi,-0x20(%ebp)
  80f5f5:	89 f0                	mov    %esi,%eax
  80f5f7:	c1 f8 1f             	sar    $0x1f,%eax
  80f5fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				putch(' ', putdat);
			break;

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
  80f5fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80f600:	8b 55 e4             	mov    -0x1c(%ebp),%edx
			if ((long long) num < 0) {
				putch('-', putdat);
				num = -(long long) num;
			}
			base = 10;
  80f603:	b9 0a 00 00 00       	mov    $0xa,%ecx
			break;

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
			if ((long long) num < 0) {
  80f608:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  80f60c:	0f 89 80 00 00 00    	jns    80f692 <vprintfmt+0x374>
				putch('-', putdat);
  80f612:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f616:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  80f61d:	ff 55 08             	call   *0x8(%ebp)
				num = -(long long) num;
  80f620:	8b 45 e0             	mov    -0x20(%ebp),%eax
  80f623:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  80f626:	f7 d8                	neg    %eax
  80f628:	83 d2 00             	adc    $0x0,%edx
  80f62b:	f7 da                	neg    %edx
			}
			base = 10;
  80f62d:	b9 0a 00 00 00       	mov    $0xa,%ecx
  80f632:	eb 5e                	jmp    80f692 <vprintfmt+0x374>
			goto number;

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
  80f634:	8d 45 14             	lea    0x14(%ebp),%eax
  80f637:	e8 63 fc ff ff       	call   80f29f <getuint>
			base = 10;
  80f63c:	b9 0a 00 00 00       	mov    $0xa,%ecx
			goto number;
  80f641:	eb 4f                	jmp    80f692 <vprintfmt+0x374>

		// (unsigned) octal
		case 'o':
			num = getuint(&ap, lflag);
  80f643:	8d 45 14             	lea    0x14(%ebp),%eax
  80f646:	e8 54 fc ff ff       	call   80f29f <getuint>
			base = 8;
  80f64b:	b9 08 00 00 00       	mov    $0x8,%ecx
			goto number;
  80f650:	eb 40                	jmp    80f692 <vprintfmt+0x374>

		// pointer
		case 'p':
			putch('0', putdat);
  80f652:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f656:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  80f65d:	ff 55 08             	call   *0x8(%ebp)
			putch('x', putdat);
  80f660:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f664:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
  80f66b:	ff 55 08             	call   *0x8(%ebp)
			num = (unsigned long long)
				(uintptr_t) va_arg(ap, void *);
  80f66e:	8b 45 14             	mov    0x14(%ebp),%eax
  80f671:	8d 50 04             	lea    0x4(%eax),%edx
  80f674:	89 55 14             	mov    %edx,0x14(%ebp)

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
  80f677:	8b 00                	mov    (%eax),%eax
  80f679:	ba 00 00 00 00       	mov    $0x0,%edx
				(uintptr_t) va_arg(ap, void *);
			base = 16;
  80f67e:	b9 10 00 00 00       	mov    $0x10,%ecx
			goto number;
  80f683:	eb 0d                	jmp    80f692 <vprintfmt+0x374>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
  80f685:	8d 45 14             	lea    0x14(%ebp),%eax
  80f688:	e8 12 fc ff ff       	call   80f29f <getuint>
			base = 16;
  80f68d:	b9 10 00 00 00       	mov    $0x10,%ecx
		number:
			printnum(putch, putdat, num, base, width, padc);
  80f692:	0f be 75 d8          	movsbl -0x28(%ebp),%esi
  80f696:	89 74 24 10          	mov    %esi,0x10(%esp)
  80f69a:	8b 75 dc             	mov    -0x24(%ebp),%esi
  80f69d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  80f6a1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80f6a5:	89 04 24             	mov    %eax,(%esp)
  80f6a8:	89 54 24 04          	mov    %edx,0x4(%esp)
  80f6ac:	89 fa                	mov    %edi,%edx
  80f6ae:	8b 45 08             	mov    0x8(%ebp),%eax
  80f6b1:	e8 fa fa ff ff       	call   80f1b0 <printnum>
			break;
  80f6b6:	e9 88 fc ff ff       	jmp    80f343 <vprintfmt+0x25>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
  80f6bb:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f6bf:	89 04 24             	mov    %eax,(%esp)
  80f6c2:	ff 55 08             	call   *0x8(%ebp)
			break;
  80f6c5:	e9 79 fc ff ff       	jmp    80f343 <vprintfmt+0x25>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
  80f6ca:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f6ce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  80f6d5:	ff 55 08             	call   *0x8(%ebp)
			for (fmt--; fmt[-1] != '%'; fmt--)
  80f6d8:	89 f3                	mov    %esi,%ebx
  80f6da:	eb 03                	jmp    80f6df <vprintfmt+0x3c1>
  80f6dc:	83 eb 01             	sub    $0x1,%ebx
  80f6df:	80 7b ff 25          	cmpb   $0x25,-0x1(%ebx)
  80f6e3:	75 f7                	jne    80f6dc <vprintfmt+0x3be>
  80f6e5:	e9 59 fc ff ff       	jmp    80f343 <vprintfmt+0x25>
				/* do nothing */;
			break;
		}
	}
}
  80f6ea:	83 c4 3c             	add    $0x3c,%esp
  80f6ed:	5b                   	pop    %ebx
  80f6ee:	5e                   	pop    %esi
  80f6ef:	5f                   	pop    %edi
  80f6f0:	5d                   	pop    %ebp
  80f6f1:	c3                   	ret    

0080f6f2 <vsnprintf>:
		*b->buf++ = ch;
}

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
  80f6f2:	55                   	push   %ebp
  80f6f3:	89 e5                	mov    %esp,%ebp
  80f6f5:	83 ec 28             	sub    $0x28,%esp
  80f6f8:	8b 45 08             	mov    0x8(%ebp),%eax
  80f6fb:	8b 55 0c             	mov    0xc(%ebp),%edx
	struct sprintbuf b = {buf, buf+n-1, 0};
  80f6fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
  80f701:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecx
  80f705:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  80f708:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
  80f70f:	85 c0                	test   %eax,%eax
  80f711:	74 30                	je     80f743 <vsnprintf+0x51>
  80f713:	85 d2                	test   %edx,%edx
  80f715:	7e 2c                	jle    80f743 <vsnprintf+0x51>
		return -E_INVAL;

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
  80f717:	8b 45 14             	mov    0x14(%ebp),%eax
  80f71a:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80f71e:	8b 45 10             	mov    0x10(%ebp),%eax
  80f721:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f725:	8d 45 ec             	lea    -0x14(%ebp),%eax
  80f728:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f72c:	c7 04 24 d9 f2 80 00 	movl   $0x80f2d9,(%esp)
  80f733:	e8 e6 fb ff ff       	call   80f31e <vprintfmt>

	// null terminate the buffer
	*b.buf = '\0';
  80f738:	8b 45 ec             	mov    -0x14(%ebp),%eax
  80f73b:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
  80f73e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  80f741:	eb 05                	jmp    80f748 <vsnprintf+0x56>
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
	struct sprintbuf b = {buf, buf+n-1, 0};

	if (buf == NULL || n < 1)
		return -E_INVAL;
  80f743:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax

	// null terminate the buffer
	*b.buf = '\0';

	return b.cnt;
}
  80f748:	c9                   	leave  
  80f749:	c3                   	ret    

0080f74a <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
  80f74a:	55                   	push   %ebp
  80f74b:	89 e5                	mov    %esp,%ebp
  80f74d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
  80f750:	8d 45 14             	lea    0x14(%ebp),%eax
	rc = vsnprintf(buf, n, fmt, ap);
  80f753:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80f757:	8b 45 10             	mov    0x10(%ebp),%eax
  80f75a:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f75e:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f761:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f765:	8b 45 08             	mov    0x8(%ebp),%eax
  80f768:	89 04 24             	mov    %eax,(%esp)
  80f76b:	e8 82 ff ff ff       	call   80f6f2 <vsnprintf>
	va_end(ap);

	return rc;
}
  80f770:	c9                   	leave  
  80f771:	c3                   	ret    
  80f772:	66 90                	xchg   %ax,%ax
  80f774:	66 90                	xchg   %ax,%ax
  80f776:	66 90                	xchg   %ax,%ax
  80f778:	66 90                	xchg   %ax,%ax
  80f77a:	66 90                	xchg   %ax,%ax
  80f77c:	66 90                	xchg   %ax,%ax
  80f77e:	66 90                	xchg   %ax,%ax

0080f780 <strlen>:
// Primespipe runs 3x faster this way.
#define ASM 1

int
strlen(const char *s)
{
  80f780:	55                   	push   %ebp
  80f781:	89 e5                	mov    %esp,%ebp
  80f783:	8b 55 08             	mov    0x8(%ebp),%edx
	int n;

	for (n = 0; *s != '\0'; s++)
  80f786:	b8 00 00 00 00       	mov    $0x0,%eax
  80f78b:	eb 03                	jmp    80f790 <strlen+0x10>
		n++;
  80f78d:	83 c0 01             	add    $0x1,%eax
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
  80f790:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
  80f794:	75 f7                	jne    80f78d <strlen+0xd>
		n++;
	return n;
}
  80f796:	5d                   	pop    %ebp
  80f797:	c3                   	ret    

0080f798 <strnlen>:

int
strnlen(const char *s, size_t size)
{
  80f798:	55                   	push   %ebp
  80f799:	89 e5                	mov    %esp,%ebp
  80f79b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80f79e:	8b 55 0c             	mov    0xc(%ebp),%edx
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
  80f7a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80f7a6:	eb 03                	jmp    80f7ab <strnlen+0x13>
		n++;
  80f7a8:	83 c0 01             	add    $0x1,%eax
int
strnlen(const char *s, size_t size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
  80f7ab:	39 d0                	cmp    %edx,%eax
  80f7ad:	74 06                	je     80f7b5 <strnlen+0x1d>
  80f7af:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
  80f7b3:	75 f3                	jne    80f7a8 <strnlen+0x10>
		n++;
	return n;
}
  80f7b5:	5d                   	pop    %ebp
  80f7b6:	c3                   	ret    

0080f7b7 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
  80f7b7:	55                   	push   %ebp
  80f7b8:	89 e5                	mov    %esp,%ebp
  80f7ba:	53                   	push   %ebx
  80f7bb:	8b 45 08             	mov    0x8(%ebp),%eax
  80f7be:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	char *ret;

	ret = dst;
	while ((*dst++ = *src++) != '\0')
  80f7c1:	89 c2                	mov    %eax,%edx
  80f7c3:	83 c2 01             	add    $0x1,%edx
  80f7c6:	83 c1 01             	add    $0x1,%ecx
  80f7c9:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
  80f7cd:	88 5a ff             	mov    %bl,-0x1(%edx)
  80f7d0:	84 db                	test   %bl,%bl
  80f7d2:	75 ef                	jne    80f7c3 <strcpy+0xc>
		/* do nothing */;
	return ret;
}
  80f7d4:	5b                   	pop    %ebx
  80f7d5:	5d                   	pop    %ebp
  80f7d6:	c3                   	ret    

0080f7d7 <strcat>:

char *
strcat(char *dst, const char *src)
{
  80f7d7:	55                   	push   %ebp
  80f7d8:	89 e5                	mov    %esp,%ebp
  80f7da:	53                   	push   %ebx
  80f7db:	83 ec 08             	sub    $0x8,%esp
  80f7de:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int len = strlen(dst);
  80f7e1:	89 1c 24             	mov    %ebx,(%esp)
  80f7e4:	e8 97 ff ff ff       	call   80f780 <strlen>
	strcpy(dst + len, src);
  80f7e9:	8b 55 0c             	mov    0xc(%ebp),%edx
  80f7ec:	89 54 24 04          	mov    %edx,0x4(%esp)
  80f7f0:	01 d8                	add    %ebx,%eax
  80f7f2:	89 04 24             	mov    %eax,(%esp)
  80f7f5:	e8 bd ff ff ff       	call   80f7b7 <strcpy>
	return dst;
}
  80f7fa:	89 d8                	mov    %ebx,%eax
  80f7fc:	83 c4 08             	add    $0x8,%esp
  80f7ff:	5b                   	pop    %ebx
  80f800:	5d                   	pop    %ebp
  80f801:	c3                   	ret    

0080f802 <strncpy>:

char *
strncpy(char *dst, const char *src, size_t size) {
  80f802:	55                   	push   %ebp
  80f803:	89 e5                	mov    %esp,%ebp
  80f805:	56                   	push   %esi
  80f806:	53                   	push   %ebx
  80f807:	8b 75 08             	mov    0x8(%ebp),%esi
  80f80a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80f80d:	89 f3                	mov    %esi,%ebx
  80f80f:	03 5d 10             	add    0x10(%ebp),%ebx
	size_t i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
  80f812:	89 f2                	mov    %esi,%edx
  80f814:	eb 0f                	jmp    80f825 <strncpy+0x23>
		*dst++ = *src;
  80f816:	83 c2 01             	add    $0x1,%edx
  80f819:	0f b6 01             	movzbl (%ecx),%eax
  80f81c:	88 42 ff             	mov    %al,-0x1(%edx)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
  80f81f:	80 39 01             	cmpb   $0x1,(%ecx)
  80f822:	83 d9 ff             	sbb    $0xffffffff,%ecx
strncpy(char *dst, const char *src, size_t size) {
	size_t i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
  80f825:	39 da                	cmp    %ebx,%edx
  80f827:	75 ed                	jne    80f816 <strncpy+0x14>
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
}
  80f829:	89 f0                	mov    %esi,%eax
  80f82b:	5b                   	pop    %ebx
  80f82c:	5e                   	pop    %esi
  80f82d:	5d                   	pop    %ebp
  80f82e:	c3                   	ret    

0080f82f <strlcpy>:

size_t
strlcpy(char *dst, const char *src, size_t size)
{
  80f82f:	55                   	push   %ebp
  80f830:	89 e5                	mov    %esp,%ebp
  80f832:	56                   	push   %esi
  80f833:	53                   	push   %ebx
  80f834:	8b 75 08             	mov    0x8(%ebp),%esi
  80f837:	8b 55 0c             	mov    0xc(%ebp),%edx
  80f83a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  80f83d:	89 f0                	mov    %esi,%eax
  80f83f:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebx
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
  80f843:	85 c9                	test   %ecx,%ecx
  80f845:	75 0b                	jne    80f852 <strlcpy+0x23>
  80f847:	eb 1d                	jmp    80f866 <strlcpy+0x37>
		while (--size > 0 && *src != '\0')
			*dst++ = *src++;
  80f849:	83 c0 01             	add    $0x1,%eax
  80f84c:	83 c2 01             	add    $0x1,%edx
  80f84f:	88 48 ff             	mov    %cl,-0x1(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
  80f852:	39 d8                	cmp    %ebx,%eax
  80f854:	74 0b                	je     80f861 <strlcpy+0x32>
  80f856:	0f b6 0a             	movzbl (%edx),%ecx
  80f859:	84 c9                	test   %cl,%cl
  80f85b:	75 ec                	jne    80f849 <strlcpy+0x1a>
  80f85d:	89 c2                	mov    %eax,%edx
  80f85f:	eb 02                	jmp    80f863 <strlcpy+0x34>
  80f861:	89 c2                	mov    %eax,%edx
			*dst++ = *src++;
		*dst = '\0';
  80f863:	c6 02 00             	movb   $0x0,(%edx)
	}
	return dst - dst_in;
  80f866:	29 f0                	sub    %esi,%eax
}
  80f868:	5b                   	pop    %ebx
  80f869:	5e                   	pop    %esi
  80f86a:	5d                   	pop    %ebp
  80f86b:	c3                   	ret    

0080f86c <strcmp>:

int
strcmp(const char *p, const char *q)
{
  80f86c:	55                   	push   %ebp
  80f86d:	89 e5                	mov    %esp,%ebp
  80f86f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80f872:	8b 55 0c             	mov    0xc(%ebp),%edx
	while (*p && *p == *q)
  80f875:	eb 06                	jmp    80f87d <strcmp+0x11>
		p++, q++;
  80f877:	83 c1 01             	add    $0x1,%ecx
  80f87a:	83 c2 01             	add    $0x1,%edx
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
  80f87d:	0f b6 01             	movzbl (%ecx),%eax
  80f880:	84 c0                	test   %al,%al
  80f882:	74 04                	je     80f888 <strcmp+0x1c>
  80f884:	3a 02                	cmp    (%edx),%al
  80f886:	74 ef                	je     80f877 <strcmp+0xb>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
  80f888:	0f b6 c0             	movzbl %al,%eax
  80f88b:	0f b6 12             	movzbl (%edx),%edx
  80f88e:	29 d0                	sub    %edx,%eax
}
  80f890:	5d                   	pop    %ebp
  80f891:	c3                   	ret    

0080f892 <strncmp>:

int
strncmp(const char *p, const char *q, size_t n)
{
  80f892:	55                   	push   %ebp
  80f893:	89 e5                	mov    %esp,%ebp
  80f895:	53                   	push   %ebx
  80f896:	8b 45 08             	mov    0x8(%ebp),%eax
  80f899:	8b 55 0c             	mov    0xc(%ebp),%edx
  80f89c:	89 c3                	mov    %eax,%ebx
  80f89e:	03 5d 10             	add    0x10(%ebp),%ebx
	while (n > 0 && *p && *p == *q)
  80f8a1:	eb 06                	jmp    80f8a9 <strncmp+0x17>
		n--, p++, q++;
  80f8a3:	83 c0 01             	add    $0x1,%eax
  80f8a6:	83 c2 01             	add    $0x1,%edx
}

int
strncmp(const char *p, const char *q, size_t n)
{
	while (n > 0 && *p && *p == *q)
  80f8a9:	39 d8                	cmp    %ebx,%eax
  80f8ab:	74 15                	je     80f8c2 <strncmp+0x30>
  80f8ad:	0f b6 08             	movzbl (%eax),%ecx
  80f8b0:	84 c9                	test   %cl,%cl
  80f8b2:	74 04                	je     80f8b8 <strncmp+0x26>
  80f8b4:	3a 0a                	cmp    (%edx),%cl
  80f8b6:	74 eb                	je     80f8a3 <strncmp+0x11>
		n--, p++, q++;
	if (n == 0)
		return 0;
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
  80f8b8:	0f b6 00             	movzbl (%eax),%eax
  80f8bb:	0f b6 12             	movzbl (%edx),%edx
  80f8be:	29 d0                	sub    %edx,%eax
  80f8c0:	eb 05                	jmp    80f8c7 <strncmp+0x35>
strncmp(const char *p, const char *q, size_t n)
{
	while (n > 0 && *p && *p == *q)
		n--, p++, q++;
	if (n == 0)
		return 0;
  80f8c2:	b8 00 00 00 00       	mov    $0x0,%eax
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
}
  80f8c7:	5b                   	pop    %ebx
  80f8c8:	5d                   	pop    %ebp
  80f8c9:	c3                   	ret    

0080f8ca <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
  80f8ca:	55                   	push   %ebp
  80f8cb:	89 e5                	mov    %esp,%ebp
  80f8cd:	8b 45 08             	mov    0x8(%ebp),%eax
  80f8d0:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	for (; *s; s++)
  80f8d4:	eb 07                	jmp    80f8dd <strchr+0x13>
		if (*s == c)
  80f8d6:	38 ca                	cmp    %cl,%dl
  80f8d8:	74 0f                	je     80f8e9 <strchr+0x1f>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
  80f8da:	83 c0 01             	add    $0x1,%eax
  80f8dd:	0f b6 10             	movzbl (%eax),%edx
  80f8e0:	84 d2                	test   %dl,%dl
  80f8e2:	75 f2                	jne    80f8d6 <strchr+0xc>
		if (*s == c)
			return (char *) s;
	return 0;
  80f8e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80f8e9:	5d                   	pop    %ebp
  80f8ea:	c3                   	ret    

0080f8eb <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
  80f8eb:	55                   	push   %ebp
  80f8ec:	89 e5                	mov    %esp,%ebp
  80f8ee:	8b 45 08             	mov    0x8(%ebp),%eax
  80f8f1:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	for (; *s; s++)
  80f8f5:	eb 07                	jmp    80f8fe <strfind+0x13>
		if (*s == c)
  80f8f7:	38 ca                	cmp    %cl,%dl
  80f8f9:	74 0a                	je     80f905 <strfind+0x1a>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
  80f8fb:	83 c0 01             	add    $0x1,%eax
  80f8fe:	0f b6 10             	movzbl (%eax),%edx
  80f901:	84 d2                	test   %dl,%dl
  80f903:	75 f2                	jne    80f8f7 <strfind+0xc>
		if (*s == c)
			break;
	return (char *) s;
}
  80f905:	5d                   	pop    %ebp
  80f906:	c3                   	ret    

0080f907 <memset>:

#if ASM
void *
memset(void *v, int c, size_t n)
{
  80f907:	55                   	push   %ebp
  80f908:	89 e5                	mov    %esp,%ebp
  80f90a:	57                   	push   %edi
  80f90b:	56                   	push   %esi
  80f90c:	53                   	push   %ebx
  80f90d:	8b 7d 08             	mov    0x8(%ebp),%edi
  80f910:	8b 4d 10             	mov    0x10(%ebp),%ecx
	char *p;

	if (n == 0)
  80f913:	85 c9                	test   %ecx,%ecx
  80f915:	74 36                	je     80f94d <memset+0x46>
		return v;
	if ((int)v%4 == 0 && n%4 == 0) {
  80f917:	f7 c7 03 00 00 00    	test   $0x3,%edi
  80f91d:	75 28                	jne    80f947 <memset+0x40>
  80f91f:	f6 c1 03             	test   $0x3,%cl
  80f922:	75 23                	jne    80f947 <memset+0x40>
		c &= 0xFF;
  80f924:	0f b6 55 0c          	movzbl 0xc(%ebp),%edx
		c = (c<<24)|(c<<16)|(c<<8)|c;
  80f928:	89 d3                	mov    %edx,%ebx
  80f92a:	c1 e3 08             	shl    $0x8,%ebx
  80f92d:	89 d6                	mov    %edx,%esi
  80f92f:	c1 e6 18             	shl    $0x18,%esi
  80f932:	89 d0                	mov    %edx,%eax
  80f934:	c1 e0 10             	shl    $0x10,%eax
  80f937:	09 f0                	or     %esi,%eax
  80f939:	09 c2                	or     %eax,%edx
  80f93b:	89 d0                	mov    %edx,%eax
  80f93d:	09 d8                	or     %ebx,%eax
		asm volatile("cld; rep stosl\n"
			:: "D" (v), "a" (c), "c" (n/4)
  80f93f:	c1 e9 02             	shr    $0x2,%ecx
	if (n == 0)
		return v;
	if ((int)v%4 == 0 && n%4 == 0) {
		c &= 0xFF;
		c = (c<<24)|(c<<16)|(c<<8)|c;
		asm volatile("cld; rep stosl\n"
  80f942:	fc                   	cld    
  80f943:	f3 ab                	rep stos %eax,%es:(%edi)
  80f945:	eb 06                	jmp    80f94d <memset+0x46>
			:: "D" (v), "a" (c), "c" (n/4)
			: "cc", "memory");
	} else
		asm volatile("cld; rep stosb\n"
  80f947:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f94a:	fc                   	cld    
  80f94b:	f3 aa                	rep stos %al,%es:(%edi)
			:: "D" (v), "a" (c), "c" (n)
			: "cc", "memory");
	return v;
}
  80f94d:	89 f8                	mov    %edi,%eax
  80f94f:	5b                   	pop    %ebx
  80f950:	5e                   	pop    %esi
  80f951:	5f                   	pop    %edi
  80f952:	5d                   	pop    %ebp
  80f953:	c3                   	ret    

0080f954 <memmove>:

void *
memmove(void *dst, const void *src, size_t n)
{
  80f954:	55                   	push   %ebp
  80f955:	89 e5                	mov    %esp,%ebp
  80f957:	57                   	push   %edi
  80f958:	56                   	push   %esi
  80f959:	8b 45 08             	mov    0x8(%ebp),%eax
  80f95c:	8b 75 0c             	mov    0xc(%ebp),%esi
  80f95f:	8b 4d 10             	mov    0x10(%ebp),%ecx
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
  80f962:	39 c6                	cmp    %eax,%esi
  80f964:	73 35                	jae    80f99b <memmove+0x47>
  80f966:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
  80f969:	39 d0                	cmp    %edx,%eax
  80f96b:	73 2e                	jae    80f99b <memmove+0x47>
		s += n;
		d += n;
  80f96d:	8d 3c 08             	lea    (%eax,%ecx,1),%edi
  80f970:	89 d6                	mov    %edx,%esi
  80f972:	09 fe                	or     %edi,%esi
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
  80f974:	f7 c6 03 00 00 00    	test   $0x3,%esi
  80f97a:	75 13                	jne    80f98f <memmove+0x3b>
  80f97c:	f6 c1 03             	test   $0x3,%cl
  80f97f:	75 0e                	jne    80f98f <memmove+0x3b>
			asm volatile("std; rep movsl\n"
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
  80f981:	83 ef 04             	sub    $0x4,%edi
  80f984:	8d 72 fc             	lea    -0x4(%edx),%esi
  80f987:	c1 e9 02             	shr    $0x2,%ecx
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
			asm volatile("std; rep movsl\n"
  80f98a:	fd                   	std    
  80f98b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  80f98d:	eb 09                	jmp    80f998 <memmove+0x44>
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
  80f98f:	83 ef 01             	sub    $0x1,%edi
  80f992:	8d 72 ff             	lea    -0x1(%edx),%esi
		d += n;
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
			asm volatile("std; rep movsl\n"
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
  80f995:	fd                   	std    
  80f996:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
  80f998:	fc                   	cld    
  80f999:	eb 1d                	jmp    80f9b8 <memmove+0x64>
  80f99b:	89 f2                	mov    %esi,%edx
  80f99d:	09 c2                	or     %eax,%edx
	} else {
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
  80f99f:	f6 c2 03             	test   $0x3,%dl
  80f9a2:	75 0f                	jne    80f9b3 <memmove+0x5f>
  80f9a4:	f6 c1 03             	test   $0x3,%cl
  80f9a7:	75 0a                	jne    80f9b3 <memmove+0x5f>
			asm volatile("cld; rep movsl\n"
				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
  80f9a9:	c1 e9 02             	shr    $0x2,%ecx
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
	} else {
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
			asm volatile("cld; rep movsl\n"
  80f9ac:	89 c7                	mov    %eax,%edi
  80f9ae:	fc                   	cld    
  80f9af:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  80f9b1:	eb 05                	jmp    80f9b8 <memmove+0x64>
				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
		else
			asm volatile("cld; rep movsb\n"
  80f9b3:	89 c7                	mov    %eax,%edi
  80f9b5:	fc                   	cld    
  80f9b6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
				:: "D" (d), "S" (s), "c" (n) : "cc", "memory");
	}
	return dst;
}
  80f9b8:	5e                   	pop    %esi
  80f9b9:	5f                   	pop    %edi
  80f9ba:	5d                   	pop    %ebp
  80f9bb:	c3                   	ret    

0080f9bc <memcpy>:
}
#endif

void *
memcpy(void *dst, const void *src, size_t n)
{
  80f9bc:	55                   	push   %ebp
  80f9bd:	89 e5                	mov    %esp,%ebp
  80f9bf:	83 ec 0c             	sub    $0xc,%esp
	return memmove(dst, src, n);
  80f9c2:	8b 45 10             	mov    0x10(%ebp),%eax
  80f9c5:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f9c9:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f9cc:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f9d0:	8b 45 08             	mov    0x8(%ebp),%eax
  80f9d3:	89 04 24             	mov    %eax,(%esp)
  80f9d6:	e8 79 ff ff ff       	call   80f954 <memmove>
}
  80f9db:	c9                   	leave  
  80f9dc:	c3                   	ret    

0080f9dd <memcmp>:

int
memcmp(const void *v1, const void *v2, size_t n)
{
  80f9dd:	55                   	push   %ebp
  80f9de:	89 e5                	mov    %esp,%ebp
  80f9e0:	56                   	push   %esi
  80f9e1:	53                   	push   %ebx
  80f9e2:	8b 55 08             	mov    0x8(%ebp),%edx
  80f9e5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80f9e8:	89 d6                	mov    %edx,%esi
  80f9ea:	03 75 10             	add    0x10(%ebp),%esi
	const uint8_t *s1 = (const uint8_t *) v1;
	const uint8_t *s2 = (const uint8_t *) v2;

	while (n-- > 0) {
  80f9ed:	eb 1a                	jmp    80fa09 <memcmp+0x2c>
		if (*s1 != *s2)
  80f9ef:	0f b6 02             	movzbl (%edx),%eax
  80f9f2:	0f b6 19             	movzbl (%ecx),%ebx
  80f9f5:	38 d8                	cmp    %bl,%al
  80f9f7:	74 0a                	je     80fa03 <memcmp+0x26>
			return (int) *s1 - (int) *s2;
  80f9f9:	0f b6 c0             	movzbl %al,%eax
  80f9fc:	0f b6 db             	movzbl %bl,%ebx
  80f9ff:	29 d8                	sub    %ebx,%eax
  80fa01:	eb 0f                	jmp    80fa12 <memcmp+0x35>
		s1++, s2++;
  80fa03:	83 c2 01             	add    $0x1,%edx
  80fa06:	83 c1 01             	add    $0x1,%ecx
memcmp(const void *v1, const void *v2, size_t n)
{
	const uint8_t *s1 = (const uint8_t *) v1;
	const uint8_t *s2 = (const uint8_t *) v2;

	while (n-- > 0) {
  80fa09:	39 f2                	cmp    %esi,%edx
  80fa0b:	75 e2                	jne    80f9ef <memcmp+0x12>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
  80fa0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80fa12:	5b                   	pop    %ebx
  80fa13:	5e                   	pop    %esi
  80fa14:	5d                   	pop    %ebp
  80fa15:	c3                   	ret    

0080fa16 <memfind>:

void *
memfind(const void *s, int c, size_t n)
{
  80fa16:	55                   	push   %ebp
  80fa17:	89 e5                	mov    %esp,%ebp
  80fa19:	8b 45 08             	mov    0x8(%ebp),%eax
  80fa1c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	const void *ends = (const char *) s + n;
  80fa1f:	89 c2                	mov    %eax,%edx
  80fa21:	03 55 10             	add    0x10(%ebp),%edx
	for (; s < ends; s++)
  80fa24:	eb 07                	jmp    80fa2d <memfind+0x17>
		if (*(const unsigned char *) s == (unsigned char) c)
  80fa26:	38 08                	cmp    %cl,(%eax)
  80fa28:	74 07                	je     80fa31 <memfind+0x1b>

void *
memfind(const void *s, int c, size_t n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
  80fa2a:	83 c0 01             	add    $0x1,%eax
  80fa2d:	39 d0                	cmp    %edx,%eax
  80fa2f:	72 f5                	jb     80fa26 <memfind+0x10>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
	return (void *) s;
}
  80fa31:	5d                   	pop    %ebp
  80fa32:	c3                   	ret    

0080fa33 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
  80fa33:	55                   	push   %ebp
  80fa34:	89 e5                	mov    %esp,%ebp
  80fa36:	57                   	push   %edi
  80fa37:	56                   	push   %esi
  80fa38:	53                   	push   %ebx
  80fa39:	8b 55 08             	mov    0x8(%ebp),%edx
  80fa3c:	8b 45 10             	mov    0x10(%ebp),%eax
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
  80fa3f:	eb 03                	jmp    80fa44 <strtol+0x11>
		s++;
  80fa41:	83 c2 01             	add    $0x1,%edx
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
  80fa44:	0f b6 0a             	movzbl (%edx),%ecx
  80fa47:	80 f9 09             	cmp    $0x9,%cl
  80fa4a:	74 f5                	je     80fa41 <strtol+0xe>
  80fa4c:	80 f9 20             	cmp    $0x20,%cl
  80fa4f:	74 f0                	je     80fa41 <strtol+0xe>
		s++;

	// plus/minus sign
	if (*s == '+')
  80fa51:	80 f9 2b             	cmp    $0x2b,%cl
  80fa54:	75 0a                	jne    80fa60 <strtol+0x2d>
		s++;
  80fa56:	83 c2 01             	add    $0x1,%edx
}

long
strtol(const char *s, char **endptr, int base)
{
	int neg = 0;
  80fa59:	bf 00 00 00 00       	mov    $0x0,%edi
  80fa5e:	eb 11                	jmp    80fa71 <strtol+0x3e>
  80fa60:	bf 00 00 00 00       	mov    $0x0,%edi
		s++;

	// plus/minus sign
	if (*s == '+')
		s++;
	else if (*s == '-')
  80fa65:	80 f9 2d             	cmp    $0x2d,%cl
  80fa68:	75 07                	jne    80fa71 <strtol+0x3e>
		s++, neg = 1;
  80fa6a:	8d 52 01             	lea    0x1(%edx),%edx
  80fa6d:	66 bf 01 00          	mov    $0x1,%di

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
  80fa71:	a9 ef ff ff ff       	test   $0xffffffef,%eax
  80fa76:	75 15                	jne    80fa8d <strtol+0x5a>
  80fa78:	80 3a 30             	cmpb   $0x30,(%edx)
  80fa7b:	75 10                	jne    80fa8d <strtol+0x5a>
  80fa7d:	80 7a 01 78          	cmpb   $0x78,0x1(%edx)
  80fa81:	75 0a                	jne    80fa8d <strtol+0x5a>
		s += 2, base = 16;
  80fa83:	83 c2 02             	add    $0x2,%edx
  80fa86:	b8 10 00 00 00       	mov    $0x10,%eax
  80fa8b:	eb 10                	jmp    80fa9d <strtol+0x6a>
	else if (base == 0 && s[0] == '0')
  80fa8d:	85 c0                	test   %eax,%eax
  80fa8f:	75 0c                	jne    80fa9d <strtol+0x6a>
		s++, base = 8;
	else if (base == 0)
		base = 10;
  80fa91:	b0 0a                	mov    $0xa,%al
		s++, neg = 1;

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
		s += 2, base = 16;
	else if (base == 0 && s[0] == '0')
  80fa93:	80 3a 30             	cmpb   $0x30,(%edx)
  80fa96:	75 05                	jne    80fa9d <strtol+0x6a>
		s++, base = 8;
  80fa98:	83 c2 01             	add    $0x1,%edx
  80fa9b:	b0 08                	mov    $0x8,%al
	else if (base == 0)
		base = 10;
  80fa9d:	bb 00 00 00 00       	mov    $0x0,%ebx
  80faa2:	89 45 10             	mov    %eax,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
  80faa5:	0f b6 0a             	movzbl (%edx),%ecx
  80faa8:	8d 71 d0             	lea    -0x30(%ecx),%esi
  80faab:	89 f0                	mov    %esi,%eax
  80faad:	3c 09                	cmp    $0x9,%al
  80faaf:	77 08                	ja     80fab9 <strtol+0x86>
			dig = *s - '0';
  80fab1:	0f be c9             	movsbl %cl,%ecx
  80fab4:	83 e9 30             	sub    $0x30,%ecx
  80fab7:	eb 20                	jmp    80fad9 <strtol+0xa6>
		else if (*s >= 'a' && *s <= 'z')
  80fab9:	8d 71 9f             	lea    -0x61(%ecx),%esi
  80fabc:	89 f0                	mov    %esi,%eax
  80fabe:	3c 19                	cmp    $0x19,%al
  80fac0:	77 08                	ja     80faca <strtol+0x97>
			dig = *s - 'a' + 10;
  80fac2:	0f be c9             	movsbl %cl,%ecx
  80fac5:	83 e9 57             	sub    $0x57,%ecx
  80fac8:	eb 0f                	jmp    80fad9 <strtol+0xa6>
		else if (*s >= 'A' && *s <= 'Z')
  80faca:	8d 71 bf             	lea    -0x41(%ecx),%esi
  80facd:	89 f0                	mov    %esi,%eax
  80facf:	3c 19                	cmp    $0x19,%al
  80fad1:	77 16                	ja     80fae9 <strtol+0xb6>
			dig = *s - 'A' + 10;
  80fad3:	0f be c9             	movsbl %cl,%ecx
  80fad6:	83 e9 37             	sub    $0x37,%ecx
		else
			break;
		if (dig >= base)
  80fad9:	3b 4d 10             	cmp    0x10(%ebp),%ecx
  80fadc:	7d 0f                	jge    80faed <strtol+0xba>
			break;
		s++, val = (val * base) + dig;
  80fade:	83 c2 01             	add    $0x1,%edx
  80fae1:	0f af 5d 10          	imul   0x10(%ebp),%ebx
  80fae5:	01 cb                	add    %ecx,%ebx
		// we don't properly detect overflow!
	}
  80fae7:	eb bc                	jmp    80faa5 <strtol+0x72>
  80fae9:	89 d8                	mov    %ebx,%eax
  80faeb:	eb 02                	jmp    80faef <strtol+0xbc>
  80faed:	89 d8                	mov    %ebx,%eax

	if (endptr)
  80faef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80faf3:	74 05                	je     80fafa <strtol+0xc7>
		*endptr = (char *) s;
  80faf5:	8b 75 0c             	mov    0xc(%ebp),%esi
  80faf8:	89 16                	mov    %edx,(%esi)
	return (neg ? -val : val);
  80fafa:	f7 d8                	neg    %eax
  80fafc:	85 ff                	test   %edi,%edi
  80fafe:	0f 44 c3             	cmove  %ebx,%eax
}
  80fb01:	5b                   	pop    %ebx
  80fb02:	5e                   	pop    %esi
  80fb03:	5f                   	pop    %edi
  80fb04:	5d                   	pop    %ebp
  80fb05:	c3                   	ret    

0080fb06 <sys_cputs>:
	return ret;
}

void
sys_cputs(const char *s, size_t len)
{
  80fb06:	55                   	push   %ebp
  80fb07:	89 e5                	mov    %esp,%ebp
  80fb09:	57                   	push   %edi
  80fb0a:	56                   	push   %esi
  80fb0b:	53                   	push   %ebx
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fb0c:	b8 00 00 00 00       	mov    $0x0,%eax
  80fb11:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fb14:	8b 55 08             	mov    0x8(%ebp),%edx
  80fb17:	89 c3                	mov    %eax,%ebx
  80fb19:	89 c7                	mov    %eax,%edi
  80fb1b:	89 c6                	mov    %eax,%esi
  80fb1d:	cd 30                	int    $0x30

void
sys_cputs(const char *s, size_t len)
{
	syscall(SYS_cputs, 0, (uint32_t)s, len, 0, 0, 0);
}
  80fb1f:	5b                   	pop    %ebx
  80fb20:	5e                   	pop    %esi
  80fb21:	5f                   	pop    %edi
  80fb22:	5d                   	pop    %ebp
  80fb23:	c3                   	ret    

0080fb24 <sys_cgetc>:

int
sys_cgetc(void)
{
  80fb24:	55                   	push   %ebp
  80fb25:	89 e5                	mov    %esp,%ebp
  80fb27:	57                   	push   %edi
  80fb28:	56                   	push   %esi
  80fb29:	53                   	push   %ebx
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fb2a:	ba 00 00 00 00       	mov    $0x0,%edx
  80fb2f:	b8 01 00 00 00       	mov    $0x1,%eax
  80fb34:	89 d1                	mov    %edx,%ecx
  80fb36:	89 d3                	mov    %edx,%ebx
  80fb38:	89 d7                	mov    %edx,%edi
  80fb3a:	89 d6                	mov    %edx,%esi
  80fb3c:	cd 30                	int    $0x30

int
sys_cgetc(void)
{
	return syscall(SYS_cgetc, 0, 0, 0, 0, 0, 0);
}
  80fb3e:	5b                   	pop    %ebx
  80fb3f:	5e                   	pop    %esi
  80fb40:	5f                   	pop    %edi
  80fb41:	5d                   	pop    %ebp
  80fb42:	c3                   	ret    

0080fb43 <sys_env_destroy>:

int
sys_env_destroy(envid_t envid)
{
  80fb43:	55                   	push   %ebp
  80fb44:	89 e5                	mov    %esp,%ebp
  80fb46:	57                   	push   %edi
  80fb47:	56                   	push   %esi
  80fb48:	53                   	push   %ebx
  80fb49:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fb4c:	b9 00 00 00 00       	mov    $0x0,%ecx
  80fb51:	b8 03 00 00 00       	mov    $0x3,%eax
  80fb56:	8b 55 08             	mov    0x8(%ebp),%edx
  80fb59:	89 cb                	mov    %ecx,%ebx
  80fb5b:	89 cf                	mov    %ecx,%edi
  80fb5d:	89 ce                	mov    %ecx,%esi
  80fb5f:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fb61:	85 c0                	test   %eax,%eax
  80fb63:	7e 28                	jle    80fb8d <sys_env_destroy+0x4a>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fb65:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fb69:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  80fb70:	00 
  80fb71:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fb78:	00 
  80fb79:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fb80:	00 
  80fb81:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fb88:	e8 01 f5 ff ff       	call   80f08e <_panic>

int
sys_env_destroy(envid_t envid)
{
	return syscall(SYS_env_destroy, 1, envid, 0, 0, 0, 0);
}
  80fb8d:	83 c4 2c             	add    $0x2c,%esp
  80fb90:	5b                   	pop    %ebx
  80fb91:	5e                   	pop    %esi
  80fb92:	5f                   	pop    %edi
  80fb93:	5d                   	pop    %ebp
  80fb94:	c3                   	ret    

0080fb95 <sys_getenvid>:

envid_t
sys_getenvid(void)
{
  80fb95:	55                   	push   %ebp
  80fb96:	89 e5                	mov    %esp,%ebp
  80fb98:	57                   	push   %edi
  80fb99:	56                   	push   %esi
  80fb9a:	53                   	push   %ebx
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fb9b:	ba 00 00 00 00       	mov    $0x0,%edx
  80fba0:	b8 02 00 00 00       	mov    $0x2,%eax
  80fba5:	89 d1                	mov    %edx,%ecx
  80fba7:	89 d3                	mov    %edx,%ebx
  80fba9:	89 d7                	mov    %edx,%edi
  80fbab:	89 d6                	mov    %edx,%esi
  80fbad:	cd 30                	int    $0x30

envid_t
sys_getenvid(void)
{
	 return syscall(SYS_getenvid, 0, 0, 0, 0, 0, 0);
}
  80fbaf:	5b                   	pop    %ebx
  80fbb0:	5e                   	pop    %esi
  80fbb1:	5f                   	pop    %edi
  80fbb2:	5d                   	pop    %ebp
  80fbb3:	c3                   	ret    

0080fbb4 <sys_yield>:

void
sys_yield(void)
{
  80fbb4:	55                   	push   %ebp
  80fbb5:	89 e5                	mov    %esp,%ebp
  80fbb7:	57                   	push   %edi
  80fbb8:	56                   	push   %esi
  80fbb9:	53                   	push   %ebx
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fbba:	ba 00 00 00 00       	mov    $0x0,%edx
  80fbbf:	b8 0b 00 00 00       	mov    $0xb,%eax
  80fbc4:	89 d1                	mov    %edx,%ecx
  80fbc6:	89 d3                	mov    %edx,%ebx
  80fbc8:	89 d7                	mov    %edx,%edi
  80fbca:	89 d6                	mov    %edx,%esi
  80fbcc:	cd 30                	int    $0x30

void
sys_yield(void)
{
	syscall(SYS_yield, 0, 0, 0, 0, 0, 0);
}
  80fbce:	5b                   	pop    %ebx
  80fbcf:	5e                   	pop    %esi
  80fbd0:	5f                   	pop    %edi
  80fbd1:	5d                   	pop    %ebp
  80fbd2:	c3                   	ret    

0080fbd3 <sys_page_alloc>:

int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  80fbd3:	55                   	push   %ebp
  80fbd4:	89 e5                	mov    %esp,%ebp
  80fbd6:	57                   	push   %edi
  80fbd7:	56                   	push   %esi
  80fbd8:	53                   	push   %ebx
  80fbd9:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fbdc:	be 00 00 00 00       	mov    $0x0,%esi
  80fbe1:	b8 04 00 00 00       	mov    $0x4,%eax
  80fbe6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fbe9:	8b 55 08             	mov    0x8(%ebp),%edx
  80fbec:	8b 5d 10             	mov    0x10(%ebp),%ebx
  80fbef:	89 f7                	mov    %esi,%edi
  80fbf1:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fbf3:	85 c0                	test   %eax,%eax
  80fbf5:	7e 28                	jle    80fc1f <sys_page_alloc+0x4c>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fbf7:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fbfb:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  80fc02:	00 
  80fc03:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fc0a:	00 
  80fc0b:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fc12:	00 
  80fc13:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fc1a:	e8 6f f4 ff ff       	call   80f08e <_panic>

int
sys_page_alloc(envid_t envid, void *va, int perm)
{
	return syscall(SYS_page_alloc, 1, envid, (uint32_t) va, perm, 0, 0);
}
  80fc1f:	83 c4 2c             	add    $0x2c,%esp
  80fc22:	5b                   	pop    %ebx
  80fc23:	5e                   	pop    %esi
  80fc24:	5f                   	pop    %edi
  80fc25:	5d                   	pop    %ebp
  80fc26:	c3                   	ret    

0080fc27 <sys_page_map>:

int
sys_page_map(envid_t srcenv, void *srcva, envid_t dstenv, void *dstva, int perm)
{
  80fc27:	55                   	push   %ebp
  80fc28:	89 e5                	mov    %esp,%ebp
  80fc2a:	57                   	push   %edi
  80fc2b:	56                   	push   %esi
  80fc2c:	53                   	push   %ebx
  80fc2d:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fc30:	b8 05 00 00 00       	mov    $0x5,%eax
  80fc35:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fc38:	8b 55 08             	mov    0x8(%ebp),%edx
  80fc3b:	8b 5d 10             	mov    0x10(%ebp),%ebx
  80fc3e:	8b 7d 14             	mov    0x14(%ebp),%edi
  80fc41:	8b 75 18             	mov    0x18(%ebp),%esi
  80fc44:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fc46:	85 c0                	test   %eax,%eax
  80fc48:	7e 28                	jle    80fc72 <sys_page_map+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fc4a:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fc4e:	c7 44 24 0c 05 00 00 	movl   $0x5,0xc(%esp)
  80fc55:	00 
  80fc56:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fc5d:	00 
  80fc5e:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fc65:	00 
  80fc66:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fc6d:	e8 1c f4 ff ff       	call   80f08e <_panic>

int
sys_page_map(envid_t srcenv, void *srcva, envid_t dstenv, void *dstva, int perm)
{
	return syscall(SYS_page_map, 1, srcenv, (uint32_t) srcva, dstenv, (uint32_t) dstva, perm);
}
  80fc72:	83 c4 2c             	add    $0x2c,%esp
  80fc75:	5b                   	pop    %ebx
  80fc76:	5e                   	pop    %esi
  80fc77:	5f                   	pop    %edi
  80fc78:	5d                   	pop    %ebp
  80fc79:	c3                   	ret    

0080fc7a <sys_page_unmap>:

int
sys_page_unmap(envid_t envid, void *va)
{
  80fc7a:	55                   	push   %ebp
  80fc7b:	89 e5                	mov    %esp,%ebp
  80fc7d:	57                   	push   %edi
  80fc7e:	56                   	push   %esi
  80fc7f:	53                   	push   %ebx
  80fc80:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fc83:	bb 00 00 00 00       	mov    $0x0,%ebx
  80fc88:	b8 06 00 00 00       	mov    $0x6,%eax
  80fc8d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fc90:	8b 55 08             	mov    0x8(%ebp),%edx
  80fc93:	89 df                	mov    %ebx,%edi
  80fc95:	89 de                	mov    %ebx,%esi
  80fc97:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fc99:	85 c0                	test   %eax,%eax
  80fc9b:	7e 28                	jle    80fcc5 <sys_page_unmap+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fc9d:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fca1:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80fca8:	00 
  80fca9:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fcb0:	00 
  80fcb1:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fcb8:	00 
  80fcb9:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fcc0:	e8 c9 f3 ff ff       	call   80f08e <_panic>

int
sys_page_unmap(envid_t envid, void *va)
{
	return syscall(SYS_page_unmap, 1, envid, (uint32_t) va, 0, 0, 0);
}
  80fcc5:	83 c4 2c             	add    $0x2c,%esp
  80fcc8:	5b                   	pop    %ebx
  80fcc9:	5e                   	pop    %esi
  80fcca:	5f                   	pop    %edi
  80fccb:	5d                   	pop    %ebp
  80fccc:	c3                   	ret    

0080fccd <sys_env_set_status>:

// sys_exofork is inlined in lib.h

int
sys_env_set_status(envid_t envid, int status)
{
  80fccd:	55                   	push   %ebp
  80fcce:	89 e5                	mov    %esp,%ebp
  80fcd0:	57                   	push   %edi
  80fcd1:	56                   	push   %esi
  80fcd2:	53                   	push   %ebx
  80fcd3:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fcd6:	bb 00 00 00 00       	mov    $0x0,%ebx
  80fcdb:	b8 08 00 00 00       	mov    $0x8,%eax
  80fce0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fce3:	8b 55 08             	mov    0x8(%ebp),%edx
  80fce6:	89 df                	mov    %ebx,%edi
  80fce8:	89 de                	mov    %ebx,%esi
  80fcea:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fcec:	85 c0                	test   %eax,%eax
  80fcee:	7e 28                	jle    80fd18 <sys_env_set_status+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fcf0:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fcf4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  80fcfb:	00 
  80fcfc:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fd03:	00 
  80fd04:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fd0b:	00 
  80fd0c:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fd13:	e8 76 f3 ff ff       	call   80f08e <_panic>

int
sys_env_set_status(envid_t envid, int status)
{
	return syscall(SYS_env_set_status, 1, envid, status, 0, 0, 0);
}
  80fd18:	83 c4 2c             	add    $0x2c,%esp
  80fd1b:	5b                   	pop    %ebx
  80fd1c:	5e                   	pop    %esi
  80fd1d:	5f                   	pop    %edi
  80fd1e:	5d                   	pop    %ebp
  80fd1f:	c3                   	ret    

0080fd20 <sys_env_set_trapframe>:

int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  80fd20:	55                   	push   %ebp
  80fd21:	89 e5                	mov    %esp,%ebp
  80fd23:	57                   	push   %edi
  80fd24:	56                   	push   %esi
  80fd25:	53                   	push   %ebx
  80fd26:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fd29:	bb 00 00 00 00       	mov    $0x0,%ebx
  80fd2e:	b8 09 00 00 00       	mov    $0x9,%eax
  80fd33:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fd36:	8b 55 08             	mov    0x8(%ebp),%edx
  80fd39:	89 df                	mov    %ebx,%edi
  80fd3b:	89 de                	mov    %ebx,%esi
  80fd3d:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fd3f:	85 c0                	test   %eax,%eax
  80fd41:	7e 28                	jle    80fd6b <sys_env_set_trapframe+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fd43:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fd47:	c7 44 24 0c 09 00 00 	movl   $0x9,0xc(%esp)
  80fd4e:	00 
  80fd4f:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fd56:	00 
  80fd57:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fd5e:	00 
  80fd5f:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fd66:	e8 23 f3 ff ff       	call   80f08e <_panic>

int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
	return syscall(SYS_env_set_trapframe, 1, envid, (uint32_t) tf, 0, 0, 0);
}
  80fd6b:	83 c4 2c             	add    $0x2c,%esp
  80fd6e:	5b                   	pop    %ebx
  80fd6f:	5e                   	pop    %esi
  80fd70:	5f                   	pop    %edi
  80fd71:	5d                   	pop    %ebp
  80fd72:	c3                   	ret    

0080fd73 <sys_env_set_pgfault_upcall>:

int
sys_env_set_pgfault_upcall(envid_t envid, void *upcall)
{
  80fd73:	55                   	push   %ebp
  80fd74:	89 e5                	mov    %esp,%ebp
  80fd76:	57                   	push   %edi
  80fd77:	56                   	push   %esi
  80fd78:	53                   	push   %ebx
  80fd79:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fd7c:	bb 00 00 00 00       	mov    $0x0,%ebx
  80fd81:	b8 0a 00 00 00       	mov    $0xa,%eax
  80fd86:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fd89:	8b 55 08             	mov    0x8(%ebp),%edx
  80fd8c:	89 df                	mov    %ebx,%edi
  80fd8e:	89 de                	mov    %ebx,%esi
  80fd90:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fd92:	85 c0                	test   %eax,%eax
  80fd94:	7e 28                	jle    80fdbe <sys_env_set_pgfault_upcall+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fd96:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fd9a:	c7 44 24 0c 0a 00 00 	movl   $0xa,0xc(%esp)
  80fda1:	00 
  80fda2:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fda9:	00 
  80fdaa:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fdb1:	00 
  80fdb2:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fdb9:	e8 d0 f2 ff ff       	call   80f08e <_panic>

int
sys_env_set_pgfault_upcall(envid_t envid, void *upcall)
{
	return syscall(SYS_env_set_pgfault_upcall, 1, envid, (uint32_t) upcall, 0, 0, 0);
}
  80fdbe:	83 c4 2c             	add    $0x2c,%esp
  80fdc1:	5b                   	pop    %ebx
  80fdc2:	5e                   	pop    %esi
  80fdc3:	5f                   	pop    %edi
  80fdc4:	5d                   	pop    %ebp
  80fdc5:	c3                   	ret    

0080fdc6 <sys_ipc_try_send>:

int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, int perm)
{
  80fdc6:	55                   	push   %ebp
  80fdc7:	89 e5                	mov    %esp,%ebp
  80fdc9:	57                   	push   %edi
  80fdca:	56                   	push   %esi
  80fdcb:	53                   	push   %ebx
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fdcc:	be 00 00 00 00       	mov    $0x0,%esi
  80fdd1:	b8 0c 00 00 00       	mov    $0xc,%eax
  80fdd6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fdd9:	8b 55 08             	mov    0x8(%ebp),%edx
  80fddc:	8b 5d 10             	mov    0x10(%ebp),%ebx
  80fddf:	8b 7d 14             	mov    0x14(%ebp),%edi
  80fde2:	cd 30                	int    $0x30

int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, int perm)
{
	return syscall(SYS_ipc_try_send, 0, envid, value, (uint32_t) srcva, perm, 0);
}
  80fde4:	5b                   	pop    %ebx
  80fde5:	5e                   	pop    %esi
  80fde6:	5f                   	pop    %edi
  80fde7:	5d                   	pop    %ebp
  80fde8:	c3                   	ret    

0080fde9 <sys_ipc_recv>:

int
sys_ipc_recv(void *dstva)
{
  80fde9:	55                   	push   %ebp
  80fdea:	89 e5                	mov    %esp,%ebp
  80fdec:	57                   	push   %edi
  80fded:	56                   	push   %esi
  80fdee:	53                   	push   %ebx
  80fdef:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fdf2:	b9 00 00 00 00       	mov    $0x0,%ecx
  80fdf7:	b8 0d 00 00 00       	mov    $0xd,%eax
  80fdfc:	8b 55 08             	mov    0x8(%ebp),%edx
  80fdff:	89 cb                	mov    %ecx,%ebx
  80fe01:	89 cf                	mov    %ecx,%edi
  80fe03:	89 ce                	mov    %ecx,%esi
  80fe05:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fe07:	85 c0                	test   %eax,%eax
  80fe09:	7e 28                	jle    80fe33 <sys_ipc_recv+0x4a>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fe0b:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fe0f:	c7 44 24 0c 0d 00 00 	movl   $0xd,0xc(%esp)
  80fe16:	00 
  80fe17:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fe1e:	00 
  80fe1f:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fe26:	00 
  80fe27:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fe2e:	e8 5b f2 ff ff       	call   80f08e <_panic>

int
sys_ipc_recv(void *dstva)
{
	return syscall(SYS_ipc_recv, 1, (uint32_t)dstva, 0, 0, 0, 0);
}
  80fe33:	83 c4 2c             	add    $0x2c,%esp
  80fe36:	5b                   	pop    %ebx
  80fe37:	5e                   	pop    %esi
  80fe38:	5f                   	pop    %edi
  80fe39:	5d                   	pop    %ebp
  80fe3a:	c3                   	ret    

0080fe3b <sys_time_msec>:

unsigned int
sys_time_msec(void)
{
  80fe3b:	55                   	push   %ebp
  80fe3c:	89 e5                	mov    %esp,%ebp
  80fe3e:	57                   	push   %edi
  80fe3f:	56                   	push   %esi
  80fe40:	53                   	push   %ebx
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fe41:	ba 00 00 00 00       	mov    $0x0,%edx
  80fe46:	b8 0e 00 00 00       	mov    $0xe,%eax
  80fe4b:	89 d1                	mov    %edx,%ecx
  80fe4d:	89 d3                	mov    %edx,%ebx
  80fe4f:	89 d7                	mov    %edx,%edi
  80fe51:	89 d6                	mov    %edx,%esi
  80fe53:	cd 30                	int    $0x30

unsigned int
sys_time_msec(void)
{
	return (unsigned int) syscall(SYS_time_msec, 0, 0, 0, 0, 0, 0);
}
  80fe55:	5b                   	pop    %ebx
  80fe56:	5e                   	pop    %esi
  80fe57:	5f                   	pop    %edi
  80fe58:	5d                   	pop    %ebp
  80fe59:	c3                   	ret    

0080fe5a <sys_set_pri>:

int
sys_set_pri(envid_t envid, int pri)
{
  80fe5a:	55                   	push   %ebp
  80fe5b:	89 e5                	mov    %esp,%ebp
  80fe5d:	57                   	push   %edi
  80fe5e:	56                   	push   %esi
  80fe5f:	53                   	push   %ebx
  80fe60:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80fe63:	bb 00 00 00 00       	mov    $0x0,%ebx
  80fe68:	b8 0f 00 00 00       	mov    $0xf,%eax
  80fe6d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fe70:	8b 55 08             	mov    0x8(%ebp),%edx
  80fe73:	89 df                	mov    %ebx,%edi
  80fe75:	89 de                	mov    %ebx,%esi
  80fe77:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fe79:	85 c0                	test   %eax,%eax
  80fe7b:	7e 28                	jle    80fea5 <sys_set_pri+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fe7d:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fe81:	c7 44 24 0c 0f 00 00 	movl   $0xf,0xc(%esp)
  80fe88:	00 
  80fe89:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fe90:	00 
  80fe91:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80fe98:	00 
  80fe99:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fea0:	e8 e9 f1 ff ff       	call   80f08e <_panic>

int
sys_set_pri(envid_t envid, int pri)
{
	return syscall(SYS_set_pri, 1, envid, pri, 0, 0, 0);
}
  80fea5:	83 c4 2c             	add    $0x2c,%esp
  80fea8:	5b                   	pop    %ebx
  80fea9:	5e                   	pop    %esi
  80feaa:	5f                   	pop    %edi
  80feab:	5d                   	pop    %ebp
  80feac:	c3                   	ret    

0080fead <sys_pkt_send>:

int
sys_pkt_send(void *addr, int size)
{
  80fead:	55                   	push   %ebp
  80feae:	89 e5                	mov    %esp,%ebp
  80feb0:	57                   	push   %edi
  80feb1:	56                   	push   %esi
  80feb2:	53                   	push   %ebx
  80feb3:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80feb6:	bb 00 00 00 00       	mov    $0x0,%ebx
  80febb:	b8 10 00 00 00       	mov    $0x10,%eax
  80fec0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80fec3:	8b 55 08             	mov    0x8(%ebp),%edx
  80fec6:	89 df                	mov    %ebx,%edi
  80fec8:	89 de                	mov    %ebx,%esi
  80feca:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80fecc:	85 c0                	test   %eax,%eax
  80fece:	7e 28                	jle    80fef8 <sys_pkt_send+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80fed0:	89 44 24 10          	mov    %eax,0x10(%esp)
  80fed4:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
  80fedb:	00 
  80fedc:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80fee3:	00 
  80fee4:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80feeb:	00 
  80feec:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80fef3:	e8 96 f1 ff ff       	call   80f08e <_panic>

int
sys_pkt_send(void *addr, int size)
{
	return syscall(SYS_pkt_send, 1, (uint32_t)addr, size, 0, 0, 0);
}
  80fef8:	83 c4 2c             	add    $0x2c,%esp
  80fefb:	5b                   	pop    %ebx
  80fefc:	5e                   	pop    %esi
  80fefd:	5f                   	pop    %edi
  80fefe:	5d                   	pop    %ebp
  80feff:	c3                   	ret    

0080ff00 <sys_pkt_recv>:

int
sys_pkt_recv(void *addr, size_t *size)
{
  80ff00:	55                   	push   %ebp
  80ff01:	89 e5                	mov    %esp,%ebp
  80ff03:	57                   	push   %edi
  80ff04:	56                   	push   %esi
  80ff05:	53                   	push   %ebx
  80ff06:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80ff09:	bb 00 00 00 00       	mov    $0x0,%ebx
  80ff0e:	b8 11 00 00 00       	mov    $0x11,%eax
  80ff13:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80ff16:	8b 55 08             	mov    0x8(%ebp),%edx
  80ff19:	89 df                	mov    %ebx,%edi
  80ff1b:	89 de                	mov    %ebx,%esi
  80ff1d:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80ff1f:	85 c0                	test   %eax,%eax
  80ff21:	7e 28                	jle    80ff4b <sys_pkt_recv+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80ff23:	89 44 24 10          	mov    %eax,0x10(%esp)
  80ff27:	c7 44 24 0c 11 00 00 	movl   $0x11,0xc(%esp)
  80ff2e:	00 
  80ff2f:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80ff36:	00 
  80ff37:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80ff3e:	00 
  80ff3f:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80ff46:	e8 43 f1 ff ff       	call   80f08e <_panic>

int
sys_pkt_recv(void *addr, size_t *size)
{
	return syscall(SYS_pkt_recv, 1, (uint32_t)addr, (uint32_t)size, 0, 0, 0);
}
  80ff4b:	83 c4 2c             	add    $0x2c,%esp
  80ff4e:	5b                   	pop    %ebx
  80ff4f:	5e                   	pop    %esi
  80ff50:	5f                   	pop    %edi
  80ff51:	5d                   	pop    %ebp
  80ff52:	c3                   	ret    

0080ff53 <sys_sleep>:

int
sys_sleep(int channel)
{
  80ff53:	55                   	push   %ebp
  80ff54:	89 e5                	mov    %esp,%ebp
  80ff56:	57                   	push   %edi
  80ff57:	56                   	push   %esi
  80ff58:	53                   	push   %ebx
  80ff59:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80ff5c:	b9 00 00 00 00       	mov    $0x0,%ecx
  80ff61:	b8 12 00 00 00       	mov    $0x12,%eax
  80ff66:	8b 55 08             	mov    0x8(%ebp),%edx
  80ff69:	89 cb                	mov    %ecx,%ebx
  80ff6b:	89 cf                	mov    %ecx,%edi
  80ff6d:	89 ce                	mov    %ecx,%esi
  80ff6f:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80ff71:	85 c0                	test   %eax,%eax
  80ff73:	7e 28                	jle    80ff9d <sys_sleep+0x4a>
		panic("syscall %d returned %d (> 0)", num, ret);
  80ff75:	89 44 24 10          	mov    %eax,0x10(%esp)
  80ff79:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
  80ff80:	00 
  80ff81:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80ff88:	00 
  80ff89:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80ff90:	00 
  80ff91:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80ff98:	e8 f1 f0 ff ff       	call   80f08e <_panic>

int
sys_sleep(int channel)
{
	return syscall(SYS_sleep, 1, channel, 0, 0, 0, 0);
}
  80ff9d:	83 c4 2c             	add    $0x2c,%esp
  80ffa0:	5b                   	pop    %ebx
  80ffa1:	5e                   	pop    %esi
  80ffa2:	5f                   	pop    %edi
  80ffa3:	5d                   	pop    %ebp
  80ffa4:	c3                   	ret    

0080ffa5 <sys_get_mac_from_eeprom>:

int
sys_get_mac_from_eeprom(uint32_t* low, uint32_t* high)
{
  80ffa5:	55                   	push   %ebp
  80ffa6:	89 e5                	mov    %esp,%ebp
  80ffa8:	57                   	push   %edi
  80ffa9:	56                   	push   %esi
  80ffaa:	53                   	push   %ebx
  80ffab:	83 ec 2c             	sub    $0x2c,%esp
	//
	// The last clause tells the assembler that this can
	// potentially change the condition codes and arbitrary
	// memory locations.

	asm volatile("int %1\n"
  80ffae:	bb 00 00 00 00       	mov    $0x0,%ebx
  80ffb3:	b8 13 00 00 00       	mov    $0x13,%eax
  80ffb8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80ffbb:	8b 55 08             	mov    0x8(%ebp),%edx
  80ffbe:	89 df                	mov    %ebx,%edi
  80ffc0:	89 de                	mov    %ebx,%esi
  80ffc2:	cd 30                	int    $0x30
		  "b" (a3),
		  "D" (a4),
		  "S" (a5)
		: "cc", "memory");

	if(check && ret > 0)
  80ffc4:	85 c0                	test   %eax,%eax
  80ffc6:	7e 28                	jle    80fff0 <sys_get_mac_from_eeprom+0x4b>
		panic("syscall %d returned %d (> 0)", num, ret);
  80ffc8:	89 44 24 10          	mov    %eax,0x10(%esp)
  80ffcc:	c7 44 24 0c 13 00 00 	movl   $0x13,0xc(%esp)
  80ffd3:	00 
  80ffd4:	c7 44 24 08 eb 46 81 	movl   $0x8146eb,0x8(%esp)
  80ffdb:	00 
  80ffdc:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80ffe3:	00 
  80ffe4:	c7 04 24 08 47 81 00 	movl   $0x814708,(%esp)
  80ffeb:	e8 9e f0 ff ff       	call   80f08e <_panic>

int
sys_get_mac_from_eeprom(uint32_t* low, uint32_t* high)
{
	return syscall(SYS_get_mac_from_eeprom, 1, (uint32_t)low, (uint32_t)high, 0, 0, 0);
}
  80fff0:	83 c4 2c             	add    $0x2c,%esp
  80fff3:	5b                   	pop    %ebx
  80fff4:	5e                   	pop    %esi
  80fff5:	5f                   	pop    %edi
  80fff6:	5d                   	pop    %ebp
  80fff7:	c3                   	ret    

0080fff8 <pgfault>:
// Custom page fault handler - if faulting page is copy-on-write,
// map in our own private writable copy.
//
static void
pgfault(struct UTrapframe *utf)
{
  80fff8:	55                   	push   %ebp
  80fff9:	89 e5                	mov    %esp,%ebp
  80fffb:	53                   	push   %ebx
  80fffc:	83 ec 24             	sub    $0x24,%esp
  80ffff:	8b 55 08             	mov    0x8(%ebp),%edx
	void *addr = (void *) utf->utf_fault_va;
  810002:	8b 02                	mov    (%edx),%eax
	// Hint:
	//   Use the read-only page table mappings at uvpt
	//   (see <inc/memlayout.h>).

	// LAB 4: Your code here.
	if(((err & FEC_WR) == 0) || ((uvpd[PDX(addr)] & PTE_P) == 0) || (((~uvpt[PGNUM(addr)])&(PTE_COW|PTE_P)) != 0)) {
  810004:	f6 42 04 02          	testb  $0x2,0x4(%edx)
  810008:	74 27                	je     810031 <pgfault+0x39>
  81000a:	89 c2                	mov    %eax,%edx
  81000c:	c1 ea 16             	shr    $0x16,%edx
  81000f:	8b 14 95 00 d0 7b ef 	mov    -0x10843000(,%edx,4),%edx
  810016:	f6 c2 01             	test   $0x1,%dl
  810019:	74 16                	je     810031 <pgfault+0x39>
  81001b:	89 c2                	mov    %eax,%edx
  81001d:	c1 ea 0c             	shr    $0xc,%edx
  810020:	8b 14 95 00 00 40 ef 	mov    -0x10c00000(,%edx,4),%edx
  810027:	f7 d2                	not    %edx
  810029:	f7 c2 01 08 00 00    	test   $0x801,%edx
  81002f:	74 1c                	je     81004d <pgfault+0x55>
		panic("pgfault");
  810031:	c7 44 24 08 16 47 81 	movl   $0x814716,0x8(%esp)
  810038:	00 
  810039:	c7 44 24 04 1d 00 00 	movl   $0x1d,0x4(%esp)
  810040:	00 
  810041:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  810048:	e8 41 f0 ff ff       	call   80f08e <_panic>
	// Hint:
	//   You should make three system calls.

	// LAB 4: Your code here.

	addr = (void*)ROUNDDOWN(addr,PGSIZE);
  81004d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  810052:	89 c3                	mov    %eax,%ebx
	
	if(sys_page_alloc(0, (void*)PFTEMP, PTE_P|PTE_W|PTE_U) < 0) {
  810054:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  81005b:	00 
  81005c:	c7 44 24 04 00 f0 7f 	movl   $0x7ff000,0x4(%esp)
  810063:	00 
  810064:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81006b:	e8 63 fb ff ff       	call   80fbd3 <sys_page_alloc>
  810070:	85 c0                	test   %eax,%eax
  810072:	79 1c                	jns    810090 <pgfault+0x98>
		panic("pgfault(): sys_page_alloc");
  810074:	c7 44 24 08 29 47 81 	movl   $0x814729,0x8(%esp)
  81007b:	00 
  81007c:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
  810083:	00 
  810084:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  81008b:	e8 fe ef ff ff       	call   80f08e <_panic>
	}
	memcpy((void*)PFTEMP, addr, PGSIZE);
  810090:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  810097:	00 
  810098:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  81009c:	c7 04 24 00 f0 7f 00 	movl   $0x7ff000,(%esp)
  8100a3:	e8 14 f9 ff ff       	call   80f9bc <memcpy>

	if(sys_page_map(0, (void*)PFTEMP, 0, addr, PTE_P|PTE_W|PTE_U) < 0) {
  8100a8:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
  8100af:	00 
  8100b0:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  8100b4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8100bb:	00 
  8100bc:	c7 44 24 04 00 f0 7f 	movl   $0x7ff000,0x4(%esp)
  8100c3:	00 
  8100c4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8100cb:	e8 57 fb ff ff       	call   80fc27 <sys_page_map>
  8100d0:	85 c0                	test   %eax,%eax
  8100d2:	79 1c                	jns    8100f0 <pgfault+0xf8>
		panic("pgfault(): sys_page_map");
  8100d4:	c7 44 24 08 43 47 81 	movl   $0x814743,0x8(%esp)
  8100db:	00 
  8100dc:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
  8100e3:	00 
  8100e4:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  8100eb:	e8 9e ef ff ff       	call   80f08e <_panic>
	}

	if(sys_page_unmap(0, (void*)PFTEMP) < 0) {
  8100f0:	c7 44 24 04 00 f0 7f 	movl   $0x7ff000,0x4(%esp)
  8100f7:	00 
  8100f8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8100ff:	e8 76 fb ff ff       	call   80fc7a <sys_page_unmap>
  810104:	85 c0                	test   %eax,%eax
  810106:	79 1c                	jns    810124 <pgfault+0x12c>
		panic("pgfault(): sys_page_unmap");
  810108:	c7 44 24 08 5b 47 81 	movl   $0x81475b,0x8(%esp)
  81010f:	00 
  810110:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
  810117:	00 
  810118:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  81011f:	e8 6a ef ff ff       	call   80f08e <_panic>
	}
}
  810124:	83 c4 24             	add    $0x24,%esp
  810127:	5b                   	pop    %ebx
  810128:	5d                   	pop    %ebp
  810129:	c3                   	ret    

0081012a <fork>:
//   Neither user exception stack should ever be marked copy-on-write,
//   so you must allocate a new page for the child's user exception stack.
//
envid_t
fork(void)
{
  81012a:	55                   	push   %ebp
  81012b:	89 e5                	mov    %esp,%ebp
  81012d:	57                   	push   %edi
  81012e:	56                   	push   %esi
  81012f:	53                   	push   %ebx
  810130:	83 ec 2c             	sub    $0x2c,%esp
	set_pgfault_handler(pgfault);
  810133:	c7 04 24 f8 ff 80 00 	movl   $0x80fff8,(%esp)
  81013a:	e8 17 19 00 00       	call   811a56 <set_pgfault_handler>
// This must be inlined.  Exercise for reader: why?
static __inline envid_t __attribute__((always_inline))
sys_exofork(void)
{
	envid_t ret;
	__asm __volatile("int %2"
  81013f:	b8 07 00 00 00       	mov    $0x7,%eax
  810144:	cd 30                	int    $0x30
  810146:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	envid_t env_id = sys_exofork();
	if(env_id < 0){
  810149:	85 c0                	test   %eax,%eax
  81014b:	79 1c                	jns    810169 <fork+0x3f>
		panic("fork(): sys_exofork");
  81014d:	c7 44 24 08 75 47 81 	movl   $0x814775,0x8(%esp)
  810154:	00 
  810155:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
  81015c:	00 
  81015d:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  810164:	e8 25 ef ff ff       	call   80f08e <_panic>
  810169:	89 c7                	mov    %eax,%edi
	}
	else if(env_id == 0){
  81016b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  81016f:	74 0a                	je     81017b <fork+0x51>
  810171:	bb 00 00 80 00       	mov    $0x800000,%ebx
  810176:	e9 9d 01 00 00       	jmp    810318 <fork+0x1ee>
		thisenv = envs + ENVX(sys_getenvid());
  81017b:	e8 15 fa ff ff       	call   80fb95 <sys_getenvid>
  810180:	25 ff 03 00 00       	and    $0x3ff,%eax
  810185:	89 c2                	mov    %eax,%edx
  810187:	c1 e2 07             	shl    $0x7,%edx
  81018a:	8d 84 82 00 00 c0 ee 	lea    -0x11400000(%edx,%eax,4),%eax
  810191:	a3 7c c2 b3 00       	mov    %eax,0xb3c27c
		return env_id;
  810196:	e9 2a 02 00 00       	jmp    8103c5 <fork+0x29b>
	}

	uint32_t addr;
	for(addr = UTEXT; addr < UTOP; addr += PGSIZE){
		if(addr == UXSTACKTOP - PGSIZE){
  81019b:	81 fb 00 f0 bf ee    	cmp    $0xeebff000,%ebx
  8101a1:	0f 84 6b 01 00 00    	je     810312 <fork+0x1e8>
			continue;
		}
		if(((uvpd[PDX(addr)]&PTE_P) != 0) && (((~uvpt[PGNUM(addr)])&(PTE_P|PTE_U)) == 0)) {
  8101a7:	89 d8                	mov    %ebx,%eax
  8101a9:	c1 e8 16             	shr    $0x16,%eax
  8101ac:	8b 04 85 00 d0 7b ef 	mov    -0x10843000(,%eax,4),%eax
  8101b3:	a8 01                	test   $0x1,%al
  8101b5:	0f 84 57 01 00 00    	je     810312 <fork+0x1e8>
  8101bb:	89 d8                	mov    %ebx,%eax
  8101bd:	c1 e8 0c             	shr    $0xc,%eax
  8101c0:	8b 04 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%eax
  8101c7:	f7 d0                	not    %eax
  8101c9:	a8 05                	test   $0x5,%al
  8101cb:	0f 85 41 01 00 00    	jne    810312 <fork+0x1e8>
			duppage(env_id,addr/PGSIZE);
  8101d1:	89 d8                	mov    %ebx,%eax
  8101d3:	c1 e8 0c             	shr    $0xc,%eax
duppage(envid_t envid, unsigned pn)
{
	int r;

	// LAB 4: Your code here.
	void* addr = (void*)(pn*PGSIZE);
  8101d6:	89 c6                	mov    %eax,%esi
  8101d8:	c1 e6 0c             	shl    $0xc,%esi

	if (uvpt[pn] & PTE_SHARE) {
  8101db:	8b 14 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%edx
  8101e2:	f6 c6 04             	test   $0x4,%dh
  8101e5:	74 4c                	je     810233 <fork+0x109>
		if (sys_page_map(0, addr, envid, addr, uvpt[pn]&PTE_SYSCALL) < 0)
  8101e7:	8b 04 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%eax
  8101ee:	25 07 0e 00 00       	and    $0xe07,%eax
  8101f3:	89 44 24 10          	mov    %eax,0x10(%esp)
  8101f7:	89 74 24 0c          	mov    %esi,0xc(%esp)
  8101fb:	89 7c 24 08          	mov    %edi,0x8(%esp)
  8101ff:	89 74 24 04          	mov    %esi,0x4(%esp)
  810203:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81020a:	e8 18 fa ff ff       	call   80fc27 <sys_page_map>
  81020f:	85 c0                	test   %eax,%eax
  810211:	0f 89 fb 00 00 00    	jns    810312 <fork+0x1e8>
			panic("duppage: sys_page_map");
  810217:	c7 44 24 08 89 47 81 	movl   $0x814789,0x8(%esp)
  81021e:	00 
  81021f:	c7 44 24 04 4d 00 00 	movl   $0x4d,0x4(%esp)
  810226:	00 
  810227:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  81022e:	e8 5b ee ff ff       	call   80f08e <_panic>
	} else if((uvpt[pn] & PTE_COW) || (uvpt[pn] & PTE_W)) {
  810233:	8b 14 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%edx
  81023a:	f6 c6 08             	test   $0x8,%dh
  81023d:	75 0f                	jne    81024e <fork+0x124>
  81023f:	8b 04 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%eax
  810246:	a8 02                	test   $0x2,%al
  810248:	0f 84 84 00 00 00    	je     8102d2 <fork+0x1a8>
		if(sys_page_map(0, addr, envid, addr, PTE_COW | PTE_U | PTE_P) < 0){
  81024e:	c7 44 24 10 05 08 00 	movl   $0x805,0x10(%esp)
  810255:	00 
  810256:	89 74 24 0c          	mov    %esi,0xc(%esp)
  81025a:	89 7c 24 08          	mov    %edi,0x8(%esp)
  81025e:	89 74 24 04          	mov    %esi,0x4(%esp)
  810262:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  810269:	e8 b9 f9 ff ff       	call   80fc27 <sys_page_map>
  81026e:	85 c0                	test   %eax,%eax
  810270:	79 1c                	jns    81028e <fork+0x164>
			panic("duppage: sys_page_map");
  810272:	c7 44 24 08 89 47 81 	movl   $0x814789,0x8(%esp)
  810279:	00 
  81027a:	c7 44 24 04 50 00 00 	movl   $0x50,0x4(%esp)
  810281:	00 
  810282:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  810289:	e8 00 ee ff ff       	call   80f08e <_panic>
		}
		if(sys_page_map(0, addr, 0, addr, PTE_COW | PTE_U | PTE_P) < 0){
  81028e:	c7 44 24 10 05 08 00 	movl   $0x805,0x10(%esp)
  810295:	00 
  810296:	89 74 24 0c          	mov    %esi,0xc(%esp)
  81029a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8102a1:	00 
  8102a2:	89 74 24 04          	mov    %esi,0x4(%esp)
  8102a6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8102ad:	e8 75 f9 ff ff       	call   80fc27 <sys_page_map>
  8102b2:	85 c0                	test   %eax,%eax
  8102b4:	79 5c                	jns    810312 <fork+0x1e8>
			panic("duppage: sys_page_map");
  8102b6:	c7 44 24 08 89 47 81 	movl   $0x814789,0x8(%esp)
  8102bd:	00 
  8102be:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
  8102c5:	00 
  8102c6:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  8102cd:	e8 bc ed ff ff       	call   80f08e <_panic>
		}
	} else {
		if(sys_page_map(0, addr, envid, addr, PTE_U | PTE_P) < 0){
  8102d2:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%esp)
  8102d9:	00 
  8102da:	89 74 24 0c          	mov    %esi,0xc(%esp)
  8102de:	89 7c 24 08          	mov    %edi,0x8(%esp)
  8102e2:	89 74 24 04          	mov    %esi,0x4(%esp)
  8102e6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8102ed:	e8 35 f9 ff ff       	call   80fc27 <sys_page_map>
  8102f2:	85 c0                	test   %eax,%eax
  8102f4:	79 1c                	jns    810312 <fork+0x1e8>
			panic("duppage: sys_page_map");
  8102f6:	c7 44 24 08 89 47 81 	movl   $0x814789,0x8(%esp)
  8102fd:	00 
  8102fe:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
  810305:	00 
  810306:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  81030d:	e8 7c ed ff ff       	call   80f08e <_panic>
		thisenv = envs + ENVX(sys_getenvid());
		return env_id;
	}

	uint32_t addr;
	for(addr = UTEXT; addr < UTOP; addr += PGSIZE){
  810312:	81 c3 00 10 00 00    	add    $0x1000,%ebx
  810318:	81 fb 00 00 c0 ee    	cmp    $0xeec00000,%ebx
  81031e:	0f 85 77 fe ff ff    	jne    81019b <fork+0x71>
		if(((uvpd[PDX(addr)]&PTE_P) != 0) && (((~uvpt[PGNUM(addr)])&(PTE_P|PTE_U)) == 0)) {
			duppage(env_id,addr/PGSIZE);
		}
	}

	if(sys_page_alloc(env_id, (void*)(UXSTACKTOP - PGSIZE), PTE_P|PTE_U|PTE_W) < 0) {
  810324:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  81032b:	00 
  81032c:	c7 44 24 04 00 f0 bf 	movl   $0xeebff000,0x4(%esp)
  810333:	ee 
  810334:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  810337:	89 04 24             	mov    %eax,(%esp)
  81033a:	e8 94 f8 ff ff       	call   80fbd3 <sys_page_alloc>
  81033f:	85 c0                	test   %eax,%eax
  810341:	79 1c                	jns    81035f <fork+0x235>
		panic("fork(): sys_page_alloc");
  810343:	c7 44 24 08 9f 47 81 	movl   $0x81479f,0x8(%esp)
  81034a:	00 
  81034b:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
  810352:	00 
  810353:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  81035a:	e8 2f ed ff ff       	call   80f08e <_panic>
	}

	extern void _pgfault_upcall(void);
	if(sys_env_set_pgfault_upcall(env_id, _pgfault_upcall) < 0) {
  81035f:	c7 44 24 04 df 1a 81 	movl   $0x811adf,0x4(%esp)
  810366:	00 
  810367:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  81036a:	89 04 24             	mov    %eax,(%esp)
  81036d:	e8 01 fa ff ff       	call   80fd73 <sys_env_set_pgfault_upcall>
  810372:	85 c0                	test   %eax,%eax
  810374:	79 1c                	jns    810392 <fork+0x268>
		panic("fork(): ys_env_set_pgfault_upcall");
  810376:	c7 44 24 08 e8 47 81 	movl   $0x8147e8,0x8(%esp)
  81037d:	00 
  81037e:	c7 44 24 04 8c 00 00 	movl   $0x8c,0x4(%esp)
  810385:	00 
  810386:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  81038d:	e8 fc ec ff ff       	call   80f08e <_panic>
	}

	if(sys_env_set_status(env_id, ENV_RUNNABLE) < 0) {
  810392:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  810399:	00 
  81039a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  81039d:	89 04 24             	mov    %eax,(%esp)
  8103a0:	e8 28 f9 ff ff       	call   80fccd <sys_env_set_status>
  8103a5:	85 c0                	test   %eax,%eax
  8103a7:	79 1c                	jns    8103c5 <fork+0x29b>
		panic("fork(): sys_env_set_status");
  8103a9:	c7 44 24 08 b6 47 81 	movl   $0x8147b6,0x8(%esp)
  8103b0:	00 
  8103b1:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
  8103b8:	00 
  8103b9:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  8103c0:	e8 c9 ec ff ff       	call   80f08e <_panic>
	}

	return env_id;
}
  8103c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8103c8:	83 c4 2c             	add    $0x2c,%esp
  8103cb:	5b                   	pop    %ebx
  8103cc:	5e                   	pop    %esi
  8103cd:	5f                   	pop    %edi
  8103ce:	5d                   	pop    %ebp
  8103cf:	c3                   	ret    

008103d0 <sfork>:

// Challenge!
int
sfork(void)
{
  8103d0:	55                   	push   %ebp
  8103d1:	89 e5                	mov    %esp,%ebp
  8103d3:	83 ec 18             	sub    $0x18,%esp
	panic("sfork not implemented");
  8103d6:	c7 44 24 08 d1 47 81 	movl   $0x8147d1,0x8(%esp)
  8103dd:	00 
  8103de:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
  8103e5:	00 
  8103e6:	c7 04 24 1e 47 81 00 	movl   $0x81471e,(%esp)
  8103ed:	e8 9c ec ff ff       	call   80f08e <_panic>
  8103f2:	66 90                	xchg   %ax,%ax
  8103f4:	66 90                	xchg   %ax,%ax
  8103f6:	66 90                	xchg   %ax,%ax
  8103f8:	66 90                	xchg   %ax,%ax
  8103fa:	66 90                	xchg   %ax,%ax
  8103fc:	66 90                	xchg   %ax,%ax
  8103fe:	66 90                	xchg   %ax,%ax

00810400 <ipc_recv>:
//   If 'pg' is null, pass sys_ipc_recv a value that it will understand
//   as meaning "no page".  (Zero is not the right value, since that's
//   a perfectly valid place to map a page.)
int32_t
ipc_recv(envid_t *from_env_store, void *pg, int *perm_store)
{
  810400:	55                   	push   %ebp
  810401:	89 e5                	mov    %esp,%ebp
  810403:	56                   	push   %esi
  810404:	53                   	push   %ebx
  810405:	83 ec 10             	sub    $0x10,%esp
  810408:	8b 75 08             	mov    0x8(%ebp),%esi
  81040b:	8b 45 0c             	mov    0xc(%ebp),%eax
  81040e:	8b 5d 10             	mov    0x10(%ebp),%ebx
	// LAB 4: Your code here.
	if (pg == NULL)
  810411:	85 c0                	test   %eax,%eax
		pg = (void*) UTOP;
  810413:	ba 00 00 c0 ee       	mov    $0xeec00000,%edx
  810418:	0f 44 c2             	cmove  %edx,%eax

	int ret = sys_ipc_recv(pg);
  81041b:	89 04 24             	mov    %eax,(%esp)
  81041e:	e8 c6 f9 ff ff       	call   80fde9 <sys_ipc_recv>
  810423:	89 c2                	mov    %eax,%edx
	if (ret != 0) {
  810425:	85 d2                	test   %edx,%edx
  810427:	75 24                	jne    81044d <ipc_recv+0x4d>
			from_env_store = 0;
		if (perm_store != NULL)
			perm_store = 0;
		return ret;
	} else {
		if (from_env_store != NULL)
  810429:	85 f6                	test   %esi,%esi
  81042b:	74 0a                	je     810437 <ipc_recv+0x37>
			*from_env_store = (envid_t) thisenv->env_ipc_from;
  81042d:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  810432:	8b 40 74             	mov    0x74(%eax),%eax
  810435:	89 06                	mov    %eax,(%esi)
		if (perm_store != NULL)
  810437:	85 db                	test   %ebx,%ebx
  810439:	74 0a                	je     810445 <ipc_recv+0x45>
			*perm_store = (int) thisenv->env_ipc_perm;
  81043b:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  810440:	8b 40 78             	mov    0x78(%eax),%eax
  810443:	89 03                	mov    %eax,(%ebx)
		return thisenv->env_ipc_value;
  810445:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  81044a:	8b 40 70             	mov    0x70(%eax),%eax
	}
	return 0;
}
  81044d:	83 c4 10             	add    $0x10,%esp
  810450:	5b                   	pop    %ebx
  810451:	5e                   	pop    %esi
  810452:	5d                   	pop    %ebp
  810453:	c3                   	ret    

00810454 <ipc_send>:
//   Use sys_yield() to be CPU-friendly.
//   If 'pg' is null, pass sys_ipc_try_send a value that it will understand
//   as meaning "no page".  (Zero is not the right value.)
void
ipc_send(envid_t to_env, uint32_t val, void *pg, int perm)
{
  810454:	55                   	push   %ebp
  810455:	89 e5                	mov    %esp,%ebp
  810457:	57                   	push   %edi
  810458:	56                   	push   %esi
  810459:	53                   	push   %ebx
  81045a:	83 ec 1c             	sub    $0x1c,%esp
  81045d:	8b 7d 08             	mov    0x8(%ebp),%edi
  810460:	8b 75 0c             	mov    0xc(%ebp),%esi
  810463:	8b 5d 10             	mov    0x10(%ebp),%ebx
	// LAB 4: Your code here.
	int ret;
	if (pg == NULL)
  810466:	85 db                	test   %ebx,%ebx
		pg = (void*) UTOP;
  810468:	b8 00 00 c0 ee       	mov    $0xeec00000,%eax
  81046d:	0f 44 d8             	cmove  %eax,%ebx
	while (1) {
		ret = sys_ipc_try_send(to_env, val, pg, perm);
  810470:	8b 45 14             	mov    0x14(%ebp),%eax
  810473:	89 44 24 0c          	mov    %eax,0xc(%esp)
  810477:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  81047b:	89 74 24 04          	mov    %esi,0x4(%esp)
  81047f:	89 3c 24             	mov    %edi,(%esp)
  810482:	e8 3f f9 ff ff       	call   80fdc6 <sys_ipc_try_send>

		if (ret == 0)
  810487:	85 c0                	test   %eax,%eax
  810489:	74 2c                	je     8104b7 <ipc_send+0x63>
			break;
			
		if (ret != -E_IPC_NOT_RECV) {
  81048b:	83 f8 f9             	cmp    $0xfffffff9,%eax
  81048e:	74 20                	je     8104b0 <ipc_send+0x5c>
			panic("ipc_send failed with error E_IPC_NOT_RECV, %e", ret);
  810490:	89 44 24 0c          	mov    %eax,0xc(%esp)
  810494:	c7 44 24 08 0c 48 81 	movl   $0x81480c,0x8(%esp)
  81049b:	00 
  81049c:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
  8104a3:	00 
  8104a4:	c7 04 24 3a 48 81 00 	movl   $0x81483a,(%esp)
  8104ab:	e8 de eb ff ff       	call   80f08e <_panic>
		}

		sys_yield();
  8104b0:	e8 ff f6 ff ff       	call   80fbb4 <sys_yield>
	}
  8104b5:	eb b9                	jmp    810470 <ipc_send+0x1c>
}
  8104b7:	83 c4 1c             	add    $0x1c,%esp
  8104ba:	5b                   	pop    %ebx
  8104bb:	5e                   	pop    %esi
  8104bc:	5f                   	pop    %edi
  8104bd:	5d                   	pop    %ebp
  8104be:	c3                   	ret    

008104bf <ipc_find_env>:
// Find the first environment of the given type.  We'll use this to
// find special environments.
// Returns 0 if no such environment exists.
envid_t
ipc_find_env(enum EnvType type)
{
  8104bf:	55                   	push   %ebp
  8104c0:	89 e5                	mov    %esp,%ebp
  8104c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
	int i;
	for (i = 0; i < NENV; i++)
  8104c5:	b8 00 00 00 00       	mov    $0x0,%eax
		if (envs[i].env_type == type)
  8104ca:	89 c2                	mov    %eax,%edx
  8104cc:	c1 e2 07             	shl    $0x7,%edx
  8104cf:	8d 94 82 00 00 c0 ee 	lea    -0x11400000(%edx,%eax,4),%edx
  8104d6:	8b 52 50             	mov    0x50(%edx),%edx
  8104d9:	39 ca                	cmp    %ecx,%edx
  8104db:	75 11                	jne    8104ee <ipc_find_env+0x2f>
			return envs[i].env_id;
  8104dd:	89 c2                	mov    %eax,%edx
  8104df:	c1 e2 07             	shl    $0x7,%edx
  8104e2:	8d 84 82 08 00 c0 ee 	lea    -0x113ffff8(%edx,%eax,4),%eax
  8104e9:	8b 40 40             	mov    0x40(%eax),%eax
  8104ec:	eb 0e                	jmp    8104fc <ipc_find_env+0x3d>
// Returns 0 if no such environment exists.
envid_t
ipc_find_env(enum EnvType type)
{
	int i;
	for (i = 0; i < NENV; i++)
  8104ee:	83 c0 01             	add    $0x1,%eax
  8104f1:	3d 00 04 00 00       	cmp    $0x400,%eax
  8104f6:	75 d2                	jne    8104ca <ipc_find_env+0xb>
		if (envs[i].env_type == type)
			return envs[i].env_id;
	return 0;
  8104f8:	66 b8 00 00          	mov    $0x0,%ax
}
  8104fc:	5d                   	pop    %ebp
  8104fd:	c3                   	ret    
  8104fe:	66 90                	xchg   %ax,%ax

00810500 <fd2num>:
// File descriptor manipulators
// --------------------------------------------------------------

int
fd2num(struct Fd *fd)
{
  810500:	55                   	push   %ebp
  810501:	89 e5                	mov    %esp,%ebp
	return ((uintptr_t) fd - FDTABLE) / PGSIZE;
  810503:	8b 45 08             	mov    0x8(%ebp),%eax
  810506:	05 00 00 00 30       	add    $0x30000000,%eax
  81050b:	c1 e8 0c             	shr    $0xc,%eax
}
  81050e:	5d                   	pop    %ebp
  81050f:	c3                   	ret    

00810510 <fd2data>:

char*
fd2data(struct Fd *fd)
{
  810510:	55                   	push   %ebp
  810511:	89 e5                	mov    %esp,%ebp
// --------------------------------------------------------------

int
fd2num(struct Fd *fd)
{
	return ((uintptr_t) fd - FDTABLE) / PGSIZE;
  810513:	8b 45 08             	mov    0x8(%ebp),%eax
  810516:	05 00 00 00 30       	add    $0x30000000,%eax
}

char*
fd2data(struct Fd *fd)
{
	return INDEX2DATA(fd2num(fd));
  81051b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  810520:	2d 00 00 fe 2f       	sub    $0x2ffe0000,%eax
}
  810525:	5d                   	pop    %ebp
  810526:	c3                   	ret    

00810527 <fd_alloc>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_MAX_FD: no more file descriptors
// On error, *fd_store is set to 0.
int
fd_alloc(struct Fd **fd_store)
{
  810527:	55                   	push   %ebp
  810528:	89 e5                	mov    %esp,%ebp
  81052a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  81052d:	b8 00 00 00 d0       	mov    $0xd0000000,%eax
	int i;
	struct Fd *fd;

	for (i = 0; i < MAXFD; i++) {
		fd = INDEX2FD(i);
		if ((uvpd[PDX(fd)] & PTE_P) == 0 || (uvpt[PGNUM(fd)] & PTE_P) == 0) {
  810532:	89 c2                	mov    %eax,%edx
  810534:	c1 ea 16             	shr    $0x16,%edx
  810537:	8b 14 95 00 d0 7b ef 	mov    -0x10843000(,%edx,4),%edx
  81053e:	f6 c2 01             	test   $0x1,%dl
  810541:	74 11                	je     810554 <fd_alloc+0x2d>
  810543:	89 c2                	mov    %eax,%edx
  810545:	c1 ea 0c             	shr    $0xc,%edx
  810548:	8b 14 95 00 00 40 ef 	mov    -0x10c00000(,%edx,4),%edx
  81054f:	f6 c2 01             	test   $0x1,%dl
  810552:	75 09                	jne    81055d <fd_alloc+0x36>
			*fd_store = fd;
  810554:	89 01                	mov    %eax,(%ecx)
			return 0;
  810556:	b8 00 00 00 00       	mov    $0x0,%eax
  81055b:	eb 17                	jmp    810574 <fd_alloc+0x4d>
  81055d:	05 00 10 00 00       	add    $0x1000,%eax
fd_alloc(struct Fd **fd_store)
{
	int i;
	struct Fd *fd;

	for (i = 0; i < MAXFD; i++) {
  810562:	3d 00 00 02 d0       	cmp    $0xd0020000,%eax
  810567:	75 c9                	jne    810532 <fd_alloc+0xb>
		if ((uvpd[PDX(fd)] & PTE_P) == 0 || (uvpt[PGNUM(fd)] & PTE_P) == 0) {
			*fd_store = fd;
			return 0;
		}
	}
	*fd_store = 0;
  810569:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	return -E_MAX_OPEN;
  81056f:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
}
  810574:	5d                   	pop    %ebp
  810575:	c3                   	ret    

00810576 <fd_lookup>:
// Returns 0 on success (the page is in range and mapped), < 0 on error.
// Errors are:
//	-E_INVAL: fdnum was either not in range or not mapped.
int
fd_lookup(int fdnum, struct Fd **fd_store)
{
  810576:	55                   	push   %ebp
  810577:	89 e5                	mov    %esp,%ebp
  810579:	8b 45 08             	mov    0x8(%ebp),%eax
	struct Fd *fd;

	if (fdnum < 0 || fdnum >= MAXFD) {
  81057c:	83 f8 1f             	cmp    $0x1f,%eax
  81057f:	77 36                	ja     8105b7 <fd_lookup+0x41>
		if (debug)
			cprintf("[%08x] bad fd %d\n", thisenv->env_id, fdnum);
		return -E_INVAL;
	}
	fd = INDEX2FD(fdnum);
  810581:	c1 e0 0c             	shl    $0xc,%eax
  810584:	2d 00 00 00 30       	sub    $0x30000000,%eax
	if (!(uvpd[PDX(fd)] & PTE_P) || !(uvpt[PGNUM(fd)] & PTE_P)) {
  810589:	89 c2                	mov    %eax,%edx
  81058b:	c1 ea 16             	shr    $0x16,%edx
  81058e:	8b 14 95 00 d0 7b ef 	mov    -0x10843000(,%edx,4),%edx
  810595:	f6 c2 01             	test   $0x1,%dl
  810598:	74 24                	je     8105be <fd_lookup+0x48>
  81059a:	89 c2                	mov    %eax,%edx
  81059c:	c1 ea 0c             	shr    $0xc,%edx
  81059f:	8b 14 95 00 00 40 ef 	mov    -0x10c00000(,%edx,4),%edx
  8105a6:	f6 c2 01             	test   $0x1,%dl
  8105a9:	74 1a                	je     8105c5 <fd_lookup+0x4f>
		if (debug)
			cprintf("[%08x] closed fd %d\n", thisenv->env_id, fdnum);
		return -E_INVAL;
	}
	*fd_store = fd;
  8105ab:	8b 55 0c             	mov    0xc(%ebp),%edx
  8105ae:	89 02                	mov    %eax,(%edx)
	return 0;
  8105b0:	b8 00 00 00 00       	mov    $0x0,%eax
  8105b5:	eb 13                	jmp    8105ca <fd_lookup+0x54>
	struct Fd *fd;

	if (fdnum < 0 || fdnum >= MAXFD) {
		if (debug)
			cprintf("[%08x] bad fd %d\n", thisenv->env_id, fdnum);
		return -E_INVAL;
  8105b7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8105bc:	eb 0c                	jmp    8105ca <fd_lookup+0x54>
	}
	fd = INDEX2FD(fdnum);
	if (!(uvpd[PDX(fd)] & PTE_P) || !(uvpt[PGNUM(fd)] & PTE_P)) {
		if (debug)
			cprintf("[%08x] closed fd %d\n", thisenv->env_id, fdnum);
		return -E_INVAL;
  8105be:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8105c3:	eb 05                	jmp    8105ca <fd_lookup+0x54>
  8105c5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
	}
	*fd_store = fd;
	return 0;
}
  8105ca:	5d                   	pop    %ebp
  8105cb:	c3                   	ret    

008105cc <dev_lookup>:
	0
};

int
dev_lookup(int dev_id, struct Dev **dev)
{
  8105cc:	55                   	push   %ebp
  8105cd:	89 e5                	mov    %esp,%ebp
  8105cf:	83 ec 18             	sub    $0x18,%esp
  8105d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
	int i;
	for (i = 0; devtab[i]; i++)
  8105d5:	ba 00 00 00 00       	mov    $0x0,%edx
  8105da:	eb 13                	jmp    8105ef <dev_lookup+0x23>
		if (devtab[i]->dev_id == dev_id) {
  8105dc:	39 08                	cmp    %ecx,(%eax)
  8105de:	75 0c                	jne    8105ec <dev_lookup+0x20>
			*dev = devtab[i];
  8105e0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  8105e3:	89 01                	mov    %eax,(%ecx)
			return 0;
  8105e5:	b8 00 00 00 00       	mov    $0x0,%eax
  8105ea:	eb 38                	jmp    810624 <dev_lookup+0x58>

int
dev_lookup(int dev_id, struct Dev **dev)
{
	int i;
	for (i = 0; devtab[i]; i++)
  8105ec:	83 c2 01             	add    $0x1,%edx
  8105ef:	8b 04 95 c0 48 81 00 	mov    0x8148c0(,%edx,4),%eax
  8105f6:	85 c0                	test   %eax,%eax
  8105f8:	75 e2                	jne    8105dc <dev_lookup+0x10>
		if (devtab[i]->dev_id == dev_id) {
			*dev = devtab[i];
			return 0;
		}
	cprintf("[%08x] unknown device type %d\n", thisenv->env_id, dev_id);
  8105fa:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  8105ff:	8b 40 48             	mov    0x48(%eax),%eax
  810602:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  810606:	89 44 24 04          	mov    %eax,0x4(%esp)
  81060a:	c7 04 24 44 48 81 00 	movl   $0x814844,(%esp)
  810611:	e8 71 eb ff ff       	call   80f187 <cprintf>
	*dev = 0;
  810616:	8b 45 0c             	mov    0xc(%ebp),%eax
  810619:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return -E_INVAL;
  81061f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
  810624:	c9                   	leave  
  810625:	c3                   	ret    

00810626 <fd_close>:
// If 'must_exist' is 1, then fd_close returns -E_INVAL when passed a
// closed or nonexistent file descriptor.
// Returns 0 on success, < 0 on error.
int
fd_close(struct Fd *fd, bool must_exist)
{
  810626:	55                   	push   %ebp
  810627:	89 e5                	mov    %esp,%ebp
  810629:	56                   	push   %esi
  81062a:	53                   	push   %ebx
  81062b:	83 ec 20             	sub    $0x20,%esp
  81062e:	8b 75 08             	mov    0x8(%ebp),%esi
  810631:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct Fd *fd2;
	struct Dev *dev;
	int r;
	if ((r = fd_lookup(fd2num(fd), &fd2)) < 0
  810634:	8d 45 f4             	lea    -0xc(%ebp),%eax
  810637:	89 44 24 04          	mov    %eax,0x4(%esp)
// --------------------------------------------------------------

int
fd2num(struct Fd *fd)
{
	return ((uintptr_t) fd - FDTABLE) / PGSIZE;
  81063b:	8d 86 00 00 00 30    	lea    0x30000000(%esi),%eax
  810641:	c1 e8 0c             	shr    $0xc,%eax
fd_close(struct Fd *fd, bool must_exist)
{
	struct Fd *fd2;
	struct Dev *dev;
	int r;
	if ((r = fd_lookup(fd2num(fd), &fd2)) < 0
  810644:	89 04 24             	mov    %eax,(%esp)
  810647:	e8 2a ff ff ff       	call   810576 <fd_lookup>
  81064c:	85 c0                	test   %eax,%eax
  81064e:	78 05                	js     810655 <fd_close+0x2f>
	    || fd != fd2)
  810650:	3b 75 f4             	cmp    -0xc(%ebp),%esi
  810653:	74 0c                	je     810661 <fd_close+0x3b>
		return (must_exist ? r : 0);
  810655:	84 db                	test   %bl,%bl
  810657:	ba 00 00 00 00       	mov    $0x0,%edx
  81065c:	0f 44 c2             	cmove  %edx,%eax
  81065f:	eb 3f                	jmp    8106a0 <fd_close+0x7a>
	if ((r = dev_lookup(fd->fd_dev_id, &dev)) >= 0) {
  810661:	8d 45 f0             	lea    -0x10(%ebp),%eax
  810664:	89 44 24 04          	mov    %eax,0x4(%esp)
  810668:	8b 06                	mov    (%esi),%eax
  81066a:	89 04 24             	mov    %eax,(%esp)
  81066d:	e8 5a ff ff ff       	call   8105cc <dev_lookup>
  810672:	89 c3                	mov    %eax,%ebx
  810674:	85 c0                	test   %eax,%eax
  810676:	78 16                	js     81068e <fd_close+0x68>
		if (dev->dev_close)
  810678:	8b 45 f0             	mov    -0x10(%ebp),%eax
  81067b:	8b 40 10             	mov    0x10(%eax),%eax
			r = (*dev->dev_close)(fd);
		else
			r = 0;
  81067e:	bb 00 00 00 00       	mov    $0x0,%ebx
	int r;
	if ((r = fd_lookup(fd2num(fd), &fd2)) < 0
	    || fd != fd2)
		return (must_exist ? r : 0);
	if ((r = dev_lookup(fd->fd_dev_id, &dev)) >= 0) {
		if (dev->dev_close)
  810683:	85 c0                	test   %eax,%eax
  810685:	74 07                	je     81068e <fd_close+0x68>
			r = (*dev->dev_close)(fd);
  810687:	89 34 24             	mov    %esi,(%esp)
  81068a:	ff d0                	call   *%eax
  81068c:	89 c3                	mov    %eax,%ebx
		else
			r = 0;
	}
	// Make sure fd is unmapped.  Might be a no-op if
	// (*dev->dev_close)(fd) already unmapped it.
	(void) sys_page_unmap(0, fd);
  81068e:	89 74 24 04          	mov    %esi,0x4(%esp)
  810692:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  810699:	e8 dc f5 ff ff       	call   80fc7a <sys_page_unmap>
	return r;
  81069e:	89 d8                	mov    %ebx,%eax
}
  8106a0:	83 c4 20             	add    $0x20,%esp
  8106a3:	5b                   	pop    %ebx
  8106a4:	5e                   	pop    %esi
  8106a5:	5d                   	pop    %ebp
  8106a6:	c3                   	ret    

008106a7 <close>:
	return -E_INVAL;
}

int
close(int fdnum)
{
  8106a7:	55                   	push   %ebp
  8106a8:	89 e5                	mov    %esp,%ebp
  8106aa:	83 ec 28             	sub    $0x28,%esp
	struct Fd *fd;
	int r;

	if ((r = fd_lookup(fdnum, &fd)) < 0)
  8106ad:	8d 45 f4             	lea    -0xc(%ebp),%eax
  8106b0:	89 44 24 04          	mov    %eax,0x4(%esp)
  8106b4:	8b 45 08             	mov    0x8(%ebp),%eax
  8106b7:	89 04 24             	mov    %eax,(%esp)
  8106ba:	e8 b7 fe ff ff       	call   810576 <fd_lookup>
  8106bf:	89 c2                	mov    %eax,%edx
  8106c1:	85 d2                	test   %edx,%edx
  8106c3:	78 13                	js     8106d8 <close+0x31>
		return r;
	else
		return fd_close(fd, 1);
  8106c5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  8106cc:	00 
  8106cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  8106d0:	89 04 24             	mov    %eax,(%esp)
  8106d3:	e8 4e ff ff ff       	call   810626 <fd_close>
}
  8106d8:	c9                   	leave  
  8106d9:	c3                   	ret    

008106da <close_all>:

void
close_all(void)
{
  8106da:	55                   	push   %ebp
  8106db:	89 e5                	mov    %esp,%ebp
  8106dd:	53                   	push   %ebx
  8106de:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < MAXFD; i++)
  8106e1:	bb 00 00 00 00       	mov    $0x0,%ebx
		close(i);
  8106e6:	89 1c 24             	mov    %ebx,(%esp)
  8106e9:	e8 b9 ff ff ff       	call   8106a7 <close>

void
close_all(void)
{
	int i;
	for (i = 0; i < MAXFD; i++)
  8106ee:	83 c3 01             	add    $0x1,%ebx
  8106f1:	83 fb 20             	cmp    $0x20,%ebx
  8106f4:	75 f0                	jne    8106e6 <close_all+0xc>
		close(i);
}
  8106f6:	83 c4 14             	add    $0x14,%esp
  8106f9:	5b                   	pop    %ebx
  8106fa:	5d                   	pop    %ebp
  8106fb:	c3                   	ret    

008106fc <dup>:
// file and the file offset of the other.
// Closes any previously open file descriptor at 'newfdnum'.
// This is implemented using virtual memory tricks (of course!).
int
dup(int oldfdnum, int newfdnum)
{
  8106fc:	55                   	push   %ebp
  8106fd:	89 e5                	mov    %esp,%ebp
  8106ff:	57                   	push   %edi
  810700:	56                   	push   %esi
  810701:	53                   	push   %ebx
  810702:	83 ec 3c             	sub    $0x3c,%esp
	int r;
	char *ova, *nva;
	pte_t pte;
	struct Fd *oldfd, *newfd;

	if ((r = fd_lookup(oldfdnum, &oldfd)) < 0)
  810705:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  810708:	89 44 24 04          	mov    %eax,0x4(%esp)
  81070c:	8b 45 08             	mov    0x8(%ebp),%eax
  81070f:	89 04 24             	mov    %eax,(%esp)
  810712:	e8 5f fe ff ff       	call   810576 <fd_lookup>
  810717:	89 c2                	mov    %eax,%edx
  810719:	85 d2                	test   %edx,%edx
  81071b:	0f 88 e1 00 00 00    	js     810802 <dup+0x106>
		return r;
	close(newfdnum);
  810721:	8b 45 0c             	mov    0xc(%ebp),%eax
  810724:	89 04 24             	mov    %eax,(%esp)
  810727:	e8 7b ff ff ff       	call   8106a7 <close>

	newfd = INDEX2FD(newfdnum);
  81072c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  81072f:	c1 e3 0c             	shl    $0xc,%ebx
  810732:	81 eb 00 00 00 30    	sub    $0x30000000,%ebx
	ova = fd2data(oldfd);
  810738:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  81073b:	89 04 24             	mov    %eax,(%esp)
  81073e:	e8 cd fd ff ff       	call   810510 <fd2data>
  810743:	89 c6                	mov    %eax,%esi
	nva = fd2data(newfd);
  810745:	89 1c 24             	mov    %ebx,(%esp)
  810748:	e8 c3 fd ff ff       	call   810510 <fd2data>
  81074d:	89 c7                	mov    %eax,%edi

	if ((uvpd[PDX(ova)] & PTE_P) && (uvpt[PGNUM(ova)] & PTE_P))
  81074f:	89 f0                	mov    %esi,%eax
  810751:	c1 e8 16             	shr    $0x16,%eax
  810754:	8b 04 85 00 d0 7b ef 	mov    -0x10843000(,%eax,4),%eax
  81075b:	a8 01                	test   $0x1,%al
  81075d:	74 43                	je     8107a2 <dup+0xa6>
  81075f:	89 f0                	mov    %esi,%eax
  810761:	c1 e8 0c             	shr    $0xc,%eax
  810764:	8b 14 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%edx
  81076b:	f6 c2 01             	test   $0x1,%dl
  81076e:	74 32                	je     8107a2 <dup+0xa6>
		if ((r = sys_page_map(0, ova, 0, nva, uvpt[PGNUM(ova)] & PTE_SYSCALL)) < 0)
  810770:	8b 04 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%eax
  810777:	25 07 0e 00 00       	and    $0xe07,%eax
  81077c:	89 44 24 10          	mov    %eax,0x10(%esp)
  810780:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  810784:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  81078b:	00 
  81078c:	89 74 24 04          	mov    %esi,0x4(%esp)
  810790:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  810797:	e8 8b f4 ff ff       	call   80fc27 <sys_page_map>
  81079c:	89 c6                	mov    %eax,%esi
  81079e:	85 c0                	test   %eax,%eax
  8107a0:	78 3e                	js     8107e0 <dup+0xe4>
			goto err;
	if ((r = sys_page_map(0, oldfd, 0, newfd, uvpt[PGNUM(oldfd)] & PTE_SYSCALL)) < 0)
  8107a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8107a5:	89 c2                	mov    %eax,%edx
  8107a7:	c1 ea 0c             	shr    $0xc,%edx
  8107aa:	8b 14 95 00 00 40 ef 	mov    -0x10c00000(,%edx,4),%edx
  8107b1:	81 e2 07 0e 00 00    	and    $0xe07,%edx
  8107b7:	89 54 24 10          	mov    %edx,0x10(%esp)
  8107bb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  8107bf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8107c6:	00 
  8107c7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8107cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8107d2:	e8 50 f4 ff ff       	call   80fc27 <sys_page_map>
  8107d7:	89 c6                	mov    %eax,%esi
		goto err;

	return newfdnum;
  8107d9:	8b 45 0c             	mov    0xc(%ebp),%eax
	nva = fd2data(newfd);

	if ((uvpd[PDX(ova)] & PTE_P) && (uvpt[PGNUM(ova)] & PTE_P))
		if ((r = sys_page_map(0, ova, 0, nva, uvpt[PGNUM(ova)] & PTE_SYSCALL)) < 0)
			goto err;
	if ((r = sys_page_map(0, oldfd, 0, newfd, uvpt[PGNUM(oldfd)] & PTE_SYSCALL)) < 0)
  8107dc:	85 f6                	test   %esi,%esi
  8107de:	79 22                	jns    810802 <dup+0x106>
		goto err;

	return newfdnum;

err:
	sys_page_unmap(0, newfd);
  8107e0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8107e4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8107eb:	e8 8a f4 ff ff       	call   80fc7a <sys_page_unmap>
	sys_page_unmap(0, nva);
  8107f0:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8107f4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8107fb:	e8 7a f4 ff ff       	call   80fc7a <sys_page_unmap>
	return r;
  810800:	89 f0                	mov    %esi,%eax
}
  810802:	83 c4 3c             	add    $0x3c,%esp
  810805:	5b                   	pop    %ebx
  810806:	5e                   	pop    %esi
  810807:	5f                   	pop    %edi
  810808:	5d                   	pop    %ebp
  810809:	c3                   	ret    

0081080a <read>:

ssize_t
read(int fdnum, void *buf, size_t n)
{
  81080a:	55                   	push   %ebp
  81080b:	89 e5                	mov    %esp,%ebp
  81080d:	53                   	push   %ebx
  81080e:	83 ec 24             	sub    $0x24,%esp
  810811:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int r;
	struct Dev *dev;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0
  810814:	8d 45 f0             	lea    -0x10(%ebp),%eax
  810817:	89 44 24 04          	mov    %eax,0x4(%esp)
  81081b:	89 1c 24             	mov    %ebx,(%esp)
  81081e:	e8 53 fd ff ff       	call   810576 <fd_lookup>
  810823:	89 c2                	mov    %eax,%edx
  810825:	85 d2                	test   %edx,%edx
  810827:	78 6d                	js     810896 <read+0x8c>
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
  810829:	8d 45 f4             	lea    -0xc(%ebp),%eax
  81082c:	89 44 24 04          	mov    %eax,0x4(%esp)
  810830:	8b 45 f0             	mov    -0x10(%ebp),%eax
  810833:	8b 00                	mov    (%eax),%eax
  810835:	89 04 24             	mov    %eax,(%esp)
  810838:	e8 8f fd ff ff       	call   8105cc <dev_lookup>
  81083d:	85 c0                	test   %eax,%eax
  81083f:	78 55                	js     810896 <read+0x8c>
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_WRONLY) {
  810841:	8b 45 f0             	mov    -0x10(%ebp),%eax
  810844:	8b 50 08             	mov    0x8(%eax),%edx
  810847:	83 e2 03             	and    $0x3,%edx
  81084a:	83 fa 01             	cmp    $0x1,%edx
  81084d:	75 23                	jne    810872 <read+0x68>
		cprintf("[%08x] read %d -- bad mode\n", thisenv->env_id, fdnum);
  81084f:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  810854:	8b 40 48             	mov    0x48(%eax),%eax
  810857:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  81085b:	89 44 24 04          	mov    %eax,0x4(%esp)
  81085f:	c7 04 24 85 48 81 00 	movl   $0x814885,(%esp)
  810866:	e8 1c e9 ff ff       	call   80f187 <cprintf>
		return -E_INVAL;
  81086b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  810870:	eb 24                	jmp    810896 <read+0x8c>
	}
	if (!dev->dev_read)
  810872:	8b 55 f4             	mov    -0xc(%ebp),%edx
  810875:	8b 52 08             	mov    0x8(%edx),%edx
  810878:	85 d2                	test   %edx,%edx
  81087a:	74 15                	je     810891 <read+0x87>
		return -E_NOT_SUPP;
	return (*dev->dev_read)(fd, buf, n);
  81087c:	8b 4d 10             	mov    0x10(%ebp),%ecx
  81087f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  810883:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  810886:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  81088a:	89 04 24             	mov    %eax,(%esp)
  81088d:	ff d2                	call   *%edx
  81088f:	eb 05                	jmp    810896 <read+0x8c>
	if ((fd->fd_omode & O_ACCMODE) == O_WRONLY) {
		cprintf("[%08x] read %d -- bad mode\n", thisenv->env_id, fdnum);
		return -E_INVAL;
	}
	if (!dev->dev_read)
		return -E_NOT_SUPP;
  810891:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
	return (*dev->dev_read)(fd, buf, n);
}
  810896:	83 c4 24             	add    $0x24,%esp
  810899:	5b                   	pop    %ebx
  81089a:	5d                   	pop    %ebp
  81089b:	c3                   	ret    

0081089c <readn>:

ssize_t
readn(int fdnum, void *buf, size_t n)
{
  81089c:	55                   	push   %ebp
  81089d:	89 e5                	mov    %esp,%ebp
  81089f:	57                   	push   %edi
  8108a0:	56                   	push   %esi
  8108a1:	53                   	push   %ebx
  8108a2:	83 ec 1c             	sub    $0x1c,%esp
  8108a5:	8b 7d 08             	mov    0x8(%ebp),%edi
  8108a8:	8b 75 10             	mov    0x10(%ebp),%esi
	int m, tot;

	for (tot = 0; tot < n; tot += m) {
  8108ab:	bb 00 00 00 00       	mov    $0x0,%ebx
  8108b0:	eb 23                	jmp    8108d5 <readn+0x39>
		m = read(fdnum, (char*)buf + tot, n - tot);
  8108b2:	89 f0                	mov    %esi,%eax
  8108b4:	29 d8                	sub    %ebx,%eax
  8108b6:	89 44 24 08          	mov    %eax,0x8(%esp)
  8108ba:	89 d8                	mov    %ebx,%eax
  8108bc:	03 45 0c             	add    0xc(%ebp),%eax
  8108bf:	89 44 24 04          	mov    %eax,0x4(%esp)
  8108c3:	89 3c 24             	mov    %edi,(%esp)
  8108c6:	e8 3f ff ff ff       	call   81080a <read>
		if (m < 0)
  8108cb:	85 c0                	test   %eax,%eax
  8108cd:	78 10                	js     8108df <readn+0x43>
			return m;
		if (m == 0)
  8108cf:	85 c0                	test   %eax,%eax
  8108d1:	74 0a                	je     8108dd <readn+0x41>
ssize_t
readn(int fdnum, void *buf, size_t n)
{
	int m, tot;

	for (tot = 0; tot < n; tot += m) {
  8108d3:	01 c3                	add    %eax,%ebx
  8108d5:	39 f3                	cmp    %esi,%ebx
  8108d7:	72 d9                	jb     8108b2 <readn+0x16>
  8108d9:	89 d8                	mov    %ebx,%eax
  8108db:	eb 02                	jmp    8108df <readn+0x43>
  8108dd:	89 d8                	mov    %ebx,%eax
			return m;
		if (m == 0)
			break;
	}
	return tot;
}
  8108df:	83 c4 1c             	add    $0x1c,%esp
  8108e2:	5b                   	pop    %ebx
  8108e3:	5e                   	pop    %esi
  8108e4:	5f                   	pop    %edi
  8108e5:	5d                   	pop    %ebp
  8108e6:	c3                   	ret    

008108e7 <write>:

ssize_t
write(int fdnum, const void *buf, size_t n)
{
  8108e7:	55                   	push   %ebp
  8108e8:	89 e5                	mov    %esp,%ebp
  8108ea:	53                   	push   %ebx
  8108eb:	83 ec 24             	sub    $0x24,%esp
  8108ee:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int r;
	struct Dev *dev;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0
  8108f1:	8d 45 f0             	lea    -0x10(%ebp),%eax
  8108f4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8108f8:	89 1c 24             	mov    %ebx,(%esp)
  8108fb:	e8 76 fc ff ff       	call   810576 <fd_lookup>
  810900:	89 c2                	mov    %eax,%edx
  810902:	85 d2                	test   %edx,%edx
  810904:	78 68                	js     81096e <write+0x87>
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
  810906:	8d 45 f4             	lea    -0xc(%ebp),%eax
  810909:	89 44 24 04          	mov    %eax,0x4(%esp)
  81090d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  810910:	8b 00                	mov    (%eax),%eax
  810912:	89 04 24             	mov    %eax,(%esp)
  810915:	e8 b2 fc ff ff       	call   8105cc <dev_lookup>
  81091a:	85 c0                	test   %eax,%eax
  81091c:	78 50                	js     81096e <write+0x87>
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_RDONLY) {
  81091e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  810921:	f6 40 08 03          	testb  $0x3,0x8(%eax)
  810925:	75 23                	jne    81094a <write+0x63>
		cprintf("[%08x] write %d -- bad mode\n", thisenv->env_id, fdnum);
  810927:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  81092c:	8b 40 48             	mov    0x48(%eax),%eax
  81092f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  810933:	89 44 24 04          	mov    %eax,0x4(%esp)
  810937:	c7 04 24 a1 48 81 00 	movl   $0x8148a1,(%esp)
  81093e:	e8 44 e8 ff ff       	call   80f187 <cprintf>
		return -E_INVAL;
  810943:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  810948:	eb 24                	jmp    81096e <write+0x87>
	}
	if (debug)
		cprintf("write %d %p %d via dev %s\n",
			fdnum, buf, n, dev->dev_name);
	if (!dev->dev_write)
  81094a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  81094d:	8b 52 0c             	mov    0xc(%edx),%edx
  810950:	85 d2                	test   %edx,%edx
  810952:	74 15                	je     810969 <write+0x82>
		return -E_NOT_SUPP;
	return (*dev->dev_write)(fd, buf, n);
  810954:	8b 4d 10             	mov    0x10(%ebp),%ecx
  810957:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  81095b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  81095e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  810962:	89 04 24             	mov    %eax,(%esp)
  810965:	ff d2                	call   *%edx
  810967:	eb 05                	jmp    81096e <write+0x87>
	}
	if (debug)
		cprintf("write %d %p %d via dev %s\n",
			fdnum, buf, n, dev->dev_name);
	if (!dev->dev_write)
		return -E_NOT_SUPP;
  810969:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
	return (*dev->dev_write)(fd, buf, n);
}
  81096e:	83 c4 24             	add    $0x24,%esp
  810971:	5b                   	pop    %ebx
  810972:	5d                   	pop    %ebp
  810973:	c3                   	ret    

00810974 <seek>:

int
seek(int fdnum, off_t offset)
{
  810974:	55                   	push   %ebp
  810975:	89 e5                	mov    %esp,%ebp
  810977:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0)
  81097a:	8d 45 fc             	lea    -0x4(%ebp),%eax
  81097d:	89 44 24 04          	mov    %eax,0x4(%esp)
  810981:	8b 45 08             	mov    0x8(%ebp),%eax
  810984:	89 04 24             	mov    %eax,(%esp)
  810987:	e8 ea fb ff ff       	call   810576 <fd_lookup>
  81098c:	85 c0                	test   %eax,%eax
  81098e:	78 0e                	js     81099e <seek+0x2a>
		return r;
	fd->fd_offset = offset;
  810990:	8b 45 fc             	mov    -0x4(%ebp),%eax
  810993:	8b 55 0c             	mov    0xc(%ebp),%edx
  810996:	89 50 04             	mov    %edx,0x4(%eax)
	return 0;
  810999:	b8 00 00 00 00       	mov    $0x0,%eax
}
  81099e:	c9                   	leave  
  81099f:	c3                   	ret    

008109a0 <ftruncate>:

int
ftruncate(int fdnum, off_t newsize)
{
  8109a0:	55                   	push   %ebp
  8109a1:	89 e5                	mov    %esp,%ebp
  8109a3:	53                   	push   %ebx
  8109a4:	83 ec 24             	sub    $0x24,%esp
  8109a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int r;
	struct Dev *dev;
	struct Fd *fd;
	if ((r = fd_lookup(fdnum, &fd)) < 0
  8109aa:	8d 45 f0             	lea    -0x10(%ebp),%eax
  8109ad:	89 44 24 04          	mov    %eax,0x4(%esp)
  8109b1:	89 1c 24             	mov    %ebx,(%esp)
  8109b4:	e8 bd fb ff ff       	call   810576 <fd_lookup>
  8109b9:	89 c2                	mov    %eax,%edx
  8109bb:	85 d2                	test   %edx,%edx
  8109bd:	78 61                	js     810a20 <ftruncate+0x80>
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
  8109bf:	8d 45 f4             	lea    -0xc(%ebp),%eax
  8109c2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8109c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  8109c9:	8b 00                	mov    (%eax),%eax
  8109cb:	89 04 24             	mov    %eax,(%esp)
  8109ce:	e8 f9 fb ff ff       	call   8105cc <dev_lookup>
  8109d3:	85 c0                	test   %eax,%eax
  8109d5:	78 49                	js     810a20 <ftruncate+0x80>
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_RDONLY) {
  8109d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  8109da:	f6 40 08 03          	testb  $0x3,0x8(%eax)
  8109de:	75 23                	jne    810a03 <ftruncate+0x63>
		cprintf("[%08x] ftruncate %d -- bad mode\n",
			thisenv->env_id, fdnum);
  8109e0:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
	struct Fd *fd;
	if ((r = fd_lookup(fdnum, &fd)) < 0
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_RDONLY) {
		cprintf("[%08x] ftruncate %d -- bad mode\n",
  8109e5:	8b 40 48             	mov    0x48(%eax),%eax
  8109e8:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  8109ec:	89 44 24 04          	mov    %eax,0x4(%esp)
  8109f0:	c7 04 24 64 48 81 00 	movl   $0x814864,(%esp)
  8109f7:	e8 8b e7 ff ff       	call   80f187 <cprintf>
			thisenv->env_id, fdnum);
		return -E_INVAL;
  8109fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  810a01:	eb 1d                	jmp    810a20 <ftruncate+0x80>
	}
	if (!dev->dev_trunc)
  810a03:	8b 55 f4             	mov    -0xc(%ebp),%edx
  810a06:	8b 52 18             	mov    0x18(%edx),%edx
  810a09:	85 d2                	test   %edx,%edx
  810a0b:	74 0e                	je     810a1b <ftruncate+0x7b>
		return -E_NOT_SUPP;
	return (*dev->dev_trunc)(fd, newsize);
  810a0d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  810a10:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  810a14:	89 04 24             	mov    %eax,(%esp)
  810a17:	ff d2                	call   *%edx
  810a19:	eb 05                	jmp    810a20 <ftruncate+0x80>
		cprintf("[%08x] ftruncate %d -- bad mode\n",
			thisenv->env_id, fdnum);
		return -E_INVAL;
	}
	if (!dev->dev_trunc)
		return -E_NOT_SUPP;
  810a1b:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
	return (*dev->dev_trunc)(fd, newsize);
}
  810a20:	83 c4 24             	add    $0x24,%esp
  810a23:	5b                   	pop    %ebx
  810a24:	5d                   	pop    %ebp
  810a25:	c3                   	ret    

00810a26 <fstat>:

int
fstat(int fdnum, struct Stat *stat)
{
  810a26:	55                   	push   %ebp
  810a27:	89 e5                	mov    %esp,%ebp
  810a29:	53                   	push   %ebx
  810a2a:	83 ec 24             	sub    $0x24,%esp
  810a2d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int r;
	struct Dev *dev;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0
  810a30:	8d 45 f0             	lea    -0x10(%ebp),%eax
  810a33:	89 44 24 04          	mov    %eax,0x4(%esp)
  810a37:	8b 45 08             	mov    0x8(%ebp),%eax
  810a3a:	89 04 24             	mov    %eax,(%esp)
  810a3d:	e8 34 fb ff ff       	call   810576 <fd_lookup>
  810a42:	89 c2                	mov    %eax,%edx
  810a44:	85 d2                	test   %edx,%edx
  810a46:	78 52                	js     810a9a <fstat+0x74>
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
  810a48:	8d 45 f4             	lea    -0xc(%ebp),%eax
  810a4b:	89 44 24 04          	mov    %eax,0x4(%esp)
  810a4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  810a52:	8b 00                	mov    (%eax),%eax
  810a54:	89 04 24             	mov    %eax,(%esp)
  810a57:	e8 70 fb ff ff       	call   8105cc <dev_lookup>
  810a5c:	85 c0                	test   %eax,%eax
  810a5e:	78 3a                	js     810a9a <fstat+0x74>
		return r;
	if (!dev->dev_stat)
  810a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
  810a63:	83 78 14 00          	cmpl   $0x0,0x14(%eax)
  810a67:	74 2c                	je     810a95 <fstat+0x6f>
		return -E_NOT_SUPP;
	stat->st_name[0] = 0;
  810a69:	c6 03 00             	movb   $0x0,(%ebx)
	stat->st_size = 0;
  810a6c:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  810a73:	00 00 00 
	stat->st_isdir = 0;
  810a76:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
  810a7d:	00 00 00 
	stat->st_dev = dev;
  810a80:	89 83 88 00 00 00    	mov    %eax,0x88(%ebx)
	return (*dev->dev_stat)(fd, stat);
  810a86:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  810a8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  810a8d:	89 14 24             	mov    %edx,(%esp)
  810a90:	ff 50 14             	call   *0x14(%eax)
  810a93:	eb 05                	jmp    810a9a <fstat+0x74>

	if ((r = fd_lookup(fdnum, &fd)) < 0
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
		return r;
	if (!dev->dev_stat)
		return -E_NOT_SUPP;
  810a95:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
	stat->st_name[0] = 0;
	stat->st_size = 0;
	stat->st_isdir = 0;
	stat->st_dev = dev;
	return (*dev->dev_stat)(fd, stat);
}
  810a9a:	83 c4 24             	add    $0x24,%esp
  810a9d:	5b                   	pop    %ebx
  810a9e:	5d                   	pop    %ebp
  810a9f:	c3                   	ret    

00810aa0 <stat>:

int
stat(const char *path, struct Stat *stat)
{
  810aa0:	55                   	push   %ebp
  810aa1:	89 e5                	mov    %esp,%ebp
  810aa3:	56                   	push   %esi
  810aa4:	53                   	push   %ebx
  810aa5:	83 ec 10             	sub    $0x10,%esp
	int fd, r;

	if ((fd = open(path, O_RDONLY)) < 0)
  810aa8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  810aaf:	00 
  810ab0:	8b 45 08             	mov    0x8(%ebp),%eax
  810ab3:	89 04 24             	mov    %eax,(%esp)
  810ab6:	e8 1b 02 00 00       	call   810cd6 <open>
  810abb:	89 c3                	mov    %eax,%ebx
  810abd:	85 db                	test   %ebx,%ebx
  810abf:	78 1b                	js     810adc <stat+0x3c>
		return fd;
	r = fstat(fd, stat);
  810ac1:	8b 45 0c             	mov    0xc(%ebp),%eax
  810ac4:	89 44 24 04          	mov    %eax,0x4(%esp)
  810ac8:	89 1c 24             	mov    %ebx,(%esp)
  810acb:	e8 56 ff ff ff       	call   810a26 <fstat>
  810ad0:	89 c6                	mov    %eax,%esi
	close(fd);
  810ad2:	89 1c 24             	mov    %ebx,(%esp)
  810ad5:	e8 cd fb ff ff       	call   8106a7 <close>
	return r;
  810ada:	89 f0                	mov    %esi,%eax
}
  810adc:	83 c4 10             	add    $0x10,%esp
  810adf:	5b                   	pop    %ebx
  810ae0:	5e                   	pop    %esi
  810ae1:	5d                   	pop    %ebp
  810ae2:	c3                   	ret    

00810ae3 <fsipc>:
// type: request code, passed as the simple integer IPC value.
// dstva: virtual address at which to receive reply page, 0 if none.
// Returns result from the file server.
static int
fsipc(unsigned type, void *dstva)
{
  810ae3:	55                   	push   %ebp
  810ae4:	89 e5                	mov    %esp,%ebp
  810ae6:	56                   	push   %esi
  810ae7:	53                   	push   %ebx
  810ae8:	83 ec 10             	sub    $0x10,%esp
  810aeb:	89 c6                	mov    %eax,%esi
  810aed:	89 d3                	mov    %edx,%ebx
	static envid_t fsenv;
	if (fsenv == 0)
  810aef:	83 3d ec c1 b3 00 00 	cmpl   $0x0,0xb3c1ec
  810af6:	75 11                	jne    810b09 <fsipc+0x26>
		fsenv = ipc_find_env(ENV_TYPE_FS);
  810af8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  810aff:	e8 bb f9 ff ff       	call   8104bf <ipc_find_env>
  810b04:	a3 ec c1 b3 00       	mov    %eax,0xb3c1ec
	static_assert(sizeof(fsipcbuf) == PGSIZE);

	if (debug)
		cprintf("[%08x] fsipc %d %08x\n", thisenv->env_id, type, *(uint32_t *)&fsipcbuf);

	ipc_send(fsenv, type, &fsipcbuf, PTE_P | PTE_W | PTE_U);
  810b09:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  810b10:	00 
  810b11:	c7 44 24 08 00 d0 b3 	movl   $0xb3d000,0x8(%esp)
  810b18:	00 
  810b19:	89 74 24 04          	mov    %esi,0x4(%esp)
  810b1d:	a1 ec c1 b3 00       	mov    0xb3c1ec,%eax
  810b22:	89 04 24             	mov    %eax,(%esp)
  810b25:	e8 2a f9 ff ff       	call   810454 <ipc_send>
	return ipc_recv(NULL, dstva, NULL);
  810b2a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  810b31:	00 
  810b32:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  810b36:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  810b3d:	e8 be f8 ff ff       	call   810400 <ipc_recv>
}
  810b42:	83 c4 10             	add    $0x10,%esp
  810b45:	5b                   	pop    %ebx
  810b46:	5e                   	pop    %esi
  810b47:	5d                   	pop    %ebp
  810b48:	c3                   	ret    

00810b49 <devfile_trunc>:
}

// Truncate or extend an open file to 'size' bytes
static int
devfile_trunc(struct Fd *fd, off_t newsize)
{
  810b49:	55                   	push   %ebp
  810b4a:	89 e5                	mov    %esp,%ebp
  810b4c:	83 ec 08             	sub    $0x8,%esp
	fsipcbuf.set_size.req_fileid = fd->fd_file.id;
  810b4f:	8b 45 08             	mov    0x8(%ebp),%eax
  810b52:	8b 40 0c             	mov    0xc(%eax),%eax
  810b55:	a3 00 d0 b3 00       	mov    %eax,0xb3d000
	fsipcbuf.set_size.req_size = newsize;
  810b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
  810b5d:	a3 04 d0 b3 00       	mov    %eax,0xb3d004
	return fsipc(FSREQ_SET_SIZE, NULL);
  810b62:	ba 00 00 00 00       	mov    $0x0,%edx
  810b67:	b8 02 00 00 00       	mov    $0x2,%eax
  810b6c:	e8 72 ff ff ff       	call   810ae3 <fsipc>
}
  810b71:	c9                   	leave  
  810b72:	c3                   	ret    

00810b73 <devfile_flush>:
// open, unmapping it is enough to free up server-side resources.
// Other than that, we just have to make sure our changes are flushed
// to disk.
static int
devfile_flush(struct Fd *fd)
{
  810b73:	55                   	push   %ebp
  810b74:	89 e5                	mov    %esp,%ebp
  810b76:	83 ec 08             	sub    $0x8,%esp
	fsipcbuf.flush.req_fileid = fd->fd_file.id;
  810b79:	8b 45 08             	mov    0x8(%ebp),%eax
  810b7c:	8b 40 0c             	mov    0xc(%eax),%eax
  810b7f:	a3 00 d0 b3 00       	mov    %eax,0xb3d000
	return fsipc(FSREQ_FLUSH, NULL);
  810b84:	ba 00 00 00 00       	mov    $0x0,%edx
  810b89:	b8 06 00 00 00       	mov    $0x6,%eax
  810b8e:	e8 50 ff ff ff       	call   810ae3 <fsipc>
}
  810b93:	c9                   	leave  
  810b94:	c3                   	ret    

00810b95 <devfile_stat>:
	return r;
}

static int
devfile_stat(struct Fd *fd, struct Stat *st)
{
  810b95:	55                   	push   %ebp
  810b96:	89 e5                	mov    %esp,%ebp
  810b98:	53                   	push   %ebx
  810b99:	83 ec 14             	sub    $0x14,%esp
  810b9c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int r;

	fsipcbuf.stat.req_fileid = fd->fd_file.id;
  810b9f:	8b 45 08             	mov    0x8(%ebp),%eax
  810ba2:	8b 40 0c             	mov    0xc(%eax),%eax
  810ba5:	a3 00 d0 b3 00       	mov    %eax,0xb3d000
	if ((r = fsipc(FSREQ_STAT, NULL)) < 0)
  810baa:	ba 00 00 00 00       	mov    $0x0,%edx
  810baf:	b8 05 00 00 00       	mov    $0x5,%eax
  810bb4:	e8 2a ff ff ff       	call   810ae3 <fsipc>
  810bb9:	89 c2                	mov    %eax,%edx
  810bbb:	85 d2                	test   %edx,%edx
  810bbd:	78 2b                	js     810bea <devfile_stat+0x55>
		return r;
	strcpy(st->st_name, fsipcbuf.statRet.ret_name);
  810bbf:	c7 44 24 04 00 d0 b3 	movl   $0xb3d000,0x4(%esp)
  810bc6:	00 
  810bc7:	89 1c 24             	mov    %ebx,(%esp)
  810bca:	e8 e8 eb ff ff       	call   80f7b7 <strcpy>
	st->st_size = fsipcbuf.statRet.ret_size;
  810bcf:	a1 80 d0 b3 00       	mov    0xb3d080,%eax
  810bd4:	89 83 80 00 00 00    	mov    %eax,0x80(%ebx)
	st->st_isdir = fsipcbuf.statRet.ret_isdir;
  810bda:	a1 84 d0 b3 00       	mov    0xb3d084,%eax
  810bdf:	89 83 84 00 00 00    	mov    %eax,0x84(%ebx)
	return 0;
  810be5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  810bea:	83 c4 14             	add    $0x14,%esp
  810bed:	5b                   	pop    %ebx
  810bee:	5d                   	pop    %ebp
  810bef:	c3                   	ret    

00810bf0 <devfile_write>:
// Returns:
//	 The number of bytes successfully written.
//	 < 0 on error.
static ssize_t
devfile_write(struct Fd *fd, const void *buf, size_t n)
{
  810bf0:	55                   	push   %ebp
  810bf1:	89 e5                	mov    %esp,%ebp
  810bf3:	83 ec 18             	sub    $0x18,%esp
  810bf6:	8b 45 10             	mov    0x10(%ebp),%eax
	// remember that write is always allowed to write *fewer*
	// bytes than requested.
	// LAB 5: Your code here
	int r;

	fsipcbuf.write.req_fileid = fd->fd_file.id;
  810bf9:	8b 55 08             	mov    0x8(%ebp),%edx
  810bfc:	8b 52 0c             	mov    0xc(%edx),%edx
  810bff:	89 15 00 d0 b3 00    	mov    %edx,0xb3d000
	fsipcbuf.write.req_n = n;
  810c05:	a3 04 d0 b3 00       	mov    %eax,0xb3d004
	
	memcpy(fsipcbuf.write.req_buf, buf, n);
  810c0a:	89 44 24 08          	mov    %eax,0x8(%esp)
  810c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
  810c11:	89 44 24 04          	mov    %eax,0x4(%esp)
  810c15:	c7 04 24 08 d0 b3 00 	movl   $0xb3d008,(%esp)
  810c1c:	e8 9b ed ff ff       	call   80f9bc <memcpy>

	if ((r = fsipc(FSREQ_WRITE, NULL)) < 0){
  810c21:	ba 00 00 00 00       	mov    $0x0,%edx
  810c26:	b8 04 00 00 00       	mov    $0x4,%eax
  810c2b:	e8 b3 fe ff ff       	call   810ae3 <fsipc>
		return r;
	}

	return r;
}
  810c30:	c9                   	leave  
  810c31:	c3                   	ret    

00810c32 <devfile_read>:
// Returns:
// 	The number of bytes successfully read.
// 	< 0 on error.
static ssize_t
devfile_read(struct Fd *fd, void *buf, size_t n)
{
  810c32:	55                   	push   %ebp
  810c33:	89 e5                	mov    %esp,%ebp
  810c35:	56                   	push   %esi
  810c36:	53                   	push   %ebx
  810c37:	83 ec 10             	sub    $0x10,%esp
  810c3a:	8b 75 10             	mov    0x10(%ebp),%esi
	// filling fsipcbuf.read with the request arguments.  The
	// bytes read will be written back to fsipcbuf by the file
	// system server.
	int r;

	fsipcbuf.read.req_fileid = fd->fd_file.id;
  810c3d:	8b 45 08             	mov    0x8(%ebp),%eax
  810c40:	8b 40 0c             	mov    0xc(%eax),%eax
  810c43:	a3 00 d0 b3 00       	mov    %eax,0xb3d000
	fsipcbuf.read.req_n = n;
  810c48:	89 35 04 d0 b3 00    	mov    %esi,0xb3d004
	if ((r = fsipc(FSREQ_READ, NULL)) < 0)
  810c4e:	ba 00 00 00 00       	mov    $0x0,%edx
  810c53:	b8 03 00 00 00       	mov    $0x3,%eax
  810c58:	e8 86 fe ff ff       	call   810ae3 <fsipc>
  810c5d:	89 c3                	mov    %eax,%ebx
  810c5f:	85 c0                	test   %eax,%eax
  810c61:	78 6a                	js     810ccd <devfile_read+0x9b>
		return r;
	assert(r <= n);
  810c63:	39 c6                	cmp    %eax,%esi
  810c65:	73 24                	jae    810c8b <devfile_read+0x59>
  810c67:	c7 44 24 0c d4 48 81 	movl   $0x8148d4,0xc(%esp)
  810c6e:	00 
  810c6f:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  810c76:	00 
  810c77:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
  810c7e:	00 
  810c7f:	c7 04 24 db 48 81 00 	movl   $0x8148db,(%esp)
  810c86:	e8 03 e4 ff ff       	call   80f08e <_panic>
	assert(r <= PGSIZE);
  810c8b:	3d 00 10 00 00       	cmp    $0x1000,%eax
  810c90:	7e 24                	jle    810cb6 <devfile_read+0x84>
  810c92:	c7 44 24 0c e6 48 81 	movl   $0x8148e6,0xc(%esp)
  810c99:	00 
  810c9a:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  810ca1:	00 
  810ca2:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
  810ca9:	00 
  810caa:	c7 04 24 db 48 81 00 	movl   $0x8148db,(%esp)
  810cb1:	e8 d8 e3 ff ff       	call   80f08e <_panic>
	memmove(buf, fsipcbuf.readRet.ret_buf, r);
  810cb6:	89 44 24 08          	mov    %eax,0x8(%esp)
  810cba:	c7 44 24 04 00 d0 b3 	movl   $0xb3d000,0x4(%esp)
  810cc1:	00 
  810cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
  810cc5:	89 04 24             	mov    %eax,(%esp)
  810cc8:	e8 87 ec ff ff       	call   80f954 <memmove>
	return r;
}
  810ccd:	89 d8                	mov    %ebx,%eax
  810ccf:	83 c4 10             	add    $0x10,%esp
  810cd2:	5b                   	pop    %ebx
  810cd3:	5e                   	pop    %esi
  810cd4:	5d                   	pop    %ebp
  810cd5:	c3                   	ret    

00810cd6 <open>:
// 	The file descriptor index on success
// 	-E_BAD_PATH if the path is too long (>= MAXPATHLEN)
// 	< 0 for other errors.
int
open(const char *path, int mode)
{
  810cd6:	55                   	push   %ebp
  810cd7:	89 e5                	mov    %esp,%ebp
  810cd9:	53                   	push   %ebx
  810cda:	83 ec 24             	sub    $0x24,%esp
  810cdd:	8b 5d 08             	mov    0x8(%ebp),%ebx
	// file descriptor.

	int r;
	struct Fd *fd;

	if (strlen(path) >= MAXPATHLEN)
  810ce0:	89 1c 24             	mov    %ebx,(%esp)
  810ce3:	e8 98 ea ff ff       	call   80f780 <strlen>
  810ce8:	3d ff 03 00 00       	cmp    $0x3ff,%eax
  810ced:	7f 60                	jg     810d4f <open+0x79>
		return -E_BAD_PATH;

	if ((r = fd_alloc(&fd)) < 0)
  810cef:	8d 45 f4             	lea    -0xc(%ebp),%eax
  810cf2:	89 04 24             	mov    %eax,(%esp)
  810cf5:	e8 2d f8 ff ff       	call   810527 <fd_alloc>
  810cfa:	89 c2                	mov    %eax,%edx
  810cfc:	85 d2                	test   %edx,%edx
  810cfe:	78 54                	js     810d54 <open+0x7e>
		return r;

	strcpy(fsipcbuf.open.req_path, path);
  810d00:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  810d04:	c7 04 24 00 d0 b3 00 	movl   $0xb3d000,(%esp)
  810d0b:	e8 a7 ea ff ff       	call   80f7b7 <strcpy>
	fsipcbuf.open.req_omode = mode;
  810d10:	8b 45 0c             	mov    0xc(%ebp),%eax
  810d13:	a3 00 d4 b3 00       	mov    %eax,0xb3d400

	if ((r = fsipc(FSREQ_OPEN, fd)) < 0) {
  810d18:	8b 55 f4             	mov    -0xc(%ebp),%edx
  810d1b:	b8 01 00 00 00       	mov    $0x1,%eax
  810d20:	e8 be fd ff ff       	call   810ae3 <fsipc>
  810d25:	89 c3                	mov    %eax,%ebx
  810d27:	85 c0                	test   %eax,%eax
  810d29:	79 17                	jns    810d42 <open+0x6c>
		fd_close(fd, 0);
  810d2b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  810d32:	00 
  810d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
  810d36:	89 04 24             	mov    %eax,(%esp)
  810d39:	e8 e8 f8 ff ff       	call   810626 <fd_close>
		return r;
  810d3e:	89 d8                	mov    %ebx,%eax
  810d40:	eb 12                	jmp    810d54 <open+0x7e>
	}

	return fd2num(fd);
  810d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
  810d45:	89 04 24             	mov    %eax,(%esp)
  810d48:	e8 b3 f7 ff ff       	call   810500 <fd2num>
  810d4d:	eb 05                	jmp    810d54 <open+0x7e>

	int r;
	struct Fd *fd;

	if (strlen(path) >= MAXPATHLEN)
		return -E_BAD_PATH;
  810d4f:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
		fd_close(fd, 0);
		return r;
	}

	return fd2num(fd);
}
  810d54:	83 c4 24             	add    $0x24,%esp
  810d57:	5b                   	pop    %ebx
  810d58:	5d                   	pop    %ebp
  810d59:	c3                   	ret    

00810d5a <sync>:


// Synchronize disk with buffer cache
int
sync(void)
{
  810d5a:	55                   	push   %ebp
  810d5b:	89 e5                	mov    %esp,%ebp
  810d5d:	83 ec 08             	sub    $0x8,%esp
	// Ask the file server to update the disk
	// by writing any dirty blocks in the buffer cache.

	return fsipc(FSREQ_SYNC, NULL);
  810d60:	ba 00 00 00 00       	mov    $0x0,%edx
  810d65:	b8 08 00 00 00       	mov    $0x8,%eax
  810d6a:	e8 74 fd ff ff       	call   810ae3 <fsipc>
}
  810d6f:	c9                   	leave  
  810d70:	c3                   	ret    
  810d71:	66 90                	xchg   %ax,%ax
  810d73:	66 90                	xchg   %ax,%ax
  810d75:	66 90                	xchg   %ax,%ax
  810d77:	66 90                	xchg   %ax,%ax
  810d79:	66 90                	xchg   %ax,%ax
  810d7b:	66 90                	xchg   %ax,%ax
  810d7d:	66 90                	xchg   %ax,%ax
  810d7f:	90                   	nop

00810d80 <devsock_stat>:
	return nsipc_send(fd->fd_sock.sockid, buf, n, 0);
}

static int
devsock_stat(struct Fd *fd, struct Stat *stat)
{
  810d80:	55                   	push   %ebp
  810d81:	89 e5                	mov    %esp,%ebp
  810d83:	83 ec 18             	sub    $0x18,%esp
	strcpy(stat->st_name, "<sock>");
  810d86:	c7 44 24 04 f2 48 81 	movl   $0x8148f2,0x4(%esp)
  810d8d:	00 
  810d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
  810d91:	89 04 24             	mov    %eax,(%esp)
  810d94:	e8 1e ea ff ff       	call   80f7b7 <strcpy>
	return 0;
}
  810d99:	b8 00 00 00 00       	mov    $0x0,%eax
  810d9e:	c9                   	leave  
  810d9f:	c3                   	ret    

00810da0 <devsock_close>:
	return nsipc_shutdown(r, how);
}

static int
devsock_close(struct Fd *fd)
{
  810da0:	55                   	push   %ebp
  810da1:	89 e5                	mov    %esp,%ebp
  810da3:	53                   	push   %ebx
  810da4:	83 ec 14             	sub    $0x14,%esp
  810da7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (pageref(fd) == 1)
  810daa:	89 1c 24             	mov    %ebx,(%esp)
  810dad:	e8 51 0d 00 00       	call   811b03 <pageref>
		return nsipc_close(fd->fd_sock.sockid);
	else
		return 0;
  810db2:	ba 00 00 00 00       	mov    $0x0,%edx
}

static int
devsock_close(struct Fd *fd)
{
	if (pageref(fd) == 1)
  810db7:	83 f8 01             	cmp    $0x1,%eax
  810dba:	75 0d                	jne    810dc9 <devsock_close+0x29>
		return nsipc_close(fd->fd_sock.sockid);
  810dbc:	8b 43 0c             	mov    0xc(%ebx),%eax
  810dbf:	89 04 24             	mov    %eax,(%esp)
  810dc2:	e8 29 03 00 00       	call   8110f0 <nsipc_close>
  810dc7:	89 c2                	mov    %eax,%edx
	else
		return 0;
}
  810dc9:	89 d0                	mov    %edx,%eax
  810dcb:	83 c4 14             	add    $0x14,%esp
  810dce:	5b                   	pop    %ebx
  810dcf:	5d                   	pop    %ebp
  810dd0:	c3                   	ret    

00810dd1 <devsock_write>:
	return nsipc_recv(fd->fd_sock.sockid, buf, n, 0);
}

static ssize_t
devsock_write(struct Fd *fd, const void *buf, size_t n)
{
  810dd1:	55                   	push   %ebp
  810dd2:	89 e5                	mov    %esp,%ebp
  810dd4:	83 ec 18             	sub    $0x18,%esp
	return nsipc_send(fd->fd_sock.sockid, buf, n, 0);
  810dd7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  810dde:	00 
  810ddf:	8b 45 10             	mov    0x10(%ebp),%eax
  810de2:	89 44 24 08          	mov    %eax,0x8(%esp)
  810de6:	8b 45 0c             	mov    0xc(%ebp),%eax
  810de9:	89 44 24 04          	mov    %eax,0x4(%esp)
  810ded:	8b 45 08             	mov    0x8(%ebp),%eax
  810df0:	8b 40 0c             	mov    0xc(%eax),%eax
  810df3:	89 04 24             	mov    %eax,(%esp)
  810df6:	e8 f0 03 00 00       	call   8111eb <nsipc_send>
}
  810dfb:	c9                   	leave  
  810dfc:	c3                   	ret    

00810dfd <devsock_read>:
	return nsipc_listen(r, backlog);
}

static ssize_t
devsock_read(struct Fd *fd, void *buf, size_t n)
{
  810dfd:	55                   	push   %ebp
  810dfe:	89 e5                	mov    %esp,%ebp
  810e00:	83 ec 18             	sub    $0x18,%esp
	return nsipc_recv(fd->fd_sock.sockid, buf, n, 0);
  810e03:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  810e0a:	00 
  810e0b:	8b 45 10             	mov    0x10(%ebp),%eax
  810e0e:	89 44 24 08          	mov    %eax,0x8(%esp)
  810e12:	8b 45 0c             	mov    0xc(%ebp),%eax
  810e15:	89 44 24 04          	mov    %eax,0x4(%esp)
  810e19:	8b 45 08             	mov    0x8(%ebp),%eax
  810e1c:	8b 40 0c             	mov    0xc(%eax),%eax
  810e1f:	89 04 24             	mov    %eax,(%esp)
  810e22:	e8 44 03 00 00       	call   81116b <nsipc_recv>
}
  810e27:	c9                   	leave  
  810e28:	c3                   	ret    

00810e29 <fd2sockid>:
	.dev_stat =	devsock_stat,
};

static int
fd2sockid(int fd)
{
  810e29:	55                   	push   %ebp
  810e2a:	89 e5                	mov    %esp,%ebp
  810e2c:	83 ec 28             	sub    $0x28,%esp
	struct Fd *sfd;
	int r;

	if ((r = fd_lookup(fd, &sfd)) < 0)
  810e2f:	8d 55 f4             	lea    -0xc(%ebp),%edx
  810e32:	89 54 24 04          	mov    %edx,0x4(%esp)
  810e36:	89 04 24             	mov    %eax,(%esp)
  810e39:	e8 38 f7 ff ff       	call   810576 <fd_lookup>
  810e3e:	85 c0                	test   %eax,%eax
  810e40:	78 17                	js     810e59 <fd2sockid+0x30>
		return r;
	if (sfd->fd_dev_id != devsock.dev_id)
  810e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
  810e45:	8b 0d 08 53 81 00    	mov    0x815308,%ecx
  810e4b:	39 08                	cmp    %ecx,(%eax)
  810e4d:	75 05                	jne    810e54 <fd2sockid+0x2b>
		return -E_NOT_SUPP;
	return sfd->fd_sock.sockid;
  810e4f:	8b 40 0c             	mov    0xc(%eax),%eax
  810e52:	eb 05                	jmp    810e59 <fd2sockid+0x30>
	int r;

	if ((r = fd_lookup(fd, &sfd)) < 0)
		return r;
	if (sfd->fd_dev_id != devsock.dev_id)
		return -E_NOT_SUPP;
  810e54:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
	return sfd->fd_sock.sockid;
}
  810e59:	c9                   	leave  
  810e5a:	c3                   	ret    

00810e5b <alloc_sockfd>:

static int
alloc_sockfd(int sockid)
{
  810e5b:	55                   	push   %ebp
  810e5c:	89 e5                	mov    %esp,%ebp
  810e5e:	56                   	push   %esi
  810e5f:	53                   	push   %ebx
  810e60:	83 ec 20             	sub    $0x20,%esp
  810e63:	89 c6                	mov    %eax,%esi
	struct Fd *sfd;
	int r;

	if ((r = fd_alloc(&sfd)) < 0
  810e65:	8d 45 f4             	lea    -0xc(%ebp),%eax
  810e68:	89 04 24             	mov    %eax,(%esp)
  810e6b:	e8 b7 f6 ff ff       	call   810527 <fd_alloc>
  810e70:	89 c3                	mov    %eax,%ebx
  810e72:	85 c0                	test   %eax,%eax
  810e74:	78 21                	js     810e97 <alloc_sockfd+0x3c>
	    || (r = sys_page_alloc(0, sfd, PTE_P|PTE_W|PTE_U|PTE_SHARE)) < 0) {
  810e76:	c7 44 24 08 07 04 00 	movl   $0x407,0x8(%esp)
  810e7d:	00 
  810e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  810e81:	89 44 24 04          	mov    %eax,0x4(%esp)
  810e85:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  810e8c:	e8 42 ed ff ff       	call   80fbd3 <sys_page_alloc>
  810e91:	89 c3                	mov    %eax,%ebx
  810e93:	85 c0                	test   %eax,%eax
  810e95:	79 0c                	jns    810ea3 <alloc_sockfd+0x48>
		nsipc_close(sockid);
  810e97:	89 34 24             	mov    %esi,(%esp)
  810e9a:	e8 51 02 00 00       	call   8110f0 <nsipc_close>
		return r;
  810e9f:	89 d8                	mov    %ebx,%eax
  810ea1:	eb 20                	jmp    810ec3 <alloc_sockfd+0x68>
	}

	sfd->fd_dev_id = devsock.dev_id;
  810ea3:	8b 15 08 53 81 00    	mov    0x815308,%edx
  810ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  810eac:	89 10                	mov    %edx,(%eax)
	sfd->fd_omode = O_RDWR;
  810eae:	8b 55 f4             	mov    -0xc(%ebp),%edx
  810eb1:	c7 42 08 02 00 00 00 	movl   $0x2,0x8(%edx)
	sfd->fd_sock.sockid = sockid;
  810eb8:	89 72 0c             	mov    %esi,0xc(%edx)
	return fd2num(sfd);
  810ebb:	89 14 24             	mov    %edx,(%esp)
  810ebe:	e8 3d f6 ff ff       	call   810500 <fd2num>
}
  810ec3:	83 c4 20             	add    $0x20,%esp
  810ec6:	5b                   	pop    %ebx
  810ec7:	5e                   	pop    %esi
  810ec8:	5d                   	pop    %ebp
  810ec9:	c3                   	ret    

00810eca <accept>:

int
accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  810eca:	55                   	push   %ebp
  810ecb:	89 e5                	mov    %esp,%ebp
  810ecd:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = fd2sockid(s)) < 0)
  810ed0:	8b 45 08             	mov    0x8(%ebp),%eax
  810ed3:	e8 51 ff ff ff       	call   810e29 <fd2sockid>
		return r;
  810ed8:	89 c1                	mov    %eax,%ecx

int
accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
	int r;
	if ((r = fd2sockid(s)) < 0)
  810eda:	85 c0                	test   %eax,%eax
  810edc:	78 23                	js     810f01 <accept+0x37>
		return r;
	if ((r = nsipc_accept(r, addr, addrlen)) < 0)
  810ede:	8b 55 10             	mov    0x10(%ebp),%edx
  810ee1:	89 54 24 08          	mov    %edx,0x8(%esp)
  810ee5:	8b 55 0c             	mov    0xc(%ebp),%edx
  810ee8:	89 54 24 04          	mov    %edx,0x4(%esp)
  810eec:	89 04 24             	mov    %eax,(%esp)
  810eef:	e8 45 01 00 00       	call   811039 <nsipc_accept>
		return r;
  810ef4:	89 c1                	mov    %eax,%ecx
accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
	int r;
	if ((r = fd2sockid(s)) < 0)
		return r;
	if ((r = nsipc_accept(r, addr, addrlen)) < 0)
  810ef6:	85 c0                	test   %eax,%eax
  810ef8:	78 07                	js     810f01 <accept+0x37>
		return r;
	return alloc_sockfd(r);
  810efa:	e8 5c ff ff ff       	call   810e5b <alloc_sockfd>
  810eff:	89 c1                	mov    %eax,%ecx
}
  810f01:	89 c8                	mov    %ecx,%eax
  810f03:	c9                   	leave  
  810f04:	c3                   	ret    

00810f05 <bind>:

int
bind(int s, struct sockaddr *name, socklen_t namelen)
{
  810f05:	55                   	push   %ebp
  810f06:	89 e5                	mov    %esp,%ebp
  810f08:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = fd2sockid(s)) < 0)
  810f0b:	8b 45 08             	mov    0x8(%ebp),%eax
  810f0e:	e8 16 ff ff ff       	call   810e29 <fd2sockid>
  810f13:	89 c2                	mov    %eax,%edx
  810f15:	85 d2                	test   %edx,%edx
  810f17:	78 16                	js     810f2f <bind+0x2a>
		return r;
	return nsipc_bind(r, name, namelen);
  810f19:	8b 45 10             	mov    0x10(%ebp),%eax
  810f1c:	89 44 24 08          	mov    %eax,0x8(%esp)
  810f20:	8b 45 0c             	mov    0xc(%ebp),%eax
  810f23:	89 44 24 04          	mov    %eax,0x4(%esp)
  810f27:	89 14 24             	mov    %edx,(%esp)
  810f2a:	e8 60 01 00 00       	call   81108f <nsipc_bind>
}
  810f2f:	c9                   	leave  
  810f30:	c3                   	ret    

00810f31 <shutdown>:

int
shutdown(int s, int how)
{
  810f31:	55                   	push   %ebp
  810f32:	89 e5                	mov    %esp,%ebp
  810f34:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = fd2sockid(s)) < 0)
  810f37:	8b 45 08             	mov    0x8(%ebp),%eax
  810f3a:	e8 ea fe ff ff       	call   810e29 <fd2sockid>
  810f3f:	89 c2                	mov    %eax,%edx
  810f41:	85 d2                	test   %edx,%edx
  810f43:	78 0f                	js     810f54 <shutdown+0x23>
		return r;
	return nsipc_shutdown(r, how);
  810f45:	8b 45 0c             	mov    0xc(%ebp),%eax
  810f48:	89 44 24 04          	mov    %eax,0x4(%esp)
  810f4c:	89 14 24             	mov    %edx,(%esp)
  810f4f:	e8 7a 01 00 00       	call   8110ce <nsipc_shutdown>
}
  810f54:	c9                   	leave  
  810f55:	c3                   	ret    

00810f56 <connect>:
		return 0;
}

int
connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  810f56:	55                   	push   %ebp
  810f57:	89 e5                	mov    %esp,%ebp
  810f59:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = fd2sockid(s)) < 0)
  810f5c:	8b 45 08             	mov    0x8(%ebp),%eax
  810f5f:	e8 c5 fe ff ff       	call   810e29 <fd2sockid>
  810f64:	89 c2                	mov    %eax,%edx
  810f66:	85 d2                	test   %edx,%edx
  810f68:	78 16                	js     810f80 <connect+0x2a>
		return r;
	return nsipc_connect(r, name, namelen);
  810f6a:	8b 45 10             	mov    0x10(%ebp),%eax
  810f6d:	89 44 24 08          	mov    %eax,0x8(%esp)
  810f71:	8b 45 0c             	mov    0xc(%ebp),%eax
  810f74:	89 44 24 04          	mov    %eax,0x4(%esp)
  810f78:	89 14 24             	mov    %edx,(%esp)
  810f7b:	e8 8a 01 00 00       	call   81110a <nsipc_connect>
}
  810f80:	c9                   	leave  
  810f81:	c3                   	ret    

00810f82 <listen>:

int
listen(int s, int backlog)
{
  810f82:	55                   	push   %ebp
  810f83:	89 e5                	mov    %esp,%ebp
  810f85:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = fd2sockid(s)) < 0)
  810f88:	8b 45 08             	mov    0x8(%ebp),%eax
  810f8b:	e8 99 fe ff ff       	call   810e29 <fd2sockid>
  810f90:	89 c2                	mov    %eax,%edx
  810f92:	85 d2                	test   %edx,%edx
  810f94:	78 0f                	js     810fa5 <listen+0x23>
		return r;
	return nsipc_listen(r, backlog);
  810f96:	8b 45 0c             	mov    0xc(%ebp),%eax
  810f99:	89 44 24 04          	mov    %eax,0x4(%esp)
  810f9d:	89 14 24             	mov    %edx,(%esp)
  810fa0:	e8 a4 01 00 00       	call   811149 <nsipc_listen>
}
  810fa5:	c9                   	leave  
  810fa6:	c3                   	ret    

00810fa7 <socket>:
	return 0;
}

int
socket(int domain, int type, int protocol)
{
  810fa7:	55                   	push   %ebp
  810fa8:	89 e5                	mov    %esp,%ebp
  810faa:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = nsipc_socket(domain, type, protocol)) < 0)
  810fad:	8b 45 10             	mov    0x10(%ebp),%eax
  810fb0:	89 44 24 08          	mov    %eax,0x8(%esp)
  810fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
  810fb7:	89 44 24 04          	mov    %eax,0x4(%esp)
  810fbb:	8b 45 08             	mov    0x8(%ebp),%eax
  810fbe:	89 04 24             	mov    %eax,(%esp)
  810fc1:	e8 98 02 00 00       	call   81125e <nsipc_socket>
  810fc6:	89 c2                	mov    %eax,%edx
  810fc8:	85 d2                	test   %edx,%edx
  810fca:	78 05                	js     810fd1 <socket+0x2a>
		return r;
	return alloc_sockfd(r);
  810fcc:	e8 8a fe ff ff       	call   810e5b <alloc_sockfd>
}
  810fd1:	c9                   	leave  
  810fd2:	c3                   	ret    

00810fd3 <nsipc>:
// may be written back to nsipcbuf.
// type: request code, passed as the simple integer IPC value.
// Returns 0 if successful, < 0 on failure.
static int
nsipc(unsigned type)
{
  810fd3:	55                   	push   %ebp
  810fd4:	89 e5                	mov    %esp,%ebp
  810fd6:	53                   	push   %ebx
  810fd7:	83 ec 14             	sub    $0x14,%esp
  810fda:	89 c3                	mov    %eax,%ebx
	static envid_t nsenv;
	if (nsenv == 0)
  810fdc:	83 3d f0 c1 b3 00 00 	cmpl   $0x0,0xb3c1f0
  810fe3:	75 11                	jne    810ff6 <nsipc+0x23>
		nsenv = ipc_find_env(ENV_TYPE_NS);
  810fe5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  810fec:	e8 ce f4 ff ff       	call   8104bf <ipc_find_env>
  810ff1:	a3 f0 c1 b3 00       	mov    %eax,0xb3c1f0
	static_assert(sizeof(nsipcbuf) == PGSIZE);

	if (debug)
		cprintf("[%08x] nsipc %d\n", thisenv->env_id, type);

	ipc_send(nsenv, type, &nsipcbuf, PTE_P|PTE_W|PTE_U);
  810ff6:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  810ffd:	00 
  810ffe:	c7 44 24 08 00 e0 b3 	movl   $0xb3e000,0x8(%esp)
  811005:	00 
  811006:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  81100a:	a1 f0 c1 b3 00       	mov    0xb3c1f0,%eax
  81100f:	89 04 24             	mov    %eax,(%esp)
  811012:	e8 3d f4 ff ff       	call   810454 <ipc_send>
	return ipc_recv(NULL, NULL, NULL);
  811017:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  81101e:	00 
  81101f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  811026:	00 
  811027:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81102e:	e8 cd f3 ff ff       	call   810400 <ipc_recv>
}
  811033:	83 c4 14             	add    $0x14,%esp
  811036:	5b                   	pop    %ebx
  811037:	5d                   	pop    %ebp
  811038:	c3                   	ret    

00811039 <nsipc_accept>:

int
nsipc_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  811039:	55                   	push   %ebp
  81103a:	89 e5                	mov    %esp,%ebp
  81103c:	56                   	push   %esi
  81103d:	53                   	push   %ebx
  81103e:	83 ec 10             	sub    $0x10,%esp
  811041:	8b 75 10             	mov    0x10(%ebp),%esi
	int r;

	nsipcbuf.accept.req_s = s;
  811044:	8b 45 08             	mov    0x8(%ebp),%eax
  811047:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	nsipcbuf.accept.req_addrlen = *addrlen;
  81104c:	8b 06                	mov    (%esi),%eax
  81104e:	a3 04 e0 b3 00       	mov    %eax,0xb3e004
	if ((r = nsipc(NSREQ_ACCEPT)) >= 0) {
  811053:	b8 01 00 00 00       	mov    $0x1,%eax
  811058:	e8 76 ff ff ff       	call   810fd3 <nsipc>
  81105d:	89 c3                	mov    %eax,%ebx
  81105f:	85 c0                	test   %eax,%eax
  811061:	78 23                	js     811086 <nsipc_accept+0x4d>
		struct Nsret_accept *ret = &nsipcbuf.acceptRet;
		memmove(addr, &ret->ret_addr, ret->ret_addrlen);
  811063:	a1 10 e0 b3 00       	mov    0xb3e010,%eax
  811068:	89 44 24 08          	mov    %eax,0x8(%esp)
  81106c:	c7 44 24 04 00 e0 b3 	movl   $0xb3e000,0x4(%esp)
  811073:	00 
  811074:	8b 45 0c             	mov    0xc(%ebp),%eax
  811077:	89 04 24             	mov    %eax,(%esp)
  81107a:	e8 d5 e8 ff ff       	call   80f954 <memmove>
		*addrlen = ret->ret_addrlen;
  81107f:	a1 10 e0 b3 00       	mov    0xb3e010,%eax
  811084:	89 06                	mov    %eax,(%esi)
	}
	return r;
}
  811086:	89 d8                	mov    %ebx,%eax
  811088:	83 c4 10             	add    $0x10,%esp
  81108b:	5b                   	pop    %ebx
  81108c:	5e                   	pop    %esi
  81108d:	5d                   	pop    %ebp
  81108e:	c3                   	ret    

0081108f <nsipc_bind>:

int
nsipc_bind(int s, struct sockaddr *name, socklen_t namelen)
{
  81108f:	55                   	push   %ebp
  811090:	89 e5                	mov    %esp,%ebp
  811092:	53                   	push   %ebx
  811093:	83 ec 14             	sub    $0x14,%esp
  811096:	8b 5d 10             	mov    0x10(%ebp),%ebx
	nsipcbuf.bind.req_s = s;
  811099:	8b 45 08             	mov    0x8(%ebp),%eax
  81109c:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	memmove(&nsipcbuf.bind.req_name, name, namelen);
  8110a1:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  8110a5:	8b 45 0c             	mov    0xc(%ebp),%eax
  8110a8:	89 44 24 04          	mov    %eax,0x4(%esp)
  8110ac:	c7 04 24 04 e0 b3 00 	movl   $0xb3e004,(%esp)
  8110b3:	e8 9c e8 ff ff       	call   80f954 <memmove>
	nsipcbuf.bind.req_namelen = namelen;
  8110b8:	89 1d 14 e0 b3 00    	mov    %ebx,0xb3e014
	return nsipc(NSREQ_BIND);
  8110be:	b8 02 00 00 00       	mov    $0x2,%eax
  8110c3:	e8 0b ff ff ff       	call   810fd3 <nsipc>
}
  8110c8:	83 c4 14             	add    $0x14,%esp
  8110cb:	5b                   	pop    %ebx
  8110cc:	5d                   	pop    %ebp
  8110cd:	c3                   	ret    

008110ce <nsipc_shutdown>:

int
nsipc_shutdown(int s, int how)
{
  8110ce:	55                   	push   %ebp
  8110cf:	89 e5                	mov    %esp,%ebp
  8110d1:	83 ec 08             	sub    $0x8,%esp
	nsipcbuf.shutdown.req_s = s;
  8110d4:	8b 45 08             	mov    0x8(%ebp),%eax
  8110d7:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	nsipcbuf.shutdown.req_how = how;
  8110dc:	8b 45 0c             	mov    0xc(%ebp),%eax
  8110df:	a3 04 e0 b3 00       	mov    %eax,0xb3e004
	return nsipc(NSREQ_SHUTDOWN);
  8110e4:	b8 03 00 00 00       	mov    $0x3,%eax
  8110e9:	e8 e5 fe ff ff       	call   810fd3 <nsipc>
}
  8110ee:	c9                   	leave  
  8110ef:	c3                   	ret    

008110f0 <nsipc_close>:

int
nsipc_close(int s)
{
  8110f0:	55                   	push   %ebp
  8110f1:	89 e5                	mov    %esp,%ebp
  8110f3:	83 ec 08             	sub    $0x8,%esp
	nsipcbuf.close.req_s = s;
  8110f6:	8b 45 08             	mov    0x8(%ebp),%eax
  8110f9:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	return nsipc(NSREQ_CLOSE);
  8110fe:	b8 04 00 00 00       	mov    $0x4,%eax
  811103:	e8 cb fe ff ff       	call   810fd3 <nsipc>
}
  811108:	c9                   	leave  
  811109:	c3                   	ret    

0081110a <nsipc_connect>:

int
nsipc_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  81110a:	55                   	push   %ebp
  81110b:	89 e5                	mov    %esp,%ebp
  81110d:	53                   	push   %ebx
  81110e:	83 ec 14             	sub    $0x14,%esp
  811111:	8b 5d 10             	mov    0x10(%ebp),%ebx
	nsipcbuf.connect.req_s = s;
  811114:	8b 45 08             	mov    0x8(%ebp),%eax
  811117:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	memmove(&nsipcbuf.connect.req_name, name, namelen);
  81111c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  811120:	8b 45 0c             	mov    0xc(%ebp),%eax
  811123:	89 44 24 04          	mov    %eax,0x4(%esp)
  811127:	c7 04 24 04 e0 b3 00 	movl   $0xb3e004,(%esp)
  81112e:	e8 21 e8 ff ff       	call   80f954 <memmove>
	nsipcbuf.connect.req_namelen = namelen;
  811133:	89 1d 14 e0 b3 00    	mov    %ebx,0xb3e014
	return nsipc(NSREQ_CONNECT);
  811139:	b8 05 00 00 00       	mov    $0x5,%eax
  81113e:	e8 90 fe ff ff       	call   810fd3 <nsipc>
}
  811143:	83 c4 14             	add    $0x14,%esp
  811146:	5b                   	pop    %ebx
  811147:	5d                   	pop    %ebp
  811148:	c3                   	ret    

00811149 <nsipc_listen>:

int
nsipc_listen(int s, int backlog)
{
  811149:	55                   	push   %ebp
  81114a:	89 e5                	mov    %esp,%ebp
  81114c:	83 ec 08             	sub    $0x8,%esp
	nsipcbuf.listen.req_s = s;
  81114f:	8b 45 08             	mov    0x8(%ebp),%eax
  811152:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	nsipcbuf.listen.req_backlog = backlog;
  811157:	8b 45 0c             	mov    0xc(%ebp),%eax
  81115a:	a3 04 e0 b3 00       	mov    %eax,0xb3e004
	return nsipc(NSREQ_LISTEN);
  81115f:	b8 06 00 00 00       	mov    $0x6,%eax
  811164:	e8 6a fe ff ff       	call   810fd3 <nsipc>
}
  811169:	c9                   	leave  
  81116a:	c3                   	ret    

0081116b <nsipc_recv>:

int
nsipc_recv(int s, void *mem, int len, unsigned int flags)
{
  81116b:	55                   	push   %ebp
  81116c:	89 e5                	mov    %esp,%ebp
  81116e:	56                   	push   %esi
  81116f:	53                   	push   %ebx
  811170:	83 ec 10             	sub    $0x10,%esp
  811173:	8b 75 10             	mov    0x10(%ebp),%esi
	int r;

	nsipcbuf.recv.req_s = s;
  811176:	8b 45 08             	mov    0x8(%ebp),%eax
  811179:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	nsipcbuf.recv.req_len = len;
  81117e:	89 35 04 e0 b3 00    	mov    %esi,0xb3e004
	nsipcbuf.recv.req_flags = flags;
  811184:	8b 45 14             	mov    0x14(%ebp),%eax
  811187:	a3 08 e0 b3 00       	mov    %eax,0xb3e008

	if ((r = nsipc(NSREQ_RECV)) >= 0) {
  81118c:	b8 07 00 00 00       	mov    $0x7,%eax
  811191:	e8 3d fe ff ff       	call   810fd3 <nsipc>
  811196:	89 c3                	mov    %eax,%ebx
  811198:	85 c0                	test   %eax,%eax
  81119a:	78 46                	js     8111e2 <nsipc_recv+0x77>
		assert(r < 1600 && r <= len);
  81119c:	39 f0                	cmp    %esi,%eax
  81119e:	7f 07                	jg     8111a7 <nsipc_recv+0x3c>
  8111a0:	3d 3f 06 00 00       	cmp    $0x63f,%eax
  8111a5:	7e 24                	jle    8111cb <nsipc_recv+0x60>
  8111a7:	c7 44 24 0c fe 48 81 	movl   $0x8148fe,0xc(%esp)
  8111ae:	00 
  8111af:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  8111b6:	00 
  8111b7:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
  8111be:	00 
  8111bf:	c7 04 24 13 49 81 00 	movl   $0x814913,(%esp)
  8111c6:	e8 c3 de ff ff       	call   80f08e <_panic>
		memmove(mem, nsipcbuf.recvRet.ret_buf, r);
  8111cb:	89 44 24 08          	mov    %eax,0x8(%esp)
  8111cf:	c7 44 24 04 00 e0 b3 	movl   $0xb3e000,0x4(%esp)
  8111d6:	00 
  8111d7:	8b 45 0c             	mov    0xc(%ebp),%eax
  8111da:	89 04 24             	mov    %eax,(%esp)
  8111dd:	e8 72 e7 ff ff       	call   80f954 <memmove>
	}

	return r;
}
  8111e2:	89 d8                	mov    %ebx,%eax
  8111e4:	83 c4 10             	add    $0x10,%esp
  8111e7:	5b                   	pop    %ebx
  8111e8:	5e                   	pop    %esi
  8111e9:	5d                   	pop    %ebp
  8111ea:	c3                   	ret    

008111eb <nsipc_send>:

int
nsipc_send(int s, const void *buf, int size, unsigned int flags)
{
  8111eb:	55                   	push   %ebp
  8111ec:	89 e5                	mov    %esp,%ebp
  8111ee:	53                   	push   %ebx
  8111ef:	83 ec 14             	sub    $0x14,%esp
  8111f2:	8b 5d 10             	mov    0x10(%ebp),%ebx
	nsipcbuf.send.req_s = s;
  8111f5:	8b 45 08             	mov    0x8(%ebp),%eax
  8111f8:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	assert(size < 1600);
  8111fd:	81 fb 3f 06 00 00    	cmp    $0x63f,%ebx
  811203:	7e 24                	jle    811229 <nsipc_send+0x3e>
  811205:	c7 44 24 0c 1f 49 81 	movl   $0x81491f,0xc(%esp)
  81120c:	00 
  81120d:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  811214:	00 
  811215:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
  81121c:	00 
  81121d:	c7 04 24 13 49 81 00 	movl   $0x814913,(%esp)
  811224:	e8 65 de ff ff       	call   80f08e <_panic>
	memmove(&nsipcbuf.send.req_buf, buf, size);
  811229:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  81122d:	8b 45 0c             	mov    0xc(%ebp),%eax
  811230:	89 44 24 04          	mov    %eax,0x4(%esp)
  811234:	c7 04 24 0c e0 b3 00 	movl   $0xb3e00c,(%esp)
  81123b:	e8 14 e7 ff ff       	call   80f954 <memmove>
	nsipcbuf.send.req_size = size;
  811240:	89 1d 04 e0 b3 00    	mov    %ebx,0xb3e004
	nsipcbuf.send.req_flags = flags;
  811246:	8b 45 14             	mov    0x14(%ebp),%eax
  811249:	a3 08 e0 b3 00       	mov    %eax,0xb3e008
	return nsipc(NSREQ_SEND);
  81124e:	b8 08 00 00 00       	mov    $0x8,%eax
  811253:	e8 7b fd ff ff       	call   810fd3 <nsipc>
}
  811258:	83 c4 14             	add    $0x14,%esp
  81125b:	5b                   	pop    %ebx
  81125c:	5d                   	pop    %ebp
  81125d:	c3                   	ret    

0081125e <nsipc_socket>:

int
nsipc_socket(int domain, int type, int protocol)
{
  81125e:	55                   	push   %ebp
  81125f:	89 e5                	mov    %esp,%ebp
  811261:	83 ec 08             	sub    $0x8,%esp
	nsipcbuf.socket.req_domain = domain;
  811264:	8b 45 08             	mov    0x8(%ebp),%eax
  811267:	a3 00 e0 b3 00       	mov    %eax,0xb3e000
	nsipcbuf.socket.req_type = type;
  81126c:	8b 45 0c             	mov    0xc(%ebp),%eax
  81126f:	a3 04 e0 b3 00       	mov    %eax,0xb3e004
	nsipcbuf.socket.req_protocol = protocol;
  811274:	8b 45 10             	mov    0x10(%ebp),%eax
  811277:	a3 08 e0 b3 00       	mov    %eax,0xb3e008
	return nsipc(NSREQ_SOCKET);
  81127c:	b8 09 00 00 00       	mov    $0x9,%eax
  811281:	e8 4d fd ff ff       	call   810fd3 <nsipc>
}
  811286:	c9                   	leave  
  811287:	c3                   	ret    
  811288:	66 90                	xchg   %ax,%ax
  81128a:	66 90                	xchg   %ax,%ax
  81128c:	66 90                	xchg   %ax,%ax
  81128e:	66 90                	xchg   %ax,%ax

00811290 <free>:
	return v;
}

void
free(void *v)
{
  811290:	55                   	push   %ebp
  811291:	89 e5                	mov    %esp,%ebp
  811293:	53                   	push   %ebx
  811294:	83 ec 14             	sub    $0x14,%esp
  811297:	8b 5d 08             	mov    0x8(%ebp),%ebx
	uint8_t *c;
	uint32_t *ref;

	if (v == 0)
  81129a:	85 db                	test   %ebx,%ebx
  81129c:	0f 84 ba 00 00 00    	je     81135c <free+0xcc>
		return;
	assert(mbegin <= (uint8_t*) v && (uint8_t*) v < mend);
  8112a2:	81 fb ff ff ff 07    	cmp    $0x7ffffff,%ebx
  8112a8:	76 08                	jbe    8112b2 <free+0x22>
  8112aa:	81 fb ff ff ff 0f    	cmp    $0xfffffff,%ebx
  8112b0:	76 24                	jbe    8112d6 <free+0x46>
  8112b2:	c7 44 24 0c 2c 49 81 	movl   $0x81492c,0xc(%esp)
  8112b9:	00 
  8112ba:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  8112c1:	00 
  8112c2:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
  8112c9:	00 
  8112ca:	c7 04 24 5a 49 81 00 	movl   $0x81495a,(%esp)
  8112d1:	e8 b8 dd ff ff       	call   80f08e <_panic>

	c = ROUNDDOWN(v, PGSIZE);
  8112d6:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx

	while (uvpt[PGNUM(c)] & PTE_CONTINUED) {
  8112dc:	eb 4a                	jmp    811328 <free+0x98>
		sys_page_unmap(0, c);
  8112de:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8112e2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8112e9:	e8 8c e9 ff ff       	call   80fc7a <sys_page_unmap>
		c += PGSIZE;
  8112ee:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		assert(mbegin <= c && c < mend);
  8112f4:	81 fb ff ff ff 07    	cmp    $0x7ffffff,%ebx
  8112fa:	76 08                	jbe    811304 <free+0x74>
  8112fc:	81 fb ff ff ff 0f    	cmp    $0xfffffff,%ebx
  811302:	76 24                	jbe    811328 <free+0x98>
  811304:	c7 44 24 0c 67 49 81 	movl   $0x814967,0xc(%esp)
  81130b:	00 
  81130c:	c7 44 24 08 7f 35 81 	movl   $0x81357f,0x8(%esp)
  811313:	00 
  811314:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
  81131b:	00 
  81131c:	c7 04 24 5a 49 81 00 	movl   $0x81495a,(%esp)
  811323:	e8 66 dd ff ff       	call   80f08e <_panic>
		return;
	assert(mbegin <= (uint8_t*) v && (uint8_t*) v < mend);

	c = ROUNDDOWN(v, PGSIZE);

	while (uvpt[PGNUM(c)] & PTE_CONTINUED) {
  811328:	89 d8                	mov    %ebx,%eax
  81132a:	c1 e8 0c             	shr    $0xc,%eax
  81132d:	8b 04 85 00 00 40 ef 	mov    -0x10c00000(,%eax,4),%eax
  811334:	f6 c4 02             	test   $0x2,%ah
  811337:	75 a5                	jne    8112de <free+0x4e>
	/*
	 * c is just a piece of this page, so dec the ref count
	 * and maybe free the page.
	 */
	ref = (uint32_t*) (c + PGSIZE - 4);
	if (--(*ref) == 0)
  811339:	8b 83 fc 0f 00 00    	mov    0xffc(%ebx),%eax
  81133f:	83 e8 01             	sub    $0x1,%eax
  811342:	89 83 fc 0f 00 00    	mov    %eax,0xffc(%ebx)
  811348:	85 c0                	test   %eax,%eax
  81134a:	75 10                	jne    81135c <free+0xcc>
		sys_page_unmap(0, c);
  81134c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  811350:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811357:	e8 1e e9 ff ff       	call   80fc7a <sys_page_unmap>
}
  81135c:	83 c4 14             	add    $0x14,%esp
  81135f:	5b                   	pop    %ebx
  811360:	5d                   	pop    %ebp
  811361:	c3                   	ret    

00811362 <malloc>:
	return 1;
}

void*
malloc(size_t n)
{
  811362:	55                   	push   %ebp
  811363:	89 e5                	mov    %esp,%ebp
  811365:	57                   	push   %edi
  811366:	56                   	push   %esi
  811367:	53                   	push   %ebx
  811368:	83 ec 2c             	sub    $0x2c,%esp
	int i, cont;
	int nwrap;
	uint32_t *ref;
	void *v;

	if (mptr == 0)
  81136b:	83 3d f4 c1 b3 00 00 	cmpl   $0x0,0xb3c1f4
  811372:	75 0a                	jne    81137e <malloc+0x1c>
		mptr = mbegin;
  811374:	c7 05 f4 c1 b3 00 00 	movl   $0x8000000,0xb3c1f4
  81137b:	00 00 08 

	n = ROUNDUP(n, 4);
  81137e:	8b 45 08             	mov    0x8(%ebp),%eax
  811381:	83 c0 03             	add    $0x3,%eax
  811384:	83 e0 fc             	and    $0xfffffffc,%eax
  811387:	89 45 e0             	mov    %eax,-0x20(%ebp)

	if (n >= MAXMALLOC)
  81138a:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  81138f:	0f 87 64 01 00 00    	ja     8114f9 <malloc+0x197>
		return 0;

	if ((uintptr_t) mptr % PGSIZE){
  811395:	a1 f4 c1 b3 00       	mov    0xb3c1f4,%eax
  81139a:	a9 ff 0f 00 00       	test   $0xfff,%eax
  81139f:	75 15                	jne    8113b6 <malloc+0x54>
  8113a1:	8b 35 f4 c1 b3 00    	mov    0xb3c1f4,%esi
	return 1;
}

void*
malloc(size_t n)
{
  8113a7:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%ebp)
	 * runs of more than a page can't have ref counts so we
	 * flag the PTE entries instead.
	 */
	nwrap = 0;
	while (1) {
		if (isfree(mptr, n + 4))
  8113ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
  8113b1:	8d 78 04             	lea    0x4(%eax),%edi
  8113b4:	eb 50                	jmp    811406 <malloc+0xa4>
		 * we're in the middle of a partially
		 * allocated page - can we add this chunk?
		 * the +4 below is for the ref count.
		 */
		ref = (uint32_t*) (ROUNDUP(mptr, PGSIZE) - 4);
		if ((uintptr_t) mptr / PGSIZE == (uintptr_t) (mptr + n - 1 + 4) / PGSIZE) {
  8113b6:	89 c1                	mov    %eax,%ecx
  8113b8:	c1 e9 0c             	shr    $0xc,%ecx
  8113bb:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  8113be:	8d 54 18 03          	lea    0x3(%eax,%ebx,1),%edx
  8113c2:	c1 ea 0c             	shr    $0xc,%edx
  8113c5:	39 d1                	cmp    %edx,%ecx
  8113c7:	75 1f                	jne    8113e8 <malloc+0x86>
		/*
		 * we're in the middle of a partially
		 * allocated page - can we add this chunk?
		 * the +4 below is for the ref count.
		 */
		ref = (uint32_t*) (ROUNDUP(mptr, PGSIZE) - 4);
  8113c9:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
  8113cf:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
		if ((uintptr_t) mptr / PGSIZE == (uintptr_t) (mptr + n - 1 + 4) / PGSIZE) {
			(*ref)++;
  8113d5:	83 42 fc 01          	addl   $0x1,-0x4(%edx)
			v = mptr;
			mptr += n;
  8113d9:	89 da                	mov    %ebx,%edx
  8113db:	01 c2                	add    %eax,%edx
  8113dd:	89 15 f4 c1 b3 00    	mov    %edx,0xb3c1f4
			return v;
  8113e3:	e9 2f 01 00 00       	jmp    811517 <malloc+0x1b5>
		}
		/*
		 * stop working on this page and move on.
		 */
		free(mptr);	/* drop reference to this page */
  8113e8:	89 04 24             	mov    %eax,(%esp)
  8113eb:	e8 a0 fe ff ff       	call   811290 <free>
		mptr = ROUNDDOWN(mptr + PGSIZE, PGSIZE);
  8113f0:	a1 f4 c1 b3 00       	mov    0xb3c1f4,%eax
  8113f5:	05 00 10 00 00       	add    $0x1000,%eax
  8113fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  8113ff:	a3 f4 c1 b3 00       	mov    %eax,0xb3c1f4
  811404:	eb 9b                	jmp    8113a1 <malloc+0x3f>
  811406:	89 75 e4             	mov    %esi,-0x1c(%ebp)
	 * runs of more than a page can't have ref counts so we
	 * flag the PTE entries instead.
	 */
	nwrap = 0;
	while (1) {
		if (isfree(mptr, n + 4))
  811409:	89 fb                	mov    %edi,%ebx
  81140b:	8d 0c 37             	lea    (%edi,%esi,1),%ecx
static int
isfree(void *v, size_t n)
{
	uintptr_t va, end_va = (uintptr_t) v + n;

	for (va = (uintptr_t) v; va < end_va; va += PGSIZE)
  81140e:	89 f0                	mov    %esi,%eax
  811410:	eb 36                	jmp    811448 <malloc+0xe6>
		if (va >= (uintptr_t) mend
  811412:	3d ff ff ff 0f       	cmp    $0xfffffff,%eax
  811417:	0f 87 e3 00 00 00    	ja     811500 <malloc+0x19e>
		    || ((uvpd[PDX(va)] & PTE_P) && (uvpt[PGNUM(va)] & PTE_P)))
  81141d:	89 c2                	mov    %eax,%edx
  81141f:	c1 ea 16             	shr    $0x16,%edx
  811422:	8b 14 95 00 d0 7b ef 	mov    -0x10843000(,%edx,4),%edx
  811429:	f6 c2 01             	test   $0x1,%dl
  81142c:	74 15                	je     811443 <malloc+0xe1>
  81142e:	89 c2                	mov    %eax,%edx
  811430:	c1 ea 0c             	shr    $0xc,%edx
  811433:	8b 14 95 00 00 40 ef 	mov    -0x10c00000(,%edx,4),%edx
  81143a:	f6 c2 01             	test   $0x1,%dl
  81143d:	0f 85 bd 00 00 00    	jne    811500 <malloc+0x19e>
static int
isfree(void *v, size_t n)
{
	uintptr_t va, end_va = (uintptr_t) v + n;

	for (va = (uintptr_t) v; va < end_va; va += PGSIZE)
  811443:	05 00 10 00 00       	add    $0x1000,%eax
  811448:	39 c1                	cmp    %eax,%ecx
  81144a:	77 c6                	ja     811412 <malloc+0xb0>
  81144c:	eb 7e                	jmp    8114cc <malloc+0x16a>
		if (isfree(mptr, n + 4))
			break;
		mptr += PGSIZE;
		if (mptr == mend) {
			mptr = mbegin;
			if (++nwrap == 2)
  81144e:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
  811452:	74 07                	je     81145b <malloc+0xf9>
	while (1) {
		if (isfree(mptr, n + 4))
			break;
		mptr += PGSIZE;
		if (mptr == mend) {
			mptr = mbegin;
  811454:	be 00 00 00 08       	mov    $0x8000000,%esi
  811459:	eb ab                	jmp    811406 <malloc+0xa4>
  81145b:	c7 05 f4 c1 b3 00 00 	movl   $0x8000000,0xb3c1f4
  811462:	00 00 08 
			if (++nwrap == 2)
				return 0;	/* out of address space */
  811465:	b8 00 00 00 00       	mov    $0x0,%eax
  81146a:	e9 a8 00 00 00       	jmp    811517 <malloc+0x1b5>

	/*
	 * allocate at mptr - the +4 makes sure we allocate a ref count.
	 */
	for (i = 0; i < n + 4; i += PGSIZE){
		cont = (i + PGSIZE < n + 4) ? PTE_CONTINUED : 0;
  81146f:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
  811475:	39 df                	cmp    %ebx,%edi
  811477:	19 c0                	sbb    %eax,%eax
  811479:	25 00 02 00 00       	and    $0x200,%eax
		if (sys_page_alloc(0, mptr + i, PTE_P|PTE_U|PTE_W|cont) < 0){
  81147e:	83 c8 07             	or     $0x7,%eax
  811481:	89 44 24 08          	mov    %eax,0x8(%esp)
  811485:	03 15 f4 c1 b3 00    	add    0xb3c1f4,%edx
  81148b:	89 54 24 04          	mov    %edx,0x4(%esp)
  81148f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811496:	e8 38 e7 ff ff       	call   80fbd3 <sys_page_alloc>
  81149b:	85 c0                	test   %eax,%eax
  81149d:	78 22                	js     8114c1 <malloc+0x15f>
	}

	/*
	 * allocate at mptr - the +4 makes sure we allocate a ref count.
	 */
	for (i = 0; i < n + 4; i += PGSIZE){
  81149f:	89 fe                	mov    %edi,%esi
  8114a1:	eb 36                	jmp    8114d9 <malloc+0x177>
		cont = (i + PGSIZE < n + 4) ? PTE_CONTINUED : 0;
		if (sys_page_alloc(0, mptr + i, PTE_P|PTE_U|PTE_W|cont) < 0){
			for (; i >= 0; i -= PGSIZE)
				sys_page_unmap(0, mptr + i);
  8114a3:	89 f0                	mov    %esi,%eax
  8114a5:	03 05 f4 c1 b3 00    	add    0xb3c1f4,%eax
  8114ab:	89 44 24 04          	mov    %eax,0x4(%esp)
  8114af:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8114b6:	e8 bf e7 ff ff       	call   80fc7a <sys_page_unmap>
	 * allocate at mptr - the +4 makes sure we allocate a ref count.
	 */
	for (i = 0; i < n + 4; i += PGSIZE){
		cont = (i + PGSIZE < n + 4) ? PTE_CONTINUED : 0;
		if (sys_page_alloc(0, mptr + i, PTE_P|PTE_U|PTE_W|cont) < 0){
			for (; i >= 0; i -= PGSIZE)
  8114bb:	81 ee 00 10 00 00    	sub    $0x1000,%esi
  8114c1:	85 f6                	test   %esi,%esi
  8114c3:	79 de                	jns    8114a3 <malloc+0x141>
				sys_page_unmap(0, mptr + i);
			return 0;	/* out of physical memory */
  8114c5:	b8 00 00 00 00       	mov    $0x0,%eax
  8114ca:	eb 4b                	jmp    811517 <malloc+0x1b5>
  8114cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8114cf:	a3 f4 c1 b3 00       	mov    %eax,0xb3c1f4
static int
isfree(void *v, size_t n)
{
	uintptr_t va, end_va = (uintptr_t) v + n;

	for (va = (uintptr_t) v; va < end_va; va += PGSIZE)
  8114d4:	be 00 00 00 00       	mov    $0x0,%esi
	}

	/*
	 * allocate at mptr - the +4 makes sure we allocate a ref count.
	 */
	for (i = 0; i < n + 4; i += PGSIZE){
  8114d9:	89 f2                	mov    %esi,%edx
  8114db:	39 de                	cmp    %ebx,%esi
  8114dd:	72 90                	jb     81146f <malloc+0x10d>
				sys_page_unmap(0, mptr + i);
			return 0;	/* out of physical memory */
		}
	}

	ref = (uint32_t*) (mptr + i - 4);
  8114df:	a1 f4 c1 b3 00       	mov    0xb3c1f4,%eax
	*ref = 2;	/* reference for mptr, reference for returned block */
  8114e4:	c7 44 30 fc 02 00 00 	movl   $0x2,-0x4(%eax,%esi,1)
  8114eb:	00 
	v = mptr;
	mptr += n;
  8114ec:	8b 55 e0             	mov    -0x20(%ebp),%edx
  8114ef:	01 c2                	add    %eax,%edx
  8114f1:	89 15 f4 c1 b3 00    	mov    %edx,0xb3c1f4
	return v;
  8114f7:	eb 1e                	jmp    811517 <malloc+0x1b5>
		mptr = mbegin;

	n = ROUNDUP(n, 4);

	if (n >= MAXMALLOC)
		return 0;
  8114f9:	b8 00 00 00 00       	mov    $0x0,%eax
  8114fe:	eb 17                	jmp    811517 <malloc+0x1b5>
  811500:	81 c6 00 10 00 00    	add    $0x1000,%esi
	nwrap = 0;
	while (1) {
		if (isfree(mptr, n + 4))
			break;
		mptr += PGSIZE;
		if (mptr == mend) {
  811506:	81 fe 00 00 00 10    	cmp    $0x10000000,%esi
  81150c:	0f 84 3c ff ff ff    	je     81144e <malloc+0xec>
  811512:	e9 ef fe ff ff       	jmp    811406 <malloc+0xa4>
	ref = (uint32_t*) (mptr + i - 4);
	*ref = 2;	/* reference for mptr, reference for returned block */
	v = mptr;
	mptr += n;
	return v;
}
  811517:	83 c4 2c             	add    $0x2c,%esp
  81151a:	5b                   	pop    %ebx
  81151b:	5e                   	pop    %esi
  81151c:	5f                   	pop    %edi
  81151d:	5d                   	pop    %ebp
  81151e:	c3                   	ret    

0081151f <devpipe_stat>:
	return i;
}

static int
devpipe_stat(struct Fd *fd, struct Stat *stat)
{
  81151f:	55                   	push   %ebp
  811520:	89 e5                	mov    %esp,%ebp
  811522:	56                   	push   %esi
  811523:	53                   	push   %ebx
  811524:	83 ec 10             	sub    $0x10,%esp
  811527:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct Pipe *p = (struct Pipe*) fd2data(fd);
  81152a:	8b 45 08             	mov    0x8(%ebp),%eax
  81152d:	89 04 24             	mov    %eax,(%esp)
  811530:	e8 db ef ff ff       	call   810510 <fd2data>
  811535:	89 c6                	mov    %eax,%esi
	strcpy(stat->st_name, "<pipe>");
  811537:	c7 44 24 04 7f 49 81 	movl   $0x81497f,0x4(%esp)
  81153e:	00 
  81153f:	89 1c 24             	mov    %ebx,(%esp)
  811542:	e8 70 e2 ff ff       	call   80f7b7 <strcpy>
	stat->st_size = p->p_wpos - p->p_rpos;
  811547:	8b 46 04             	mov    0x4(%esi),%eax
  81154a:	2b 06                	sub    (%esi),%eax
  81154c:	89 83 80 00 00 00    	mov    %eax,0x80(%ebx)
	stat->st_isdir = 0;
  811552:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
  811559:	00 00 00 
	stat->st_dev = &devpipe;
  81155c:	c7 83 88 00 00 00 24 	movl   $0x815324,0x88(%ebx)
  811563:	53 81 00 
	return 0;
}
  811566:	b8 00 00 00 00       	mov    $0x0,%eax
  81156b:	83 c4 10             	add    $0x10,%esp
  81156e:	5b                   	pop    %ebx
  81156f:	5e                   	pop    %esi
  811570:	5d                   	pop    %ebp
  811571:	c3                   	ret    

00811572 <devpipe_close>:

static int
devpipe_close(struct Fd *fd)
{
  811572:	55                   	push   %ebp
  811573:	89 e5                	mov    %esp,%ebp
  811575:	53                   	push   %ebx
  811576:	83 ec 14             	sub    $0x14,%esp
  811579:	8b 5d 08             	mov    0x8(%ebp),%ebx
	(void) sys_page_unmap(0, fd);
  81157c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  811580:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811587:	e8 ee e6 ff ff       	call   80fc7a <sys_page_unmap>
	return sys_page_unmap(0, fd2data(fd));
  81158c:	89 1c 24             	mov    %ebx,(%esp)
  81158f:	e8 7c ef ff ff       	call   810510 <fd2data>
  811594:	89 44 24 04          	mov    %eax,0x4(%esp)
  811598:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81159f:	e8 d6 e6 ff ff       	call   80fc7a <sys_page_unmap>
}
  8115a4:	83 c4 14             	add    $0x14,%esp
  8115a7:	5b                   	pop    %ebx
  8115a8:	5d                   	pop    %ebp
  8115a9:	c3                   	ret    

008115aa <_pipeisclosed>:
	return r;
}

static int
_pipeisclosed(struct Fd *fd, struct Pipe *p)
{
  8115aa:	55                   	push   %ebp
  8115ab:	89 e5                	mov    %esp,%ebp
  8115ad:	57                   	push   %edi
  8115ae:	56                   	push   %esi
  8115af:	53                   	push   %ebx
  8115b0:	83 ec 2c             	sub    $0x2c,%esp
  8115b3:	89 c6                	mov    %eax,%esi
  8115b5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
	int n, nn, ret;

	while (1) {
		n = thisenv->env_runs;
  8115b8:	a1 7c c2 b3 00       	mov    0xb3c27c,%eax
  8115bd:	8b 58 58             	mov    0x58(%eax),%ebx
		ret = pageref(fd) == pageref(p);
  8115c0:	89 34 24             	mov    %esi,(%esp)
  8115c3:	e8 3b 05 00 00       	call   811b03 <pageref>
  8115c8:	89 c7                	mov    %eax,%edi
  8115ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  8115cd:	89 04 24             	mov    %eax,(%esp)
  8115d0:	e8 2e 05 00 00       	call   811b03 <pageref>
  8115d5:	39 c7                	cmp    %eax,%edi
  8115d7:	0f 94 c2             	sete   %dl
  8115da:	0f b6 c2             	movzbl %dl,%eax
		nn = thisenv->env_runs;
  8115dd:	8b 0d 7c c2 b3 00    	mov    0xb3c27c,%ecx
  8115e3:	8b 79 58             	mov    0x58(%ecx),%edi
		if (n == nn)
  8115e6:	39 fb                	cmp    %edi,%ebx
  8115e8:	74 21                	je     81160b <_pipeisclosed+0x61>
			return ret;
		if (n != nn && ret == 1)
  8115ea:	84 d2                	test   %dl,%dl
  8115ec:	74 ca                	je     8115b8 <_pipeisclosed+0xe>
			cprintf("pipe race avoided\n", n, thisenv->env_runs, ret);
  8115ee:	8b 51 58             	mov    0x58(%ecx),%edx
  8115f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8115f5:	89 54 24 08          	mov    %edx,0x8(%esp)
  8115f9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8115fd:	c7 04 24 86 49 81 00 	movl   $0x814986,(%esp)
  811604:	e8 7e db ff ff       	call   80f187 <cprintf>
  811609:	eb ad                	jmp    8115b8 <_pipeisclosed+0xe>
	}
}
  81160b:	83 c4 2c             	add    $0x2c,%esp
  81160e:	5b                   	pop    %ebx
  81160f:	5e                   	pop    %esi
  811610:	5f                   	pop    %edi
  811611:	5d                   	pop    %ebp
  811612:	c3                   	ret    

00811613 <devpipe_write>:
	return i;
}

static ssize_t
devpipe_write(struct Fd *fd, const void *vbuf, size_t n)
{
  811613:	55                   	push   %ebp
  811614:	89 e5                	mov    %esp,%ebp
  811616:	57                   	push   %edi
  811617:	56                   	push   %esi
  811618:	53                   	push   %ebx
  811619:	83 ec 1c             	sub    $0x1c,%esp
  81161c:	8b 75 08             	mov    0x8(%ebp),%esi
	const uint8_t *buf;
	size_t i;
	struct Pipe *p;

	p = (struct Pipe*) fd2data(fd);
  81161f:	89 34 24             	mov    %esi,(%esp)
  811622:	e8 e9 ee ff ff       	call   810510 <fd2data>
  811627:	89 c3                	mov    %eax,%ebx
	if (debug)
		cprintf("[%08x] devpipe_write %08x %d rpos %d wpos %d\n",
			thisenv->env_id, uvpt[PGNUM(p)], n, p->p_rpos, p->p_wpos);

	buf = vbuf;
	for (i = 0; i < n; i++) {
  811629:	bf 00 00 00 00       	mov    $0x0,%edi
  81162e:	eb 45                	jmp    811675 <devpipe_write+0x62>
		while (p->p_wpos >= p->p_rpos + sizeof(p->p_buf)) {
			// pipe is full
			// if all the readers are gone
			// (it's only writers like us now),
			// note eof
			if (_pipeisclosed(fd, p))
  811630:	89 da                	mov    %ebx,%edx
  811632:	89 f0                	mov    %esi,%eax
  811634:	e8 71 ff ff ff       	call   8115aa <_pipeisclosed>
  811639:	85 c0                	test   %eax,%eax
  81163b:	75 41                	jne    81167e <devpipe_write+0x6b>
				return 0;
			// yield and see what happens
			if (debug)
				cprintf("devpipe_write yield\n");
			sys_yield();
  81163d:	e8 72 e5 ff ff       	call   80fbb4 <sys_yield>
		cprintf("[%08x] devpipe_write %08x %d rpos %d wpos %d\n",
			thisenv->env_id, uvpt[PGNUM(p)], n, p->p_rpos, p->p_wpos);

	buf = vbuf;
	for (i = 0; i < n; i++) {
		while (p->p_wpos >= p->p_rpos + sizeof(p->p_buf)) {
  811642:	8b 43 04             	mov    0x4(%ebx),%eax
  811645:	8b 0b                	mov    (%ebx),%ecx
  811647:	8d 51 20             	lea    0x20(%ecx),%edx
  81164a:	39 d0                	cmp    %edx,%eax
  81164c:	73 e2                	jae    811630 <devpipe_write+0x1d>
				cprintf("devpipe_write yield\n");
			sys_yield();
		}
		// there's room for a byte.  store it.
		// wait to increment wpos until the byte is stored!
		p->p_buf[p->p_wpos % PIPEBUFSIZ] = buf[i];
  81164e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  811651:	0f b6 0c 39          	movzbl (%ecx,%edi,1),%ecx
  811655:	88 4d e7             	mov    %cl,-0x19(%ebp)
  811658:	99                   	cltd   
  811659:	c1 ea 1b             	shr    $0x1b,%edx
  81165c:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
  81165f:	83 e1 1f             	and    $0x1f,%ecx
  811662:	29 d1                	sub    %edx,%ecx
  811664:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
  811668:	88 54 0b 08          	mov    %dl,0x8(%ebx,%ecx,1)
		p->p_wpos++;
  81166c:	83 c0 01             	add    $0x1,%eax
  81166f:	89 43 04             	mov    %eax,0x4(%ebx)
	if (debug)
		cprintf("[%08x] devpipe_write %08x %d rpos %d wpos %d\n",
			thisenv->env_id, uvpt[PGNUM(p)], n, p->p_rpos, p->p_wpos);

	buf = vbuf;
	for (i = 0; i < n; i++) {
  811672:	83 c7 01             	add    $0x1,%edi
  811675:	3b 7d 10             	cmp    0x10(%ebp),%edi
  811678:	75 c8                	jne    811642 <devpipe_write+0x2f>
		// wait to increment wpos until the byte is stored!
		p->p_buf[p->p_wpos % PIPEBUFSIZ] = buf[i];
		p->p_wpos++;
	}

	return i;
  81167a:	89 f8                	mov    %edi,%eax
  81167c:	eb 05                	jmp    811683 <devpipe_write+0x70>
			// pipe is full
			// if all the readers are gone
			// (it's only writers like us now),
			// note eof
			if (_pipeisclosed(fd, p))
				return 0;
  81167e:	b8 00 00 00 00       	mov    $0x0,%eax
		p->p_buf[p->p_wpos % PIPEBUFSIZ] = buf[i];
		p->p_wpos++;
	}

	return i;
}
  811683:	83 c4 1c             	add    $0x1c,%esp
  811686:	5b                   	pop    %ebx
  811687:	5e                   	pop    %esi
  811688:	5f                   	pop    %edi
  811689:	5d                   	pop    %ebp
  81168a:	c3                   	ret    

0081168b <devpipe_read>:
	return _pipeisclosed(fd, p);
}

static ssize_t
devpipe_read(struct Fd *fd, void *vbuf, size_t n)
{
  81168b:	55                   	push   %ebp
  81168c:	89 e5                	mov    %esp,%ebp
  81168e:	57                   	push   %edi
  81168f:	56                   	push   %esi
  811690:	53                   	push   %ebx
  811691:	83 ec 1c             	sub    $0x1c,%esp
  811694:	8b 7d 08             	mov    0x8(%ebp),%edi
	uint8_t *buf;
	size_t i;
	struct Pipe *p;

	p = (struct Pipe*)fd2data(fd);
  811697:	89 3c 24             	mov    %edi,(%esp)
  81169a:	e8 71 ee ff ff       	call   810510 <fd2data>
  81169f:	89 c3                	mov    %eax,%ebx
	if (debug)
		cprintf("[%08x] devpipe_read %08x %d rpos %d wpos %d\n",
			thisenv->env_id, uvpt[PGNUM(p)], n, p->p_rpos, p->p_wpos);

	buf = vbuf;
	for (i = 0; i < n; i++) {
  8116a1:	be 00 00 00 00       	mov    $0x0,%esi
  8116a6:	eb 3d                	jmp    8116e5 <devpipe_read+0x5a>
		while (p->p_rpos == p->p_wpos) {
			// pipe is empty
			// if we got any data, return it
			if (i > 0)
  8116a8:	85 f6                	test   %esi,%esi
  8116aa:	74 04                	je     8116b0 <devpipe_read+0x25>
				return i;
  8116ac:	89 f0                	mov    %esi,%eax
  8116ae:	eb 43                	jmp    8116f3 <devpipe_read+0x68>
			// if all the writers are gone, note eof
			if (_pipeisclosed(fd, p))
  8116b0:	89 da                	mov    %ebx,%edx
  8116b2:	89 f8                	mov    %edi,%eax
  8116b4:	e8 f1 fe ff ff       	call   8115aa <_pipeisclosed>
  8116b9:	85 c0                	test   %eax,%eax
  8116bb:	75 31                	jne    8116ee <devpipe_read+0x63>
				return 0;
			// yield and see what happens
			if (debug)
				cprintf("devpipe_read yield\n");
			sys_yield();
  8116bd:	e8 f2 e4 ff ff       	call   80fbb4 <sys_yield>
		cprintf("[%08x] devpipe_read %08x %d rpos %d wpos %d\n",
			thisenv->env_id, uvpt[PGNUM(p)], n, p->p_rpos, p->p_wpos);

	buf = vbuf;
	for (i = 0; i < n; i++) {
		while (p->p_rpos == p->p_wpos) {
  8116c2:	8b 03                	mov    (%ebx),%eax
  8116c4:	3b 43 04             	cmp    0x4(%ebx),%eax
  8116c7:	74 df                	je     8116a8 <devpipe_read+0x1d>
				cprintf("devpipe_read yield\n");
			sys_yield();
		}
		// there's a byte.  take it.
		// wait to increment rpos until the byte is taken!
		buf[i] = p->p_buf[p->p_rpos % PIPEBUFSIZ];
  8116c9:	99                   	cltd   
  8116ca:	c1 ea 1b             	shr    $0x1b,%edx
  8116cd:	01 d0                	add    %edx,%eax
  8116cf:	83 e0 1f             	and    $0x1f,%eax
  8116d2:	29 d0                	sub    %edx,%eax
  8116d4:	0f b6 44 03 08       	movzbl 0x8(%ebx,%eax,1),%eax
  8116d9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  8116dc:	88 04 31             	mov    %al,(%ecx,%esi,1)
		p->p_rpos++;
  8116df:	83 03 01             	addl   $0x1,(%ebx)
	if (debug)
		cprintf("[%08x] devpipe_read %08x %d rpos %d wpos %d\n",
			thisenv->env_id, uvpt[PGNUM(p)], n, p->p_rpos, p->p_wpos);

	buf = vbuf;
	for (i = 0; i < n; i++) {
  8116e2:	83 c6 01             	add    $0x1,%esi
  8116e5:	3b 75 10             	cmp    0x10(%ebp),%esi
  8116e8:	75 d8                	jne    8116c2 <devpipe_read+0x37>
		// there's a byte.  take it.
		// wait to increment rpos until the byte is taken!
		buf[i] = p->p_buf[p->p_rpos % PIPEBUFSIZ];
		p->p_rpos++;
	}
	return i;
  8116ea:	89 f0                	mov    %esi,%eax
  8116ec:	eb 05                	jmp    8116f3 <devpipe_read+0x68>
			// if we got any data, return it
			if (i > 0)
				return i;
			// if all the writers are gone, note eof
			if (_pipeisclosed(fd, p))
				return 0;
  8116ee:	b8 00 00 00 00       	mov    $0x0,%eax
		// wait to increment rpos until the byte is taken!
		buf[i] = p->p_buf[p->p_rpos % PIPEBUFSIZ];
		p->p_rpos++;
	}
	return i;
}
  8116f3:	83 c4 1c             	add    $0x1c,%esp
  8116f6:	5b                   	pop    %ebx
  8116f7:	5e                   	pop    %esi
  8116f8:	5f                   	pop    %edi
  8116f9:	5d                   	pop    %ebp
  8116fa:	c3                   	ret    

008116fb <pipe>:
	uint8_t p_buf[PIPEBUFSIZ];	// data buffer
};

int
pipe(int pfd[2])
{
  8116fb:	55                   	push   %ebp
  8116fc:	89 e5                	mov    %esp,%ebp
  8116fe:	56                   	push   %esi
  8116ff:	53                   	push   %ebx
  811700:	83 ec 30             	sub    $0x30,%esp
	int r;
	struct Fd *fd0, *fd1;
	void *va;

	// allocate the file descriptor table entries
	if ((r = fd_alloc(&fd0)) < 0
  811703:	8d 45 f4             	lea    -0xc(%ebp),%eax
  811706:	89 04 24             	mov    %eax,(%esp)
  811709:	e8 19 ee ff ff       	call   810527 <fd_alloc>
  81170e:	89 c2                	mov    %eax,%edx
  811710:	85 d2                	test   %edx,%edx
  811712:	0f 88 4d 01 00 00    	js     811865 <pipe+0x16a>
	    || (r = sys_page_alloc(0, fd0, PTE_P|PTE_W|PTE_U|PTE_SHARE)) < 0)
  811718:	c7 44 24 08 07 04 00 	movl   $0x407,0x8(%esp)
  81171f:	00 
  811720:	8b 45 f4             	mov    -0xc(%ebp),%eax
  811723:	89 44 24 04          	mov    %eax,0x4(%esp)
  811727:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81172e:	e8 a0 e4 ff ff       	call   80fbd3 <sys_page_alloc>
  811733:	89 c2                	mov    %eax,%edx
  811735:	85 d2                	test   %edx,%edx
  811737:	0f 88 28 01 00 00    	js     811865 <pipe+0x16a>
		goto err;

	if ((r = fd_alloc(&fd1)) < 0
  81173d:	8d 45 f0             	lea    -0x10(%ebp),%eax
  811740:	89 04 24             	mov    %eax,(%esp)
  811743:	e8 df ed ff ff       	call   810527 <fd_alloc>
  811748:	89 c3                	mov    %eax,%ebx
  81174a:	85 c0                	test   %eax,%eax
  81174c:	0f 88 fe 00 00 00    	js     811850 <pipe+0x155>
	    || (r = sys_page_alloc(0, fd1, PTE_P|PTE_W|PTE_U|PTE_SHARE)) < 0)
  811752:	c7 44 24 08 07 04 00 	movl   $0x407,0x8(%esp)
  811759:	00 
  81175a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  81175d:	89 44 24 04          	mov    %eax,0x4(%esp)
  811761:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811768:	e8 66 e4 ff ff       	call   80fbd3 <sys_page_alloc>
  81176d:	89 c3                	mov    %eax,%ebx
  81176f:	85 c0                	test   %eax,%eax
  811771:	0f 88 d9 00 00 00    	js     811850 <pipe+0x155>
		goto err1;

	// allocate the pipe structure as first data page in both
	va = fd2data(fd0);
  811777:	8b 45 f4             	mov    -0xc(%ebp),%eax
  81177a:	89 04 24             	mov    %eax,(%esp)
  81177d:	e8 8e ed ff ff       	call   810510 <fd2data>
  811782:	89 c6                	mov    %eax,%esi
	if ((r = sys_page_alloc(0, va, PTE_P|PTE_W|PTE_U|PTE_SHARE)) < 0)
  811784:	c7 44 24 08 07 04 00 	movl   $0x407,0x8(%esp)
  81178b:	00 
  81178c:	89 44 24 04          	mov    %eax,0x4(%esp)
  811790:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811797:	e8 37 e4 ff ff       	call   80fbd3 <sys_page_alloc>
  81179c:	89 c3                	mov    %eax,%ebx
  81179e:	85 c0                	test   %eax,%eax
  8117a0:	0f 88 97 00 00 00    	js     81183d <pipe+0x142>
		goto err2;
	if ((r = sys_page_map(0, va, 0, fd2data(fd1), PTE_P|PTE_W|PTE_U|PTE_SHARE)) < 0)
  8117a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  8117a9:	89 04 24             	mov    %eax,(%esp)
  8117ac:	e8 5f ed ff ff       	call   810510 <fd2data>
  8117b1:	c7 44 24 10 07 04 00 	movl   $0x407,0x10(%esp)
  8117b8:	00 
  8117b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8117bd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8117c4:	00 
  8117c5:	89 74 24 04          	mov    %esi,0x4(%esp)
  8117c9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8117d0:	e8 52 e4 ff ff       	call   80fc27 <sys_page_map>
  8117d5:	89 c3                	mov    %eax,%ebx
  8117d7:	85 c0                	test   %eax,%eax
  8117d9:	78 52                	js     81182d <pipe+0x132>
		goto err3;

	// set up fd structures
	fd0->fd_dev_id = devpipe.dev_id;
  8117db:	8b 15 24 53 81 00    	mov    0x815324,%edx
  8117e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  8117e4:	89 10                	mov    %edx,(%eax)
	fd0->fd_omode = O_RDONLY;
  8117e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  8117e9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

	fd1->fd_dev_id = devpipe.dev_id;
  8117f0:	8b 15 24 53 81 00    	mov    0x815324,%edx
  8117f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  8117f9:	89 10                	mov    %edx,(%eax)
	fd1->fd_omode = O_WRONLY;
  8117fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  8117fe:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

	if (debug)
		cprintf("[%08x] pipecreate %08x\n", thisenv->env_id, uvpt[PGNUM(va)]);

	pfd[0] = fd2num(fd0);
  811805:	8b 45 f4             	mov    -0xc(%ebp),%eax
  811808:	89 04 24             	mov    %eax,(%esp)
  81180b:	e8 f0 ec ff ff       	call   810500 <fd2num>
  811810:	8b 4d 08             	mov    0x8(%ebp),%ecx
  811813:	89 01                	mov    %eax,(%ecx)
	pfd[1] = fd2num(fd1);
  811815:	8b 45 f0             	mov    -0x10(%ebp),%eax
  811818:	89 04 24             	mov    %eax,(%esp)
  81181b:	e8 e0 ec ff ff       	call   810500 <fd2num>
  811820:	8b 4d 08             	mov    0x8(%ebp),%ecx
  811823:	89 41 04             	mov    %eax,0x4(%ecx)
	return 0;
  811826:	b8 00 00 00 00       	mov    $0x0,%eax
  81182b:	eb 38                	jmp    811865 <pipe+0x16a>

    err3:
	sys_page_unmap(0, va);
  81182d:	89 74 24 04          	mov    %esi,0x4(%esp)
  811831:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811838:	e8 3d e4 ff ff       	call   80fc7a <sys_page_unmap>
    err2:
	sys_page_unmap(0, fd1);
  81183d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  811840:	89 44 24 04          	mov    %eax,0x4(%esp)
  811844:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81184b:	e8 2a e4 ff ff       	call   80fc7a <sys_page_unmap>
    err1:
	sys_page_unmap(0, fd0);
  811850:	8b 45 f4             	mov    -0xc(%ebp),%eax
  811853:	89 44 24 04          	mov    %eax,0x4(%esp)
  811857:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  81185e:	e8 17 e4 ff ff       	call   80fc7a <sys_page_unmap>
  811863:	89 d8                	mov    %ebx,%eax
    err:
	return r;
}
  811865:	83 c4 30             	add    $0x30,%esp
  811868:	5b                   	pop    %ebx
  811869:	5e                   	pop    %esi
  81186a:	5d                   	pop    %ebp
  81186b:	c3                   	ret    

0081186c <pipeisclosed>:
	}
}

int
pipeisclosed(int fdnum)
{
  81186c:	55                   	push   %ebp
  81186d:	89 e5                	mov    %esp,%ebp
  81186f:	83 ec 28             	sub    $0x28,%esp
	struct Fd *fd;
	struct Pipe *p;
	int r;

	if ((r = fd_lookup(fdnum, &fd)) < 0)
  811872:	8d 45 f4             	lea    -0xc(%ebp),%eax
  811875:	89 44 24 04          	mov    %eax,0x4(%esp)
  811879:	8b 45 08             	mov    0x8(%ebp),%eax
  81187c:	89 04 24             	mov    %eax,(%esp)
  81187f:	e8 f2 ec ff ff       	call   810576 <fd_lookup>
  811884:	89 c2                	mov    %eax,%edx
  811886:	85 d2                	test   %edx,%edx
  811888:	78 15                	js     81189f <pipeisclosed+0x33>
		return r;
	p = (struct Pipe*) fd2data(fd);
  81188a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  81188d:	89 04 24             	mov    %eax,(%esp)
  811890:	e8 7b ec ff ff       	call   810510 <fd2data>
	return _pipeisclosed(fd, p);
  811895:	89 c2                	mov    %eax,%edx
  811897:	8b 45 f4             	mov    -0xc(%ebp),%eax
  81189a:	e8 0b fd ff ff       	call   8115aa <_pipeisclosed>
}
  81189f:	c9                   	leave  
  8118a0:	c3                   	ret    
  8118a1:	66 90                	xchg   %ax,%ax
  8118a3:	66 90                	xchg   %ax,%ax
  8118a5:	66 90                	xchg   %ax,%ax
  8118a7:	66 90                	xchg   %ax,%ax
  8118a9:	66 90                	xchg   %ax,%ax
  8118ab:	66 90                	xchg   %ax,%ax
  8118ad:	66 90                	xchg   %ax,%ax
  8118af:	90                   	nop

008118b0 <devcons_close>:
	return tot;
}

static int
devcons_close(struct Fd *fd)
{
  8118b0:	55                   	push   %ebp
  8118b1:	89 e5                	mov    %esp,%ebp
	USED(fd);

	return 0;
}
  8118b3:	b8 00 00 00 00       	mov    $0x0,%eax
  8118b8:	5d                   	pop    %ebp
  8118b9:	c3                   	ret    

008118ba <devcons_stat>:

static int
devcons_stat(struct Fd *fd, struct Stat *stat)
{
  8118ba:	55                   	push   %ebp
  8118bb:	89 e5                	mov    %esp,%ebp
  8118bd:	83 ec 18             	sub    $0x18,%esp
	strcpy(stat->st_name, "<cons>");
  8118c0:	c7 44 24 04 9e 49 81 	movl   $0x81499e,0x4(%esp)
  8118c7:	00 
  8118c8:	8b 45 0c             	mov    0xc(%ebp),%eax
  8118cb:	89 04 24             	mov    %eax,(%esp)
  8118ce:	e8 e4 de ff ff       	call   80f7b7 <strcpy>
	return 0;
}
  8118d3:	b8 00 00 00 00       	mov    $0x0,%eax
  8118d8:	c9                   	leave  
  8118d9:	c3                   	ret    

008118da <devcons_write>:
	return 1;
}

static ssize_t
devcons_write(struct Fd *fd, const void *vbuf, size_t n)
{
  8118da:	55                   	push   %ebp
  8118db:	89 e5                	mov    %esp,%ebp
  8118dd:	57                   	push   %edi
  8118de:	56                   	push   %esi
  8118df:	53                   	push   %ebx
  8118e0:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	int tot, m;
	char buf[128];

	// mistake: have to nul-terminate arg to sys_cputs,
	// so we have to copy vbuf into buf in chunks and nul-terminate.
	for (tot = 0; tot < n; tot += m) {
  8118e6:	bb 00 00 00 00       	mov    $0x0,%ebx
		m = n - tot;
		if (m > sizeof(buf) - 1)
			m = sizeof(buf) - 1;
		memmove(buf, (char*)vbuf + tot, m);
  8118eb:	8d bd 68 ff ff ff    	lea    -0x98(%ebp),%edi
	int tot, m;
	char buf[128];

	// mistake: have to nul-terminate arg to sys_cputs,
	// so we have to copy vbuf into buf in chunks and nul-terminate.
	for (tot = 0; tot < n; tot += m) {
  8118f1:	eb 31                	jmp    811924 <devcons_write+0x4a>
		m = n - tot;
  8118f3:	8b 75 10             	mov    0x10(%ebp),%esi
  8118f6:	29 de                	sub    %ebx,%esi
		if (m > sizeof(buf) - 1)
  8118f8:	83 fe 7f             	cmp    $0x7f,%esi
	char buf[128];

	// mistake: have to nul-terminate arg to sys_cputs,
	// so we have to copy vbuf into buf in chunks and nul-terminate.
	for (tot = 0; tot < n; tot += m) {
		m = n - tot;
  8118fb:	ba 7f 00 00 00       	mov    $0x7f,%edx
  811900:	0f 47 f2             	cmova  %edx,%esi
		if (m > sizeof(buf) - 1)
			m = sizeof(buf) - 1;
		memmove(buf, (char*)vbuf + tot, m);
  811903:	89 74 24 08          	mov    %esi,0x8(%esp)
  811907:	03 45 0c             	add    0xc(%ebp),%eax
  81190a:	89 44 24 04          	mov    %eax,0x4(%esp)
  81190e:	89 3c 24             	mov    %edi,(%esp)
  811911:	e8 3e e0 ff ff       	call   80f954 <memmove>
		sys_cputs(buf, m);
  811916:	89 74 24 04          	mov    %esi,0x4(%esp)
  81191a:	89 3c 24             	mov    %edi,(%esp)
  81191d:	e8 e4 e1 ff ff       	call   80fb06 <sys_cputs>
	int tot, m;
	char buf[128];

	// mistake: have to nul-terminate arg to sys_cputs,
	// so we have to copy vbuf into buf in chunks and nul-terminate.
	for (tot = 0; tot < n; tot += m) {
  811922:	01 f3                	add    %esi,%ebx
  811924:	89 d8                	mov    %ebx,%eax
  811926:	3b 5d 10             	cmp    0x10(%ebp),%ebx
  811929:	72 c8                	jb     8118f3 <devcons_write+0x19>
			m = sizeof(buf) - 1;
		memmove(buf, (char*)vbuf + tot, m);
		sys_cputs(buf, m);
	}
	return tot;
}
  81192b:	81 c4 9c 00 00 00    	add    $0x9c,%esp
  811931:	5b                   	pop    %ebx
  811932:	5e                   	pop    %esi
  811933:	5f                   	pop    %edi
  811934:	5d                   	pop    %ebp
  811935:	c3                   	ret    

00811936 <devcons_read>:
	return fd2num(fd);
}

static ssize_t
devcons_read(struct Fd *fd, void *vbuf, size_t n)
{
  811936:	55                   	push   %ebp
  811937:	89 e5                	mov    %esp,%ebp
  811939:	83 ec 08             	sub    $0x8,%esp
	int c;

	if (n == 0)
		return 0;
  81193c:	b8 00 00 00 00       	mov    $0x0,%eax
static ssize_t
devcons_read(struct Fd *fd, void *vbuf, size_t n)
{
	int c;

	if (n == 0)
  811941:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  811945:	75 07                	jne    81194e <devcons_read+0x18>
  811947:	eb 2a                	jmp    811973 <devcons_read+0x3d>
		return 0;

	while ((c = sys_cgetc()) == 0)
		sys_yield();
  811949:	e8 66 e2 ff ff       	call   80fbb4 <sys_yield>
	int c;

	if (n == 0)
		return 0;

	while ((c = sys_cgetc()) == 0)
  81194e:	66 90                	xchg   %ax,%ax
  811950:	e8 cf e1 ff ff       	call   80fb24 <sys_cgetc>
  811955:	85 c0                	test   %eax,%eax
  811957:	74 f0                	je     811949 <devcons_read+0x13>
		sys_yield();
	if (c < 0)
  811959:	85 c0                	test   %eax,%eax
  81195b:	78 16                	js     811973 <devcons_read+0x3d>
		return c;
	if (c == 0x04)	// ctl-d is eof
  81195d:	83 f8 04             	cmp    $0x4,%eax
  811960:	74 0c                	je     81196e <devcons_read+0x38>
		return 0;
	*(char*)vbuf = c;
  811962:	8b 55 0c             	mov    0xc(%ebp),%edx
  811965:	88 02                	mov    %al,(%edx)
	return 1;
  811967:	b8 01 00 00 00       	mov    $0x1,%eax
  81196c:	eb 05                	jmp    811973 <devcons_read+0x3d>
	while ((c = sys_cgetc()) == 0)
		sys_yield();
	if (c < 0)
		return c;
	if (c == 0x04)	// ctl-d is eof
		return 0;
  81196e:	b8 00 00 00 00       	mov    $0x0,%eax
	*(char*)vbuf = c;
	return 1;
}
  811973:	c9                   	leave  
  811974:	c3                   	ret    

00811975 <cputchar>:
#include <inc/string.h>
#include <inc/lib.h>

void
cputchar(int ch)
{
  811975:	55                   	push   %ebp
  811976:	89 e5                	mov    %esp,%ebp
  811978:	83 ec 28             	sub    $0x28,%esp
	char c = ch;
  81197b:	8b 45 08             	mov    0x8(%ebp),%eax
  81197e:	88 45 f7             	mov    %al,-0x9(%ebp)

	// Unlike standard Unix's putchar,
	// the cputchar function _always_ outputs to the system console.
	sys_cputs(&c, 1);
  811981:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  811988:	00 
  811989:	8d 45 f7             	lea    -0x9(%ebp),%eax
  81198c:	89 04 24             	mov    %eax,(%esp)
  81198f:	e8 72 e1 ff ff       	call   80fb06 <sys_cputs>
}
  811994:	c9                   	leave  
  811995:	c3                   	ret    

00811996 <getchar>:

int
getchar(void)
{
  811996:	55                   	push   %ebp
  811997:	89 e5                	mov    %esp,%ebp
  811999:	83 ec 28             	sub    $0x28,%esp
	int r;

	// JOS does, however, support standard _input_ redirection,
	// allowing the user to redirect script files to the shell and such.
	// getchar() reads a character from file descriptor 0.
	r = read(0, &c, 1);
  81199c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  8119a3:	00 
  8119a4:	8d 45 f7             	lea    -0x9(%ebp),%eax
  8119a7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8119ab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8119b2:	e8 53 ee ff ff       	call   81080a <read>
	if (r < 0)
  8119b7:	85 c0                	test   %eax,%eax
  8119b9:	78 0f                	js     8119ca <getchar+0x34>
		return r;
	if (r < 1)
  8119bb:	85 c0                	test   %eax,%eax
  8119bd:	7e 06                	jle    8119c5 <getchar+0x2f>
		return -E_EOF;
	return c;
  8119bf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  8119c3:	eb 05                	jmp    8119ca <getchar+0x34>
	// getchar() reads a character from file descriptor 0.
	r = read(0, &c, 1);
	if (r < 0)
		return r;
	if (r < 1)
		return -E_EOF;
  8119c5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
	return c;
}
  8119ca:	c9                   	leave  
  8119cb:	c3                   	ret    

008119cc <iscons>:
	.dev_stat =	devcons_stat
};

int
iscons(int fdnum)
{
  8119cc:	55                   	push   %ebp
  8119cd:	89 e5                	mov    %esp,%ebp
  8119cf:	83 ec 28             	sub    $0x28,%esp
	int r;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0)
  8119d2:	8d 45 f4             	lea    -0xc(%ebp),%eax
  8119d5:	89 44 24 04          	mov    %eax,0x4(%esp)
  8119d9:	8b 45 08             	mov    0x8(%ebp),%eax
  8119dc:	89 04 24             	mov    %eax,(%esp)
  8119df:	e8 92 eb ff ff       	call   810576 <fd_lookup>
  8119e4:	85 c0                	test   %eax,%eax
  8119e6:	78 11                	js     8119f9 <iscons+0x2d>
		return r;
	return fd->fd_dev_id == devcons.dev_id;
  8119e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  8119eb:	8b 15 40 53 81 00    	mov    0x815340,%edx
  8119f1:	39 10                	cmp    %edx,(%eax)
  8119f3:	0f 94 c0             	sete   %al
  8119f6:	0f b6 c0             	movzbl %al,%eax
}
  8119f9:	c9                   	leave  
  8119fa:	c3                   	ret    

008119fb <opencons>:

int
opencons(void)
{
  8119fb:	55                   	push   %ebp
  8119fc:	89 e5                	mov    %esp,%ebp
  8119fe:	83 ec 28             	sub    $0x28,%esp
	int r;
	struct Fd* fd;

	if ((r = fd_alloc(&fd)) < 0)
  811a01:	8d 45 f4             	lea    -0xc(%ebp),%eax
  811a04:	89 04 24             	mov    %eax,(%esp)
  811a07:	e8 1b eb ff ff       	call   810527 <fd_alloc>
		return r;
  811a0c:	89 c2                	mov    %eax,%edx
opencons(void)
{
	int r;
	struct Fd* fd;

	if ((r = fd_alloc(&fd)) < 0)
  811a0e:	85 c0                	test   %eax,%eax
  811a10:	78 40                	js     811a52 <opencons+0x57>
		return r;
	if ((r = sys_page_alloc(0, fd, PTE_P|PTE_U|PTE_W|PTE_SHARE)) < 0)
  811a12:	c7 44 24 08 07 04 00 	movl   $0x407,0x8(%esp)
  811a19:	00 
  811a1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  811a1d:	89 44 24 04          	mov    %eax,0x4(%esp)
  811a21:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811a28:	e8 a6 e1 ff ff       	call   80fbd3 <sys_page_alloc>
		return r;
  811a2d:	89 c2                	mov    %eax,%edx
	int r;
	struct Fd* fd;

	if ((r = fd_alloc(&fd)) < 0)
		return r;
	if ((r = sys_page_alloc(0, fd, PTE_P|PTE_U|PTE_W|PTE_SHARE)) < 0)
  811a2f:	85 c0                	test   %eax,%eax
  811a31:	78 1f                	js     811a52 <opencons+0x57>
		return r;
	fd->fd_dev_id = devcons.dev_id;
  811a33:	8b 15 40 53 81 00    	mov    0x815340,%edx
  811a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
  811a3c:	89 10                	mov    %edx,(%eax)
	fd->fd_omode = O_RDWR;
  811a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  811a41:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
	return fd2num(fd);
  811a48:	89 04 24             	mov    %eax,(%esp)
  811a4b:	e8 b0 ea ff ff       	call   810500 <fd2num>
  811a50:	89 c2                	mov    %eax,%edx
}
  811a52:	89 d0                	mov    %edx,%eax
  811a54:	c9                   	leave  
  811a55:	c3                   	ret    

00811a56 <set_pgfault_handler>:
// at UXSTACKTOP), and tell the kernel to call the assembly-language
// _pgfault_upcall routine when a page fault occurs.
//
void
set_pgfault_handler(void (*handler)(struct UTrapframe *utf))
{
  811a56:	55                   	push   %ebp
  811a57:	89 e5                	mov    %esp,%ebp
  811a59:	83 ec 18             	sub    $0x18,%esp
	int r;

	if (_pgfault_handler == 0) {
  811a5c:	83 3d 00 f0 b3 00 00 	cmpl   $0x0,0xb3f000
  811a63:	75 70                	jne    811ad5 <set_pgfault_handler+0x7f>
		// First time through!
		// LAB 4: Your code here.
		int error = sys_page_alloc(0, (void*) (UXSTACKTOP - PGSIZE), PTE_W);
  811a65:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  811a6c:	00 
  811a6d:	c7 44 24 04 00 f0 bf 	movl   $0xeebff000,0x4(%esp)
  811a74:	ee 
  811a75:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811a7c:	e8 52 e1 ff ff       	call   80fbd3 <sys_page_alloc>
		if (error < 0)
  811a81:	85 c0                	test   %eax,%eax
  811a83:	79 1c                	jns    811aa1 <set_pgfault_handler+0x4b>
			panic("set_pgfault_handler: allocation failed");
  811a85:	c7 44 24 08 ac 49 81 	movl   $0x8149ac,0x8(%esp)
  811a8c:	00 
  811a8d:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
  811a94:	00 
  811a95:	c7 04 24 00 4a 81 00 	movl   $0x814a00,(%esp)
  811a9c:	e8 ed d5 ff ff       	call   80f08e <_panic>
		error = sys_env_set_pgfault_upcall(0, _pgfault_upcall);
  811aa1:	c7 44 24 04 df 1a 81 	movl   $0x811adf,0x4(%esp)
  811aa8:	00 
  811aa9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811ab0:	e8 be e2 ff ff       	call   80fd73 <sys_env_set_pgfault_upcall>
		if (error < 0)
  811ab5:	85 c0                	test   %eax,%eax
  811ab7:	79 1c                	jns    811ad5 <set_pgfault_handler+0x7f>
			panic("set_pgfault_handler: pgfault_upcall failed");
  811ab9:	c7 44 24 08 d4 49 81 	movl   $0x8149d4,0x8(%esp)
  811ac0:	00 
  811ac1:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
  811ac8:	00 
  811ac9:	c7 04 24 00 4a 81 00 	movl   $0x814a00,(%esp)
  811ad0:	e8 b9 d5 ff ff       	call   80f08e <_panic>
	}

	// Save handler pointer for assembly to call.
	_pgfault_handler = handler;
  811ad5:	8b 45 08             	mov    0x8(%ebp),%eax
  811ad8:	a3 00 f0 b3 00       	mov    %eax,0xb3f000
}
  811add:	c9                   	leave  
  811ade:	c3                   	ret    

00811adf <_pgfault_upcall>:

.text
.globl _pgfault_upcall
_pgfault_upcall:
	// Call the C page fault handler.
	pushl %esp			// function argument: pointer to UTF
  811adf:	54                   	push   %esp
	movl _pgfault_handler, %eax
  811ae0:	a1 00 f0 b3 00       	mov    0xb3f000,%eax
	call *%eax
  811ae5:	ff d0                	call   *%eax
	addl $4, %esp			// pop function argument
  811ae7:	83 c4 04             	add    $0x4,%esp
	// registers are available for intermediate calculations.  You
	// may find that you have to rearrange your code in non-obvious
	// ways as registers become unavailable as scratch space.
	//
	// LAB 4: Your code here.
	movl 0x28(%esp), %edx 
  811aea:	8b 54 24 28          	mov    0x28(%esp),%edx
	subl $0x4, 0x30(%esp)
  811aee:	83 6c 24 30 04       	subl   $0x4,0x30(%esp)
	movl 0x30(%esp), %eax 
  811af3:	8b 44 24 30          	mov    0x30(%esp),%eax
	movl %edx, (%eax)
  811af7:	89 10                	mov    %edx,(%eax)
	addl $0x8, %esp
  811af9:	83 c4 08             	add    $0x8,%esp

	// Restore the trap-time registers.  After you do this, you
	// can no longer modify any general-purpose registers.
	// LAB 4: Your code here.
	popal
  811afc:	61                   	popa   

	// Restore eflags from the stack.  After you do this, you can
	// no longer use arithmetic operations or anything else that
	// modifies eflags.
	// LAB 4: Your code here.
	addl $0x4, %esp
  811afd:	83 c4 04             	add    $0x4,%esp
	popfl
  811b00:	9d                   	popf   

	// Switch back to the adjusted trap-time stack.
	// LAB 4: Your code here.
	popl %esp
  811b01:	5c                   	pop    %esp

	// Return to re-execute the instruction that faulted.
	// LAB 4: Your code here.
	ret
  811b02:	c3                   	ret    

00811b03 <pageref>:
#include <inc/lib.h>

int
pageref(void *v)
{
  811b03:	55                   	push   %ebp
  811b04:	89 e5                	mov    %esp,%ebp
  811b06:	8b 55 08             	mov    0x8(%ebp),%edx
	pte_t pte;

	if (!(uvpd[PDX(v)] & PTE_P))
  811b09:	89 d0                	mov    %edx,%eax
  811b0b:	c1 e8 16             	shr    $0x16,%eax
  811b0e:	8b 0c 85 00 d0 7b ef 	mov    -0x10843000(,%eax,4),%ecx
		return 0;
  811b15:	b8 00 00 00 00       	mov    $0x0,%eax
int
pageref(void *v)
{
	pte_t pte;

	if (!(uvpd[PDX(v)] & PTE_P))
  811b1a:	f6 c1 01             	test   $0x1,%cl
  811b1d:	74 1d                	je     811b3c <pageref+0x39>
		return 0;
	pte = uvpt[PGNUM(v)];
  811b1f:	c1 ea 0c             	shr    $0xc,%edx
  811b22:	8b 14 95 00 00 40 ef 	mov    -0x10c00000(,%edx,4),%edx
	if (!(pte & PTE_P))
  811b29:	f6 c2 01             	test   $0x1,%dl
  811b2c:	74 0e                	je     811b3c <pageref+0x39>
		return 0;
	return pages[PGNUM(pte)].pp_ref;
  811b2e:	c1 ea 0c             	shr    $0xc,%edx
  811b31:	0f b7 04 d5 04 00 00 	movzwl -0x10fffffc(,%edx,8),%eax
  811b38:	ef 
  811b39:	0f b7 c0             	movzwl %ax,%eax
}
  811b3c:	5d                   	pop    %ebp
  811b3d:	c3                   	ret    
  811b3e:	66 90                	xchg   %ax,%ax

00811b40 <__udivdi3>:
  811b40:	55                   	push   %ebp
  811b41:	57                   	push   %edi
  811b42:	56                   	push   %esi
  811b43:	83 ec 0c             	sub    $0xc,%esp
  811b46:	8b 44 24 28          	mov    0x28(%esp),%eax
  811b4a:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  811b4e:	8b 6c 24 20          	mov    0x20(%esp),%ebp
  811b52:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  811b56:	85 c0                	test   %eax,%eax
  811b58:	89 7c 24 04          	mov    %edi,0x4(%esp)
  811b5c:	89 ea                	mov    %ebp,%edx
  811b5e:	89 0c 24             	mov    %ecx,(%esp)
  811b61:	75 2d                	jne    811b90 <__udivdi3+0x50>
  811b63:	39 e9                	cmp    %ebp,%ecx
  811b65:	77 61                	ja     811bc8 <__udivdi3+0x88>
  811b67:	85 c9                	test   %ecx,%ecx
  811b69:	89 ce                	mov    %ecx,%esi
  811b6b:	75 0b                	jne    811b78 <__udivdi3+0x38>
  811b6d:	b8 01 00 00 00       	mov    $0x1,%eax
  811b72:	31 d2                	xor    %edx,%edx
  811b74:	f7 f1                	div    %ecx
  811b76:	89 c6                	mov    %eax,%esi
  811b78:	31 d2                	xor    %edx,%edx
  811b7a:	89 e8                	mov    %ebp,%eax
  811b7c:	f7 f6                	div    %esi
  811b7e:	89 c5                	mov    %eax,%ebp
  811b80:	89 f8                	mov    %edi,%eax
  811b82:	f7 f6                	div    %esi
  811b84:	89 ea                	mov    %ebp,%edx
  811b86:	83 c4 0c             	add    $0xc,%esp
  811b89:	5e                   	pop    %esi
  811b8a:	5f                   	pop    %edi
  811b8b:	5d                   	pop    %ebp
  811b8c:	c3                   	ret    
  811b8d:	8d 76 00             	lea    0x0(%esi),%esi
  811b90:	39 e8                	cmp    %ebp,%eax
  811b92:	77 24                	ja     811bb8 <__udivdi3+0x78>
  811b94:	0f bd e8             	bsr    %eax,%ebp
  811b97:	83 f5 1f             	xor    $0x1f,%ebp
  811b9a:	75 3c                	jne    811bd8 <__udivdi3+0x98>
  811b9c:	8b 74 24 04          	mov    0x4(%esp),%esi
  811ba0:	39 34 24             	cmp    %esi,(%esp)
  811ba3:	0f 86 9f 00 00 00    	jbe    811c48 <__udivdi3+0x108>
  811ba9:	39 d0                	cmp    %edx,%eax
  811bab:	0f 82 97 00 00 00    	jb     811c48 <__udivdi3+0x108>
  811bb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  811bb8:	31 d2                	xor    %edx,%edx
  811bba:	31 c0                	xor    %eax,%eax
  811bbc:	83 c4 0c             	add    $0xc,%esp
  811bbf:	5e                   	pop    %esi
  811bc0:	5f                   	pop    %edi
  811bc1:	5d                   	pop    %ebp
  811bc2:	c3                   	ret    
  811bc3:	90                   	nop
  811bc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  811bc8:	89 f8                	mov    %edi,%eax
  811bca:	f7 f1                	div    %ecx
  811bcc:	31 d2                	xor    %edx,%edx
  811bce:	83 c4 0c             	add    $0xc,%esp
  811bd1:	5e                   	pop    %esi
  811bd2:	5f                   	pop    %edi
  811bd3:	5d                   	pop    %ebp
  811bd4:	c3                   	ret    
  811bd5:	8d 76 00             	lea    0x0(%esi),%esi
  811bd8:	89 e9                	mov    %ebp,%ecx
  811bda:	8b 3c 24             	mov    (%esp),%edi
  811bdd:	d3 e0                	shl    %cl,%eax
  811bdf:	89 c6                	mov    %eax,%esi
  811be1:	b8 20 00 00 00       	mov    $0x20,%eax
  811be6:	29 e8                	sub    %ebp,%eax
  811be8:	89 c1                	mov    %eax,%ecx
  811bea:	d3 ef                	shr    %cl,%edi
  811bec:	89 e9                	mov    %ebp,%ecx
  811bee:	89 7c 24 08          	mov    %edi,0x8(%esp)
  811bf2:	8b 3c 24             	mov    (%esp),%edi
  811bf5:	09 74 24 08          	or     %esi,0x8(%esp)
  811bf9:	89 d6                	mov    %edx,%esi
  811bfb:	d3 e7                	shl    %cl,%edi
  811bfd:	89 c1                	mov    %eax,%ecx
  811bff:	89 3c 24             	mov    %edi,(%esp)
  811c02:	8b 7c 24 04          	mov    0x4(%esp),%edi
  811c06:	d3 ee                	shr    %cl,%esi
  811c08:	89 e9                	mov    %ebp,%ecx
  811c0a:	d3 e2                	shl    %cl,%edx
  811c0c:	89 c1                	mov    %eax,%ecx
  811c0e:	d3 ef                	shr    %cl,%edi
  811c10:	09 d7                	or     %edx,%edi
  811c12:	89 f2                	mov    %esi,%edx
  811c14:	89 f8                	mov    %edi,%eax
  811c16:	f7 74 24 08          	divl   0x8(%esp)
  811c1a:	89 d6                	mov    %edx,%esi
  811c1c:	89 c7                	mov    %eax,%edi
  811c1e:	f7 24 24             	mull   (%esp)
  811c21:	39 d6                	cmp    %edx,%esi
  811c23:	89 14 24             	mov    %edx,(%esp)
  811c26:	72 30                	jb     811c58 <__udivdi3+0x118>
  811c28:	8b 54 24 04          	mov    0x4(%esp),%edx
  811c2c:	89 e9                	mov    %ebp,%ecx
  811c2e:	d3 e2                	shl    %cl,%edx
  811c30:	39 c2                	cmp    %eax,%edx
  811c32:	73 05                	jae    811c39 <__udivdi3+0xf9>
  811c34:	3b 34 24             	cmp    (%esp),%esi
  811c37:	74 1f                	je     811c58 <__udivdi3+0x118>
  811c39:	89 f8                	mov    %edi,%eax
  811c3b:	31 d2                	xor    %edx,%edx
  811c3d:	e9 7a ff ff ff       	jmp    811bbc <__udivdi3+0x7c>
  811c42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  811c48:	31 d2                	xor    %edx,%edx
  811c4a:	b8 01 00 00 00       	mov    $0x1,%eax
  811c4f:	e9 68 ff ff ff       	jmp    811bbc <__udivdi3+0x7c>
  811c54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  811c58:	8d 47 ff             	lea    -0x1(%edi),%eax
  811c5b:	31 d2                	xor    %edx,%edx
  811c5d:	83 c4 0c             	add    $0xc,%esp
  811c60:	5e                   	pop    %esi
  811c61:	5f                   	pop    %edi
  811c62:	5d                   	pop    %ebp
  811c63:	c3                   	ret    
  811c64:	66 90                	xchg   %ax,%ax
  811c66:	66 90                	xchg   %ax,%ax
  811c68:	66 90                	xchg   %ax,%ax
  811c6a:	66 90                	xchg   %ax,%ax
  811c6c:	66 90                	xchg   %ax,%ax
  811c6e:	66 90                	xchg   %ax,%ax

00811c70 <__umoddi3>:
  811c70:	55                   	push   %ebp
  811c71:	57                   	push   %edi
  811c72:	56                   	push   %esi
  811c73:	83 ec 14             	sub    $0x14,%esp
  811c76:	8b 44 24 28          	mov    0x28(%esp),%eax
  811c7a:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  811c7e:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  811c82:	89 c7                	mov    %eax,%edi
  811c84:	89 44 24 04          	mov    %eax,0x4(%esp)
  811c88:	8b 44 24 30          	mov    0x30(%esp),%eax
  811c8c:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  811c90:	89 34 24             	mov    %esi,(%esp)
  811c93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  811c97:	85 c0                	test   %eax,%eax
  811c99:	89 c2                	mov    %eax,%edx
  811c9b:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  811c9f:	75 17                	jne    811cb8 <__umoddi3+0x48>
  811ca1:	39 fe                	cmp    %edi,%esi
  811ca3:	76 4b                	jbe    811cf0 <__umoddi3+0x80>
  811ca5:	89 c8                	mov    %ecx,%eax
  811ca7:	89 fa                	mov    %edi,%edx
  811ca9:	f7 f6                	div    %esi
  811cab:	89 d0                	mov    %edx,%eax
  811cad:	31 d2                	xor    %edx,%edx
  811caf:	83 c4 14             	add    $0x14,%esp
  811cb2:	5e                   	pop    %esi
  811cb3:	5f                   	pop    %edi
  811cb4:	5d                   	pop    %ebp
  811cb5:	c3                   	ret    
  811cb6:	66 90                	xchg   %ax,%ax
  811cb8:	39 f8                	cmp    %edi,%eax
  811cba:	77 54                	ja     811d10 <__umoddi3+0xa0>
  811cbc:	0f bd e8             	bsr    %eax,%ebp
  811cbf:	83 f5 1f             	xor    $0x1f,%ebp
  811cc2:	75 5c                	jne    811d20 <__umoddi3+0xb0>
  811cc4:	8b 7c 24 08          	mov    0x8(%esp),%edi
  811cc8:	39 3c 24             	cmp    %edi,(%esp)
  811ccb:	0f 87 e7 00 00 00    	ja     811db8 <__umoddi3+0x148>
  811cd1:	8b 7c 24 04          	mov    0x4(%esp),%edi
  811cd5:	29 f1                	sub    %esi,%ecx
  811cd7:	19 c7                	sbb    %eax,%edi
  811cd9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  811cdd:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  811ce1:	8b 44 24 08          	mov    0x8(%esp),%eax
  811ce5:	8b 54 24 0c          	mov    0xc(%esp),%edx
  811ce9:	83 c4 14             	add    $0x14,%esp
  811cec:	5e                   	pop    %esi
  811ced:	5f                   	pop    %edi
  811cee:	5d                   	pop    %ebp
  811cef:	c3                   	ret    
  811cf0:	85 f6                	test   %esi,%esi
  811cf2:	89 f5                	mov    %esi,%ebp
  811cf4:	75 0b                	jne    811d01 <__umoddi3+0x91>
  811cf6:	b8 01 00 00 00       	mov    $0x1,%eax
  811cfb:	31 d2                	xor    %edx,%edx
  811cfd:	f7 f6                	div    %esi
  811cff:	89 c5                	mov    %eax,%ebp
  811d01:	8b 44 24 04          	mov    0x4(%esp),%eax
  811d05:	31 d2                	xor    %edx,%edx
  811d07:	f7 f5                	div    %ebp
  811d09:	89 c8                	mov    %ecx,%eax
  811d0b:	f7 f5                	div    %ebp
  811d0d:	eb 9c                	jmp    811cab <__umoddi3+0x3b>
  811d0f:	90                   	nop
  811d10:	89 c8                	mov    %ecx,%eax
  811d12:	89 fa                	mov    %edi,%edx
  811d14:	83 c4 14             	add    $0x14,%esp
  811d17:	5e                   	pop    %esi
  811d18:	5f                   	pop    %edi
  811d19:	5d                   	pop    %ebp
  811d1a:	c3                   	ret    
  811d1b:	90                   	nop
  811d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  811d20:	8b 04 24             	mov    (%esp),%eax
  811d23:	be 20 00 00 00       	mov    $0x20,%esi
  811d28:	89 e9                	mov    %ebp,%ecx
  811d2a:	29 ee                	sub    %ebp,%esi
  811d2c:	d3 e2                	shl    %cl,%edx
  811d2e:	89 f1                	mov    %esi,%ecx
  811d30:	d3 e8                	shr    %cl,%eax
  811d32:	89 e9                	mov    %ebp,%ecx
  811d34:	89 44 24 04          	mov    %eax,0x4(%esp)
  811d38:	8b 04 24             	mov    (%esp),%eax
  811d3b:	09 54 24 04          	or     %edx,0x4(%esp)
  811d3f:	89 fa                	mov    %edi,%edx
  811d41:	d3 e0                	shl    %cl,%eax
  811d43:	89 f1                	mov    %esi,%ecx
  811d45:	89 44 24 08          	mov    %eax,0x8(%esp)
  811d49:	8b 44 24 10          	mov    0x10(%esp),%eax
  811d4d:	d3 ea                	shr    %cl,%edx
  811d4f:	89 e9                	mov    %ebp,%ecx
  811d51:	d3 e7                	shl    %cl,%edi
  811d53:	89 f1                	mov    %esi,%ecx
  811d55:	d3 e8                	shr    %cl,%eax
  811d57:	89 e9                	mov    %ebp,%ecx
  811d59:	09 f8                	or     %edi,%eax
  811d5b:	8b 7c 24 10          	mov    0x10(%esp),%edi
  811d5f:	f7 74 24 04          	divl   0x4(%esp)
  811d63:	d3 e7                	shl    %cl,%edi
  811d65:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  811d69:	89 d7                	mov    %edx,%edi
  811d6b:	f7 64 24 08          	mull   0x8(%esp)
  811d6f:	39 d7                	cmp    %edx,%edi
  811d71:	89 c1                	mov    %eax,%ecx
  811d73:	89 14 24             	mov    %edx,(%esp)
  811d76:	72 2c                	jb     811da4 <__umoddi3+0x134>
  811d78:	39 44 24 0c          	cmp    %eax,0xc(%esp)
  811d7c:	72 22                	jb     811da0 <__umoddi3+0x130>
  811d7e:	8b 44 24 0c          	mov    0xc(%esp),%eax
  811d82:	29 c8                	sub    %ecx,%eax
  811d84:	19 d7                	sbb    %edx,%edi
  811d86:	89 e9                	mov    %ebp,%ecx
  811d88:	89 fa                	mov    %edi,%edx
  811d8a:	d3 e8                	shr    %cl,%eax
  811d8c:	89 f1                	mov    %esi,%ecx
  811d8e:	d3 e2                	shl    %cl,%edx
  811d90:	89 e9                	mov    %ebp,%ecx
  811d92:	d3 ef                	shr    %cl,%edi
  811d94:	09 d0                	or     %edx,%eax
  811d96:	89 fa                	mov    %edi,%edx
  811d98:	83 c4 14             	add    $0x14,%esp
  811d9b:	5e                   	pop    %esi
  811d9c:	5f                   	pop    %edi
  811d9d:	5d                   	pop    %ebp
  811d9e:	c3                   	ret    
  811d9f:	90                   	nop
  811da0:	39 d7                	cmp    %edx,%edi
  811da2:	75 da                	jne    811d7e <__umoddi3+0x10e>
  811da4:	8b 14 24             	mov    (%esp),%edx
  811da7:	89 c1                	mov    %eax,%ecx
  811da9:	2b 4c 24 08          	sub    0x8(%esp),%ecx
  811dad:	1b 54 24 04          	sbb    0x4(%esp),%edx
  811db1:	eb cb                	jmp    811d7e <__umoddi3+0x10e>
  811db3:	90                   	nop
  811db4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  811db8:	3b 44 24 0c          	cmp    0xc(%esp),%eax
  811dbc:	0f 82 0f ff ff ff    	jb     811cd1 <__umoddi3+0x61>
  811dc2:	e9 1a ff ff ff       	jmp    811ce1 <__umoddi3+0x71>
